// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.transponder

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.ChannelFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TransponderGetResponseTest {

    @Test
    fun create() {
        val transponderGetResponse =
            TransponderGetResponse.builder()
                .classificationMarking("U")
                .dataMode(TransponderGetResponse.DataMode.TEST)
                .idComm("REF-COMM-ID")
                .source("Bluestaq")
                .id("TRANSPONDER-ID")
                .addChannel(
                    ChannelFull.builder()
                        .classificationMarking("U")
                        .dataMode(ChannelFull.DataMode.TEST)
                        .idTransponder("REF-TRANSPONDER-ID")
                        .name("Example name")
                        .source("system.source")
                        .id("CHANNEL-ID")
                        .apid("AP-ID")
                        .beamName("B8VD")
                        .compression("Example compression")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .encryption("Example encryption")
                        .idBeam("REF-BEAM-ID")
                        .idRfBand("REF-RFBAND-ID")
                        .origin("example_origin")
                        .origNetwork("ORIG")
                        .owner("example_owner")
                        .pkg("Example pkg")
                        .res("Example res")
                        .sid("S-ID")
                        .type("Example type")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .vpid("VP-ID")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .fec(0)
                .format("format")
                .modulation("Auto")
                .name("AA10")
                .nid("N-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .symbolRate(4.0)
                .system("DVB-S")
                .tid("T-ID")
                .ttf(1.53261520047876)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(transponderGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(transponderGetResponse.dataMode())
            .isEqualTo(TransponderGetResponse.DataMode.TEST)
        assertThat(transponderGetResponse.idComm()).isEqualTo("REF-COMM-ID")
        assertThat(transponderGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(transponderGetResponse.id()).contains("TRANSPONDER-ID")
        assertThat(transponderGetResponse.channels().getOrNull())
            .containsExactly(
                ChannelFull.builder()
                    .classificationMarking("U")
                    .dataMode(ChannelFull.DataMode.TEST)
                    .idTransponder("REF-TRANSPONDER-ID")
                    .name("Example name")
                    .source("system.source")
                    .id("CHANNEL-ID")
                    .apid("AP-ID")
                    .beamName("B8VD")
                    .compression("Example compression")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .encryption("Example encryption")
                    .idBeam("REF-BEAM-ID")
                    .idRfBand("REF-RFBAND-ID")
                    .origin("example_origin")
                    .origNetwork("ORIG")
                    .owner("example_owner")
                    .pkg("Example pkg")
                    .res("Example res")
                    .sid("S-ID")
                    .type("Example type")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .vpid("VP-ID")
                    .build()
            )
        assertThat(transponderGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(transponderGetResponse.createdBy()).contains("some.user")
        assertThat(transponderGetResponse.fec()).contains(0)
        assertThat(transponderGetResponse.format()).contains("format")
        assertThat(transponderGetResponse.modulation()).contains("Auto")
        assertThat(transponderGetResponse.name()).contains("AA10")
        assertThat(transponderGetResponse.nid()).contains("N-ID")
        assertThat(transponderGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(transponderGetResponse.origNetwork()).contains("ORIG")
        assertThat(transponderGetResponse.symbolRate()).contains(4.0)
        assertThat(transponderGetResponse.system()).contains("DVB-S")
        assertThat(transponderGetResponse.tid()).contains("T-ID")
        assertThat(transponderGetResponse.ttf()).contains(1.53261520047876)
        assertThat(transponderGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(transponderGetResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val transponderGetResponse =
            TransponderGetResponse.builder()
                .classificationMarking("U")
                .dataMode(TransponderGetResponse.DataMode.TEST)
                .idComm("REF-COMM-ID")
                .source("Bluestaq")
                .id("TRANSPONDER-ID")
                .addChannel(
                    ChannelFull.builder()
                        .classificationMarking("U")
                        .dataMode(ChannelFull.DataMode.TEST)
                        .idTransponder("REF-TRANSPONDER-ID")
                        .name("Example name")
                        .source("system.source")
                        .id("CHANNEL-ID")
                        .apid("AP-ID")
                        .beamName("B8VD")
                        .compression("Example compression")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .encryption("Example encryption")
                        .idBeam("REF-BEAM-ID")
                        .idRfBand("REF-RFBAND-ID")
                        .origin("example_origin")
                        .origNetwork("ORIG")
                        .owner("example_owner")
                        .pkg("Example pkg")
                        .res("Example res")
                        .sid("S-ID")
                        .type("Example type")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .vpid("VP-ID")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .fec(0)
                .format("format")
                .modulation("Auto")
                .name("AA10")
                .nid("N-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .symbolRate(4.0)
                .system("DVB-S")
                .tid("T-ID")
                .ttf(1.53261520047876)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedTransponderGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(transponderGetResponse),
                jacksonTypeRef<TransponderGetResponse>(),
            )

        assertThat(roundtrippedTransponderGetResponse).isEqualTo(transponderGetResponse)
    }
}
