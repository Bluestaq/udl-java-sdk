// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.ecpsdr

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EcpsdrAbridgedTest {

    @Test
    fun create() {
        val ecpsdrAbridged =
            EcpsdrAbridged.builder()
                .classificationMarking("U")
                .dataMode(EcpsdrAbridged.DataMode.TEST)
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .type("STANDARD")
                .id("ECPSDR-ID")
                .asl5VCurrMon(12)
                .cdsPlateVMon(12)
                .cdsRefVMon(12)
                .cdsThreshold(12)
                .cdsThrottle(12)
                .checksum(12)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dosBias(12)
                .dsl5VCurrMon(12)
                .esdTrigCountH(12)
                .esdTrigCountL(12)
                .hiLetL(2)
                .hiLetM(2)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .lowLetL(2)
                .lowLetM(2)
                .medLet1L(2)
                .medLet1M(2)
                .medLet2L(2)
                .medLet2M(2)
                .medLet3L(2)
                .medLet3M(2)
                .medLet4L(2)
                .medLet4M(2)
                .mpTemp(12)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .pd1SigLev(12)
                .pd2SigLev(12)
                .psTempMon(12)
                .retransmit(true)
                .satNo(101)
                .senMode("TEST")
                .surfDosChargeH(12)
                .surfDosChargeL(12)
                .surfDosH(12)
                .surfDosL(12)
                .surfDosM(12)
                .surfDosStat(2)
                .transientData(listOf(1, 2, 3))
                .vRef(12)
                .build()

        assertThat(ecpsdrAbridged.classificationMarking()).isEqualTo("U")
        assertThat(ecpsdrAbridged.dataMode()).isEqualTo(EcpsdrAbridged.DataMode.TEST)
        assertThat(ecpsdrAbridged.msgTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(ecpsdrAbridged.source()).isEqualTo("Bluestaq")
        assertThat(ecpsdrAbridged.type()).isEqualTo("STANDARD")
        assertThat(ecpsdrAbridged.id()).contains("ECPSDR-ID")
        assertThat(ecpsdrAbridged.asl5VCurrMon()).contains(12)
        assertThat(ecpsdrAbridged.cdsPlateVMon()).contains(12)
        assertThat(ecpsdrAbridged.cdsRefVMon()).contains(12)
        assertThat(ecpsdrAbridged.cdsThreshold()).contains(12)
        assertThat(ecpsdrAbridged.cdsThrottle()).contains(12)
        assertThat(ecpsdrAbridged.checksum()).contains(12)
        assertThat(ecpsdrAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(ecpsdrAbridged.createdBy()).contains("some.user")
        assertThat(ecpsdrAbridged.dosBias()).contains(12)
        assertThat(ecpsdrAbridged.dsl5VCurrMon()).contains(12)
        assertThat(ecpsdrAbridged.esdTrigCountH()).contains(12)
        assertThat(ecpsdrAbridged.esdTrigCountL()).contains(12)
        assertThat(ecpsdrAbridged.hiLetL()).contains(2)
        assertThat(ecpsdrAbridged.hiLetM()).contains(2)
        assertThat(ecpsdrAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(ecpsdrAbridged.idSensor()).contains("SENSOR-ID")
        assertThat(ecpsdrAbridged.lowLetL()).contains(2)
        assertThat(ecpsdrAbridged.lowLetM()).contains(2)
        assertThat(ecpsdrAbridged.medLet1L()).contains(2)
        assertThat(ecpsdrAbridged.medLet1M()).contains(2)
        assertThat(ecpsdrAbridged.medLet2L()).contains(2)
        assertThat(ecpsdrAbridged.medLet2M()).contains(2)
        assertThat(ecpsdrAbridged.medLet3L()).contains(2)
        assertThat(ecpsdrAbridged.medLet3M()).contains(2)
        assertThat(ecpsdrAbridged.medLet4L()).contains(2)
        assertThat(ecpsdrAbridged.medLet4M()).contains(2)
        assertThat(ecpsdrAbridged.mpTemp()).contains(12)
        assertThat(ecpsdrAbridged.obTime())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(ecpsdrAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(ecpsdrAbridged.origNetwork()).contains("OPS1")
        assertThat(ecpsdrAbridged.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(ecpsdrAbridged.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(ecpsdrAbridged.pd1SigLev()).contains(12)
        assertThat(ecpsdrAbridged.pd2SigLev()).contains(12)
        assertThat(ecpsdrAbridged.psTempMon()).contains(12)
        assertThat(ecpsdrAbridged.retransmit()).contains(true)
        assertThat(ecpsdrAbridged.satNo()).contains(101)
        assertThat(ecpsdrAbridged.senMode()).contains("TEST")
        assertThat(ecpsdrAbridged.surfDosChargeH()).contains(12)
        assertThat(ecpsdrAbridged.surfDosChargeL()).contains(12)
        assertThat(ecpsdrAbridged.surfDosH()).contains(12)
        assertThat(ecpsdrAbridged.surfDosL()).contains(12)
        assertThat(ecpsdrAbridged.surfDosM()).contains(12)
        assertThat(ecpsdrAbridged.surfDosStat()).contains(2)
        assertThat(ecpsdrAbridged.transientData().getOrNull()).containsExactly(1, 2, 3)
        assertThat(ecpsdrAbridged.vRef()).contains(12)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val ecpsdrAbridged =
            EcpsdrAbridged.builder()
                .classificationMarking("U")
                .dataMode(EcpsdrAbridged.DataMode.TEST)
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .type("STANDARD")
                .id("ECPSDR-ID")
                .asl5VCurrMon(12)
                .cdsPlateVMon(12)
                .cdsRefVMon(12)
                .cdsThreshold(12)
                .cdsThrottle(12)
                .checksum(12)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dosBias(12)
                .dsl5VCurrMon(12)
                .esdTrigCountH(12)
                .esdTrigCountL(12)
                .hiLetL(2)
                .hiLetM(2)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .lowLetL(2)
                .lowLetM(2)
                .medLet1L(2)
                .medLet1M(2)
                .medLet2L(2)
                .medLet2M(2)
                .medLet3L(2)
                .medLet3M(2)
                .medLet4L(2)
                .medLet4M(2)
                .mpTemp(12)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .pd1SigLev(12)
                .pd2SigLev(12)
                .psTempMon(12)
                .retransmit(true)
                .satNo(101)
                .senMode("TEST")
                .surfDosChargeH(12)
                .surfDosChargeL(12)
                .surfDosH(12)
                .surfDosL(12)
                .surfDosM(12)
                .surfDosStat(2)
                .transientData(listOf(1, 2, 3))
                .vRef(12)
                .build()

        val roundtrippedEcpsdrAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(ecpsdrAbridged),
                jacksonTypeRef<EcpsdrAbridged>(),
            )

        assertThat(roundtrippedEcpsdrAbridged).isEqualTo(ecpsdrAbridged)
    }
}
