// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.launchvehicledetails

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaunchVehicleDetailUpdateParamsTest {

    @Test
    fun create() {
        LaunchVehicleDetailUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(LaunchVehicleDetailUpdateParams.DataMode.TEST)
            .idLaunchVehicle("LAUNCHVEHICLE-ID")
            .source("Bluestaq")
            .bodyId("LAUNCHVEHICLEDETAILS-ID")
            .attitudeAccuracy(10.23)
            .category("Example-category")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .deploymentRotationRate(10.23)
            .diameter(10.23)
            .estLaunchPrice(10.23)
            .estLaunchPriceTypical(10.23)
            .fairingExternalDiameter(10.23)
            .fairingInternalDiameter(10.23)
            .fairingLength(10.23)
            .fairingMass(10.23)
            .fairingMaterial("Example-fairing-material")
            .fairingName("Example-fairing-name")
            .fairingNotes("Example notes")
            .family("Example-family")
            .geoPayloadMass(10.23)
            .gtoInj3SigAccuracyApogeeMargin(10.23)
            .gtoInj3SigAccuracyApogeeTarget(10.23)
            .gtoInj3SigAccuracyInclinationMargin(10.23)
            .gtoInj3SigAccuracyInclinationTarget(10.23)
            .gtoInj3SigAccuracyPerigeeMargin(10.23)
            .gtoInj3SigAccuracyPerigeeTarget(10.23)
            .gtoPayloadMass(10.23)
            .launchMass(10.23)
            .launchPrefix("AX011")
            .length(10.23)
            .leoPayloadMass(10.23)
            .manufacturerOrgId("MANUFACTURERORG-ID")
            .maxAccelLoad(10.23)
            .maxAcousticLevel(10.23)
            .maxAcousticLevelRange(10.23)
            .maxFairingPressureChange(10.23)
            .maxFlightShockForce(10.23)
            .maxFlightShockFreq(10.23)
            .maxPayloadFreqLat(10.23)
            .maxPayloadFreqLon(10.23)
            .minorVariant("Example-minor-variant")
            .notes("Example notes")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .oxidizer("Bromine")
            .payloadNotes("Example notes")
            .payloadSeparationRate(10.23)
            .propellant("Nitrogen")
            .soundPressureLevel(10.23)
            .sourceUrl("Example URL")
            .ssoPayloadMass(10.23)
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .variant("Example-variant")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            LaunchVehicleDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailUpdateParams.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            LaunchVehicleDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailUpdateParams.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .bodyId("LAUNCHVEHICLEDETAILS-ID")
                .attitudeAccuracy(10.23)
                .category("Example-category")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deploymentRotationRate(10.23)
                .diameter(10.23)
                .estLaunchPrice(10.23)
                .estLaunchPriceTypical(10.23)
                .fairingExternalDiameter(10.23)
                .fairingInternalDiameter(10.23)
                .fairingLength(10.23)
                .fairingMass(10.23)
                .fairingMaterial("Example-fairing-material")
                .fairingName("Example-fairing-name")
                .fairingNotes("Example notes")
                .family("Example-family")
                .geoPayloadMass(10.23)
                .gtoInj3SigAccuracyApogeeMargin(10.23)
                .gtoInj3SigAccuracyApogeeTarget(10.23)
                .gtoInj3SigAccuracyInclinationMargin(10.23)
                .gtoInj3SigAccuracyInclinationTarget(10.23)
                .gtoInj3SigAccuracyPerigeeMargin(10.23)
                .gtoInj3SigAccuracyPerigeeTarget(10.23)
                .gtoPayloadMass(10.23)
                .launchMass(10.23)
                .launchPrefix("AX011")
                .length(10.23)
                .leoPayloadMass(10.23)
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .maxAccelLoad(10.23)
                .maxAcousticLevel(10.23)
                .maxAcousticLevelRange(10.23)
                .maxFairingPressureChange(10.23)
                .maxFlightShockForce(10.23)
                .maxFlightShockFreq(10.23)
                .maxPayloadFreqLat(10.23)
                .maxPayloadFreqLon(10.23)
                .minorVariant("Example-minor-variant")
                .notes("Example notes")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .oxidizer("Bromine")
                .payloadNotes("Example notes")
                .payloadSeparationRate(10.23)
                .propellant("Nitrogen")
                .soundPressureLevel(10.23)
                .sourceUrl("Example URL")
                .ssoPayloadMass(10.23)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .variant("Example-variant")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LaunchVehicleDetailUpdateParams.DataMode.TEST)
        assertThat(body.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("LAUNCHVEHICLEDETAILS-ID")
        assertThat(body.attitudeAccuracy()).contains(10.23)
        assertThat(body.category()).contains("Example-category")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.deploymentRotationRate()).contains(10.23)
        assertThat(body.diameter()).contains(10.23)
        assertThat(body.estLaunchPrice()).contains(10.23)
        assertThat(body.estLaunchPriceTypical()).contains(10.23)
        assertThat(body.fairingExternalDiameter()).contains(10.23)
        assertThat(body.fairingInternalDiameter()).contains(10.23)
        assertThat(body.fairingLength()).contains(10.23)
        assertThat(body.fairingMass()).contains(10.23)
        assertThat(body.fairingMaterial()).contains("Example-fairing-material")
        assertThat(body.fairingName()).contains("Example-fairing-name")
        assertThat(body.fairingNotes()).contains("Example notes")
        assertThat(body.family()).contains("Example-family")
        assertThat(body.geoPayloadMass()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyApogeeMargin()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyApogeeTarget()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyInclinationMargin()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyInclinationTarget()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyPerigeeMargin()).contains(10.23)
        assertThat(body.gtoInj3SigAccuracyPerigeeTarget()).contains(10.23)
        assertThat(body.gtoPayloadMass()).contains(10.23)
        assertThat(body.launchMass()).contains(10.23)
        assertThat(body.launchPrefix()).contains("AX011")
        assertThat(body.length()).contains(10.23)
        assertThat(body.leoPayloadMass()).contains(10.23)
        assertThat(body.manufacturerOrgId()).contains("MANUFACTURERORG-ID")
        assertThat(body.maxAccelLoad()).contains(10.23)
        assertThat(body.maxAcousticLevel()).contains(10.23)
        assertThat(body.maxAcousticLevelRange()).contains(10.23)
        assertThat(body.maxFairingPressureChange()).contains(10.23)
        assertThat(body.maxFlightShockForce()).contains(10.23)
        assertThat(body.maxFlightShockFreq()).contains(10.23)
        assertThat(body.maxPayloadFreqLat()).contains(10.23)
        assertThat(body.maxPayloadFreqLon()).contains(10.23)
        assertThat(body.minorVariant()).contains("Example-minor-variant")
        assertThat(body.notes()).contains("Example notes")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.oxidizer()).contains("Bromine")
        assertThat(body.payloadNotes()).contains("Example notes")
        assertThat(body.payloadSeparationRate()).contains(10.23)
        assertThat(body.propellant()).contains("Nitrogen")
        assertThat(body.soundPressureLevel()).contains(10.23)
        assertThat(body.sourceUrl()).contains("Example URL")
        assertThat(body.ssoPayloadMass()).contains(10.23)
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.variant()).contains("Example-variant")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            LaunchVehicleDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailUpdateParams.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LaunchVehicleDetailUpdateParams.DataMode.TEST)
        assertThat(body.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
