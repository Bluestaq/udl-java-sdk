// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airoperations.aircraftsorties

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftSortyCreateParamsTest {

    @Test
    fun create() {
        AircraftSortyCreateParams.builder()
            .classificationMarking("U")
            .dataMode(AircraftSortyCreateParams.DataMode.TEST)
            .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .source("Bluestaq")
            .id("AIRCRAFTSORTIE-ID")
            .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
            .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
            .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .aircraftAdsb("AE123C")
            .aircraftAltId("ALT-AIRCRAFT-ID")
            .aircraftEvent("Example event")
            .aircraftMds("C017A")
            .aircraftRemarks("Some remark about aircraft A")
            .alertStatus(22)
            .alertStatusCode("C1")
            .amcMsnNum("AJM512571333")
            .amcMsnType("SAAM")
            .arrFaa("FAA1")
            .arrIata("AAA")
            .arrIcao("KCOS")
            .arrItinerary(101)
            .arrPurposeCode("O")
            .callSign("BAKER")
            .cargoConfig("C-1")
            .commanderName("Smith")
            .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .currentState("Park")
            .delayCode("500")
            .depFaa("FAA1")
            .depIata("AAA")
            .depIcao("KCOS")
            .depItinerary(100)
            .depPurposeCode("P")
            .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
            .dhdReason("Due for maintenance")
            .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
            .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
            .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .filename("ExampleFileName")
            .filesize(12)
            .flightTime(104.5)
            .fmDeskNum("7198675309")
            .fmName("Smith")
            .fuelReq(20000.1)
            .gndTime(387.8)
            .idAircraft("REF-AIRCRAFT-ID")
            .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
            .jcsPriority("1A3")
            .legNum(14)
            .lineNumber(99)
            .missionId("ABLE")
            .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
            .objectiveRemarks("Some objective remark about aircraft A")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origSortieId("A0640")
            .oxyOnCrew(12.3)
            .oxyOnPax(12.3)
            .oxyReqCrew(12.3)
            .oxyReqPax(12.3)
            .paperStatus(AircraftSortyCreateParams.PaperStatus.PUBLISHED)
            .papersVersion("1.1")
            .parkingLoc("KCOS")
            .passengers(17)
            .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .pprStatus(AircraftSortyCreateParams.PprStatus.PENDING)
            .primaryScl("ABC")
            .rawFileUri("Example URI")
            .reqConfig("C-1")
            .resultRemarks("Some remark about aircraft A")
            .rvnReq(AircraftSortyCreateParams.RvnReq.R)
            .scheduleRemarks("Some schedule remark about aircraft A")
            .secondaryScl("ABC")
            .soe("OPS")
            .sortieDate(LocalDate.parse("2021-01-01"))
            .sourceDl("AXE")
            .tailNumber("Tail_1")
            .build()
    }

    @Test
    fun body() {
        val params =
            AircraftSortyCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AircraftSortyCreateParams.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("AIRCRAFTSORTIE-ID")
                .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .aircraftAdsb("AE123C")
                .aircraftAltId("ALT-AIRCRAFT-ID")
                .aircraftEvent("Example event")
                .aircraftMds("C017A")
                .aircraftRemarks("Some remark about aircraft A")
                .alertStatus(22)
                .alertStatusCode("C1")
                .amcMsnNum("AJM512571333")
                .amcMsnType("SAAM")
                .arrFaa("FAA1")
                .arrIata("AAA")
                .arrIcao("KCOS")
                .arrItinerary(101)
                .arrPurposeCode("O")
                .callSign("BAKER")
                .cargoConfig("C-1")
                .commanderName("Smith")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentState("Park")
                .delayCode("500")
                .depFaa("FAA1")
                .depIata("AAA")
                .depIcao("KCOS")
                .depItinerary(100)
                .depPurposeCode("P")
                .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
                .dhdReason("Due for maintenance")
                .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .filename("ExampleFileName")
                .filesize(12)
                .flightTime(104.5)
                .fmDeskNum("7198675309")
                .fmName("Smith")
                .fuelReq(20000.1)
                .gndTime(387.8)
                .idAircraft("REF-AIRCRAFT-ID")
                .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
                .jcsPriority("1A3")
                .legNum(14)
                .lineNumber(99)
                .missionId("ABLE")
                .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
                .objectiveRemarks("Some objective remark about aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSortieId("A0640")
                .oxyOnCrew(12.3)
                .oxyOnPax(12.3)
                .oxyReqCrew(12.3)
                .oxyReqPax(12.3)
                .paperStatus(AircraftSortyCreateParams.PaperStatus.PUBLISHED)
                .papersVersion("1.1")
                .parkingLoc("KCOS")
                .passengers(17)
                .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .pprStatus(AircraftSortyCreateParams.PprStatus.PENDING)
                .primaryScl("ABC")
                .rawFileUri("Example URI")
                .reqConfig("C-1")
                .resultRemarks("Some remark about aircraft A")
                .rvnReq(AircraftSortyCreateParams.RvnReq.R)
                .scheduleRemarks("Some schedule remark about aircraft A")
                .secondaryScl("ABC")
                .soe("OPS")
                .sortieDate(LocalDate.parse("2021-01-01"))
                .sourceDl("AXE")
                .tailNumber("Tail_1")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AircraftSortyCreateParams.DataMode.TEST)
        assertThat(body.plannedDepTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("AIRCRAFTSORTIE-ID")
        assertThat(body.actualArrTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.actualBlockInTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(body.actualBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(body.actualDepTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.aircraftAdsb()).contains("AE123C")
        assertThat(body.aircraftAltId()).contains("ALT-AIRCRAFT-ID")
        assertThat(body.aircraftEvent()).contains("Example event")
        assertThat(body.aircraftMds()).contains("C017A")
        assertThat(body.aircraftRemarks()).contains("Some remark about aircraft A")
        assertThat(body.alertStatus()).contains(22)
        assertThat(body.alertStatusCode()).contains("C1")
        assertThat(body.amcMsnNum()).contains("AJM512571333")
        assertThat(body.amcMsnType()).contains("SAAM")
        assertThat(body.arrFaa()).contains("FAA1")
        assertThat(body.arrIata()).contains("AAA")
        assertThat(body.arrIcao()).contains("KCOS")
        assertThat(body.arrItinerary()).contains(101)
        assertThat(body.arrPurposeCode()).contains("O")
        assertThat(body.callSign()).contains("BAKER")
        assertThat(body.cargoConfig()).contains("C-1")
        assertThat(body.commanderName()).contains("Smith")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.currentState()).contains("Park")
        assertThat(body.delayCode()).contains("500")
        assertThat(body.depFaa()).contains("FAA1")
        assertThat(body.depIata()).contains("AAA")
        assertThat(body.depIcao()).contains("KCOS")
        assertThat(body.depItinerary()).contains(100)
        assertThat(body.depPurposeCode()).contains("P")
        assertThat(body.dhd()).contains(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
        assertThat(body.dhdReason()).contains("Due for maintenance")
        assertThat(body.estArrTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.estBlockInTime()).contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(body.estBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(body.estDepTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.filename()).contains("ExampleFileName")
        assertThat(body.filesize()).contains(12)
        assertThat(body.flightTime()).contains(104.5)
        assertThat(body.fmDeskNum()).contains("7198675309")
        assertThat(body.fmName()).contains("Smith")
        assertThat(body.fuelReq()).contains(20000.1)
        assertThat(body.gndTime()).contains(387.8)
        assertThat(body.idAircraft()).contains("REF-AIRCRAFT-ID")
        assertThat(body.idMission()).contains("fa18d96e-91ea-60da-a7a8-1af6500066c8")
        assertThat(body.jcsPriority()).contains("1A3")
        assertThat(body.legNum()).contains(14)
        assertThat(body.lineNumber()).contains(99)
        assertThat(body.missionId()).contains("ABLE")
        assertThat(body.missionUpdate()).contains(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
        assertThat(body.objectiveRemarks()).contains("Some objective remark about aircraft A")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origSortieId()).contains("A0640")
        assertThat(body.oxyOnCrew()).contains(12.3)
        assertThat(body.oxyOnPax()).contains(12.3)
        assertThat(body.oxyReqCrew()).contains(12.3)
        assertThat(body.oxyReqPax()).contains(12.3)
        assertThat(body.paperStatus()).contains(AircraftSortyCreateParams.PaperStatus.PUBLISHED)
        assertThat(body.papersVersion()).contains("1.1")
        assertThat(body.parkingLoc()).contains("KCOS")
        assertThat(body.passengers()).contains(17)
        assertThat(body.plannedArrTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.pprStatus()).contains(AircraftSortyCreateParams.PprStatus.PENDING)
        assertThat(body.primaryScl()).contains("ABC")
        assertThat(body.rawFileUri()).contains("Example URI")
        assertThat(body.reqConfig()).contains("C-1")
        assertThat(body.resultRemarks()).contains("Some remark about aircraft A")
        assertThat(body.rvnReq()).contains(AircraftSortyCreateParams.RvnReq.R)
        assertThat(body.scheduleRemarks()).contains("Some schedule remark about aircraft A")
        assertThat(body.secondaryScl()).contains("ABC")
        assertThat(body.soe()).contains("OPS")
        assertThat(body.sortieDate()).contains(LocalDate.parse("2021-01-01"))
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tailNumber()).contains("Tail_1")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            AircraftSortyCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AircraftSortyCreateParams.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AircraftSortyCreateParams.DataMode.TEST)
        assertThat(body.plannedDepTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
