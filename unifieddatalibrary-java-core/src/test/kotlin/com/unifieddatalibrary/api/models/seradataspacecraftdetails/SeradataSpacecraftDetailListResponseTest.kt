// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradataspacecraftdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeradataSpacecraftDetailListResponseTest {

    @Test
    fun create() {
        val seradataSpacecraftDetailListResponse =
            SeradataSpacecraftDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(SeradataSpacecraftDetailListResponse.DataMode.TEST)
                .name("name")
                .source("Bluestaq")
                .id("SERADATASPACECRAFTDETAILS-ID")
                .additionalMissionsGroups("additionalMissionsGroups")
                .altitude(36036.6330576414)
                .annualInsuredDepreciationFactor(1.23)
                .annualInsuredDepreciationFactorEstimated(true)
                .apogee(1.23)
                .busId("BUS-ID")
                .capabilityLost(1.23)
                .capacityLost(1.23)
                .catalogNumber(1)
                .collisionRiskCm(1.43)
                .collisionRiskMm(1.33)
                .combinedCostEstimated(true)
                .combinedNewCost(1.23)
                .commercialLaunch(true)
                .constellation("GPS")
                .costEstimated(true)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cubesatDispenserType("cubesatDispenserType")
                .currentAge(5.898630136986301)
                .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .description("description")
                .designLife(231)
                .dryMass(1.23)
                .expectedLife(231)
                .geoPosition(-8.23)
                .idOnOrbit("503")
                .inclination(1.23)
                .insuranceLossesTotal(0.393)
                .insuranceNotes("Sample Notes")
                .insurancePremiumAtLaunch(1.23)
                .insurancePremiumAtLaunchEstimated(true)
                .insuredAtLaunch(true)
                .insuredValueAtLaunch(1.23)
                .insuredValueLaunchEstimated(true)
                .intlNumber("number")
                .lat(1.23)
                .launchArranger("launchArranger")
                .launchArrangerCountry("USA")
                .launchCharacteristic("Expendable")
                .launchCost(1.23)
                .launchCostEstimated(true)
                .launchCountry("USA")
                .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .launchDateRemarks("launchDateRemarks")
                .launchId("11573")
                .launchMass(1.23)
                .launchNotes("Sample Notes")
                .launchNumber("FN040")
                .launchProvider("launchProvider")
                .launchProviderCountry("USA")
                .launchProviderFlightNumber("launchProviderFlightNumber")
                .launchSiteId("28")
                .launchSiteName("launchSiteName")
                .launchType("Future")
                .launchVehicleId("123")
                .leased(true)
                .lifeLost(1.23)
                .lon(1.23)
                .massCategory("2500 - 3500kg  - Large Satellite")
                .nameAtLaunch("nameAtLaunch")
                .newCost(1.23)
                .notes("Sample Notes")
                .numHumans(1)
                .operator("operator")
                .operatorCountry("USA")
                .orbitCategory("GEO")
                .orbitSubCategory("Geostationary")
                .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .owner("owner")
                .ownerCountry("USA")
                .perigee(1.23)
                .period(1.23)
                .primaryMissionGroup("primaryMissionGroup")
                .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
                .programName("programName")
                .quantity(1)
                .reusableFlights("reusableFlights")
                .reusedHullName("reusedHullName")
                .sector("Commercial")
                .serialNumber("serialNumber")
                .stabilizer("3-Axis")
                .status("Inactive - Retired")
                .totalClaims(1)
                .totalFatalities(1)
                .totalInjuries(1)
                .totalPayloadPower(1.23)
                .youtubeLaunchLink("youtubeLaunchLink")
                .build()

        assertThat(seradataSpacecraftDetailListResponse.classificationMarking()).isEqualTo("U")
        assertThat(seradataSpacecraftDetailListResponse.dataMode())
            .isEqualTo(SeradataSpacecraftDetailListResponse.DataMode.TEST)
        assertThat(seradataSpacecraftDetailListResponse.name()).isEqualTo("name")
        assertThat(seradataSpacecraftDetailListResponse.source()).isEqualTo("Bluestaq")
        assertThat(seradataSpacecraftDetailListResponse.id())
            .contains("SERADATASPACECRAFTDETAILS-ID")
        assertThat(seradataSpacecraftDetailListResponse.additionalMissionsGroups())
            .contains("additionalMissionsGroups")
        assertThat(seradataSpacecraftDetailListResponse.altitude()).contains(36036.6330576414)
        assertThat(seradataSpacecraftDetailListResponse.annualInsuredDepreciationFactor())
            .contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.annualInsuredDepreciationFactorEstimated())
            .contains(true)
        assertThat(seradataSpacecraftDetailListResponse.apogee()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.busId()).contains("BUS-ID")
        assertThat(seradataSpacecraftDetailListResponse.capabilityLost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.capacityLost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.catalogNumber()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.collisionRiskCm()).contains(1.43)
        assertThat(seradataSpacecraftDetailListResponse.collisionRiskMm()).contains(1.33)
        assertThat(seradataSpacecraftDetailListResponse.combinedCostEstimated()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.combinedNewCost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.commercialLaunch()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.constellation()).contains("GPS")
        assertThat(seradataSpacecraftDetailListResponse.costEstimated()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seradataSpacecraftDetailListResponse.createdBy()).contains("some.user")
        assertThat(seradataSpacecraftDetailListResponse.cubesatDispenserType())
            .contains("cubesatDispenserType")
        assertThat(seradataSpacecraftDetailListResponse.currentAge()).contains(5.898630136986301)
        assertThat(seradataSpacecraftDetailListResponse.dateOfObservation())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seradataSpacecraftDetailListResponse.description()).contains("description")
        assertThat(seradataSpacecraftDetailListResponse.designLife()).contains(231)
        assertThat(seradataSpacecraftDetailListResponse.dryMass()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.expectedLife()).contains(231)
        assertThat(seradataSpacecraftDetailListResponse.geoPosition()).contains(-8.23)
        assertThat(seradataSpacecraftDetailListResponse.idOnOrbit()).contains("503")
        assertThat(seradataSpacecraftDetailListResponse.inclination()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.insuranceLossesTotal()).contains(0.393)
        assertThat(seradataSpacecraftDetailListResponse.insuranceNotes()).contains("Sample Notes")
        assertThat(seradataSpacecraftDetailListResponse.insurancePremiumAtLaunch()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.insurancePremiumAtLaunchEstimated())
            .contains(true)
        assertThat(seradataSpacecraftDetailListResponse.insuredAtLaunch()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.insuredValueAtLaunch()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.insuredValueLaunchEstimated())
            .contains(true)
        assertThat(seradataSpacecraftDetailListResponse.intlNumber()).contains("number")
        assertThat(seradataSpacecraftDetailListResponse.lat()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.launchArranger()).contains("launchArranger")
        assertThat(seradataSpacecraftDetailListResponse.launchArrangerCountry()).contains("USA")
        assertThat(seradataSpacecraftDetailListResponse.launchCharacteristic())
            .contains("Expendable")
        assertThat(seradataSpacecraftDetailListResponse.launchCost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.launchCostEstimated()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.launchCountry()).contains("USA")
        assertThat(seradataSpacecraftDetailListResponse.launchDate())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seradataSpacecraftDetailListResponse.launchDateRemarks())
            .contains("launchDateRemarks")
        assertThat(seradataSpacecraftDetailListResponse.launchId()).contains("11573")
        assertThat(seradataSpacecraftDetailListResponse.launchMass()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.launchNotes()).contains("Sample Notes")
        assertThat(seradataSpacecraftDetailListResponse.launchNumber()).contains("FN040")
        assertThat(seradataSpacecraftDetailListResponse.launchProvider()).contains("launchProvider")
        assertThat(seradataSpacecraftDetailListResponse.launchProviderCountry()).contains("USA")
        assertThat(seradataSpacecraftDetailListResponse.launchProviderFlightNumber())
            .contains("launchProviderFlightNumber")
        assertThat(seradataSpacecraftDetailListResponse.launchSiteId()).contains("28")
        assertThat(seradataSpacecraftDetailListResponse.launchSiteName()).contains("launchSiteName")
        assertThat(seradataSpacecraftDetailListResponse.launchType()).contains("Future")
        assertThat(seradataSpacecraftDetailListResponse.launchVehicleId()).contains("123")
        assertThat(seradataSpacecraftDetailListResponse.leased()).contains(true)
        assertThat(seradataSpacecraftDetailListResponse.lifeLost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.lon()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.massCategory())
            .contains("2500 - 3500kg  - Large Satellite")
        assertThat(seradataSpacecraftDetailListResponse.nameAtLaunch()).contains("nameAtLaunch")
        assertThat(seradataSpacecraftDetailListResponse.newCost()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.notes()).contains("Sample Notes")
        assertThat(seradataSpacecraftDetailListResponse.numHumans()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.operator()).contains("operator")
        assertThat(seradataSpacecraftDetailListResponse.operatorCountry()).contains("USA")
        assertThat(seradataSpacecraftDetailListResponse.orbitCategory()).contains("GEO")
        assertThat(seradataSpacecraftDetailListResponse.orbitSubCategory())
            .contains("Geostationary")
        assertThat(seradataSpacecraftDetailListResponse.orderDate())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seradataSpacecraftDetailListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(seradataSpacecraftDetailListResponse.origNetwork()).contains("ORIG")
        assertThat(seradataSpacecraftDetailListResponse.owner()).contains("owner")
        assertThat(seradataSpacecraftDetailListResponse.ownerCountry()).contains("USA")
        assertThat(seradataSpacecraftDetailListResponse.perigee()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.period()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.primaryMissionGroup())
            .contains("primaryMissionGroup")
        assertThat(seradataSpacecraftDetailListResponse.primeManufacturerOrgId())
            .contains("05c43360-382e-4aa2-b875-ed28945ff2e5")
        assertThat(seradataSpacecraftDetailListResponse.programName()).contains("programName")
        assertThat(seradataSpacecraftDetailListResponse.quantity()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.reusableFlights())
            .contains("reusableFlights")
        assertThat(seradataSpacecraftDetailListResponse.reusedHullName()).contains("reusedHullName")
        assertThat(seradataSpacecraftDetailListResponse.sector()).contains("Commercial")
        assertThat(seradataSpacecraftDetailListResponse.serialNumber()).contains("serialNumber")
        assertThat(seradataSpacecraftDetailListResponse.stabilizer()).contains("3-Axis")
        assertThat(seradataSpacecraftDetailListResponse.status()).contains("Inactive - Retired")
        assertThat(seradataSpacecraftDetailListResponse.totalClaims()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.totalFatalities()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.totalInjuries()).contains(1)
        assertThat(seradataSpacecraftDetailListResponse.totalPayloadPower()).contains(1.23)
        assertThat(seradataSpacecraftDetailListResponse.youtubeLaunchLink())
            .contains("youtubeLaunchLink")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val seradataSpacecraftDetailListResponse =
            SeradataSpacecraftDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(SeradataSpacecraftDetailListResponse.DataMode.TEST)
                .name("name")
                .source("Bluestaq")
                .id("SERADATASPACECRAFTDETAILS-ID")
                .additionalMissionsGroups("additionalMissionsGroups")
                .altitude(36036.6330576414)
                .annualInsuredDepreciationFactor(1.23)
                .annualInsuredDepreciationFactorEstimated(true)
                .apogee(1.23)
                .busId("BUS-ID")
                .capabilityLost(1.23)
                .capacityLost(1.23)
                .catalogNumber(1)
                .collisionRiskCm(1.43)
                .collisionRiskMm(1.33)
                .combinedCostEstimated(true)
                .combinedNewCost(1.23)
                .commercialLaunch(true)
                .constellation("GPS")
                .costEstimated(true)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cubesatDispenserType("cubesatDispenserType")
                .currentAge(5.898630136986301)
                .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .description("description")
                .designLife(231)
                .dryMass(1.23)
                .expectedLife(231)
                .geoPosition(-8.23)
                .idOnOrbit("503")
                .inclination(1.23)
                .insuranceLossesTotal(0.393)
                .insuranceNotes("Sample Notes")
                .insurancePremiumAtLaunch(1.23)
                .insurancePremiumAtLaunchEstimated(true)
                .insuredAtLaunch(true)
                .insuredValueAtLaunch(1.23)
                .insuredValueLaunchEstimated(true)
                .intlNumber("number")
                .lat(1.23)
                .launchArranger("launchArranger")
                .launchArrangerCountry("USA")
                .launchCharacteristic("Expendable")
                .launchCost(1.23)
                .launchCostEstimated(true)
                .launchCountry("USA")
                .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .launchDateRemarks("launchDateRemarks")
                .launchId("11573")
                .launchMass(1.23)
                .launchNotes("Sample Notes")
                .launchNumber("FN040")
                .launchProvider("launchProvider")
                .launchProviderCountry("USA")
                .launchProviderFlightNumber("launchProviderFlightNumber")
                .launchSiteId("28")
                .launchSiteName("launchSiteName")
                .launchType("Future")
                .launchVehicleId("123")
                .leased(true)
                .lifeLost(1.23)
                .lon(1.23)
                .massCategory("2500 - 3500kg  - Large Satellite")
                .nameAtLaunch("nameAtLaunch")
                .newCost(1.23)
                .notes("Sample Notes")
                .numHumans(1)
                .operator("operator")
                .operatorCountry("USA")
                .orbitCategory("GEO")
                .orbitSubCategory("Geostationary")
                .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .owner("owner")
                .ownerCountry("USA")
                .perigee(1.23)
                .period(1.23)
                .primaryMissionGroup("primaryMissionGroup")
                .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
                .programName("programName")
                .quantity(1)
                .reusableFlights("reusableFlights")
                .reusedHullName("reusedHullName")
                .sector("Commercial")
                .serialNumber("serialNumber")
                .stabilizer("3-Axis")
                .status("Inactive - Retired")
                .totalClaims(1)
                .totalFatalities(1)
                .totalInjuries(1)
                .totalPayloadPower(1.23)
                .youtubeLaunchLink("youtubeLaunchLink")
                .build()

        val roundtrippedSeradataSpacecraftDetailListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(seradataSpacecraftDetailListResponse),
                jacksonTypeRef<SeradataSpacecraftDetailListResponse>(),
            )

        assertThat(roundtrippedSeradataSpacecraftDetailListResponse)
            .isEqualTo(seradataSpacecraftDetailListResponse)
    }
}
