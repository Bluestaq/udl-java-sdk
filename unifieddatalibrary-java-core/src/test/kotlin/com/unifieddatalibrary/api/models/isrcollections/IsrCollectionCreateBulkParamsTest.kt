// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.isrcollections

import com.unifieddatalibrary.api.models.isrcollections.IsrCollectionCreateBulkParams
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class IsrCollectionCreateBulkParamsTest {

    @Test
    fun create() {
      IsrCollectionCreateBulkParams.builder()
          .addBody(IsrCollectionCreateBulkParams.Body.builder()
              .classificationMarking("U")
              .dataMode(IsrCollectionCreateBulkParams.Body.DataMode.TEST)
              .source("Bluestaq")
              .id("ISRCOLLECTION-ID")
              .addCollectionRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.builder()
                  .id("ISCRCOLLECTIONREQUIREMENTS")
                  .country("VE")
                  .cridNumbers("CRID")
                  .criticalTimes(IsrCollectionCreateBulkParams.Body.CollectionRequirement.CriticalTimes.builder()
                      .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                      .build())
                  .emphasized(false)
                  .exploitationRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.builder()
                      .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                      .amplification("AMPLIFICATION")
                      .dissemination("EMAILS")
                      .eei("ESSENTIAL_ELEMENTS")
                      .poc(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.Poc.builder()
                          .id("ISRCOLLECTIONPOC-ID")
                          .callsign("CALLSIGN")
                          .chatName("CHAT_NAME")
                          .chatSystem("CHAT")
                          .email("EMAIL")
                          .name("NAME")
                          .notes("NOTES")
                          .phone("PHONE")
                          .radioFrequency(123.23)
                          .unit("UNIT")
                          .build())
                      .reportingCriteria("CRITERIA")
                      .build())
                  .hash("HASH")
                  .intelDiscipline("Sig")
                  .isPrismCr(true)
                  .operation("NAME")
                  .priority(20.23)
                  .reconSurvey("SURVEY_INFO")
                  .recordId("RECORD-ID")
                  .region("REGION")
                  .secondary(false)
                  .specialComGuidance("TEXT")
                  .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                  .subregion("SUBREGION")
                  .supportedUnit("UNIT")
                  .addTargetList("string")
                  .type("COLLECTION_TYPE")
                  .build())
              .createdAt(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .createdBy("some.user")
              .idexVersion(2)
              .missionAor("Kandahar")
              .missionCollectionArea("Example collection area")
              .missionCountry("US")
              .missionEmphasis("Mission emphasis")
              .missionId("myTask-2020-04-23T00:00:00.000Z")
              .missionJoa("Operation area")
              .missionOperation("OP-HONEY-BADGER")
              .missionPrimaryIntelDiscipline("Sig")
              .missionPrimarySubCategory("FMV")
              .missionPriority(1)
              .missionRegion("Example Region")
              .missionRole("Targeting of Lead Vehicle")
              .missionSecondaryIntelDiscipline("Intelligence_2")
              .missionSecondarySubCategory("Convoy")
              .missionStartPointLat(45.23)
              .missionStartPointLong(80.23)
              .missionSubRegion("Example Subregion")
              .missionSupportedUnit("ENVOYS")
              .missionSyncMatrixBin("MATRIX")
              .name("Example mission name")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .addTasking(IsrCollectionCreateBulkParams.Body.Tasking.builder()
                  .id("ISRCOLLECTIONTASKINGS-ID")
                  .collectionPeriods(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.builder()
                      .addActual(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Actual.builder()
                          .id("ISRCOLLECTIONACTUAL-ID")
                          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .build())
                      .planned(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.builder()
                          .addAdditional(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.Additional.builder()
                              .id("ISRCOLLECTIONADDITIONAL")
                              .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                              .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                              .build())
                          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .build())
                      .build())
                  .collectionType(IsrCollectionCreateBulkParams.Body.Tasking.CollectionType.SIMULTANEOUS)
                  .eightLine("eightLine")
                  .specialComGuidance("TEXT")
                  .sroTrack("SRO")
                  .taskingAor("Kandahar")
                  .taskingCollectionArea("AREA")
                  .addTaskingCollectionRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.builder()
                      .id("ISCRCOLLECTIONREQUIREMENTS")
                      .country("VE")
                      .cridNumbers("CRID")
                      .criticalTimes(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.CriticalTimes.builder()
                          .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                          .build())
                      .emphasized(false)
                      .exploitationRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.builder()
                          .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                          .amplification("AMPLIFICATION")
                          .dissemination("EMAILS")
                          .eei("ESSENTIAL_ELEMENTS")
                          .poc(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.Poc.builder()
                              .id("ISRCOLLECTIONPOC-ID")
                              .callsign("CALLSIGN")
                              .chatName("CHAT_NAME")
                              .chatSystem("CHAT")
                              .email("EMAIL")
                              .name("NAME")
                              .notes("NOTES")
                              .phone("PHONE")
                              .radioFrequency(123.23)
                              .unit("UNIT")
                              .build())
                          .reportingCriteria("CRITERIA")
                          .build())
                      .hash("HASH")
                      .intelDiscipline("Sig")
                      .isPrismCr(true)
                      .operation("NAME")
                      .priority(20.23)
                      .reconSurvey("SURVEY_INFO")
                      .recordId("RECORD-ID")
                      .region("REGION")
                      .secondary(false)
                      .specialComGuidance("TEXT")
                      .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                      .subregion("SUBREGION")
                      .supportedUnit("UNIT")
                      .addTargetList("string")
                      .type("COLLECTION_TYPE")
                      .build())
                  .taskingCountry("CODE")
                  .taskingEmphasis("EMPHASIS")
                  .taskingJoa("AREA")
                  .taskingOperation("OP-HONEY-BADGER")
                  .taskingPrimaryIntelDiscipline("Sig")
                  .taskingPrimarySubCategory("FMV")
                  .taskingPriority(10.23)
                  .taskingRegion("REGION")
                  .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .taskingRole("Track Lead Vehicle")
                  .taskingSecondaryIntelDiscipline("Intelligence_2")
                  .taskingSecondarySubCategory("Convoy")
                  .taskingStartPointLat(45.23)
                  .taskingStartPointLong(45.23)
                  .taskingSubRegion("SUBREGION")
                  .taskingSupportedUnit("ENVOYS")
                  .taskingSyncMatrixBin("MATRIX")
                  .type(IsrCollectionCreateBulkParams.Body.Tasking.Type.DELIBERATE)
                  .build())
              .addTransit(IsrCollectionCreateBulkParams.Body.Transit.builder()
                  .id("ISRCOLLECTIONTRANSIT-ID")
                  .base("ENVOYS")
                  .duration(200.23)
                  .build())
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .build()
    }

    @Test
    fun body() {
      val params = IsrCollectionCreateBulkParams.builder()
          .addBody(IsrCollectionCreateBulkParams.Body.builder()
              .classificationMarking("U")
              .dataMode(IsrCollectionCreateBulkParams.Body.DataMode.TEST)
              .source("Bluestaq")
              .id("ISRCOLLECTION-ID")
              .addCollectionRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.builder()
                  .id("ISCRCOLLECTIONREQUIREMENTS")
                  .country("VE")
                  .cridNumbers("CRID")
                  .criticalTimes(IsrCollectionCreateBulkParams.Body.CollectionRequirement.CriticalTimes.builder()
                      .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                      .build())
                  .emphasized(false)
                  .exploitationRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.builder()
                      .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                      .amplification("AMPLIFICATION")
                      .dissemination("EMAILS")
                      .eei("ESSENTIAL_ELEMENTS")
                      .poc(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.Poc.builder()
                          .id("ISRCOLLECTIONPOC-ID")
                          .callsign("CALLSIGN")
                          .chatName("CHAT_NAME")
                          .chatSystem("CHAT")
                          .email("EMAIL")
                          .name("NAME")
                          .notes("NOTES")
                          .phone("PHONE")
                          .radioFrequency(123.23)
                          .unit("UNIT")
                          .build())
                      .reportingCriteria("CRITERIA")
                      .build())
                  .hash("HASH")
                  .intelDiscipline("Sig")
                  .isPrismCr(true)
                  .operation("NAME")
                  .priority(20.23)
                  .reconSurvey("SURVEY_INFO")
                  .recordId("RECORD-ID")
                  .region("REGION")
                  .secondary(false)
                  .specialComGuidance("TEXT")
                  .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                  .subregion("SUBREGION")
                  .supportedUnit("UNIT")
                  .addTargetList("string")
                  .type("COLLECTION_TYPE")
                  .build())
              .createdAt(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .createdBy("some.user")
              .idexVersion(2)
              .missionAor("Kandahar")
              .missionCollectionArea("Example collection area")
              .missionCountry("US")
              .missionEmphasis("Mission emphasis")
              .missionId("myTask-2020-04-23T00:00:00.000Z")
              .missionJoa("Operation area")
              .missionOperation("OP-HONEY-BADGER")
              .missionPrimaryIntelDiscipline("Sig")
              .missionPrimarySubCategory("FMV")
              .missionPriority(1)
              .missionRegion("Example Region")
              .missionRole("Targeting of Lead Vehicle")
              .missionSecondaryIntelDiscipline("Intelligence_2")
              .missionSecondarySubCategory("Convoy")
              .missionStartPointLat(45.23)
              .missionStartPointLong(80.23)
              .missionSubRegion("Example Subregion")
              .missionSupportedUnit("ENVOYS")
              .missionSyncMatrixBin("MATRIX")
              .name("Example mission name")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .addTasking(IsrCollectionCreateBulkParams.Body.Tasking.builder()
                  .id("ISRCOLLECTIONTASKINGS-ID")
                  .collectionPeriods(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.builder()
                      .addActual(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Actual.builder()
                          .id("ISRCOLLECTIONACTUAL-ID")
                          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .build())
                      .planned(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.builder()
                          .addAdditional(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.Additional.builder()
                              .id("ISRCOLLECTIONADDITIONAL")
                              .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                              .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                              .build())
                          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .build())
                      .build())
                  .collectionType(IsrCollectionCreateBulkParams.Body.Tasking.CollectionType.SIMULTANEOUS)
                  .eightLine("eightLine")
                  .specialComGuidance("TEXT")
                  .sroTrack("SRO")
                  .taskingAor("Kandahar")
                  .taskingCollectionArea("AREA")
                  .addTaskingCollectionRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.builder()
                      .id("ISCRCOLLECTIONREQUIREMENTS")
                      .country("VE")
                      .cridNumbers("CRID")
                      .criticalTimes(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.CriticalTimes.builder()
                          .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                          .build())
                      .emphasized(false)
                      .exploitationRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.builder()
                          .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                          .amplification("AMPLIFICATION")
                          .dissemination("EMAILS")
                          .eei("ESSENTIAL_ELEMENTS")
                          .poc(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.Poc.builder()
                              .id("ISRCOLLECTIONPOC-ID")
                              .callsign("CALLSIGN")
                              .chatName("CHAT_NAME")
                              .chatSystem("CHAT")
                              .email("EMAIL")
                              .name("NAME")
                              .notes("NOTES")
                              .phone("PHONE")
                              .radioFrequency(123.23)
                              .unit("UNIT")
                              .build())
                          .reportingCriteria("CRITERIA")
                          .build())
                      .hash("HASH")
                      .intelDiscipline("Sig")
                      .isPrismCr(true)
                      .operation("NAME")
                      .priority(20.23)
                      .reconSurvey("SURVEY_INFO")
                      .recordId("RECORD-ID")
                      .region("REGION")
                      .secondary(false)
                      .specialComGuidance("TEXT")
                      .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                      .subregion("SUBREGION")
                      .supportedUnit("UNIT")
                      .addTargetList("string")
                      .type("COLLECTION_TYPE")
                      .build())
                  .taskingCountry("CODE")
                  .taskingEmphasis("EMPHASIS")
                  .taskingJoa("AREA")
                  .taskingOperation("OP-HONEY-BADGER")
                  .taskingPrimaryIntelDiscipline("Sig")
                  .taskingPrimarySubCategory("FMV")
                  .taskingPriority(10.23)
                  .taskingRegion("REGION")
                  .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .taskingRole("Track Lead Vehicle")
                  .taskingSecondaryIntelDiscipline("Intelligence_2")
                  .taskingSecondarySubCategory("Convoy")
                  .taskingStartPointLat(45.23)
                  .taskingStartPointLong(45.23)
                  .taskingSubRegion("SUBREGION")
                  .taskingSupportedUnit("ENVOYS")
                  .taskingSyncMatrixBin("MATRIX")
                  .type(IsrCollectionCreateBulkParams.Body.Tasking.Type.DELIBERATE)
                  .build())
              .addTransit(IsrCollectionCreateBulkParams.Body.Transit.builder()
                  .id("ISRCOLLECTIONTRANSIT-ID")
                  .base("ENVOYS")
                  .duration(200.23)
                  .build())
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .build()

      val body = params._body()

      assertThat(body).containsExactly(IsrCollectionCreateBulkParams.Body.builder()
          .classificationMarking("U")
          .dataMode(IsrCollectionCreateBulkParams.Body.DataMode.TEST)
          .source("Bluestaq")
          .id("ISRCOLLECTION-ID")
          .addCollectionRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.builder()
              .id("ISCRCOLLECTIONREQUIREMENTS")
              .country("VE")
              .cridNumbers("CRID")
              .criticalTimes(IsrCollectionCreateBulkParams.Body.CollectionRequirement.CriticalTimes.builder()
                  .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                  .build())
              .emphasized(false)
              .exploitationRequirement(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.builder()
                  .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                  .amplification("AMPLIFICATION")
                  .dissemination("EMAILS")
                  .eei("ESSENTIAL_ELEMENTS")
                  .poc(IsrCollectionCreateBulkParams.Body.CollectionRequirement.ExploitationRequirement.Poc.builder()
                      .id("ISRCOLLECTIONPOC-ID")
                      .callsign("CALLSIGN")
                      .chatName("CHAT_NAME")
                      .chatSystem("CHAT")
                      .email("EMAIL")
                      .name("NAME")
                      .notes("NOTES")
                      .phone("PHONE")
                      .radioFrequency(123.23)
                      .unit("UNIT")
                      .build())
                  .reportingCriteria("CRITERIA")
                  .build())
              .hash("HASH")
              .intelDiscipline("Sig")
              .isPrismCr(true)
              .operation("NAME")
              .priority(20.23)
              .reconSurvey("SURVEY_INFO")
              .recordId("RECORD-ID")
              .region("REGION")
              .secondary(false)
              .specialComGuidance("TEXT")
              .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
              .subregion("SUBREGION")
              .supportedUnit("UNIT")
              .addTargetList("string")
              .type("COLLECTION_TYPE")
              .build())
          .createdAt(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
          .createdBy("some.user")
          .idexVersion(2)
          .missionAor("Kandahar")
          .missionCollectionArea("Example collection area")
          .missionCountry("US")
          .missionEmphasis("Mission emphasis")
          .missionId("myTask-2020-04-23T00:00:00.000Z")
          .missionJoa("Operation area")
          .missionOperation("OP-HONEY-BADGER")
          .missionPrimaryIntelDiscipline("Sig")
          .missionPrimarySubCategory("FMV")
          .missionPriority(1)
          .missionRegion("Example Region")
          .missionRole("Targeting of Lead Vehicle")
          .missionSecondaryIntelDiscipline("Intelligence_2")
          .missionSecondarySubCategory("Convoy")
          .missionStartPointLat(45.23)
          .missionStartPointLong(80.23)
          .missionSubRegion("Example Subregion")
          .missionSupportedUnit("ENVOYS")
          .missionSyncMatrixBin("MATRIX")
          .name("Example mission name")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .addTasking(IsrCollectionCreateBulkParams.Body.Tasking.builder()
              .id("ISRCOLLECTIONTASKINGS-ID")
              .collectionPeriods(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.builder()
                  .addActual(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Actual.builder()
                      .id("ISRCOLLECTIONACTUAL-ID")
                      .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .build())
                  .planned(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.builder()
                      .addAdditional(IsrCollectionCreateBulkParams.Body.Tasking.CollectionPeriods.Planned.Additional.builder()
                          .id("ISRCOLLECTIONADDITIONAL")
                          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                          .build())
                      .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .build())
                  .build())
              .collectionType(IsrCollectionCreateBulkParams.Body.Tasking.CollectionType.SIMULTANEOUS)
              .eightLine("eightLine")
              .specialComGuidance("TEXT")
              .sroTrack("SRO")
              .taskingAor("Kandahar")
              .taskingCollectionArea("AREA")
              .addTaskingCollectionRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.builder()
                  .id("ISCRCOLLECTIONREQUIREMENTS")
                  .country("VE")
                  .cridNumbers("CRID")
                  .criticalTimes(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.CriticalTimes.builder()
                      .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                      .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                      .build())
                  .emphasized(false)
                  .exploitationRequirement(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.builder()
                      .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                      .amplification("AMPLIFICATION")
                      .dissemination("EMAILS")
                      .eei("ESSENTIAL_ELEMENTS")
                      .poc(IsrCollectionCreateBulkParams.Body.Tasking.TaskingCollectionRequirement.ExploitationRequirement.Poc.builder()
                          .id("ISRCOLLECTIONPOC-ID")
                          .callsign("CALLSIGN")
                          .chatName("CHAT_NAME")
                          .chatSystem("CHAT")
                          .email("EMAIL")
                          .name("NAME")
                          .notes("NOTES")
                          .phone("PHONE")
                          .radioFrequency(123.23)
                          .unit("UNIT")
                          .build())
                      .reportingCriteria("CRITERIA")
                      .build())
                  .hash("HASH")
                  .intelDiscipline("Sig")
                  .isPrismCr(true)
                  .operation("NAME")
                  .priority(20.23)
                  .reconSurvey("SURVEY_INFO")
                  .recordId("RECORD-ID")
                  .region("REGION")
                  .secondary(false)
                  .specialComGuidance("TEXT")
                  .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                  .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                  .subregion("SUBREGION")
                  .supportedUnit("UNIT")
                  .addTargetList("string")
                  .type("COLLECTION_TYPE")
                  .build())
              .taskingCountry("CODE")
              .taskingEmphasis("EMPHASIS")
              .taskingJoa("AREA")
              .taskingOperation("OP-HONEY-BADGER")
              .taskingPrimaryIntelDiscipline("Sig")
              .taskingPrimarySubCategory("FMV")
              .taskingPriority(10.23)
              .taskingRegion("REGION")
              .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .taskingRole("Track Lead Vehicle")
              .taskingSecondaryIntelDiscipline("Intelligence_2")
              .taskingSecondarySubCategory("Convoy")
              .taskingStartPointLat(45.23)
              .taskingStartPointLong(45.23)
              .taskingSubRegion("SUBREGION")
              .taskingSupportedUnit("ENVOYS")
              .taskingSyncMatrixBin("MATRIX")
              .type(IsrCollectionCreateBulkParams.Body.Tasking.Type.DELIBERATE)
              .build())
          .addTransit(IsrCollectionCreateBulkParams.Body.Transit.builder()
              .id("ISRCOLLECTIONTRANSIT-ID")
              .base("ENVOYS")
              .duration(200.23)
              .build())
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
    }

    @Test
    fun bodyWithoutOptionalFields() {
      val params = IsrCollectionCreateBulkParams.builder()
          .addBody(IsrCollectionCreateBulkParams.Body.builder()
              .classificationMarking("U")
              .dataMode(IsrCollectionCreateBulkParams.Body.DataMode.TEST)
              .source("Bluestaq")
              .build())
          .build()

      val body = params._body()

      assertThat(body).containsExactly(IsrCollectionCreateBulkParams.Body.builder()
          .classificationMarking("U")
          .dataMode(IsrCollectionCreateBulkParams.Body.DataMode.TEST)
          .source("Bluestaq")
          .build())
    }
}
