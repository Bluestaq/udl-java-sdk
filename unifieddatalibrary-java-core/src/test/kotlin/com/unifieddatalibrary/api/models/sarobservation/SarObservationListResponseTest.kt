// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sarobservation

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.sarobservation.SarObservationListResponse
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SarObservationListResponseTest {

    @Test
    fun create() {
      val sarObservationListResponse = SarObservationListResponse.builder()
          .classificationMarking("U")
          .collectionEnd(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
          .collectionStart(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
          .dataMode(SarObservationListResponse.DataMode.TEST)
          .sarMode("SPOTLIGHT")
          .source("Bluestaq")
          .id("SAROBSERVATION-ID")
          .agjson("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
          .andims(3)
          .asrid(3)
          .atext("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .atype("POLYGON")
          .azimuthAngle(285.4481793)
          .centerTime(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
          .collectionId("COLLECTION-ID")
          .continuousSpotAngle(45.1)
          .coordSys("ECEF")
          .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
          .createdBy("some.user")
          .detectionEnd(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
          .detectionId("DETECTION-ID")
          .detectionStart(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
          .dwellTime(79.156794)
          .externalId("EXTERNAL-ID")
          .farRange(34.1)
          .grazeAngle(45.1)
          .groundResolutionProjection(0.5)
          .idOnOrbit("36036")
          .idSensor("36036-1L")
          .incidenceAngle(45.1)
          .looksAzimuth(2)
          .looksRange(1)
          .multilookNumber(5.0)
          .nearRange(12.1)
          .obDirection("RIGHT")
          .operatingBand("L")
          .operatingFreq(2345.6)
          .orbitState("ASCENDING")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .origObjectId("36036")
          .origSensorId("SMOS-1L")
          .pulseBandwidth(500.1)
          .pulseDuration(0.000011)
          .resolutionAzimuth(0.123)
          .resolutionRange(0.123)
          .rxPolarization("H")
          .satNo(36036)
          .senalt(1.1)
          .senlatEnd(45.1)
          .senlatStart(45.1)
          .senlonEnd(179.1)
          .senlonStart(179.1)
          .senvelx(1.1)
          .senvely(1.1)
          .senvelz(1.1)
          .slantRange(60.1)
          .snr(10.1)
          .sourceDl("AXE")
          .spacingAzimuth(0.123)
          .spacingRange(0.123)
          .squintAngle(1.2)
          .addSrcId("f7e01cd4-626b-441f-a423-17b160eb78ba")
          .addSrcId("223833c4-be0d-4fdb-a2e4-325a48eccced")
          .addSrcTyp("ESID")
          .addSrcTyp("GROUNDIMAGE")
          .swathLength(12.1)
          .targetposx(50.23)
          .targetposy(50.23)
          .targetposz(50.23)
          .transactionId("TRANSACTION-ID")
          .txPolarization("H")
          .build()

      assertThat(sarObservationListResponse.classificationMarking()).isEqualTo("U")
      assertThat(sarObservationListResponse.collectionEnd()).isEqualTo(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
      assertThat(sarObservationListResponse.collectionStart()).isEqualTo(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
      assertThat(sarObservationListResponse.dataMode()).isEqualTo(SarObservationListResponse.DataMode.TEST)
      assertThat(sarObservationListResponse.sarMode()).isEqualTo("SPOTLIGHT")
      assertThat(sarObservationListResponse.source()).isEqualTo("Bluestaq")
      assertThat(sarObservationListResponse.id()).contains("SAROBSERVATION-ID")
      assertThat(sarObservationListResponse.agjson()).contains("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
      assertThat(sarObservationListResponse.andims()).contains(3)
      assertThat(sarObservationListResponse.asrid()).contains(3)
      assertThat(sarObservationListResponse.atext()).contains("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
      assertThat(sarObservationListResponse.atype()).contains("POLYGON")
      assertThat(sarObservationListResponse.azimuthAngle()).contains(285.4481793)
      assertThat(sarObservationListResponse.centerTime()).contains(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
      assertThat(sarObservationListResponse.collectionId()).contains("COLLECTION-ID")
      assertThat(sarObservationListResponse.continuousSpotAngle()).contains(45.1)
      assertThat(sarObservationListResponse.coordSys()).contains("ECEF")
      assertThat(sarObservationListResponse.createdAt()).contains(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
      assertThat(sarObservationListResponse.createdBy()).contains("some.user")
      assertThat(sarObservationListResponse.detectionEnd()).contains(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
      assertThat(sarObservationListResponse.detectionId()).contains("DETECTION-ID")
      assertThat(sarObservationListResponse.detectionStart()).contains(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
      assertThat(sarObservationListResponse.dwellTime()).contains(79.156794)
      assertThat(sarObservationListResponse.externalId()).contains("EXTERNAL-ID")
      assertThat(sarObservationListResponse.farRange()).contains(34.1)
      assertThat(sarObservationListResponse.grazeAngle()).contains(45.1)
      assertThat(sarObservationListResponse.groundResolutionProjection()).contains(0.5)
      assertThat(sarObservationListResponse.idOnOrbit()).contains("36036")
      assertThat(sarObservationListResponse.idSensor()).contains("36036-1L")
      assertThat(sarObservationListResponse.incidenceAngle()).contains(45.1)
      assertThat(sarObservationListResponse.looksAzimuth()).contains(2)
      assertThat(sarObservationListResponse.looksRange()).contains(1)
      assertThat(sarObservationListResponse.multilookNumber()).contains(5.0)
      assertThat(sarObservationListResponse.nearRange()).contains(12.1)
      assertThat(sarObservationListResponse.obDirection()).contains("RIGHT")
      assertThat(sarObservationListResponse.operatingBand()).contains("L")
      assertThat(sarObservationListResponse.operatingFreq()).contains(2345.6)
      assertThat(sarObservationListResponse.orbitState()).contains("ASCENDING")
      assertThat(sarObservationListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(sarObservationListResponse.origNetwork()).contains("OPS1")
      assertThat(sarObservationListResponse.origObjectId()).contains("36036")
      assertThat(sarObservationListResponse.origSensorId()).contains("SMOS-1L")
      assertThat(sarObservationListResponse.pulseBandwidth()).contains(500.1)
      assertThat(sarObservationListResponse.pulseDuration()).contains(0.000011)
      assertThat(sarObservationListResponse.resolutionAzimuth()).contains(0.123)
      assertThat(sarObservationListResponse.resolutionRange()).contains(0.123)
      assertThat(sarObservationListResponse.rxPolarization()).contains("H")
      assertThat(sarObservationListResponse.satNo()).contains(36036)
      assertThat(sarObservationListResponse.senalt()).contains(1.1)
      assertThat(sarObservationListResponse.senlatEnd()).contains(45.1)
      assertThat(sarObservationListResponse.senlatStart()).contains(45.1)
      assertThat(sarObservationListResponse.senlonEnd()).contains(179.1)
      assertThat(sarObservationListResponse.senlonStart()).contains(179.1)
      assertThat(sarObservationListResponse.senvelx()).contains(1.1)
      assertThat(sarObservationListResponse.senvely()).contains(1.1)
      assertThat(sarObservationListResponse.senvelz()).contains(1.1)
      assertThat(sarObservationListResponse.slantRange()).contains(60.1)
      assertThat(sarObservationListResponse.snr()).contains(10.1)
      assertThat(sarObservationListResponse.sourceDl()).contains("AXE")
      assertThat(sarObservationListResponse.spacingAzimuth()).contains(0.123)
      assertThat(sarObservationListResponse.spacingRange()).contains(0.123)
      assertThat(sarObservationListResponse.squintAngle()).contains(1.2)
      assertThat(sarObservationListResponse.srcIds().getOrNull()).containsExactly("f7e01cd4-626b-441f-a423-17b160eb78ba", "223833c4-be0d-4fdb-a2e4-325a48eccced")
      assertThat(sarObservationListResponse.srcTyps().getOrNull()).containsExactly("ESID", "GROUNDIMAGE")
      assertThat(sarObservationListResponse.swathLength()).contains(12.1)
      assertThat(sarObservationListResponse.targetposx()).contains(50.23)
      assertThat(sarObservationListResponse.targetposy()).contains(50.23)
      assertThat(sarObservationListResponse.targetposz()).contains(50.23)
      assertThat(sarObservationListResponse.transactionId()).contains("TRANSACTION-ID")
      assertThat(sarObservationListResponse.txPolarization()).contains("H")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val sarObservationListResponse = SarObservationListResponse.builder()
          .classificationMarking("U")
          .collectionEnd(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
          .collectionStart(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
          .dataMode(SarObservationListResponse.DataMode.TEST)
          .sarMode("SPOTLIGHT")
          .source("Bluestaq")
          .id("SAROBSERVATION-ID")
          .agjson("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
          .andims(3)
          .asrid(3)
          .atext("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .atype("POLYGON")
          .azimuthAngle(285.4481793)
          .centerTime(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
          .collectionId("COLLECTION-ID")
          .continuousSpotAngle(45.1)
          .coordSys("ECEF")
          .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
          .createdBy("some.user")
          .detectionEnd(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
          .detectionId("DETECTION-ID")
          .detectionStart(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
          .dwellTime(79.156794)
          .externalId("EXTERNAL-ID")
          .farRange(34.1)
          .grazeAngle(45.1)
          .groundResolutionProjection(0.5)
          .idOnOrbit("36036")
          .idSensor("36036-1L")
          .incidenceAngle(45.1)
          .looksAzimuth(2)
          .looksRange(1)
          .multilookNumber(5.0)
          .nearRange(12.1)
          .obDirection("RIGHT")
          .operatingBand("L")
          .operatingFreq(2345.6)
          .orbitState("ASCENDING")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .origObjectId("36036")
          .origSensorId("SMOS-1L")
          .pulseBandwidth(500.1)
          .pulseDuration(0.000011)
          .resolutionAzimuth(0.123)
          .resolutionRange(0.123)
          .rxPolarization("H")
          .satNo(36036)
          .senalt(1.1)
          .senlatEnd(45.1)
          .senlatStart(45.1)
          .senlonEnd(179.1)
          .senlonStart(179.1)
          .senvelx(1.1)
          .senvely(1.1)
          .senvelz(1.1)
          .slantRange(60.1)
          .snr(10.1)
          .sourceDl("AXE")
          .spacingAzimuth(0.123)
          .spacingRange(0.123)
          .squintAngle(1.2)
          .addSrcId("f7e01cd4-626b-441f-a423-17b160eb78ba")
          .addSrcId("223833c4-be0d-4fdb-a2e4-325a48eccced")
          .addSrcTyp("ESID")
          .addSrcTyp("GROUNDIMAGE")
          .swathLength(12.1)
          .targetposx(50.23)
          .targetposy(50.23)
          .targetposz(50.23)
          .transactionId("TRANSACTION-ID")
          .txPolarization("H")
          .build()

      val roundtrippedSarObservationListResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(sarObservationListResponse), jacksonTypeRef<SarObservationListResponse>())

      assertThat(roundtrippedSarObservationListResponse).isEqualTo(sarObservationListResponse)
    }
}
