// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.equipment

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EquipmentAbridgedTest {

    @Test
    fun create() {
        val equipmentAbridged =
            EquipmentAbridged.builder()
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentAbridged.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altEqpId("ORIG-EQP-ID")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eqpCode("X12345")
                .eqpIdNum("001")
                .eval(7)
                .fpa("NOB")
                .function("OCC")
                .functPrimary("JG")
                .geoidalMslSep(12.34)
                .ident("FRIEND")
                .idOperatingUnit("UNIT-ID")
                .idParentEquipment("PARENT-EQUIPMENT-ID")
                .idSite("SITE-ID")
                .locReason("GR")
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .nomen("AMPHIBIOUS WARFARE SHIP")
                .operAreaPrimary("Territorial Sea")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .qtyOh(7)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .seqNum(5)
                .addSrcId("SRC_ID_1")
                .addSrcTyp("AIRCRAFT")
                .symCode("SOGPU----------")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        assertThat(equipmentAbridged.classificationMarking()).isEqualTo("U")
        assertThat(equipmentAbridged.countryCode()).isEqualTo("IQ")
        assertThat(equipmentAbridged.dataMode()).isEqualTo(EquipmentAbridged.DataMode.TEST)
        assertThat(equipmentAbridged.lat()).isEqualTo(39.019242)
        assertThat(equipmentAbridged.lon()).isEqualTo(-104.251659)
        assertThat(equipmentAbridged.source()).isEqualTo("Bluestaq")
        assertThat(equipmentAbridged.id()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(equipmentAbridged.airDefArea()).contains("AL006")
        assertThat(equipmentAbridged.allegiance()).contains("OTHR")
        assertThat(equipmentAbridged.altAllegiance()).contains("HL")
        assertThat(equipmentAbridged.altCountryCode()).contains("IZ")
        assertThat(equipmentAbridged.altEqpId()).contains("ORIG-EQP-ID")
        assertThat(equipmentAbridged.classRating()).contains("1")
        assertThat(equipmentAbridged.condition()).contains("RDY")
        assertThat(equipmentAbridged.conditionAvail()).contains("A")
        assertThat(equipmentAbridged.coord()).contains("340000000N0430000000E")
        assertThat(equipmentAbridged.coordDatum()).contains("WGS")
        assertThat(equipmentAbridged.coordDerivAcc()).contains(12.345)
        assertThat(equipmentAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(equipmentAbridged.createdBy()).contains("some.user")
        assertThat(equipmentAbridged.elevMsl()).contains(123.45)
        assertThat(equipmentAbridged.elevMslConfLvl()).contains(50)
        assertThat(equipmentAbridged.elevMslDerivAcc()).contains(12.34)
        assertThat(equipmentAbridged.eqpCode()).contains("X12345")
        assertThat(equipmentAbridged.eqpIdNum()).contains("001")
        assertThat(equipmentAbridged.eval()).contains(7)
        assertThat(equipmentAbridged.fpa()).contains("NOB")
        assertThat(equipmentAbridged.function()).contains("OCC")
        assertThat(equipmentAbridged.functPrimary()).contains("JG")
        assertThat(equipmentAbridged.geoidalMslSep()).contains(12.34)
        assertThat(equipmentAbridged.ident()).contains("FRIEND")
        assertThat(equipmentAbridged.idOperatingUnit()).contains("UNIT-ID")
        assertThat(equipmentAbridged.idParentEquipment()).contains("PARENT-EQUIPMENT-ID")
        assertThat(equipmentAbridged.idSite()).contains("SITE-ID")
        assertThat(equipmentAbridged.locReason()).contains("GR")
        assertThat(equipmentAbridged.milGrid()).contains("4QFJ12345678")
        assertThat(equipmentAbridged.milGridSys()).contains("UTM")
        assertThat(equipmentAbridged.nomen()).contains("AMPHIBIOUS WARFARE SHIP")
        assertThat(equipmentAbridged.operAreaPrimary()).contains("Territorial Sea")
        assertThat(equipmentAbridged.operStatus()).contains("OPR")
        assertThat(equipmentAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(equipmentAbridged.polSubdiv()).contains("IZ07")
        assertThat(equipmentAbridged.qtyOh()).contains(7)
        assertThat(equipmentAbridged.recStatus()).contains("A")
        assertThat(equipmentAbridged.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(equipmentAbridged.resProd()).contains("RT")
        assertThat(equipmentAbridged.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(equipmentAbridged.seqNum()).contains(5)
        assertThat(equipmentAbridged.srcIds().getOrNull()).containsExactly("SRC_ID_1")
        assertThat(equipmentAbridged.srcTyps().getOrNull()).containsExactly("AIRCRAFT")
        assertThat(equipmentAbridged.symCode()).contains("SOGPU----------")
        assertThat(equipmentAbridged.utm()).contains("19P4390691376966")
        assertThat(equipmentAbridged.wac()).contains("0427")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val equipmentAbridged =
            EquipmentAbridged.builder()
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentAbridged.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altEqpId("ORIG-EQP-ID")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eqpCode("X12345")
                .eqpIdNum("001")
                .eval(7)
                .fpa("NOB")
                .function("OCC")
                .functPrimary("JG")
                .geoidalMslSep(12.34)
                .ident("FRIEND")
                .idOperatingUnit("UNIT-ID")
                .idParentEquipment("PARENT-EQUIPMENT-ID")
                .idSite("SITE-ID")
                .locReason("GR")
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .nomen("AMPHIBIOUS WARFARE SHIP")
                .operAreaPrimary("Territorial Sea")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .qtyOh(7)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .seqNum(5)
                .addSrcId("SRC_ID_1")
                .addSrcTyp("AIRCRAFT")
                .symCode("SOGPU----------")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val roundtrippedEquipmentAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(equipmentAbridged),
                jacksonTypeRef<EquipmentAbridged>(),
            )

        assertThat(roundtrippedEquipmentAbridged).isEqualTo(equipmentAbridged)
    }
}
