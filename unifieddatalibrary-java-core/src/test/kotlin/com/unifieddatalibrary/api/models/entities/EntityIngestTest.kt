// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.entities

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EntityIngestTest {

    @Test
    fun create() {
        val entityIngest =
            EntityIngest.builder()
                .classificationMarking("U")
                .dataMode(EntityIngest.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .type(EntityIngest.Type.ONORBIT)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idEntity("ENTITY-ID")
                .idLocation("LOCATION-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .location(
                    LocationIngest.builder()
                        .classificationMarking("U")
                        .dataMode(LocationIngest.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .onOrbit(
                    EntityIngest.OnOrbit.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                        .satNo(1)
                        .source("Bluestaq")
                        .altName("Alternate Name")
                        .category(EntityIngest.OnOrbit.Category.LUNAR)
                        .commonName("Example common name")
                        .constellation("Big Dipper")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .idOnOrbit("ONORBIT-ID")
                        .intlDes("2021123ABC")
                        .launchDate(LocalDate.parse("2018-01-01"))
                        .launchSiteId("LAUNCHSITE-ID")
                        .lifetimeYears(10)
                        .missionNumber("Expedition 1")
                        .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                .taskable(false)
                .addUrl("URL1")
                .addUrl("URL2")
                .build()

        assertThat(entityIngest.classificationMarking()).isEqualTo("U")
        assertThat(entityIngest.dataMode()).isEqualTo(EntityIngest.DataMode.TEST)
        assertThat(entityIngest.name()).isEqualTo("Example name")
        assertThat(entityIngest.source()).isEqualTo("Bluestaq")
        assertThat(entityIngest.type()).isEqualTo(EntityIngest.Type.ONORBIT)
        assertThat(entityIngest.countryCode()).contains("US")
        assertThat(entityIngest.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(entityIngest.createdBy()).contains("some.user")
        assertThat(entityIngest.idEntity()).contains("ENTITY-ID")
        assertThat(entityIngest.idLocation()).contains("LOCATION-ID")
        assertThat(entityIngest.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(entityIngest.idOperatingUnit()).contains("OPERATINGUNIT-ID")
        assertThat(entityIngest.location())
            .contains(
                LocationIngest.builder()
                    .classificationMarking("U")
                    .dataMode(LocationIngest.DataMode.TEST)
                    .name("Example location")
                    .source("Bluestaq")
                    .altitude(10.23)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idLocation("LOCATION-ID")
                    .lat(45.23)
                    .lon(179.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .build()
            )
        assertThat(entityIngest.onOrbit())
            .contains(
                EntityIngest.OnOrbit.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                    .satNo(1)
                    .source("Bluestaq")
                    .altName("Alternate Name")
                    .category(EntityIngest.OnOrbit.Category.LUNAR)
                    .commonName("Example common name")
                    .constellation("Big Dipper")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .idOnOrbit("ONORBIT-ID")
                    .intlDes("2021123ABC")
                    .launchDate(LocalDate.parse("2018-01-01"))
                    .launchSiteId("LAUNCHSITE-ID")
                    .lifetimeYears(10)
                    .missionNumber("Expedition 1")
                    .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .build()
            )
        assertThat(entityIngest.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(entityIngest.origNetwork()).contains("OPS1")
        assertThat(entityIngest.ownerType()).contains(EntityIngest.OwnerType.COMMERCIAL)
        assertThat(entityIngest.taskable()).contains(false)
        assertThat(entityIngest.urls().getOrNull()).containsExactly("URL1", "URL2")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val entityIngest =
            EntityIngest.builder()
                .classificationMarking("U")
                .dataMode(EntityIngest.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .type(EntityIngest.Type.ONORBIT)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idEntity("ENTITY-ID")
                .idLocation("LOCATION-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .location(
                    LocationIngest.builder()
                        .classificationMarking("U")
                        .dataMode(LocationIngest.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .onOrbit(
                    EntityIngest.OnOrbit.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                        .satNo(1)
                        .source("Bluestaq")
                        .altName("Alternate Name")
                        .category(EntityIngest.OnOrbit.Category.LUNAR)
                        .commonName("Example common name")
                        .constellation("Big Dipper")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .idOnOrbit("ONORBIT-ID")
                        .intlDes("2021123ABC")
                        .launchDate(LocalDate.parse("2018-01-01"))
                        .launchSiteId("LAUNCHSITE-ID")
                        .lifetimeYears(10)
                        .missionNumber("Expedition 1")
                        .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                .taskable(false)
                .addUrl("URL1")
                .addUrl("URL2")
                .build()

        val roundtrippedEntityIngest =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(entityIngest),
                jacksonTypeRef<EntityIngest>(),
            )

        assertThat(roundtrippedEntityIngest).isEqualTo(entityIngest)
    }
}
