// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.emireport

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EmireportCreateParamsTest {

    @Test
    fun create() {
        EmireportCreateParams.builder()
            .classificationMarking("U")
            .dataMode(EmireportCreateParams.DataMode.TEST)
            .isr(true)
            .reportId("REPORT-ID")
            .reportTime(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
            .reportType("SATCOM")
            .requestAssist(true)
            .source("Bluestaq")
            .startTime(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
            .id("026dd511-8ba5-47d3-9909-836149f87686")
            .actionsTaken("verified connections, cables and antenna pointing angles")
            .affActivity("UPLINK")
            .alt(1750.0)
            .aor("NORTHCOM")
            .band("SHF")
            .beamPattern("MAIN LOBE")
            .channel("10C-10CU")
            .chanPirate(false)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .description("Interference on channel")
            .dneImpact("Text description of the duration, nature and extent (DNE) of the impact.")
            .emiType("BARRAGE")
            .endTime(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
            .frequency(1575.42)
            .geoLocErrEllp(listOf(1300.0, 700.0, 35.0))
            .gpsEncrypted(false)
            .gpsFreq("L1")
            .highAffectedFrequency(1725.0)
            .idOnOrbit("25724")
            .intercept(false)
            .interceptLang("ENGLISH")
            .interceptType("VOICE")
            .intSrcAmplitude(0.275)
            .intSrcBandwidth(30.0)
            .intSrcCentFreq(485.7)
            .intSrcEncrypted(false)
            .intSrcModulation("FSK")
            .isrCollectionImpact(false)
            .killBox("7F9SW")
            .lat(38.7375)
            .link("SPOT-21")
            .lon(-104.7889)
            .milGrid("4QFJ12345678")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origObjectId("25724")
            .persistence("CONTINUOUS")
            .platform("CVN-78")
            .rcvrDemod("FSK")
            .rcvrGain(23.7)
            .rcvrLocation("FORT CARSON GARAGE")
            .rcvrType("OMNI")
            .respService("ARMY")
            .satcomPriority("HIGH")
            .satDownlinkFrequency(47432.5)
            .satDownlinkPolarization("V")
            .satName("MILSTAR DFS-3")
            .satNo(25724)
            .satTransponderId("36097-8433-10C")
            .satUplinkFrequency(44532.1)
            .satUplinkPolarization("H")
            .sourceDl("AXE")
            .status("INITIAL")
            .supportedIsrRole("IMAGERY")
            .system("RADIO")
            .addTag("TAG1")
            .addTag("TAG2")
            .transactionId("TRANSACTION-ID")
            .victimAltCountry("US")
            .victimCountryCode("US")
            .victimFuncImpacts("C2")
            .victimPocMail("bob@jammer.com")
            .victimPocName("Robert Smith")
            .victimPocPhone("7198675309")
            .victimPocUnit("4th Engineering Battalion")
            .victimReaction("TROUBLESHOOT")
            .build()
    }

    @Test
    fun body() {
        val params =
            EmireportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EmireportCreateParams.DataMode.TEST)
                .isr(true)
                .reportId("REPORT-ID")
                .reportTime(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
                .reportType("SATCOM")
                .requestAssist(true)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .actionsTaken("verified connections, cables and antenna pointing angles")
                .affActivity("UPLINK")
                .alt(1750.0)
                .aor("NORTHCOM")
                .band("SHF")
                .beamPattern("MAIN LOBE")
                .channel("10C-10CU")
                .chanPirate(false)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Interference on channel")
                .dneImpact(
                    "Text description of the duration, nature and extent (DNE) of the impact."
                )
                .emiType("BARRAGE")
                .endTime(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
                .frequency(1575.42)
                .geoLocErrEllp(listOf(1300.0, 700.0, 35.0))
                .gpsEncrypted(false)
                .gpsFreq("L1")
                .highAffectedFrequency(1725.0)
                .idOnOrbit("25724")
                .intercept(false)
                .interceptLang("ENGLISH")
                .interceptType("VOICE")
                .intSrcAmplitude(0.275)
                .intSrcBandwidth(30.0)
                .intSrcCentFreq(485.7)
                .intSrcEncrypted(false)
                .intSrcModulation("FSK")
                .isrCollectionImpact(false)
                .killBox("7F9SW")
                .lat(38.7375)
                .link("SPOT-21")
                .lon(-104.7889)
                .milGrid("4QFJ12345678")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("25724")
                .persistence("CONTINUOUS")
                .platform("CVN-78")
                .rcvrDemod("FSK")
                .rcvrGain(23.7)
                .rcvrLocation("FORT CARSON GARAGE")
                .rcvrType("OMNI")
                .respService("ARMY")
                .satcomPriority("HIGH")
                .satDownlinkFrequency(47432.5)
                .satDownlinkPolarization("V")
                .satName("MILSTAR DFS-3")
                .satNo(25724)
                .satTransponderId("36097-8433-10C")
                .satUplinkFrequency(44532.1)
                .satUplinkPolarization("H")
                .sourceDl("AXE")
                .status("INITIAL")
                .supportedIsrRole("IMAGERY")
                .system("RADIO")
                .addTag("TAG1")
                .addTag("TAG2")
                .transactionId("TRANSACTION-ID")
                .victimAltCountry("US")
                .victimCountryCode("US")
                .victimFuncImpacts("C2")
                .victimPocMail("bob@jammer.com")
                .victimPocName("Robert Smith")
                .victimPocPhone("7198675309")
                .victimPocUnit("4th Engineering Battalion")
                .victimReaction("TROUBLESHOOT")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EmireportCreateParams.DataMode.TEST)
        assertThat(body.isr()).isEqualTo(true)
        assertThat(body.reportId()).isEqualTo("REPORT-ID")
        assertThat(body.reportTime()).isEqualTo(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
        assertThat(body.reportType()).isEqualTo("SATCOM")
        assertThat(body.requestAssist()).isEqualTo(true)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
        assertThat(body.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(body.actionsTaken())
            .contains("verified connections, cables and antenna pointing angles")
        assertThat(body.affActivity()).contains("UPLINK")
        assertThat(body.alt()).contains(1750.0)
        assertThat(body.aor()).contains("NORTHCOM")
        assertThat(body.band()).contains("SHF")
        assertThat(body.beamPattern()).contains("MAIN LOBE")
        assertThat(body.channel()).contains("10C-10CU")
        assertThat(body.chanPirate()).contains(false)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.description()).contains("Interference on channel")
        assertThat(body.dneImpact())
            .contains("Text description of the duration, nature and extent (DNE) of the impact.")
        assertThat(body.emiType()).contains("BARRAGE")
        assertThat(body.endTime()).contains(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
        assertThat(body.frequency()).contains(1575.42)
        assertThat(body.geoLocErrEllp().getOrNull()).containsExactly(1300.0, 700.0, 35.0)
        assertThat(body.gpsEncrypted()).contains(false)
        assertThat(body.gpsFreq()).contains("L1")
        assertThat(body.highAffectedFrequency()).contains(1725.0)
        assertThat(body.idOnOrbit()).contains("25724")
        assertThat(body.intercept()).contains(false)
        assertThat(body.interceptLang()).contains("ENGLISH")
        assertThat(body.interceptType()).contains("VOICE")
        assertThat(body.intSrcAmplitude()).contains(0.275)
        assertThat(body.intSrcBandwidth()).contains(30.0)
        assertThat(body.intSrcCentFreq()).contains(485.7)
        assertThat(body.intSrcEncrypted()).contains(false)
        assertThat(body.intSrcModulation()).contains("FSK")
        assertThat(body.isrCollectionImpact()).contains(false)
        assertThat(body.killBox()).contains("7F9SW")
        assertThat(body.lat()).contains(38.7375)
        assertThat(body.link()).contains("SPOT-21")
        assertThat(body.lon()).contains(-104.7889)
        assertThat(body.milGrid()).contains("4QFJ12345678")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("25724")
        assertThat(body.persistence()).contains("CONTINUOUS")
        assertThat(body.platform()).contains("CVN-78")
        assertThat(body.rcvrDemod()).contains("FSK")
        assertThat(body.rcvrGain()).contains(23.7)
        assertThat(body.rcvrLocation()).contains("FORT CARSON GARAGE")
        assertThat(body.rcvrType()).contains("OMNI")
        assertThat(body.respService()).contains("ARMY")
        assertThat(body.satcomPriority()).contains("HIGH")
        assertThat(body.satDownlinkFrequency()).contains(47432.5)
        assertThat(body.satDownlinkPolarization()).contains("V")
        assertThat(body.satName()).contains("MILSTAR DFS-3")
        assertThat(body.satNo()).contains(25724)
        assertThat(body.satTransponderId()).contains("36097-8433-10C")
        assertThat(body.satUplinkFrequency()).contains(44532.1)
        assertThat(body.satUplinkPolarization()).contains("H")
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.status()).contains("INITIAL")
        assertThat(body.supportedIsrRole()).contains("IMAGERY")
        assertThat(body.system()).contains("RADIO")
        assertThat(body.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.victimAltCountry()).contains("US")
        assertThat(body.victimCountryCode()).contains("US")
        assertThat(body.victimFuncImpacts()).contains("C2")
        assertThat(body.victimPocMail()).contains("bob@jammer.com")
        assertThat(body.victimPocName()).contains("Robert Smith")
        assertThat(body.victimPocPhone()).contains("7198675309")
        assertThat(body.victimPocUnit()).contains("4th Engineering Battalion")
        assertThat(body.victimReaction()).contains("TROUBLESHOOT")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EmireportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EmireportCreateParams.DataMode.TEST)
                .isr(true)
                .reportId("REPORT-ID")
                .reportTime(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
                .reportType("SATCOM")
                .requestAssist(true)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EmireportCreateParams.DataMode.TEST)
        assertThat(body.isr()).isEqualTo(true)
        assertThat(body.reportId()).isEqualTo("REPORT-ID")
        assertThat(body.reportTime()).isEqualTo(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
        assertThat(body.reportType()).isEqualTo("SATCOM")
        assertThat(body.requestAssist()).isEqualTo(true)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
    }
}
