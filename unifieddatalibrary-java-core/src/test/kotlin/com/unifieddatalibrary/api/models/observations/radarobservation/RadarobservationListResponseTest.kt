// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.radarobservation

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RadarobservationListResponseTest {

    @Test
    fun create() {
        val radarobservationListResponse =
            RadarobservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(RadarobservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("RADAROBSERVATION-ID")
                .azimuth(45.23)
                .azimuthBias(45.23)
                .azimuthMeasured(true)
                .azimuthRate(1.23)
                .azimuthUnc(45.23)
                .beam(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .declinationMeasured(true)
                .descriptor("descriptor")
                .doppler(10.23)
                .dopplerUnc(1.23)
                .elevation(45.23)
                .elevationBias(1.23)
                .elevationMeasured(true)
                .elevationRate(1.23)
                .elevationUnc(1.23)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(1.23)
                .orthogonalRcsUnc(10.23)
                .ra(1.23)
                .raMeasured(true)
                .range(100.23)
                .rangeAccel(10.23)
                .rangeAccelUnc(1.23)
                .rangeBias(1.23)
                .rangeMeasured(true)
                .rangeRate(1.23)
                .rangeRateMeasured(true)
                .rangeRateUnc(0.5)
                .rangeUnc(1.23)
                .rawFileUri("rawFileURI")
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(1)
                .senReferenceFrame(RadarobservationListResponse.SenReferenceFrame.J2000)
                .senx(45.23)
                .seny(40.23)
                .senz(35.23)
                .snr(0.5)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .trackId("TRACK-ID")
                .trackingState("INIT ACQ")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(true)
                .x(50.23)
                .xvel(1.23)
                .y(50.23)
                .yvel(5.23)
                .z(50.23)
                .zvel(5.23)
                .build()

        assertThat(radarobservationListResponse.classificationMarking()).isEqualTo("U")
        assertThat(radarobservationListResponse.dataMode())
            .isEqualTo(RadarobservationListResponse.DataMode.TEST)
        assertThat(radarobservationListResponse.obTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(radarobservationListResponse.source()).isEqualTo("Bluestaq")
        assertThat(radarobservationListResponse.id()).contains("RADAROBSERVATION-ID")
        assertThat(radarobservationListResponse.azimuth()).contains(45.23)
        assertThat(radarobservationListResponse.azimuthBias()).contains(45.23)
        assertThat(radarobservationListResponse.azimuthMeasured()).contains(true)
        assertThat(radarobservationListResponse.azimuthRate()).contains(1.23)
        assertThat(radarobservationListResponse.azimuthUnc()).contains(45.23)
        assertThat(radarobservationListResponse.beam()).contains(1.23)
        assertThat(radarobservationListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(radarobservationListResponse.createdBy()).contains("some.user")
        assertThat(radarobservationListResponse.declination()).contains(10.23)
        assertThat(radarobservationListResponse.declinationMeasured()).contains(true)
        assertThat(radarobservationListResponse.descriptor()).contains("descriptor")
        assertThat(radarobservationListResponse.doppler()).contains(10.23)
        assertThat(radarobservationListResponse.dopplerUnc()).contains(1.23)
        assertThat(radarobservationListResponse.elevation()).contains(45.23)
        assertThat(radarobservationListResponse.elevationBias()).contains(1.23)
        assertThat(radarobservationListResponse.elevationMeasured()).contains(true)
        assertThat(radarobservationListResponse.elevationRate()).contains(1.23)
        assertThat(radarobservationListResponse.elevationUnc()).contains(1.23)
        assertThat(radarobservationListResponse.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(radarobservationListResponse.idSensor()).contains("SENSOR-ID")
        assertThat(radarobservationListResponse.obPosition()).contains("FIRST")
        assertThat(radarobservationListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(radarobservationListResponse.origNetwork()).contains("OPS1")
        assertThat(radarobservationListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(radarobservationListResponse.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(radarobservationListResponse.orthogonalRcs()).contains(1.23)
        assertThat(radarobservationListResponse.orthogonalRcsUnc()).contains(10.23)
        assertThat(radarobservationListResponse.ra()).contains(1.23)
        assertThat(radarobservationListResponse.raMeasured()).contains(true)
        assertThat(radarobservationListResponse.range()).contains(100.23)
        assertThat(radarobservationListResponse.rangeAccel()).contains(10.23)
        assertThat(radarobservationListResponse.rangeAccelUnc()).contains(1.23)
        assertThat(radarobservationListResponse.rangeBias()).contains(1.23)
        assertThat(radarobservationListResponse.rangeMeasured()).contains(true)
        assertThat(radarobservationListResponse.rangeRate()).contains(1.23)
        assertThat(radarobservationListResponse.rangeRateMeasured()).contains(true)
        assertThat(radarobservationListResponse.rangeRateUnc()).contains(0.5)
        assertThat(radarobservationListResponse.rangeUnc()).contains(1.23)
        assertThat(radarobservationListResponse.rawFileUri()).contains("rawFileURI")
        assertThat(radarobservationListResponse.rcs()).contains(100.23)
        assertThat(radarobservationListResponse.rcsUnc()).contains(1.23)
        assertThat(radarobservationListResponse.satNo()).contains(1)
        assertThat(radarobservationListResponse.senReferenceFrame())
            .contains(RadarobservationListResponse.SenReferenceFrame.J2000)
        assertThat(radarobservationListResponse.senx()).contains(45.23)
        assertThat(radarobservationListResponse.seny()).contains(40.23)
        assertThat(radarobservationListResponse.senz()).contains(35.23)
        assertThat(radarobservationListResponse.snr()).contains(0.5)
        assertThat(radarobservationListResponse.sourceDl()).contains("AXE")
        assertThat(radarobservationListResponse.taskId()).contains("TASK-ID")
        assertThat(radarobservationListResponse.timingBias()).contains(1.23)
        assertThat(radarobservationListResponse.trackId()).contains("TRACK-ID")
        assertThat(radarobservationListResponse.trackingState()).contains("INIT ACQ")
        assertThat(radarobservationListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(radarobservationListResponse.type()).contains("RADAR")
        assertThat(radarobservationListResponse.uct()).contains(true)
        assertThat(radarobservationListResponse.x()).contains(50.23)
        assertThat(radarobservationListResponse.xvel()).contains(1.23)
        assertThat(radarobservationListResponse.y()).contains(50.23)
        assertThat(radarobservationListResponse.yvel()).contains(5.23)
        assertThat(radarobservationListResponse.z()).contains(50.23)
        assertThat(radarobservationListResponse.zvel()).contains(5.23)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val radarobservationListResponse =
            RadarobservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(RadarobservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("RADAROBSERVATION-ID")
                .azimuth(45.23)
                .azimuthBias(45.23)
                .azimuthMeasured(true)
                .azimuthRate(1.23)
                .azimuthUnc(45.23)
                .beam(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .declinationMeasured(true)
                .descriptor("descriptor")
                .doppler(10.23)
                .dopplerUnc(1.23)
                .elevation(45.23)
                .elevationBias(1.23)
                .elevationMeasured(true)
                .elevationRate(1.23)
                .elevationUnc(1.23)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(1.23)
                .orthogonalRcsUnc(10.23)
                .ra(1.23)
                .raMeasured(true)
                .range(100.23)
                .rangeAccel(10.23)
                .rangeAccelUnc(1.23)
                .rangeBias(1.23)
                .rangeMeasured(true)
                .rangeRate(1.23)
                .rangeRateMeasured(true)
                .rangeRateUnc(0.5)
                .rangeUnc(1.23)
                .rawFileUri("rawFileURI")
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(1)
                .senReferenceFrame(RadarobservationListResponse.SenReferenceFrame.J2000)
                .senx(45.23)
                .seny(40.23)
                .senz(35.23)
                .snr(0.5)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .trackId("TRACK-ID")
                .trackingState("INIT ACQ")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(true)
                .x(50.23)
                .xvel(1.23)
                .y(50.23)
                .yvel(5.23)
                .z(50.23)
                .zvel(5.23)
                .build()

        val roundtrippedRadarobservationListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(radarobservationListResponse),
                jacksonTypeRef<RadarobservationListResponse>(),
            )

        assertThat(roundtrippedRadarobservationListResponse).isEqualTo(radarobservationListResponse)
    }
}
