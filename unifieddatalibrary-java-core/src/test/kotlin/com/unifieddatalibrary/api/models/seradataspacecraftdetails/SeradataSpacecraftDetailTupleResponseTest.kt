// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradataspacecraftdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.AntennaDetailsFull
import com.unifieddatalibrary.api.models.AntennaFull
import com.unifieddatalibrary.api.models.BatteryFull
import com.unifieddatalibrary.api.models.BatterydetailsFull
import com.unifieddatalibrary.api.models.Engine
import com.unifieddatalibrary.api.models.EngineDetailsFull
import com.unifieddatalibrary.api.models.EntityFull
import com.unifieddatalibrary.api.models.LocationFull
import com.unifieddatalibrary.api.models.OnorbitAntennaFull
import com.unifieddatalibrary.api.models.OnorbitBatteryFull
import com.unifieddatalibrary.api.models.OnorbitDetailsFull
import com.unifieddatalibrary.api.models.OnorbitSolarArrayFull
import com.unifieddatalibrary.api.models.OnorbitThrusterFull
import com.unifieddatalibrary.api.models.OperatingUnitRemarkFull
import com.unifieddatalibrary.api.models.OperatingunitFull
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import com.unifieddatalibrary.api.models.RfBandFull
import com.unifieddatalibrary.api.models.SolarArrayDetailsFull
import com.unifieddatalibrary.api.models.SolarArrayFull
import com.unifieddatalibrary.api.models.StatusFull
import com.unifieddatalibrary.api.models.SubStatusFull
import com.unifieddatalibrary.api.models.seradataspacecraftdetails.SeradataSpacecraftDetailTupleResponse
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeradataSpacecraftDetailTupleResponseTest {

    @Test
    fun create() {
      val seradataSpacecraftDetailTupleResponse = SeradataSpacecraftDetailTupleResponse.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.DataMode.TEST)
          .name("name")
          .source("Bluestaq")
          .id("SERADATASPACECRAFTDETAILS-ID")
          .additionalMissionsGroups("additionalMissionsGroups")
          .altitude(36036.6330576414)
          .annualInsuredDepreciationFactor(1.23)
          .annualInsuredDepreciationFactorEstimated(true)
          .apogee(1.23)
          .busId("BUS-ID")
          .capabilityLost(1.23)
          .capacityLost(1.23)
          .catalogNumber(1)
          .collisionRiskCm(1.43)
          .collisionRiskMm(1.33)
          .combinedCostEstimated(true)
          .combinedNewCost(1.23)
          .commercialLaunch(true)
          .constellation("GPS")
          .costEstimated(true)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cubesatDispenserType("cubesatDispenserType")
          .currentAge(5.898630136986301)
          .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .description("description")
          .designLife(231)
          .dryMass(1.23)
          .expectedLife(231)
          .geoPosition(-8.23)
          .idOnOrbit("503")
          .inclination(1.23)
          .insuranceLossesTotal(0.393)
          .insuranceNotes("Sample Notes")
          .insurancePremiumAtLaunch(1.23)
          .insurancePremiumAtLaunchEstimated(true)
          .insuredAtLaunch(true)
          .insuredValueAtLaunch(1.23)
          .insuredValueLaunchEstimated(true)
          .intlNumber("number")
          .lat(1.23)
          .launchArranger("launchArranger")
          .launchArrangerCountry("USA")
          .launchCharacteristic("Expendable")
          .launchCost(1.23)
          .launchCostEstimated(true)
          .launchCountry("USA")
          .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .launchDateRemarks("launchDateRemarks")
          .launchId("11573")
          .launchMass(1.23)
          .launchNotes("Sample Notes")
          .launchNumber("FN040")
          .launchProvider("launchProvider")
          .launchProviderCountry("USA")
          .launchProviderFlightNumber("launchProviderFlightNumber")
          .launchSiteId("28")
          .launchSiteName("launchSiteName")
          .launchType("Future")
          .launchVehicleId("123")
          .leased(true)
          .lifeLost(1.23)
          .lon(1.23)
          .massCategory("2500 - 3500kg  - Large Satellite")
          .nameAtLaunch("nameAtLaunch")
          .newCost(1.23)
          .notes("Sample Notes")
          .numHumans(1)
          .onOrbit(SeradataSpacecraftDetailTupleResponse.OnOrbit.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.OnOrbit.DataMode.TEST)
              .satNo(1)
              .source("Bluestaq")
              .altName("Alternate Name")
              .addAntenna(OnorbitAntennaFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitAntennaFull.DataMode.TEST)
                  .idAntenna("ANTENNA-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITANTENNA-ID")
                  .antenna(AntennaFull.builder()
                      .dataMode(AntennaFull.DataMode.TEST)
                      .name("IRIDIUM NEXT 121-ANTENNA-10075")
                      .source("Bluestaq")
                      .id("ANTENNA-ID")
                      .addAntennaDetail(AntennaDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(AntennaDetailsFull.DataMode.TEST)
                          .idAntenna("ANTENNA-ID")
                          .source("Bluestaq")
                          .id("ANTENNADETAILS-ID")
                          .beamForming(false)
                          .beamwidth(14.1)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Description of antenna A")
                          .diameter(0.01)
                          .endFrequency(3.3)
                          .gain(20.1)
                          .gainTolerance(5.1)
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTUREORG-ID")
                          .mode(AntennaDetailsFull.Mode.TX)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .polarization(45.1)
                          .position("Top")
                          .addSize(0.03)
                          .addSize(0.05)
                          .startFrequency(2.1)
                          .steerable(false)
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .type("Reflector")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .addBattery(OnorbitBatteryFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitBatteryFull.DataMode.TEST)
                  .idBattery("BATTERY-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITBATTERY-ID")
                  .battery(BatteryFull.builder()
                      .dataMode(BatteryFull.DataMode.TEST)
                      .name("JAK-BATTERY-1479")
                      .source("Bluestaq")
                      .id("BATTERY-ID")
                      .addBatteryDetail(BatterydetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(BatterydetailsFull.DataMode.TEST)
                          .idBattery("BATTERY-ID")
                          .source("Bluestaq")
                          .id("BATTERYDETAILS-ID")
                          .capacity(10.1)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("example notes")
                          .dischargeDepth(0.2)
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .model("11212")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .technology("Ni-Cd")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(5)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .category(SeradataSpacecraftDetailTupleResponse.OnOrbit.Category.LUNAR)
              .commonName("Example common name")
              .constellation("Big Dipper")
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .idOnOrbit("ONORBIT-ID")
              .intlDes("2021123ABC")
              .launchDate(LocalDate.parse("2018-01-01"))
              .launchSiteId("LAUNCHSITE-ID")
              .lifetimeYears(10)
              .missionNumber("Expedition 1")
              .objectType(SeradataSpacecraftDetailTupleResponse.OnOrbit.ObjectType.PAYLOAD)
              .addOnorbitDetail(OnorbitDetailsFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitDetailsFull.DataMode.TEST)
                  .idOnOrbit("REF-ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITDETAILS-ID")
                  .additionalMass(10.23)
                  .adeptRadius(10.23)
                  .bolDeltaV(1000.1)
                  .bolFuelMass(10.23)
                  .busCrossSection(10.23)
                  .busType("A2100")
                  .colaRadius(10.23)
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .crossSection(10.23)
                  .currentMass(500.0)
                  .deltaVUnc(50.1)
                  .addDepEstMass(20.0)
                  .addDepEstMass(21.0)
                  .addDepMassUnc(10.0)
                  .addDepMassUnc(5.0)
                  .addDepName("GOES-18A")
                  .addDepName("GOES-18B")
                  .driftRate(1.23)
                  .dryMass(10.23)
                  .estDeltaVDuration(10.23)
                  .fuelRemaining(10.23)
                  .geoSlot(90.23)
                  .lastObSource("THIRD_PARTY_DATASOURCE")
                  .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                  .launchMass(10.23)
                  .launchMassMax(15.23)
                  .launchMassMin(5.23)
                  .maneuverable(false)
                  .maxDeltaV(10.23)
                  .maxRadius(10.23)
                  .addMissionType("Weather")
                  .addMissionType("Space Weather")
                  .numDeployable(2)
                  .numMission(2)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .rcs(10.23)
                  .rcsMax(15.23)
                  .rcsMean(10.23)
                  .rcsMin(5.23)
                  .refSource("Wikipedia")
                  .solarArrayArea(10.23)
                  .totalMassUnc(50.1)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .vismag(10.23)
                  .vismagMax(15.23)
                  .vismagMean(10.23)
                  .vismagMin(5.23)
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .addSolarArray(OnorbitSolarArrayFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                  .idOnOrbit("ONORBIT-ID")
                  .idSolarArray("SOLARARRAY-ID")
                  .source("Bluestaq")
                  .id("ONORBITSOLARARRAY-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(10)
                  .solarArray(SolarArrayFull.builder()
                      .dataMode(SolarArrayFull.DataMode.TEST)
                      .name("Solar1")
                      .source("Bluestaq")
                      .id("SOLARARRAY-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                          .idSolarArray("SOLARARRAY-ID")
                          .source("Bluestaq")
                          .id("SOLARARRAYDETAILS-ID")
                          .area(123.4)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example notes")
                          .junctionTechnology("Triple")
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .span(123.4)
                          .addTag("TAG1")
                          .addTag("TAG2")
                          .technology("Ga-As")
                          .type("U Shaped")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .addThruster(OnorbitThrusterFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitThrusterFull.DataMode.TEST)
                  .idEngine("ENGINE-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITTHRUSTER-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .engine(Engine.builder()
                      .classificationMarking("U")
                      .dataMode(Engine.DataMode.TEST)
                      .name("ENGINE_VARIANT1")
                      .source("Bluestaq")
                      .id("ENGINE-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .addEngineDetail(EngineDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(EngineDetailsFull.DataMode.TEST)
                          .idEngine("ENGINE-ID")
                          .source("Bluestaq")
                          .id("ENGINEDETAILS-ID")
                          .burnTime(1.1)
                          .chamberPressure(1.1)
                          .characteristicType("Electric")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .cycleType("Pressure Fed")
                          .family("ENGINE_TYPE1")
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .maxFirings(5)
                          .notes("Example notes")
                          .nozzleExpansionRatio(1.1)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .oxidizer("Liquid Oxygen")
                          .propellant("Liquid")
                          .seaLevelThrust(1.1)
                          .specificImpulse(1.1)
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .vacuumThrust(1.1)
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(10)
                  .type("Hydrazine REA")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .operator("operator")
          .operatorCountry("USA")
          .orbitCategory("GEO")
          .orbitSubCategory("Geostationary")
          .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .owner("owner")
          .ownerCountry("USA")
          .perigee(1.23)
          .period(1.23)
          .primaryMissionGroup("primaryMissionGroup")
          .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
          .programName("programName")
          .quantity(1)
          .reusableFlights("reusableFlights")
          .reusedHullName("reusedHullName")
          .addScientific(SeradataSpacecraftDetailTupleResponse.Scientific.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.Scientific.DataMode.TEST)
              .name("SEM/MAG")
              .source("Bluestaq")
              .spacecraftId("REF-SPACECRAFT-ID")
              .id("SCIENTIFIC-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .entity(EntityFull.builder()
                  .classificationMarking("U")
                  .dataMode(EntityFull.DataMode.TEST)
                  .name("Example name")
                  .source("Bluestaq")
                  .type(EntityFull.Type.ONORBIT)
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .idEntity("ENTITY-ID")
                  .idLocation("LOCATION-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .idOperatingUnit("OPERATINGUNIT-ID")
                  .location(LocationFull.builder()
                      .classificationMarking("U")
                      .dataMode(LocationFull.DataMode.TEST)
                      .name("Example location")
                      .source("Bluestaq")
                      .altitude(10.23)
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .idLocation("LOCATION-ID")
                      .lat(45.23)
                      .lon(179.1)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .onOrbit(EntityFull.OnOrbit.builder()
                      .classificationMarking("U")
                      .dataMode(EntityFull.OnOrbit.DataMode.TEST)
                      .satNo(1)
                      .source("Bluestaq")
                      .altName("Alternate Name")
                      .addAntenna(OnorbitAntennaFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitAntennaFull.DataMode.TEST)
                          .idAntenna("ANTENNA-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITANTENNA-ID")
                          .antenna(AntennaFull.builder()
                              .dataMode(AntennaFull.DataMode.TEST)
                              .name("IRIDIUM NEXT 121-ANTENNA-10075")
                              .source("Bluestaq")
                              .id("ANTENNA-ID")
                              .addAntennaDetail(AntennaDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(AntennaDetailsFull.DataMode.TEST)
                                  .idAntenna("ANTENNA-ID")
                                  .source("Bluestaq")
                                  .id("ANTENNADETAILS-ID")
                                  .beamForming(false)
                                  .beamwidth(14.1)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Description of antenna A")
                                  .diameter(0.01)
                                  .endFrequency(3.3)
                                  .gain(20.1)
                                  .gainTolerance(5.1)
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTUREORG-ID")
                                  .mode(AntennaDetailsFull.Mode.TX)
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .polarization(45.1)
                                  .position("Top")
                                  .addSize(0.03)
                                  .addSize(0.05)
                                  .startFrequency(2.1)
                                  .steerable(false)
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .type("Reflector")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .addBattery(OnorbitBatteryFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitBatteryFull.DataMode.TEST)
                          .idBattery("BATTERY-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITBATTERY-ID")
                          .battery(BatteryFull.builder()
                              .dataMode(BatteryFull.DataMode.TEST)
                              .name("JAK-BATTERY-1479")
                              .source("Bluestaq")
                              .id("BATTERY-ID")
                              .addBatteryDetail(BatterydetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(BatterydetailsFull.DataMode.TEST)
                                  .idBattery("BATTERY-ID")
                                  .source("Bluestaq")
                                  .id("BATTERYDETAILS-ID")
                                  .capacity(10.1)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("example notes")
                                  .dischargeDepth(0.2)
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .model("11212")
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .technology("Ni-Cd")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(5)
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .category(EntityFull.OnOrbit.Category.LUNAR)
                      .commonName("Example common name")
                      .constellation("Big Dipper")
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .idOnOrbit("ONORBIT-ID")
                      .intlDes("2021123ABC")
                      .launchDate(LocalDate.parse("2018-01-01"))
                      .launchSiteId("LAUNCHSITE-ID")
                      .lifetimeYears(10)
                      .missionNumber("Expedition 1")
                      .objectType(EntityFull.OnOrbit.ObjectType.PAYLOAD)
                      .addOnorbitDetail(OnorbitDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitDetailsFull.DataMode.TEST)
                          .idOnOrbit("REF-ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITDETAILS-ID")
                          .additionalMass(10.23)
                          .adeptRadius(10.23)
                          .bolDeltaV(1000.1)
                          .bolFuelMass(10.23)
                          .busCrossSection(10.23)
                          .busType("A2100")
                          .colaRadius(10.23)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .crossSection(10.23)
                          .currentMass(500.0)
                          .deltaVUnc(50.1)
                          .addDepEstMass(20.0)
                          .addDepEstMass(21.0)
                          .addDepMassUnc(10.0)
                          .addDepMassUnc(5.0)
                          .addDepName("GOES-18A")
                          .addDepName("GOES-18B")
                          .driftRate(1.23)
                          .dryMass(10.23)
                          .estDeltaVDuration(10.23)
                          .fuelRemaining(10.23)
                          .geoSlot(90.23)
                          .lastObSource("THIRD_PARTY_DATASOURCE")
                          .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                          .launchMass(10.23)
                          .launchMassMax(15.23)
                          .launchMassMin(5.23)
                          .maneuverable(false)
                          .maxDeltaV(10.23)
                          .maxRadius(10.23)
                          .addMissionType("Weather")
                          .addMissionType("Space Weather")
                          .numDeployable(2)
                          .numMission(2)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .rcs(10.23)
                          .rcsMax(15.23)
                          .rcsMean(10.23)
                          .rcsMin(5.23)
                          .refSource("Wikipedia")
                          .solarArrayArea(10.23)
                          .totalMassUnc(50.1)
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .vismag(10.23)
                          .vismagMax(15.23)
                          .vismagMean(10.23)
                          .vismagMin(5.23)
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .addSolarArray(OnorbitSolarArrayFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                          .idOnOrbit("ONORBIT-ID")
                          .idSolarArray("SOLARARRAY-ID")
                          .source("Bluestaq")
                          .id("ONORBITSOLARARRAY-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(10)
                          .solarArray(SolarArrayFull.builder()
                              .dataMode(SolarArrayFull.DataMode.TEST)
                              .name("Solar1")
                              .source("Bluestaq")
                              .id("SOLARARRAY-ID")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                                  .idSolarArray("SOLARARRAY-ID")
                                  .source("Bluestaq")
                                  .id("SOLARARRAYDETAILS-ID")
                                  .area(123.4)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Example notes")
                                  .junctionTechnology("Triple")
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .span(123.4)
                                  .addTag("TAG1")
                                  .addTag("TAG2")
                                  .technology("Ga-As")
                                  .type("U Shaped")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .addThruster(OnorbitThrusterFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitThrusterFull.DataMode.TEST)
                          .idEngine("ENGINE-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITTHRUSTER-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .engine(Engine.builder()
                              .classificationMarking("U")
                              .dataMode(Engine.DataMode.TEST)
                              .name("ENGINE_VARIANT1")
                              .source("Bluestaq")
                              .id("ENGINE-ID")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .addEngineDetail(EngineDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(EngineDetailsFull.DataMode.TEST)
                                  .idEngine("ENGINE-ID")
                                  .source("Bluestaq")
                                  .id("ENGINEDETAILS-ID")
                                  .burnTime(1.1)
                                  .chamberPressure(1.1)
                                  .characteristicType("Electric")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cycleType("Pressure Fed")
                                  .family("ENGINE_TYPE1")
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .maxFirings(5)
                                  .notes("Example notes")
                                  .nozzleExpansionRatio(1.1)
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .oxidizer("Liquid Oxygen")
                                  .propellant("Liquid")
                                  .seaLevelThrust(1.1)
                                  .specificImpulse(1.1)
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .vacuumThrust(1.1)
                                  .build())
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(10)
                          .type("Hydrazine REA")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .operatingUnit(OperatingunitFull.builder()
                      .classificationMarking("U")
                      .dataMode(OperatingunitFull.DataMode.TEST)
                      .name("SOME_NAME")
                      .source("some.user")
                      .airDefArea("AL006")
                      .allegiance("OTHR")
                      .altAllegiance("HL")
                      .altCountryCode("IZ")
                      .altOperatingUnitId("32100000000021")
                      .classRating("1")
                      .condition("RDY")
                      .conditionAvail("A")
                      .coord("340000000N0430000000E")
                      .coordDatum("WGS")
                      .coordDerivAcc(12.345)
                      .countryCode("IQ")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .deployStatus("ND")
                      .description("Description of unit")
                      .divCat("5")
                      .echelon("SHIP")
                      .echelonTier("68")
                      .elevMsl(123.45)
                      .elevMslConfLvl(50)
                      .elevMslDerivAcc(12.34)
                      .eval(7)
                      .flagFlown("IZ")
                      .fleetId("A")
                      .force("NV")
                      .forceName("FORCE-NAME")
                      .fpa("EOB")
                      .functRole("MIL")
                      .geoidalMslSep(12.34)
                      .idContact("CONTACT-ID")
                      .ident("FRIEND")
                      .idLocation("LOCATION-ID")
                      .idOperatingUnit("OPERATINGUNIT-ID")
                      .idOrganization("ORGANIZATION-ID")
                      .lat(45.23)
                      .location(LocationFull.builder()
                          .classificationMarking("U")
                          .dataMode(LocationFull.DataMode.TEST)
                          .name("Example location")
                          .source("Bluestaq")
                          .altitude(10.23)
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .idLocation("LOCATION-ID")
                          .lat(45.23)
                          .lon(179.1)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .locName("LOCATION_NAME")
                      .locReason("GR")
                      .lon(179.1)
                      .masterUnit(true)
                      .milGrid("4QFJ12345678")
                      .milGridSys("UTM")
                      .msnPrimary("W6")
                      .msnPrimarySpecialty("QK")
                      .addOperatingUnitRemark(OperatingUnitRemarkFull.builder()
                          .classificationMarking("U")
                          .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                          .idOperatingUnit("OperatingUnit-ID")
                          .source("some.user")
                          .text("This is a remark")
                          .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                          .altRmkId("123456ABC")
                          .code("M")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .name("Remark name")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .type("Restriction")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .operStatus("OPR")
                      .organization(OrganizationFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationFull.DataMode.TEST)
                          .name("some.user")
                          .source("some.user")
                          .type("GOVERNMENT")
                          .id("ORGANIZATION-ID")
                          .active(false)
                          .category("Private company")
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example description")
                          .externalId("EXTERNAL-ID")
                          .nationality("US")
                          .addOrganizationDetail(OrganizationDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationDetailsFull.DataMode.TEST)
                              .idOrganization("ORGANIZATION-ID")
                              .name("some.user")
                              .source("some.user")
                              .id("ORGANIZATIONDETAILS-ID")
                              .address1("123 Main Street")
                              .address2("Apt 4B")
                              .address3("Colorado Springs CO, 80903")
                              .broker("some.user")
                              .ceo("some.user")
                              .cfo("some.user")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cto("some.user")
                              .description("Example description")
                              .ebitda(123.4)
                              .email("some_organization@organization.com")
                              .financialNotes("Example notes")
                              .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                              .fleetPlanNotes("Example notes")
                              .formerOrgId("FORMERORG-ID")
                              .ftes(123)
                              .geoAdminLevel1("Colorado")
                              .geoAdminLevel2("El Paso County")
                              .geoAdminLevel3("Colorado Springs")
                              .massRanking(123)
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .parentOrgId("PARENTORG-ID")
                              .postalCode("80903")
                              .profit(123.4)
                              .revenue(123.4)
                              .revenueRanking(123)
                              .riskManager("some.user")
                              .servicesNotes("Example notes")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .polSubdiv("IZ07")
                      .recStatus("A")
                      .referenceDoc("Provider Reference Documentation")
                      .resProd("RT")
                      .reviewDate(LocalDate.parse("2008-06-10"))
                      .stylizedUnit(true)
                      .symCode("SOGPU----------")
                      .unitIdentifier("AZXAZ12345")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .utm("19P4390691376966")
                      .wac("0427")
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .ownerType(EntityFull.OwnerType.COMMERCIAL)
                  .addRfBand(RfBandFull.builder()
                      .classificationMarking("U")
                      .dataMode(RfBandFull.DataMode.TEST)
                      .idEntity("ENTITY-ID")
                      .name("BAND_NAME")
                      .source("Bluestaq")
                      .id("RFBAND-ID")
                      .band("Ku")
                      .bandwidth(100.23)
                      .beamwidth(45.23)
                      .centerFreq(1000.23)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .edgeGain(100.23)
                      .eirp(2.23)
                      .erp(2.23)
                      .freqMax(2000.23)
                      .freqMin(50.23)
                      .mode(RfBandFull.Mode.TX)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .peakGain(120.23)
                      .polarization(RfBandFull.Polarization.H)
                      .purpose(RfBandFull.Purpose.TTC)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .addStatusCollection(StatusFull.builder()
                      .classificationMarking("U")
                      .dataMode(StatusFull.DataMode.TEST)
                      .idEntity("ENTITY-ID")
                      .source("Bluestaq")
                      .id("STATUS-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                      .declassificationString("U")
                      .derivedFrom("SOME_SOURCE")
                      .notes("Example Notes")
                      .opsCap(StatusFull.OpsCap.FMC)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("TST1")
                      .state(StatusFull.State.ACTIVE)
                      .addSubStatusCollection(SubStatusFull.builder()
                          .classificationMarking("U")
                          .dataMode(SubStatusFull.DataMode.TEST)
                          .notes("Sample Notes")
                          .source("Bluestaq")
                          .status(SubStatusFull.Status.FMC)
                          .statusId("REF-STATUS-ID")
                          .type(SubStatusFull.Type.MD_CAP)
                          .id("SUBSTATUS-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("TST1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .sysCap(StatusFull.SysCap.FMC)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .taskable(false)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .addUrl("URL1")
                  .addUrl("URL2")
                  .build())
              .frequencyBand("Gamma")
              .hostedForCompanyOrgId("REF-HOSTEDFORCOMPANYORG-ID")
              .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
              .manufacturerOrgId("REF-MANUFACTURERORG-ID")
              .notes("NOTES")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .payloadCategory("Sensor")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .sector("Commercial")
          .addSeradataCommDetail(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.DataMode.TEST)
              .source("Bluestaq")
              .id("SERADATACOMMDETAILS-ID")
              .band("X")
              .bandwidth(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .eirp(1.23)
              .estHtsTotalCapacity(1.23)
              .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
              .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
              .gatewayDownlinkFrom(1.23)
              .gatewayDownlinkTo(1.23)
              .gatewayUplinkFrom(1.23)
              .gatewayUplinkTo(1.23)
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .htsNumUserSpotBeams(1)
              .htsUserDownlinkBandwidthPerBeam(1.23)
              .htsUserUplinkBandwidthPerBeam(1.23)
              .idComm("idComm")
              .manufacturerOrgId("manufacturerOrgId")
              .num36MhzEquivalentTransponders(1)
              .numOperationalTransponders(1)
              .numSpareTransponders(1)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .payloadNotes("Sample Notes")
              .polarization("polarization")
              .solidStatePowerAmp(1.23)
              .spacecraftId("spacecraftId")
              .tradeLeaseOrgId("tradeLeaseOrgId")
              .travelingWaveTubeAmplifier(1.23)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .userDownlinkFrom(1.23)
              .userDownlinkTo(1.23)
              .userUplinkFrom(1.23)
              .userUplinkTo(1.23)
              .build())
          .addSeradataEarlyWarning(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATAEARLYWARNING-ID")
              .bestResolution(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .earthPointing(true)
              .frequencyLimits("frequencyLimits")
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idIr("idIR")
              .manufacturerOrgId("manufacturerOrgId")
              .missileLaunchPhaseDetectionAbility("missileLaunchPhaseDetectionAbility")
              .name("Infra red telescope")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraftId("partnerSpacecraftId")
              .payloadNotes("Sample Notes")
              .spectralBands("Infra-Red")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataNavigation(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATANAVIGATION-ID")
              .areaCoverage("Worldwide")
              .clockType("Rubidium")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idNavigation("idNavigation")
              .locationAccuracy(1.23)
              .manufacturerOrgId("manufacturerOrgId")
              .modeFrequency("1234")
              .modes("Military")
              .name("WAAS GEO-5")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraftId("partnerSpacecraftId")
              .payloadType("WAAS")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataOpticalPayload(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATAOPTICALPAYLOAD-ID")
              .bestResolution(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .fieldOfRegard(1.23)
              .fieldOfView(1.23)
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("idSensor")
              .imagingPayloadCategory("Infrared")
              .manufacturerOrgId("manufacturerOrgId")
              .name("TOURNESOL")
              .notes("Sample Notes")
              .numberOfFilmReturnCanisters(1L)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .pointingMethod("Spacecraft")
              .recorderSize("1024")
              .spectralBand("Green")
              .spectralFrequencyLimits("0.51")
              .swathWidth(1.23)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataRadarPayload(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("12345")
              .id("SERADATARADARPAYLOAD-ID")
              .bandwidth(1.23)
              .bestResolution(1.23)
              .category("SAR")
              .constellationInterferometricCapability("constellationInterferometricCapability")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .dutyCycle("dutyCycle")
              .fieldOfRegard(1.23)
              .fieldOfView(1.23)
              .frequency(1.23)
              .frequencyBand("X")
              .groundStationLocations("51,42N-44,35E")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
              .manufacturerOrgId("manufacturerOrgId")
              .name("ALT")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraft("partnerSpacecraft")
              .pointingMethod("Spacecraft")
              .receivePolarization("Lin Dual")
              .recorderSize("256")
              .swathWidth(1.23)
              .transmitPolarization("Lin Dual")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .waveLength(1.23)
              .build())
          .addSeradataSigIntPayload(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATASIGINTPAYLOAD-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .frequencyCoverage("1.1 to 3.3")
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("0c5ec9c0-10cd-1d35-c46b-3764c4d76e13")
              .interceptParameters("interceptParameters")
              .manufacturerOrgId("manufacturerOrgId")
              .name("Sensor Name")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .positionalAccuracy("positionalAccuracy")
              .swathWidth(1.23)
              .type("Comint")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .serialNumber("serialNumber")
          .stabilizer("3-Axis")
          .status("Inactive - Retired")
          .totalClaims(1)
          .totalFatalities(1)
          .totalInjuries(1)
          .totalPayloadPower(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .youtubeLaunchLink("youtubeLaunchLink")
          .build()

      assertThat(seradataSpacecraftDetailTupleResponse.classificationMarking()).isEqualTo("U")
      assertThat(seradataSpacecraftDetailTupleResponse.dataMode()).isEqualTo(SeradataSpacecraftDetailTupleResponse.DataMode.TEST)
      assertThat(seradataSpacecraftDetailTupleResponse.name()).isEqualTo("name")
      assertThat(seradataSpacecraftDetailTupleResponse.source()).isEqualTo("Bluestaq")
      assertThat(seradataSpacecraftDetailTupleResponse.id()).contains("SERADATASPACECRAFTDETAILS-ID")
      assertThat(seradataSpacecraftDetailTupleResponse.additionalMissionsGroups()).contains("additionalMissionsGroups")
      assertThat(seradataSpacecraftDetailTupleResponse.altitude()).contains(36036.6330576414)
      assertThat(seradataSpacecraftDetailTupleResponse.annualInsuredDepreciationFactor()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.annualInsuredDepreciationFactorEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.apogee()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.busId()).contains("BUS-ID")
      assertThat(seradataSpacecraftDetailTupleResponse.capabilityLost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.capacityLost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.catalogNumber()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.collisionRiskCm()).contains(1.43)
      assertThat(seradataSpacecraftDetailTupleResponse.collisionRiskMm()).contains(1.33)
      assertThat(seradataSpacecraftDetailTupleResponse.combinedCostEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.combinedNewCost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.commercialLaunch()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.constellation()).contains("GPS")
      assertThat(seradataSpacecraftDetailTupleResponse.costEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataSpacecraftDetailTupleResponse.createdBy()).contains("some.user")
      assertThat(seradataSpacecraftDetailTupleResponse.cubesatDispenserType()).contains("cubesatDispenserType")
      assertThat(seradataSpacecraftDetailTupleResponse.currentAge()).contains(5.898630136986301)
      assertThat(seradataSpacecraftDetailTupleResponse.dateOfObservation()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataSpacecraftDetailTupleResponse.description()).contains("description")
      assertThat(seradataSpacecraftDetailTupleResponse.designLife()).contains(231)
      assertThat(seradataSpacecraftDetailTupleResponse.dryMass()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.expectedLife()).contains(231)
      assertThat(seradataSpacecraftDetailTupleResponse.geoPosition()).contains(-8.23)
      assertThat(seradataSpacecraftDetailTupleResponse.idOnOrbit()).contains("503")
      assertThat(seradataSpacecraftDetailTupleResponse.inclination()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.insuranceLossesTotal()).contains(0.393)
      assertThat(seradataSpacecraftDetailTupleResponse.insuranceNotes()).contains("Sample Notes")
      assertThat(seradataSpacecraftDetailTupleResponse.insurancePremiumAtLaunch()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.insurancePremiumAtLaunchEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.insuredAtLaunch()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.insuredValueAtLaunch()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.insuredValueLaunchEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.intlNumber()).contains("number")
      assertThat(seradataSpacecraftDetailTupleResponse.lat()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.launchArranger()).contains("launchArranger")
      assertThat(seradataSpacecraftDetailTupleResponse.launchArrangerCountry()).contains("USA")
      assertThat(seradataSpacecraftDetailTupleResponse.launchCharacteristic()).contains("Expendable")
      assertThat(seradataSpacecraftDetailTupleResponse.launchCost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.launchCostEstimated()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.launchCountry()).contains("USA")
      assertThat(seradataSpacecraftDetailTupleResponse.launchDate()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataSpacecraftDetailTupleResponse.launchDateRemarks()).contains("launchDateRemarks")
      assertThat(seradataSpacecraftDetailTupleResponse.launchId()).contains("11573")
      assertThat(seradataSpacecraftDetailTupleResponse.launchMass()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.launchNotes()).contains("Sample Notes")
      assertThat(seradataSpacecraftDetailTupleResponse.launchNumber()).contains("FN040")
      assertThat(seradataSpacecraftDetailTupleResponse.launchProvider()).contains("launchProvider")
      assertThat(seradataSpacecraftDetailTupleResponse.launchProviderCountry()).contains("USA")
      assertThat(seradataSpacecraftDetailTupleResponse.launchProviderFlightNumber()).contains("launchProviderFlightNumber")
      assertThat(seradataSpacecraftDetailTupleResponse.launchSiteId()).contains("28")
      assertThat(seradataSpacecraftDetailTupleResponse.launchSiteName()).contains("launchSiteName")
      assertThat(seradataSpacecraftDetailTupleResponse.launchType()).contains("Future")
      assertThat(seradataSpacecraftDetailTupleResponse.launchVehicleId()).contains("123")
      assertThat(seradataSpacecraftDetailTupleResponse.leased()).contains(true)
      assertThat(seradataSpacecraftDetailTupleResponse.lifeLost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.lon()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.massCategory()).contains("2500 - 3500kg  - Large Satellite")
      assertThat(seradataSpacecraftDetailTupleResponse.nameAtLaunch()).contains("nameAtLaunch")
      assertThat(seradataSpacecraftDetailTupleResponse.newCost()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.notes()).contains("Sample Notes")
      assertThat(seradataSpacecraftDetailTupleResponse.numHumans()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.onOrbit()).contains(SeradataSpacecraftDetailTupleResponse.OnOrbit.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.OnOrbit.DataMode.TEST)
          .satNo(1)
          .source("Bluestaq")
          .altName("Alternate Name")
          .addAntenna(OnorbitAntennaFull.builder()
              .classificationMarking("U")
              .dataMode(OnorbitAntennaFull.DataMode.TEST)
              .idAntenna("ANTENNA-ID")
              .idOnOrbit("ONORBIT-ID")
              .source("Bluestaq")
              .id("ONORBITANTENNA-ID")
              .antenna(AntennaFull.builder()
                  .dataMode(AntennaFull.DataMode.TEST)
                  .name("IRIDIUM NEXT 121-ANTENNA-10075")
                  .source("Bluestaq")
                  .id("ANTENNA-ID")
                  .addAntennaDetail(AntennaDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(AntennaDetailsFull.DataMode.TEST)
                      .idAntenna("ANTENNA-ID")
                      .source("Bluestaq")
                      .id("ANTENNADETAILS-ID")
                      .beamForming(false)
                      .beamwidth(14.1)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("Description of antenna A")
                      .diameter(0.01)
                      .endFrequency(3.3)
                      .gain(20.1)
                      .gainTolerance(5.1)
                      .manufacturerOrg(OrganizationFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationFull.DataMode.TEST)
                          .name("some.user")
                          .source("some.user")
                          .type("GOVERNMENT")
                          .id("ORGANIZATION-ID")
                          .active(false)
                          .category("Private company")
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example description")
                          .externalId("EXTERNAL-ID")
                          .nationality("US")
                          .addOrganizationDetail(OrganizationDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationDetailsFull.DataMode.TEST)
                              .idOrganization("ORGANIZATION-ID")
                              .name("some.user")
                              .source("some.user")
                              .id("ORGANIZATIONDETAILS-ID")
                              .address1("123 Main Street")
                              .address2("Apt 4B")
                              .address3("Colorado Springs CO, 80903")
                              .broker("some.user")
                              .ceo("some.user")
                              .cfo("some.user")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cto("some.user")
                              .description("Example description")
                              .ebitda(123.4)
                              .email("some_organization@organization.com")
                              .financialNotes("Example notes")
                              .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                              .fleetPlanNotes("Example notes")
                              .formerOrgId("FORMERORG-ID")
                              .ftes(123)
                              .geoAdminLevel1("Colorado")
                              .geoAdminLevel2("El Paso County")
                              .geoAdminLevel3("Colorado Springs")
                              .massRanking(123)
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .parentOrgId("PARENTORG-ID")
                              .postalCode("80903")
                              .profit(123.4)
                              .revenue(123.4)
                              .revenueRanking(123)
                              .riskManager("some.user")
                              .servicesNotes("Example notes")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .manufacturerOrgId("MANUFACTUREORG-ID")
                      .mode(AntennaDetailsFull.Mode.TX)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .polarization(45.1)
                      .position("Top")
                      .addSize(0.03)
                      .addSize(0.05)
                      .startFrequency(2.1)
                      .steerable(false)
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .type("Reflector")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addBattery(OnorbitBatteryFull.builder()
              .classificationMarking("U")
              .dataMode(OnorbitBatteryFull.DataMode.TEST)
              .idBattery("BATTERY-ID")
              .idOnOrbit("ONORBIT-ID")
              .source("Bluestaq")
              .id("ONORBITBATTERY-ID")
              .battery(BatteryFull.builder()
                  .dataMode(BatteryFull.DataMode.TEST)
                  .name("JAK-BATTERY-1479")
                  .source("Bluestaq")
                  .id("BATTERY-ID")
                  .addBatteryDetail(BatterydetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(BatterydetailsFull.DataMode.TEST)
                      .idBattery("BATTERY-ID")
                      .source("Bluestaq")
                      .id("BATTERYDETAILS-ID")
                      .capacity(10.1)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("example notes")
                      .dischargeDepth(0.2)
                      .manufacturerOrg(OrganizationFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationFull.DataMode.TEST)
                          .name("some.user")
                          .source("some.user")
                          .type("GOVERNMENT")
                          .id("ORGANIZATION-ID")
                          .active(false)
                          .category("Private company")
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example description")
                          .externalId("EXTERNAL-ID")
                          .nationality("US")
                          .addOrganizationDetail(OrganizationDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationDetailsFull.DataMode.TEST)
                              .idOrganization("ORGANIZATION-ID")
                              .name("some.user")
                              .source("some.user")
                              .id("ORGANIZATIONDETAILS-ID")
                              .address1("123 Main Street")
                              .address2("Apt 4B")
                              .address3("Colorado Springs CO, 80903")
                              .broker("some.user")
                              .ceo("some.user")
                              .cfo("some.user")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cto("some.user")
                              .description("Example description")
                              .ebitda(123.4)
                              .email("some_organization@organization.com")
                              .financialNotes("Example notes")
                              .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                              .fleetPlanNotes("Example notes")
                              .formerOrgId("FORMERORG-ID")
                              .ftes(123)
                              .geoAdminLevel1("Colorado")
                              .geoAdminLevel2("El Paso County")
                              .geoAdminLevel3("Colorado Springs")
                              .massRanking(123)
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .parentOrgId("PARENTORG-ID")
                              .postalCode("80903")
                              .profit(123.4)
                              .revenue(123.4)
                              .revenueRanking(123)
                              .riskManager("some.user")
                              .servicesNotes("Example notes")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .manufacturerOrgId("MANUFACTURERORG-ID")
                      .model("11212")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .technology("Ni-Cd")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .quantity(5)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .category(SeradataSpacecraftDetailTupleResponse.OnOrbit.Category.LUNAR)
          .commonName("Example common name")
          .constellation("Big Dipper")
          .countryCode("US")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .idOnOrbit("ONORBIT-ID")
          .intlDes("2021123ABC")
          .launchDate(LocalDate.parse("2018-01-01"))
          .launchSiteId("LAUNCHSITE-ID")
          .lifetimeYears(10)
          .missionNumber("Expedition 1")
          .objectType(SeradataSpacecraftDetailTupleResponse.OnOrbit.ObjectType.PAYLOAD)
          .addOnorbitDetail(OnorbitDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(OnorbitDetailsFull.DataMode.TEST)
              .idOnOrbit("REF-ONORBIT-ID")
              .source("Bluestaq")
              .id("ONORBITDETAILS-ID")
              .additionalMass(10.23)
              .adeptRadius(10.23)
              .bolDeltaV(1000.1)
              .bolFuelMass(10.23)
              .busCrossSection(10.23)
              .busType("A2100")
              .colaRadius(10.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .crossSection(10.23)
              .currentMass(500.0)
              .deltaVUnc(50.1)
              .addDepEstMass(20.0)
              .addDepEstMass(21.0)
              .addDepMassUnc(10.0)
              .addDepMassUnc(5.0)
              .addDepName("GOES-18A")
              .addDepName("GOES-18B")
              .driftRate(1.23)
              .dryMass(10.23)
              .estDeltaVDuration(10.23)
              .fuelRemaining(10.23)
              .geoSlot(90.23)
              .lastObSource("THIRD_PARTY_DATASOURCE")
              .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
              .launchMass(10.23)
              .launchMassMax(15.23)
              .launchMassMin(5.23)
              .maneuverable(false)
              .maxDeltaV(10.23)
              .maxRadius(10.23)
              .addMissionType("Weather")
              .addMissionType("Space Weather")
              .numDeployable(2)
              .numMission(2)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .rcs(10.23)
              .rcsMax(15.23)
              .rcsMean(10.23)
              .rcsMin(5.23)
              .refSource("Wikipedia")
              .solarArrayArea(10.23)
              .totalMassUnc(50.1)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .vismag(10.23)
              .vismagMax(15.23)
              .vismagMean(10.23)
              .vismagMin(5.23)
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .addSolarArray(OnorbitSolarArrayFull.builder()
              .classificationMarking("U")
              .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
              .idOnOrbit("ONORBIT-ID")
              .idSolarArray("SOLARARRAY-ID")
              .source("Bluestaq")
              .id("ONORBITSOLARARRAY-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .quantity(10)
              .solarArray(SolarArrayFull.builder()
                  .dataMode(SolarArrayFull.DataMode.TEST)
                  .name("Solar1")
                  .source("Bluestaq")
                  .id("SOLARARRAY-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                      .idSolarArray("SOLARARRAY-ID")
                      .source("Bluestaq")
                      .id("SOLARARRAYDETAILS-ID")
                      .area(123.4)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("Example notes")
                      .junctionTechnology("Triple")
                      .manufacturerOrg(OrganizationFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationFull.DataMode.TEST)
                          .name("some.user")
                          .source("some.user")
                          .type("GOVERNMENT")
                          .id("ORGANIZATION-ID")
                          .active(false)
                          .category("Private company")
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example description")
                          .externalId("EXTERNAL-ID")
                          .nationality("US")
                          .addOrganizationDetail(OrganizationDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationDetailsFull.DataMode.TEST)
                              .idOrganization("ORGANIZATION-ID")
                              .name("some.user")
                              .source("some.user")
                              .id("ORGANIZATIONDETAILS-ID")
                              .address1("123 Main Street")
                              .address2("Apt 4B")
                              .address3("Colorado Springs CO, 80903")
                              .broker("some.user")
                              .ceo("some.user")
                              .cfo("some.user")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cto("some.user")
                              .description("Example description")
                              .ebitda(123.4)
                              .email("some_organization@organization.com")
                              .financialNotes("Example notes")
                              .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                              .fleetPlanNotes("Example notes")
                              .formerOrgId("FORMERORG-ID")
                              .ftes(123)
                              .geoAdminLevel1("Colorado")
                              .geoAdminLevel2("El Paso County")
                              .geoAdminLevel3("Colorado Springs")
                              .massRanking(123)
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .parentOrgId("PARENTORG-ID")
                              .postalCode("80903")
                              .profit(123.4)
                              .revenue(123.4)
                              .revenueRanking(123)
                              .riskManager("some.user")
                              .servicesNotes("Example notes")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .manufacturerOrgId("MANUFACTURERORG-ID")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .span(123.4)
                      .addTag("TAG1")
                      .addTag("TAG2")
                      .technology("Ga-As")
                      .type("U Shaped")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addThruster(OnorbitThrusterFull.builder()
              .classificationMarking("U")
              .dataMode(OnorbitThrusterFull.DataMode.TEST)
              .idEngine("ENGINE-ID")
              .idOnOrbit("ONORBIT-ID")
              .source("Bluestaq")
              .id("ONORBITTHRUSTER-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .engine(Engine.builder()
                  .classificationMarking("U")
                  .dataMode(Engine.DataMode.TEST)
                  .name("ENGINE_VARIANT1")
                  .source("Bluestaq")
                  .id("ENGINE-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .addEngineDetail(EngineDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(EngineDetailsFull.DataMode.TEST)
                      .idEngine("ENGINE-ID")
                      .source("Bluestaq")
                      .id("ENGINEDETAILS-ID")
                      .burnTime(1.1)
                      .chamberPressure(1.1)
                      .characteristicType("Electric")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .cycleType("Pressure Fed")
                      .family("ENGINE_TYPE1")
                      .manufacturerOrgId("MANUFACTURERORG-ID")
                      .maxFirings(5)
                      .notes("Example notes")
                      .nozzleExpansionRatio(1.1)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .oxidizer("Liquid Oxygen")
                      .propellant("Liquid")
                      .seaLevelThrust(1.1)
                      .specificImpulse(1.1)
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .vacuumThrust(1.1)
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .quantity(10)
              .type("Hydrazine REA")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.operator()).contains("operator")
      assertThat(seradataSpacecraftDetailTupleResponse.operatorCountry()).contains("USA")
      assertThat(seradataSpacecraftDetailTupleResponse.orbitCategory()).contains("GEO")
      assertThat(seradataSpacecraftDetailTupleResponse.orbitSubCategory()).contains("Geostationary")
      assertThat(seradataSpacecraftDetailTupleResponse.orderDate()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataSpacecraftDetailTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(seradataSpacecraftDetailTupleResponse.origNetwork()).contains("ORIG")
      assertThat(seradataSpacecraftDetailTupleResponse.owner()).contains("owner")
      assertThat(seradataSpacecraftDetailTupleResponse.ownerCountry()).contains("USA")
      assertThat(seradataSpacecraftDetailTupleResponse.perigee()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.period()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.primaryMissionGroup()).contains("primaryMissionGroup")
      assertThat(seradataSpacecraftDetailTupleResponse.primeManufacturerOrgId()).contains("05c43360-382e-4aa2-b875-ed28945ff2e5")
      assertThat(seradataSpacecraftDetailTupleResponse.programName()).contains("programName")
      assertThat(seradataSpacecraftDetailTupleResponse.quantity()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.reusableFlights()).contains("reusableFlights")
      assertThat(seradataSpacecraftDetailTupleResponse.reusedHullName()).contains("reusedHullName")
      assertThat(seradataSpacecraftDetailTupleResponse.scientific().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.Scientific.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.Scientific.DataMode.TEST)
          .name("SEM/MAG")
          .source("Bluestaq")
          .spacecraftId("REF-SPACECRAFT-ID")
          .id("SCIENTIFIC-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .entity(EntityFull.builder()
              .classificationMarking("U")
              .dataMode(EntityFull.DataMode.TEST)
              .name("Example name")
              .source("Bluestaq")
              .type(EntityFull.Type.ONORBIT)
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .idEntity("ENTITY-ID")
              .idLocation("LOCATION-ID")
              .idOnOrbit("ONORBIT-ID")
              .idOperatingUnit("OPERATINGUNIT-ID")
              .location(LocationFull.builder()
                  .classificationMarking("U")
                  .dataMode(LocationFull.DataMode.TEST)
                  .name("Example location")
                  .source("Bluestaq")
                  .altitude(10.23)
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .idLocation("LOCATION-ID")
                  .lat(45.23)
                  .lon(179.1)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .onOrbit(EntityFull.OnOrbit.builder()
                  .classificationMarking("U")
                  .dataMode(EntityFull.OnOrbit.DataMode.TEST)
                  .satNo(1)
                  .source("Bluestaq")
                  .altName("Alternate Name")
                  .addAntenna(OnorbitAntennaFull.builder()
                      .classificationMarking("U")
                      .dataMode(OnorbitAntennaFull.DataMode.TEST)
                      .idAntenna("ANTENNA-ID")
                      .idOnOrbit("ONORBIT-ID")
                      .source("Bluestaq")
                      .id("ONORBITANTENNA-ID")
                      .antenna(AntennaFull.builder()
                          .dataMode(AntennaFull.DataMode.TEST)
                          .name("IRIDIUM NEXT 121-ANTENNA-10075")
                          .source("Bluestaq")
                          .id("ANTENNA-ID")
                          .addAntennaDetail(AntennaDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(AntennaDetailsFull.DataMode.TEST)
                              .idAntenna("ANTENNA-ID")
                              .source("Bluestaq")
                              .id("ANTENNADETAILS-ID")
                              .beamForming(false)
                              .beamwidth(14.1)
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Description of antenna A")
                              .diameter(0.01)
                              .endFrequency(3.3)
                              .gain(20.1)
                              .gainTolerance(5.1)
                              .manufacturerOrg(OrganizationFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationFull.DataMode.TEST)
                                  .name("some.user")
                                  .source("some.user")
                                  .type("GOVERNMENT")
                                  .id("ORGANIZATION-ID")
                                  .active(false)
                                  .category("Private company")
                                  .countryCode("US")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Example description")
                                  .externalId("EXTERNAL-ID")
                                  .nationality("US")
                                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                      .idOrganization("ORGANIZATION-ID")
                                      .name("some.user")
                                      .source("some.user")
                                      .id("ORGANIZATIONDETAILS-ID")
                                      .address1("123 Main Street")
                                      .address2("Apt 4B")
                                      .address3("Colorado Springs CO, 80903")
                                      .broker("some.user")
                                      .ceo("some.user")
                                      .cfo("some.user")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .cto("some.user")
                                      .description("Example description")
                                      .ebitda(123.4)
                                      .email("some_organization@organization.com")
                                      .financialNotes("Example notes")
                                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                      .fleetPlanNotes("Example notes")
                                      .formerOrgId("FORMERORG-ID")
                                      .ftes(123)
                                      .geoAdminLevel1("Colorado")
                                      .geoAdminLevel2("El Paso County")
                                      .geoAdminLevel3("Colorado Springs")
                                      .massRanking(123)
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .parentOrgId("PARENTORG-ID")
                                      .postalCode("80903")
                                      .profit(123.4)
                                      .revenue(123.4)
                                      .revenueRanking(123)
                                      .riskManager("some.user")
                                      .servicesNotes("Example notes")
                                      .addTag("PROVIDER_TAG1")
                                      .addTag("PROVIDER_TAG2")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .manufacturerOrgId("MANUFACTUREORG-ID")
                              .mode(AntennaDetailsFull.Mode.TX)
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .polarization(45.1)
                              .position("Top")
                              .addSize(0.03)
                              .addSize(0.05)
                              .startFrequency(2.1)
                              .steerable(false)
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .type("Reflector")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .addBattery(OnorbitBatteryFull.builder()
                      .classificationMarking("U")
                      .dataMode(OnorbitBatteryFull.DataMode.TEST)
                      .idBattery("BATTERY-ID")
                      .idOnOrbit("ONORBIT-ID")
                      .source("Bluestaq")
                      .id("ONORBITBATTERY-ID")
                      .battery(BatteryFull.builder()
                          .dataMode(BatteryFull.DataMode.TEST)
                          .name("JAK-BATTERY-1479")
                          .source("Bluestaq")
                          .id("BATTERY-ID")
                          .addBatteryDetail(BatterydetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(BatterydetailsFull.DataMode.TEST)
                              .idBattery("BATTERY-ID")
                              .source("Bluestaq")
                              .id("BATTERYDETAILS-ID")
                              .capacity(10.1)
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("example notes")
                              .dischargeDepth(0.2)
                              .manufacturerOrg(OrganizationFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationFull.DataMode.TEST)
                                  .name("some.user")
                                  .source("some.user")
                                  .type("GOVERNMENT")
                                  .id("ORGANIZATION-ID")
                                  .active(false)
                                  .category("Private company")
                                  .countryCode("US")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Example description")
                                  .externalId("EXTERNAL-ID")
                                  .nationality("US")
                                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                      .idOrganization("ORGANIZATION-ID")
                                      .name("some.user")
                                      .source("some.user")
                                      .id("ORGANIZATIONDETAILS-ID")
                                      .address1("123 Main Street")
                                      .address2("Apt 4B")
                                      .address3("Colorado Springs CO, 80903")
                                      .broker("some.user")
                                      .ceo("some.user")
                                      .cfo("some.user")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .cto("some.user")
                                      .description("Example description")
                                      .ebitda(123.4)
                                      .email("some_organization@organization.com")
                                      .financialNotes("Example notes")
                                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                      .fleetPlanNotes("Example notes")
                                      .formerOrgId("FORMERORG-ID")
                                      .ftes(123)
                                      .geoAdminLevel1("Colorado")
                                      .geoAdminLevel2("El Paso County")
                                      .geoAdminLevel3("Colorado Springs")
                                      .massRanking(123)
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .parentOrgId("PARENTORG-ID")
                                      .postalCode("80903")
                                      .profit(123.4)
                                      .revenue(123.4)
                                      .revenueRanking(123)
                                      .riskManager("some.user")
                                      .servicesNotes("Example notes")
                                      .addTag("PROVIDER_TAG1")
                                      .addTag("PROVIDER_TAG2")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .manufacturerOrgId("MANUFACTURERORG-ID")
                              .model("11212")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .technology("Ni-Cd")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .quantity(5)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .category(EntityFull.OnOrbit.Category.LUNAR)
                  .commonName("Example common name")
                  .constellation("Big Dipper")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .idOnOrbit("ONORBIT-ID")
                  .intlDes("2021123ABC")
                  .launchDate(LocalDate.parse("2018-01-01"))
                  .launchSiteId("LAUNCHSITE-ID")
                  .lifetimeYears(10)
                  .missionNumber("Expedition 1")
                  .objectType(EntityFull.OnOrbit.ObjectType.PAYLOAD)
                  .addOnorbitDetail(OnorbitDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(OnorbitDetailsFull.DataMode.TEST)
                      .idOnOrbit("REF-ONORBIT-ID")
                      .source("Bluestaq")
                      .id("ONORBITDETAILS-ID")
                      .additionalMass(10.23)
                      .adeptRadius(10.23)
                      .bolDeltaV(1000.1)
                      .bolFuelMass(10.23)
                      .busCrossSection(10.23)
                      .busType("A2100")
                      .colaRadius(10.23)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .crossSection(10.23)
                      .currentMass(500.0)
                      .deltaVUnc(50.1)
                      .addDepEstMass(20.0)
                      .addDepEstMass(21.0)
                      .addDepMassUnc(10.0)
                      .addDepMassUnc(5.0)
                      .addDepName("GOES-18A")
                      .addDepName("GOES-18B")
                      .driftRate(1.23)
                      .dryMass(10.23)
                      .estDeltaVDuration(10.23)
                      .fuelRemaining(10.23)
                      .geoSlot(90.23)
                      .lastObSource("THIRD_PARTY_DATASOURCE")
                      .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                      .launchMass(10.23)
                      .launchMassMax(15.23)
                      .launchMassMin(5.23)
                      .maneuverable(false)
                      .maxDeltaV(10.23)
                      .maxRadius(10.23)
                      .addMissionType("Weather")
                      .addMissionType("Space Weather")
                      .numDeployable(2)
                      .numMission(2)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .rcs(10.23)
                      .rcsMax(15.23)
                      .rcsMean(10.23)
                      .rcsMin(5.23)
                      .refSource("Wikipedia")
                      .solarArrayArea(10.23)
                      .totalMassUnc(50.1)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .vismag(10.23)
                      .vismagMax(15.23)
                      .vismagMean(10.23)
                      .vismagMin(5.23)
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .addSolarArray(OnorbitSolarArrayFull.builder()
                      .classificationMarking("U")
                      .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                      .idOnOrbit("ONORBIT-ID")
                      .idSolarArray("SOLARARRAY-ID")
                      .source("Bluestaq")
                      .id("ONORBITSOLARARRAY-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .quantity(10)
                      .solarArray(SolarArrayFull.builder()
                          .dataMode(SolarArrayFull.DataMode.TEST)
                          .name("Solar1")
                          .source("Bluestaq")
                          .id("SOLARARRAY-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                              .idSolarArray("SOLARARRAY-ID")
                              .source("Bluestaq")
                              .id("SOLARARRAYDETAILS-ID")
                              .area(123.4)
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example notes")
                              .junctionTechnology("Triple")
                              .manufacturerOrg(OrganizationFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationFull.DataMode.TEST)
                                  .name("some.user")
                                  .source("some.user")
                                  .type("GOVERNMENT")
                                  .id("ORGANIZATION-ID")
                                  .active(false)
                                  .category("Private company")
                                  .countryCode("US")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Example description")
                                  .externalId("EXTERNAL-ID")
                                  .nationality("US")
                                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                      .idOrganization("ORGANIZATION-ID")
                                      .name("some.user")
                                      .source("some.user")
                                      .id("ORGANIZATIONDETAILS-ID")
                                      .address1("123 Main Street")
                                      .address2("Apt 4B")
                                      .address3("Colorado Springs CO, 80903")
                                      .broker("some.user")
                                      .ceo("some.user")
                                      .cfo("some.user")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .cto("some.user")
                                      .description("Example description")
                                      .ebitda(123.4)
                                      .email("some_organization@organization.com")
                                      .financialNotes("Example notes")
                                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                      .fleetPlanNotes("Example notes")
                                      .formerOrgId("FORMERORG-ID")
                                      .ftes(123)
                                      .geoAdminLevel1("Colorado")
                                      .geoAdminLevel2("El Paso County")
                                      .geoAdminLevel3("Colorado Springs")
                                      .massRanking(123)
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .parentOrgId("PARENTORG-ID")
                                      .postalCode("80903")
                                      .profit(123.4)
                                      .revenue(123.4)
                                      .revenueRanking(123)
                                      .riskManager("some.user")
                                      .servicesNotes("Example notes")
                                      .addTag("PROVIDER_TAG1")
                                      .addTag("PROVIDER_TAG2")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .manufacturerOrgId("MANUFACTURERORG-ID")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .span(123.4)
                              .addTag("TAG1")
                              .addTag("TAG2")
                              .technology("Ga-As")
                              .type("U Shaped")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .addThruster(OnorbitThrusterFull.builder()
                      .classificationMarking("U")
                      .dataMode(OnorbitThrusterFull.DataMode.TEST)
                      .idEngine("ENGINE-ID")
                      .idOnOrbit("ONORBIT-ID")
                      .source("Bluestaq")
                      .id("ONORBITTHRUSTER-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .engine(Engine.builder()
                          .classificationMarking("U")
                          .dataMode(Engine.DataMode.TEST)
                          .name("ENGINE_VARIANT1")
                          .source("Bluestaq")
                          .id("ENGINE-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .addEngineDetail(EngineDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(EngineDetailsFull.DataMode.TEST)
                              .idEngine("ENGINE-ID")
                              .source("Bluestaq")
                              .id("ENGINEDETAILS-ID")
                              .burnTime(1.1)
                              .chamberPressure(1.1)
                              .characteristicType("Electric")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cycleType("Pressure Fed")
                              .family("ENGINE_TYPE1")
                              .manufacturerOrgId("MANUFACTURERORG-ID")
                              .maxFirings(5)
                              .notes("Example notes")
                              .nozzleExpansionRatio(1.1)
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .oxidizer("Liquid Oxygen")
                              .propellant("Liquid")
                              .seaLevelThrust(1.1)
                              .specificImpulse(1.1)
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .vacuumThrust(1.1)
                              .build())
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .quantity(10)
                      .type("Hydrazine REA")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .operatingUnit(OperatingunitFull.builder()
                  .classificationMarking("U")
                  .dataMode(OperatingunitFull.DataMode.TEST)
                  .name("SOME_NAME")
                  .source("some.user")
                  .airDefArea("AL006")
                  .allegiance("OTHR")
                  .altAllegiance("HL")
                  .altCountryCode("IZ")
                  .altOperatingUnitId("32100000000021")
                  .classRating("1")
                  .condition("RDY")
                  .conditionAvail("A")
                  .coord("340000000N0430000000E")
                  .coordDatum("WGS")
                  .coordDerivAcc(12.345)
                  .countryCode("IQ")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .deployStatus("ND")
                  .description("Description of unit")
                  .divCat("5")
                  .echelon("SHIP")
                  .echelonTier("68")
                  .elevMsl(123.45)
                  .elevMslConfLvl(50)
                  .elevMslDerivAcc(12.34)
                  .eval(7)
                  .flagFlown("IZ")
                  .fleetId("A")
                  .force("NV")
                  .forceName("FORCE-NAME")
                  .fpa("EOB")
                  .functRole("MIL")
                  .geoidalMslSep(12.34)
                  .idContact("CONTACT-ID")
                  .ident("FRIEND")
                  .idLocation("LOCATION-ID")
                  .idOperatingUnit("OPERATINGUNIT-ID")
                  .idOrganization("ORGANIZATION-ID")
                  .lat(45.23)
                  .location(LocationFull.builder()
                      .classificationMarking("U")
                      .dataMode(LocationFull.DataMode.TEST)
                      .name("Example location")
                      .source("Bluestaq")
                      .altitude(10.23)
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .idLocation("LOCATION-ID")
                      .lat(45.23)
                      .lon(179.1)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .locName("LOCATION_NAME")
                  .locReason("GR")
                  .lon(179.1)
                  .masterUnit(true)
                  .milGrid("4QFJ12345678")
                  .milGridSys("UTM")
                  .msnPrimary("W6")
                  .msnPrimarySpecialty("QK")
                  .addOperatingUnitRemark(OperatingUnitRemarkFull.builder()
                      .classificationMarking("U")
                      .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                      .idOperatingUnit("OperatingUnit-ID")
                      .source("some.user")
                      .text("This is a remark")
                      .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                      .altRmkId("123456ABC")
                      .code("M")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .name("Remark name")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .type("Restriction")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .operStatus("OPR")
                  .organization(OrganizationFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationFull.DataMode.TEST)
                      .name("some.user")
                      .source("some.user")
                      .type("GOVERNMENT")
                      .id("ORGANIZATION-ID")
                      .active(false)
                      .category("Private company")
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("Example description")
                      .externalId("EXTERNAL-ID")
                      .nationality("US")
                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                          .idOrganization("ORGANIZATION-ID")
                          .name("some.user")
                          .source("some.user")
                          .id("ORGANIZATIONDETAILS-ID")
                          .address1("123 Main Street")
                          .address2("Apt 4B")
                          .address3("Colorado Springs CO, 80903")
                          .broker("some.user")
                          .ceo("some.user")
                          .cfo("some.user")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .cto("some.user")
                          .description("Example description")
                          .ebitda(123.4)
                          .email("some_organization@organization.com")
                          .financialNotes("Example notes")
                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                          .fleetPlanNotes("Example notes")
                          .formerOrgId("FORMERORG-ID")
                          .ftes(123)
                          .geoAdminLevel1("Colorado")
                          .geoAdminLevel2("El Paso County")
                          .geoAdminLevel3("Colorado Springs")
                          .massRanking(123)
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .parentOrgId("PARENTORG-ID")
                          .postalCode("80903")
                          .profit(123.4)
                          .revenue(123.4)
                          .revenueRanking(123)
                          .riskManager("some.user")
                          .servicesNotes("Example notes")
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .polSubdiv("IZ07")
                  .recStatus("A")
                  .referenceDoc("Provider Reference Documentation")
                  .resProd("RT")
                  .reviewDate(LocalDate.parse("2008-06-10"))
                  .stylizedUnit(true)
                  .symCode("SOGPU----------")
                  .unitIdentifier("AZXAZ12345")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .utm("19P4390691376966")
                  .wac("0427")
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .ownerType(EntityFull.OwnerType.COMMERCIAL)
              .addRfBand(RfBandFull.builder()
                  .classificationMarking("U")
                  .dataMode(RfBandFull.DataMode.TEST)
                  .idEntity("ENTITY-ID")
                  .name("BAND_NAME")
                  .source("Bluestaq")
                  .id("RFBAND-ID")
                  .band("Ku")
                  .bandwidth(100.23)
                  .beamwidth(45.23)
                  .centerFreq(1000.23)
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .edgeGain(100.23)
                  .eirp(2.23)
                  .erp(2.23)
                  .freqMax(2000.23)
                  .freqMin(50.23)
                  .mode(RfBandFull.Mode.TX)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .peakGain(120.23)
                  .polarization(RfBandFull.Polarization.H)
                  .purpose(RfBandFull.Purpose.TTC)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .addStatusCollection(StatusFull.builder()
                  .classificationMarking("U")
                  .dataMode(StatusFull.DataMode.TEST)
                  .idEntity("ENTITY-ID")
                  .source("Bluestaq")
                  .id("STATUS-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                  .declassificationString("U")
                  .derivedFrom("SOME_SOURCE")
                  .notes("Example Notes")
                  .opsCap(StatusFull.OpsCap.FMC)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("TST1")
                  .state(StatusFull.State.ACTIVE)
                  .addSubStatusCollection(SubStatusFull.builder()
                      .classificationMarking("U")
                      .dataMode(SubStatusFull.DataMode.TEST)
                      .notes("Sample Notes")
                      .source("Bluestaq")
                      .status(SubStatusFull.Status.FMC)
                      .statusId("REF-STATUS-ID")
                      .type(SubStatusFull.Type.MD_CAP)
                      .id("SUBSTATUS-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("TST1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .sysCap(StatusFull.SysCap.FMC)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .taskable(false)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .addUrl("URL1")
              .addUrl("URL2")
              .build())
          .frequencyBand("Gamma")
          .hostedForCompanyOrgId("REF-HOSTEDFORCOMPANYORG-ID")
          .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
          .manufacturerOrgId("REF-MANUFACTURERORG-ID")
          .notes("NOTES")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .payloadCategory("Sensor")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.sector()).contains("Commercial")
      assertThat(seradataSpacecraftDetailTupleResponse.seradataCommDetails().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.DataMode.TEST)
          .source("Bluestaq")
          .id("SERADATACOMMDETAILS-ID")
          .band("X")
          .bandwidth(1.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .eirp(1.23)
          .estHtsTotalCapacity(1.23)
          .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
          .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
          .gatewayDownlinkFrom(1.23)
          .gatewayDownlinkTo(1.23)
          .gatewayUplinkFrom(1.23)
          .gatewayUplinkTo(1.23)
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .htsNumUserSpotBeams(1)
          .htsUserDownlinkBandwidthPerBeam(1.23)
          .htsUserUplinkBandwidthPerBeam(1.23)
          .idComm("idComm")
          .manufacturerOrgId("manufacturerOrgId")
          .num36MhzEquivalentTransponders(1)
          .numOperationalTransponders(1)
          .numSpareTransponders(1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .payloadNotes("Sample Notes")
          .polarization("polarization")
          .solidStatePowerAmp(1.23)
          .spacecraftId("spacecraftId")
          .tradeLeaseOrgId("tradeLeaseOrgId")
          .travelingWaveTubeAmplifier(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .userDownlinkFrom(1.23)
          .userDownlinkTo(1.23)
          .userUplinkFrom(1.23)
          .userUplinkTo(1.23)
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.seradataEarlyWarning().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("spacecraftId")
          .id("SERADATAEARLYWARNING-ID")
          .bestResolution(1.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .earthPointing(true)
          .frequencyLimits("frequencyLimits")
          .groundStationLocations("groundStationLocations")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idIr("idIR")
          .manufacturerOrgId("manufacturerOrgId")
          .missileLaunchPhaseDetectionAbility("missileLaunchPhaseDetectionAbility")
          .name("Infra red telescope")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .partnerSpacecraftId("partnerSpacecraftId")
          .payloadNotes("Sample Notes")
          .spectralBands("Infra-Red")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.seradataNavigation().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("spacecraftId")
          .id("SERADATANAVIGATION-ID")
          .areaCoverage("Worldwide")
          .clockType("Rubidium")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idNavigation("idNavigation")
          .locationAccuracy(1.23)
          .manufacturerOrgId("manufacturerOrgId")
          .modeFrequency("1234")
          .modes("Military")
          .name("WAAS GEO-5")
          .notes("Sample Notes")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .partnerSpacecraftId("partnerSpacecraftId")
          .payloadType("WAAS")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.seradataOpticalPayload().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("spacecraftId")
          .id("SERADATAOPTICALPAYLOAD-ID")
          .bestResolution(1.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .fieldOfRegard(1.23)
          .fieldOfView(1.23)
          .groundStationLocations("groundStationLocations")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idSensor("idSensor")
          .imagingPayloadCategory("Infrared")
          .manufacturerOrgId("manufacturerOrgId")
          .name("TOURNESOL")
          .notes("Sample Notes")
          .numberOfFilmReturnCanisters(1L)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .pointingMethod("Spacecraft")
          .recorderSize("1024")
          .spectralBand("Green")
          .spectralFrequencyLimits("0.51")
          .swathWidth(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.seradataRadarPayload().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("12345")
          .id("SERADATARADARPAYLOAD-ID")
          .bandwidth(1.23)
          .bestResolution(1.23)
          .category("SAR")
          .constellationInterferometricCapability("constellationInterferometricCapability")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .dutyCycle("dutyCycle")
          .fieldOfRegard(1.23)
          .fieldOfView(1.23)
          .frequency(1.23)
          .frequencyBand("X")
          .groundStationLocations("51,42N-44,35E")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idSensor("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
          .manufacturerOrgId("manufacturerOrgId")
          .name("ALT")
          .notes("Sample Notes")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .partnerSpacecraft("partnerSpacecraft")
          .pointingMethod("Spacecraft")
          .receivePolarization("Lin Dual")
          .recorderSize("256")
          .swathWidth(1.23)
          .transmitPolarization("Lin Dual")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .waveLength(1.23)
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.seradataSigIntPayload().getOrNull()).containsExactly(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("spacecraftId")
          .id("SERADATASIGINTPAYLOAD-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .frequencyCoverage("1.1 to 3.3")
          .groundStationLocations("groundStationLocations")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idSensor("0c5ec9c0-10cd-1d35-c46b-3764c4d76e13")
          .interceptParameters("interceptParameters")
          .manufacturerOrgId("manufacturerOrgId")
          .name("Sensor Name")
          .notes("Sample Notes")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .positionalAccuracy("positionalAccuracy")
          .swathWidth(1.23)
          .type("Comint")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(seradataSpacecraftDetailTupleResponse.serialNumber()).contains("serialNumber")
      assertThat(seradataSpacecraftDetailTupleResponse.stabilizer()).contains("3-Axis")
      assertThat(seradataSpacecraftDetailTupleResponse.status()).contains("Inactive - Retired")
      assertThat(seradataSpacecraftDetailTupleResponse.totalClaims()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.totalFatalities()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.totalInjuries()).contains(1)
      assertThat(seradataSpacecraftDetailTupleResponse.totalPayloadPower()).contains(1.23)
      assertThat(seradataSpacecraftDetailTupleResponse.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataSpacecraftDetailTupleResponse.updatedBy()).contains("some.user")
      assertThat(seradataSpacecraftDetailTupleResponse.youtubeLaunchLink()).contains("youtubeLaunchLink")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val seradataSpacecraftDetailTupleResponse = SeradataSpacecraftDetailTupleResponse.builder()
          .classificationMarking("U")
          .dataMode(SeradataSpacecraftDetailTupleResponse.DataMode.TEST)
          .name("name")
          .source("Bluestaq")
          .id("SERADATASPACECRAFTDETAILS-ID")
          .additionalMissionsGroups("additionalMissionsGroups")
          .altitude(36036.6330576414)
          .annualInsuredDepreciationFactor(1.23)
          .annualInsuredDepreciationFactorEstimated(true)
          .apogee(1.23)
          .busId("BUS-ID")
          .capabilityLost(1.23)
          .capacityLost(1.23)
          .catalogNumber(1)
          .collisionRiskCm(1.43)
          .collisionRiskMm(1.33)
          .combinedCostEstimated(true)
          .combinedNewCost(1.23)
          .commercialLaunch(true)
          .constellation("GPS")
          .costEstimated(true)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cubesatDispenserType("cubesatDispenserType")
          .currentAge(5.898630136986301)
          .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .description("description")
          .designLife(231)
          .dryMass(1.23)
          .expectedLife(231)
          .geoPosition(-8.23)
          .idOnOrbit("503")
          .inclination(1.23)
          .insuranceLossesTotal(0.393)
          .insuranceNotes("Sample Notes")
          .insurancePremiumAtLaunch(1.23)
          .insurancePremiumAtLaunchEstimated(true)
          .insuredAtLaunch(true)
          .insuredValueAtLaunch(1.23)
          .insuredValueLaunchEstimated(true)
          .intlNumber("number")
          .lat(1.23)
          .launchArranger("launchArranger")
          .launchArrangerCountry("USA")
          .launchCharacteristic("Expendable")
          .launchCost(1.23)
          .launchCostEstimated(true)
          .launchCountry("USA")
          .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .launchDateRemarks("launchDateRemarks")
          .launchId("11573")
          .launchMass(1.23)
          .launchNotes("Sample Notes")
          .launchNumber("FN040")
          .launchProvider("launchProvider")
          .launchProviderCountry("USA")
          .launchProviderFlightNumber("launchProviderFlightNumber")
          .launchSiteId("28")
          .launchSiteName("launchSiteName")
          .launchType("Future")
          .launchVehicleId("123")
          .leased(true)
          .lifeLost(1.23)
          .lon(1.23)
          .massCategory("2500 - 3500kg  - Large Satellite")
          .nameAtLaunch("nameAtLaunch")
          .newCost(1.23)
          .notes("Sample Notes")
          .numHumans(1)
          .onOrbit(SeradataSpacecraftDetailTupleResponse.OnOrbit.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.OnOrbit.DataMode.TEST)
              .satNo(1)
              .source("Bluestaq")
              .altName("Alternate Name")
              .addAntenna(OnorbitAntennaFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitAntennaFull.DataMode.TEST)
                  .idAntenna("ANTENNA-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITANTENNA-ID")
                  .antenna(AntennaFull.builder()
                      .dataMode(AntennaFull.DataMode.TEST)
                      .name("IRIDIUM NEXT 121-ANTENNA-10075")
                      .source("Bluestaq")
                      .id("ANTENNA-ID")
                      .addAntennaDetail(AntennaDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(AntennaDetailsFull.DataMode.TEST)
                          .idAntenna("ANTENNA-ID")
                          .source("Bluestaq")
                          .id("ANTENNADETAILS-ID")
                          .beamForming(false)
                          .beamwidth(14.1)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Description of antenna A")
                          .diameter(0.01)
                          .endFrequency(3.3)
                          .gain(20.1)
                          .gainTolerance(5.1)
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTUREORG-ID")
                          .mode(AntennaDetailsFull.Mode.TX)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .polarization(45.1)
                          .position("Top")
                          .addSize(0.03)
                          .addSize(0.05)
                          .startFrequency(2.1)
                          .steerable(false)
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .type("Reflector")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .addBattery(OnorbitBatteryFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitBatteryFull.DataMode.TEST)
                  .idBattery("BATTERY-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITBATTERY-ID")
                  .battery(BatteryFull.builder()
                      .dataMode(BatteryFull.DataMode.TEST)
                      .name("JAK-BATTERY-1479")
                      .source("Bluestaq")
                      .id("BATTERY-ID")
                      .addBatteryDetail(BatterydetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(BatterydetailsFull.DataMode.TEST)
                          .idBattery("BATTERY-ID")
                          .source("Bluestaq")
                          .id("BATTERYDETAILS-ID")
                          .capacity(10.1)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("example notes")
                          .dischargeDepth(0.2)
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .model("11212")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .technology("Ni-Cd")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(5)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .category(SeradataSpacecraftDetailTupleResponse.OnOrbit.Category.LUNAR)
              .commonName("Example common name")
              .constellation("Big Dipper")
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .idOnOrbit("ONORBIT-ID")
              .intlDes("2021123ABC")
              .launchDate(LocalDate.parse("2018-01-01"))
              .launchSiteId("LAUNCHSITE-ID")
              .lifetimeYears(10)
              .missionNumber("Expedition 1")
              .objectType(SeradataSpacecraftDetailTupleResponse.OnOrbit.ObjectType.PAYLOAD)
              .addOnorbitDetail(OnorbitDetailsFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitDetailsFull.DataMode.TEST)
                  .idOnOrbit("REF-ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITDETAILS-ID")
                  .additionalMass(10.23)
                  .adeptRadius(10.23)
                  .bolDeltaV(1000.1)
                  .bolFuelMass(10.23)
                  .busCrossSection(10.23)
                  .busType("A2100")
                  .colaRadius(10.23)
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .crossSection(10.23)
                  .currentMass(500.0)
                  .deltaVUnc(50.1)
                  .addDepEstMass(20.0)
                  .addDepEstMass(21.0)
                  .addDepMassUnc(10.0)
                  .addDepMassUnc(5.0)
                  .addDepName("GOES-18A")
                  .addDepName("GOES-18B")
                  .driftRate(1.23)
                  .dryMass(10.23)
                  .estDeltaVDuration(10.23)
                  .fuelRemaining(10.23)
                  .geoSlot(90.23)
                  .lastObSource("THIRD_PARTY_DATASOURCE")
                  .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                  .launchMass(10.23)
                  .launchMassMax(15.23)
                  .launchMassMin(5.23)
                  .maneuverable(false)
                  .maxDeltaV(10.23)
                  .maxRadius(10.23)
                  .addMissionType("Weather")
                  .addMissionType("Space Weather")
                  .numDeployable(2)
                  .numMission(2)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .rcs(10.23)
                  .rcsMax(15.23)
                  .rcsMean(10.23)
                  .rcsMin(5.23)
                  .refSource("Wikipedia")
                  .solarArrayArea(10.23)
                  .totalMassUnc(50.1)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .vismag(10.23)
                  .vismagMax(15.23)
                  .vismagMean(10.23)
                  .vismagMin(5.23)
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .addSolarArray(OnorbitSolarArrayFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                  .idOnOrbit("ONORBIT-ID")
                  .idSolarArray("SOLARARRAY-ID")
                  .source("Bluestaq")
                  .id("ONORBITSOLARARRAY-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(10)
                  .solarArray(SolarArrayFull.builder()
                      .dataMode(SolarArrayFull.DataMode.TEST)
                      .name("Solar1")
                      .source("Bluestaq")
                      .id("SOLARARRAY-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                          .idSolarArray("SOLARARRAY-ID")
                          .source("Bluestaq")
                          .id("SOLARARRAYDETAILS-ID")
                          .area(123.4)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example notes")
                          .junctionTechnology("Triple")
                          .manufacturerOrg(OrganizationFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationFull.DataMode.TEST)
                              .name("some.user")
                              .source("some.user")
                              .type("GOVERNMENT")
                              .id("ORGANIZATION-ID")
                              .active(false)
                              .category("Private company")
                              .countryCode("US")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .description("Example description")
                              .externalId("EXTERNAL-ID")
                              .nationality("US")
                              .addOrganizationDetail(OrganizationDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                  .idOrganization("ORGANIZATION-ID")
                                  .name("some.user")
                                  .source("some.user")
                                  .id("ORGANIZATIONDETAILS-ID")
                                  .address1("123 Main Street")
                                  .address2("Apt 4B")
                                  .address3("Colorado Springs CO, 80903")
                                  .broker("some.user")
                                  .ceo("some.user")
                                  .cfo("some.user")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cto("some.user")
                                  .description("Example description")
                                  .ebitda(123.4)
                                  .email("some_organization@organization.com")
                                  .financialNotes("Example notes")
                                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                  .fleetPlanNotes("Example notes")
                                  .formerOrgId("FORMERORG-ID")
                                  .ftes(123)
                                  .geoAdminLevel1("Colorado")
                                  .geoAdminLevel2("El Paso County")
                                  .geoAdminLevel3("Colorado Springs")
                                  .massRanking(123)
                                  .origin("some.user")
                                  .origNetwork("OPS1")
                                  .parentOrgId("PARENTORG-ID")
                                  .postalCode("80903")
                                  .profit(123.4)
                                  .revenue(123.4)
                                  .revenueRanking(123)
                                  .riskManager("some.user")
                                  .servicesNotes("Example notes")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .span(123.4)
                          .addTag("TAG1")
                          .addTag("TAG2")
                          .technology("Ga-As")
                          .type("U Shaped")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .addThruster(OnorbitThrusterFull.builder()
                  .classificationMarking("U")
                  .dataMode(OnorbitThrusterFull.DataMode.TEST)
                  .idEngine("ENGINE-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .source("Bluestaq")
                  .id("ONORBITTHRUSTER-ID")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .engine(Engine.builder()
                      .classificationMarking("U")
                      .dataMode(Engine.DataMode.TEST)
                      .name("ENGINE_VARIANT1")
                      .source("Bluestaq")
                      .id("ENGINE-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .addEngineDetail(EngineDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(EngineDetailsFull.DataMode.TEST)
                          .idEngine("ENGINE-ID")
                          .source("Bluestaq")
                          .id("ENGINEDETAILS-ID")
                          .burnTime(1.1)
                          .chamberPressure(1.1)
                          .characteristicType("Electric")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .cycleType("Pressure Fed")
                          .family("ENGINE_TYPE1")
                          .manufacturerOrgId("MANUFACTURERORG-ID")
                          .maxFirings(5)
                          .notes("Example notes")
                          .nozzleExpansionRatio(1.1)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("ORIG")
                          .oxidizer("Liquid Oxygen")
                          .propellant("Liquid")
                          .seaLevelThrust(1.1)
                          .specificImpulse(1.1)
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .vacuumThrust(1.1)
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("ORIG")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .quantity(10)
                  .type("Hydrazine REA")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .operator("operator")
          .operatorCountry("USA")
          .orbitCategory("GEO")
          .orbitSubCategory("Geostationary")
          .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .owner("owner")
          .ownerCountry("USA")
          .perigee(1.23)
          .period(1.23)
          .primaryMissionGroup("primaryMissionGroup")
          .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
          .programName("programName")
          .quantity(1)
          .reusableFlights("reusableFlights")
          .reusedHullName("reusedHullName")
          .addScientific(SeradataSpacecraftDetailTupleResponse.Scientific.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.Scientific.DataMode.TEST)
              .name("SEM/MAG")
              .source("Bluestaq")
              .spacecraftId("REF-SPACECRAFT-ID")
              .id("SCIENTIFIC-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .entity(EntityFull.builder()
                  .classificationMarking("U")
                  .dataMode(EntityFull.DataMode.TEST)
                  .name("Example name")
                  .source("Bluestaq")
                  .type(EntityFull.Type.ONORBIT)
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .idEntity("ENTITY-ID")
                  .idLocation("LOCATION-ID")
                  .idOnOrbit("ONORBIT-ID")
                  .idOperatingUnit("OPERATINGUNIT-ID")
                  .location(LocationFull.builder()
                      .classificationMarking("U")
                      .dataMode(LocationFull.DataMode.TEST)
                      .name("Example location")
                      .source("Bluestaq")
                      .altitude(10.23)
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .idLocation("LOCATION-ID")
                      .lat(45.23)
                      .lon(179.1)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .onOrbit(EntityFull.OnOrbit.builder()
                      .classificationMarking("U")
                      .dataMode(EntityFull.OnOrbit.DataMode.TEST)
                      .satNo(1)
                      .source("Bluestaq")
                      .altName("Alternate Name")
                      .addAntenna(OnorbitAntennaFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitAntennaFull.DataMode.TEST)
                          .idAntenna("ANTENNA-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITANTENNA-ID")
                          .antenna(AntennaFull.builder()
                              .dataMode(AntennaFull.DataMode.TEST)
                              .name("IRIDIUM NEXT 121-ANTENNA-10075")
                              .source("Bluestaq")
                              .id("ANTENNA-ID")
                              .addAntennaDetail(AntennaDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(AntennaDetailsFull.DataMode.TEST)
                                  .idAntenna("ANTENNA-ID")
                                  .source("Bluestaq")
                                  .id("ANTENNADETAILS-ID")
                                  .beamForming(false)
                                  .beamwidth(14.1)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Description of antenna A")
                                  .diameter(0.01)
                                  .endFrequency(3.3)
                                  .gain(20.1)
                                  .gainTolerance(5.1)
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTUREORG-ID")
                                  .mode(AntennaDetailsFull.Mode.TX)
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .polarization(45.1)
                                  .position("Top")
                                  .addSize(0.03)
                                  .addSize(0.05)
                                  .startFrequency(2.1)
                                  .steerable(false)
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .type("Reflector")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .addBattery(OnorbitBatteryFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitBatteryFull.DataMode.TEST)
                          .idBattery("BATTERY-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITBATTERY-ID")
                          .battery(BatteryFull.builder()
                              .dataMode(BatteryFull.DataMode.TEST)
                              .name("JAK-BATTERY-1479")
                              .source("Bluestaq")
                              .id("BATTERY-ID")
                              .addBatteryDetail(BatterydetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(BatterydetailsFull.DataMode.TEST)
                                  .idBattery("BATTERY-ID")
                                  .source("Bluestaq")
                                  .id("BATTERYDETAILS-ID")
                                  .capacity(10.1)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("example notes")
                                  .dischargeDepth(0.2)
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .model("11212")
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .technology("Ni-Cd")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(5)
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .category(EntityFull.OnOrbit.Category.LUNAR)
                      .commonName("Example common name")
                      .constellation("Big Dipper")
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .idOnOrbit("ONORBIT-ID")
                      .intlDes("2021123ABC")
                      .launchDate(LocalDate.parse("2018-01-01"))
                      .launchSiteId("LAUNCHSITE-ID")
                      .lifetimeYears(10)
                      .missionNumber("Expedition 1")
                      .objectType(EntityFull.OnOrbit.ObjectType.PAYLOAD)
                      .addOnorbitDetail(OnorbitDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitDetailsFull.DataMode.TEST)
                          .idOnOrbit("REF-ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITDETAILS-ID")
                          .additionalMass(10.23)
                          .adeptRadius(10.23)
                          .bolDeltaV(1000.1)
                          .bolFuelMass(10.23)
                          .busCrossSection(10.23)
                          .busType("A2100")
                          .colaRadius(10.23)
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .crossSection(10.23)
                          .currentMass(500.0)
                          .deltaVUnc(50.1)
                          .addDepEstMass(20.0)
                          .addDepEstMass(21.0)
                          .addDepMassUnc(10.0)
                          .addDepMassUnc(5.0)
                          .addDepName("GOES-18A")
                          .addDepName("GOES-18B")
                          .driftRate(1.23)
                          .dryMass(10.23)
                          .estDeltaVDuration(10.23)
                          .fuelRemaining(10.23)
                          .geoSlot(90.23)
                          .lastObSource("THIRD_PARTY_DATASOURCE")
                          .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                          .launchMass(10.23)
                          .launchMassMax(15.23)
                          .launchMassMin(5.23)
                          .maneuverable(false)
                          .maxDeltaV(10.23)
                          .maxRadius(10.23)
                          .addMissionType("Weather")
                          .addMissionType("Space Weather")
                          .numDeployable(2)
                          .numMission(2)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .rcs(10.23)
                          .rcsMax(15.23)
                          .rcsMean(10.23)
                          .rcsMin(5.23)
                          .refSource("Wikipedia")
                          .solarArrayArea(10.23)
                          .totalMassUnc(50.1)
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .vismag(10.23)
                          .vismagMax(15.23)
                          .vismagMean(10.23)
                          .vismagMin(5.23)
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .addSolarArray(OnorbitSolarArrayFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                          .idOnOrbit("ONORBIT-ID")
                          .idSolarArray("SOLARARRAY-ID")
                          .source("Bluestaq")
                          .id("ONORBITSOLARARRAY-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(10)
                          .solarArray(SolarArrayFull.builder()
                              .dataMode(SolarArrayFull.DataMode.TEST)
                              .name("Solar1")
                              .source("Bluestaq")
                              .id("SOLARARRAY-ID")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .addSolarArrayDetail(SolarArrayDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                                  .idSolarArray("SOLARARRAY-ID")
                                  .source("Bluestaq")
                                  .id("SOLARARRAYDETAILS-ID")
                                  .area(123.4)
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .description("Example notes")
                                  .junctionTechnology("Triple")
                                  .manufacturerOrg(OrganizationFull.builder()
                                      .classificationMarking("U")
                                      .dataMode(OrganizationFull.DataMode.TEST)
                                      .name("some.user")
                                      .source("some.user")
                                      .type("GOVERNMENT")
                                      .id("ORGANIZATION-ID")
                                      .active(false)
                                      .category("Private company")
                                      .countryCode("US")
                                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .createdBy("some.user")
                                      .description("Example description")
                                      .externalId("EXTERNAL-ID")
                                      .nationality("US")
                                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                                          .classificationMarking("U")
                                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                          .idOrganization("ORGANIZATION-ID")
                                          .name("some.user")
                                          .source("some.user")
                                          .id("ORGANIZATIONDETAILS-ID")
                                          .address1("123 Main Street")
                                          .address2("Apt 4B")
                                          .address3("Colorado Springs CO, 80903")
                                          .broker("some.user")
                                          .ceo("some.user")
                                          .cfo("some.user")
                                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .createdBy("some.user")
                                          .cto("some.user")
                                          .description("Example description")
                                          .ebitda(123.4)
                                          .email("some_organization@organization.com")
                                          .financialNotes("Example notes")
                                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                          .fleetPlanNotes("Example notes")
                                          .formerOrgId("FORMERORG-ID")
                                          .ftes(123)
                                          .geoAdminLevel1("Colorado")
                                          .geoAdminLevel2("El Paso County")
                                          .geoAdminLevel3("Colorado Springs")
                                          .massRanking(123)
                                          .origin("some.user")
                                          .origNetwork("OPS1")
                                          .parentOrgId("PARENTORG-ID")
                                          .postalCode("80903")
                                          .profit(123.4)
                                          .revenue(123.4)
                                          .revenueRanking(123)
                                          .riskManager("some.user")
                                          .servicesNotes("Example notes")
                                          .addTag("PROVIDER_TAG1")
                                          .addTag("PROVIDER_TAG2")
                                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                          .updatedBy("some.user")
                                          .build())
                                      .origin("some.user")
                                      .origNetwork("OPS1")
                                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                      .updatedBy("some.user")
                                      .build())
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .span(123.4)
                                  .addTag("TAG1")
                                  .addTag("TAG2")
                                  .technology("Ga-As")
                                  .type("U Shaped")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .build())
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .addThruster(OnorbitThrusterFull.builder()
                          .classificationMarking("U")
                          .dataMode(OnorbitThrusterFull.DataMode.TEST)
                          .idEngine("ENGINE-ID")
                          .idOnOrbit("ONORBIT-ID")
                          .source("Bluestaq")
                          .id("ONORBITTHRUSTER-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .engine(Engine.builder()
                              .classificationMarking("U")
                              .dataMode(Engine.DataMode.TEST)
                              .name("ENGINE_VARIANT1")
                              .source("Bluestaq")
                              .id("ENGINE-ID")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .addEngineDetail(EngineDetailsFull.builder()
                                  .classificationMarking("U")
                                  .dataMode(EngineDetailsFull.DataMode.TEST)
                                  .idEngine("ENGINE-ID")
                                  .source("Bluestaq")
                                  .id("ENGINEDETAILS-ID")
                                  .burnTime(1.1)
                                  .chamberPressure(1.1)
                                  .characteristicType("Electric")
                                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .createdBy("some.user")
                                  .cycleType("Pressure Fed")
                                  .family("ENGINE_TYPE1")
                                  .manufacturerOrgId("MANUFACTURERORG-ID")
                                  .maxFirings(5)
                                  .notes("Example notes")
                                  .nozzleExpansionRatio(1.1)
                                  .origin("THIRD_PARTY_DATASOURCE")
                                  .origNetwork("ORIG")
                                  .oxidizer("Liquid Oxygen")
                                  .propellant("Liquid")
                                  .seaLevelThrust(1.1)
                                  .specificImpulse(1.1)
                                  .addTag("PROVIDER_TAG1")
                                  .addTag("PROVIDER_TAG2")
                                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                  .updatedBy("some.user")
                                  .vacuumThrust(1.1)
                                  .build())
                              .origin("THIRD_PARTY_DATASOURCE")
                              .origNetwork("ORIG")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .quantity(10)
                          .type("Hydrazine REA")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .operatingUnit(OperatingunitFull.builder()
                      .classificationMarking("U")
                      .dataMode(OperatingunitFull.DataMode.TEST)
                      .name("SOME_NAME")
                      .source("some.user")
                      .airDefArea("AL006")
                      .allegiance("OTHR")
                      .altAllegiance("HL")
                      .altCountryCode("IZ")
                      .altOperatingUnitId("32100000000021")
                      .classRating("1")
                      .condition("RDY")
                      .conditionAvail("A")
                      .coord("340000000N0430000000E")
                      .coordDatum("WGS")
                      .coordDerivAcc(12.345)
                      .countryCode("IQ")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .deployStatus("ND")
                      .description("Description of unit")
                      .divCat("5")
                      .echelon("SHIP")
                      .echelonTier("68")
                      .elevMsl(123.45)
                      .elevMslConfLvl(50)
                      .elevMslDerivAcc(12.34)
                      .eval(7)
                      .flagFlown("IZ")
                      .fleetId("A")
                      .force("NV")
                      .forceName("FORCE-NAME")
                      .fpa("EOB")
                      .functRole("MIL")
                      .geoidalMslSep(12.34)
                      .idContact("CONTACT-ID")
                      .ident("FRIEND")
                      .idLocation("LOCATION-ID")
                      .idOperatingUnit("OPERATINGUNIT-ID")
                      .idOrganization("ORGANIZATION-ID")
                      .lat(45.23)
                      .location(LocationFull.builder()
                          .classificationMarking("U")
                          .dataMode(LocationFull.DataMode.TEST)
                          .name("Example location")
                          .source("Bluestaq")
                          .altitude(10.23)
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .idLocation("LOCATION-ID")
                          .lat(45.23)
                          .lon(179.1)
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .locName("LOCATION_NAME")
                      .locReason("GR")
                      .lon(179.1)
                      .masterUnit(true)
                      .milGrid("4QFJ12345678")
                      .milGridSys("UTM")
                      .msnPrimary("W6")
                      .msnPrimarySpecialty("QK")
                      .addOperatingUnitRemark(OperatingUnitRemarkFull.builder()
                          .classificationMarking("U")
                          .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                          .idOperatingUnit("OperatingUnit-ID")
                          .source("some.user")
                          .text("This is a remark")
                          .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                          .altRmkId("123456ABC")
                          .code("M")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .name("Remark name")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .type("Restriction")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .operStatus("OPR")
                      .organization(OrganizationFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationFull.DataMode.TEST)
                          .name("some.user")
                          .source("some.user")
                          .type("GOVERNMENT")
                          .id("ORGANIZATION-ID")
                          .active(false)
                          .category("Private company")
                          .countryCode("US")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .description("Example description")
                          .externalId("EXTERNAL-ID")
                          .nationality("US")
                          .addOrganizationDetail(OrganizationDetailsFull.builder()
                              .classificationMarking("U")
                              .dataMode(OrganizationDetailsFull.DataMode.TEST)
                              .idOrganization("ORGANIZATION-ID")
                              .name("some.user")
                              .source("some.user")
                              .id("ORGANIZATIONDETAILS-ID")
                              .address1("123 Main Street")
                              .address2("Apt 4B")
                              .address3("Colorado Springs CO, 80903")
                              .broker("some.user")
                              .ceo("some.user")
                              .cfo("some.user")
                              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .createdBy("some.user")
                              .cto("some.user")
                              .description("Example description")
                              .ebitda(123.4)
                              .email("some_organization@organization.com")
                              .financialNotes("Example notes")
                              .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                              .fleetPlanNotes("Example notes")
                              .formerOrgId("FORMERORG-ID")
                              .ftes(123)
                              .geoAdminLevel1("Colorado")
                              .geoAdminLevel2("El Paso County")
                              .geoAdminLevel3("Colorado Springs")
                              .massRanking(123)
                              .origin("some.user")
                              .origNetwork("OPS1")
                              .parentOrgId("PARENTORG-ID")
                              .postalCode("80903")
                              .profit(123.4)
                              .revenue(123.4)
                              .revenueRanking(123)
                              .riskManager("some.user")
                              .servicesNotes("Example notes")
                              .addTag("PROVIDER_TAG1")
                              .addTag("PROVIDER_TAG2")
                              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                              .updatedBy("some.user")
                              .build())
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("THIRD_PARTY_DATASOURCE")
                      .polSubdiv("IZ07")
                      .recStatus("A")
                      .referenceDoc("Provider Reference Documentation")
                      .resProd("RT")
                      .reviewDate(LocalDate.parse("2008-06-10"))
                      .stylizedUnit(true)
                      .symCode("SOGPU----------")
                      .unitIdentifier("AZXAZ12345")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .utm("19P4390691376966")
                      .wac("0427")
                      .build())
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .ownerType(EntityFull.OwnerType.COMMERCIAL)
                  .addRfBand(RfBandFull.builder()
                      .classificationMarking("U")
                      .dataMode(RfBandFull.DataMode.TEST)
                      .idEntity("ENTITY-ID")
                      .name("BAND_NAME")
                      .source("Bluestaq")
                      .id("RFBAND-ID")
                      .band("Ku")
                      .bandwidth(100.23)
                      .beamwidth(45.23)
                      .centerFreq(1000.23)
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .edgeGain(100.23)
                      .eirp(2.23)
                      .erp(2.23)
                      .freqMax(2000.23)
                      .freqMin(50.23)
                      .mode(RfBandFull.Mode.TX)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("OPS1")
                      .peakGain(120.23)
                      .polarization(RfBandFull.Polarization.H)
                      .purpose(RfBandFull.Purpose.TTC)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .addStatusCollection(StatusFull.builder()
                      .classificationMarking("U")
                      .dataMode(StatusFull.DataMode.TEST)
                      .idEntity("ENTITY-ID")
                      .source("Bluestaq")
                      .id("STATUS-ID")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                      .declassificationString("U")
                      .derivedFrom("SOME_SOURCE")
                      .notes("Example Notes")
                      .opsCap(StatusFull.OpsCap.FMC)
                      .origin("THIRD_PARTY_DATASOURCE")
                      .origNetwork("TST1")
                      .state(StatusFull.State.ACTIVE)
                      .addSubStatusCollection(SubStatusFull.builder()
                          .classificationMarking("U")
                          .dataMode(SubStatusFull.DataMode.TEST)
                          .notes("Sample Notes")
                          .source("Bluestaq")
                          .status(SubStatusFull.Status.FMC)
                          .statusId("REF-STATUS-ID")
                          .type(SubStatusFull.Type.MD_CAP)
                          .id("SUBSTATUS-ID")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .origin("THIRD_PARTY_DATASOURCE")
                          .origNetwork("TST1")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .sysCap(StatusFull.SysCap.FMC)
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .taskable(false)
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .addUrl("URL1")
                  .addUrl("URL2")
                  .build())
              .frequencyBand("Gamma")
              .hostedForCompanyOrgId("REF-HOSTEDFORCOMPANYORG-ID")
              .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
              .manufacturerOrgId("REF-MANUFACTURERORG-ID")
              .notes("NOTES")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .payloadCategory("Sensor")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .sector("Commercial")
          .addSeradataCommDetail(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataCommDetail.DataMode.TEST)
              .source("Bluestaq")
              .id("SERADATACOMMDETAILS-ID")
              .band("X")
              .bandwidth(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .eirp(1.23)
              .estHtsTotalCapacity(1.23)
              .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
              .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
              .gatewayDownlinkFrom(1.23)
              .gatewayDownlinkTo(1.23)
              .gatewayUplinkFrom(1.23)
              .gatewayUplinkTo(1.23)
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .htsNumUserSpotBeams(1)
              .htsUserDownlinkBandwidthPerBeam(1.23)
              .htsUserUplinkBandwidthPerBeam(1.23)
              .idComm("idComm")
              .manufacturerOrgId("manufacturerOrgId")
              .num36MhzEquivalentTransponders(1)
              .numOperationalTransponders(1)
              .numSpareTransponders(1)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .payloadNotes("Sample Notes")
              .polarization("polarization")
              .solidStatePowerAmp(1.23)
              .spacecraftId("spacecraftId")
              .tradeLeaseOrgId("tradeLeaseOrgId")
              .travelingWaveTubeAmplifier(1.23)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .userDownlinkFrom(1.23)
              .userDownlinkTo(1.23)
              .userUplinkFrom(1.23)
              .userUplinkTo(1.23)
              .build())
          .addSeradataEarlyWarning(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataEarlyWarning.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATAEARLYWARNING-ID")
              .bestResolution(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .earthPointing(true)
              .frequencyLimits("frequencyLimits")
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idIr("idIR")
              .manufacturerOrgId("manufacturerOrgId")
              .missileLaunchPhaseDetectionAbility("missileLaunchPhaseDetectionAbility")
              .name("Infra red telescope")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraftId("partnerSpacecraftId")
              .payloadNotes("Sample Notes")
              .spectralBands("Infra-Red")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataNavigation(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataNavigation.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATANAVIGATION-ID")
              .areaCoverage("Worldwide")
              .clockType("Rubidium")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idNavigation("idNavigation")
              .locationAccuracy(1.23)
              .manufacturerOrgId("manufacturerOrgId")
              .modeFrequency("1234")
              .modes("Military")
              .name("WAAS GEO-5")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraftId("partnerSpacecraftId")
              .payloadType("WAAS")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataOpticalPayload(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataOpticalPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATAOPTICALPAYLOAD-ID")
              .bestResolution(1.23)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .fieldOfRegard(1.23)
              .fieldOfView(1.23)
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("idSensor")
              .imagingPayloadCategory("Infrared")
              .manufacturerOrgId("manufacturerOrgId")
              .name("TOURNESOL")
              .notes("Sample Notes")
              .numberOfFilmReturnCanisters(1L)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .pointingMethod("Spacecraft")
              .recorderSize("1024")
              .spectralBand("Green")
              .spectralFrequencyLimits("0.51")
              .swathWidth(1.23)
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .addSeradataRadarPayload(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataRadarPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("12345")
              .id("SERADATARADARPAYLOAD-ID")
              .bandwidth(1.23)
              .bestResolution(1.23)
              .category("SAR")
              .constellationInterferometricCapability("constellationInterferometricCapability")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .dutyCycle("dutyCycle")
              .fieldOfRegard(1.23)
              .fieldOfView(1.23)
              .frequency(1.23)
              .frequencyBand("X")
              .groundStationLocations("51,42N-44,35E")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
              .manufacturerOrgId("manufacturerOrgId")
              .name("ALT")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .partnerSpacecraft("partnerSpacecraft")
              .pointingMethod("Spacecraft")
              .receivePolarization("Lin Dual")
              .recorderSize("256")
              .swathWidth(1.23)
              .transmitPolarization("Lin Dual")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .waveLength(1.23)
              .build())
          .addSeradataSigIntPayload(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.builder()
              .classificationMarking("U")
              .dataMode(SeradataSpacecraftDetailTupleResponse.SeradataSigIntPayload.DataMode.TEST)
              .source("Bluestaq")
              .spacecraftId("spacecraftId")
              .id("SERADATASIGINTPAYLOAD-ID")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .frequencyCoverage("1.1 to 3.3")
              .groundStationLocations("groundStationLocations")
              .groundStations("groundStations")
              .hostedForCompanyOrgId("hostedForCompanyOrgId")
              .idSensor("0c5ec9c0-10cd-1d35-c46b-3764c4d76e13")
              .interceptParameters("interceptParameters")
              .manufacturerOrgId("manufacturerOrgId")
              .name("Sensor Name")
              .notes("Sample Notes")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .positionalAccuracy("positionalAccuracy")
              .swathWidth(1.23)
              .type("Comint")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .serialNumber("serialNumber")
          .stabilizer("3-Axis")
          .status("Inactive - Retired")
          .totalClaims(1)
          .totalFatalities(1)
          .totalInjuries(1)
          .totalPayloadPower(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .youtubeLaunchLink("youtubeLaunchLink")
          .build()

      val roundtrippedSeradataSpacecraftDetailTupleResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(seradataSpacecraftDetailTupleResponse), jacksonTypeRef<SeradataSpacecraftDetailTupleResponse>())

      assertThat(roundtrippedSeradataSpacecraftDetailTupleResponse).isEqualTo(seradataSpacecraftDetailTupleResponse)
    }
}
