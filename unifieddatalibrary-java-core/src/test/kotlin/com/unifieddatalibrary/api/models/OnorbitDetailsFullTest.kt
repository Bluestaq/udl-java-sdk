// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.OnorbitDetailsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitDetailsFullTest {

    @Test
    fun create() {
      val onorbitDetailsFull = OnorbitDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(OnorbitDetailsFull.DataMode.TEST)
          .idOnOrbit("REF-ONORBIT-ID")
          .source("Bluestaq")
          .id("ONORBITDETAILS-ID")
          .additionalMass(10.23)
          .adeptRadius(10.23)
          .bolDeltaV(1000.1)
          .bolFuelMass(10.23)
          .busCrossSection(10.23)
          .busType("A2100")
          .colaRadius(10.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .crossSection(10.23)
          .currentMass(500.0)
          .deltaVUnc(50.1)
          .addDepEstMass(20.0)
          .addDepEstMass(21.0)
          .addDepMassUnc(10.0)
          .addDepMassUnc(5.0)
          .addDepName("GOES-18A")
          .addDepName("GOES-18B")
          .driftRate(1.23)
          .dryMass(10.23)
          .estDeltaVDuration(10.23)
          .fuelRemaining(10.23)
          .geoSlot(90.23)
          .lastObSource("THIRD_PARTY_DATASOURCE")
          .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
          .launchMass(10.23)
          .launchMassMax(15.23)
          .launchMassMin(5.23)
          .maneuverable(false)
          .maxDeltaV(10.23)
          .maxRadius(10.23)
          .addMissionType("Weather")
          .addMissionType("Space Weather")
          .numDeployable(2)
          .numMission(2)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .rcs(10.23)
          .rcsMax(15.23)
          .rcsMean(10.23)
          .rcsMin(5.23)
          .refSource("Wikipedia")
          .solarArrayArea(10.23)
          .totalMassUnc(50.1)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .vismag(10.23)
          .vismagMax(15.23)
          .vismagMean(10.23)
          .vismagMin(5.23)
          .build()

      assertThat(onorbitDetailsFull.classificationMarking()).isEqualTo("U")
      assertThat(onorbitDetailsFull.dataMode()).isEqualTo(OnorbitDetailsFull.DataMode.TEST)
      assertThat(onorbitDetailsFull.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
      assertThat(onorbitDetailsFull.source()).isEqualTo("Bluestaq")
      assertThat(onorbitDetailsFull.id()).contains("ONORBITDETAILS-ID")
      assertThat(onorbitDetailsFull.additionalMass()).contains(10.23)
      assertThat(onorbitDetailsFull.adeptRadius()).contains(10.23)
      assertThat(onorbitDetailsFull.bolDeltaV()).contains(1000.1)
      assertThat(onorbitDetailsFull.bolFuelMass()).contains(10.23)
      assertThat(onorbitDetailsFull.busCrossSection()).contains(10.23)
      assertThat(onorbitDetailsFull.busType()).contains("A2100")
      assertThat(onorbitDetailsFull.colaRadius()).contains(10.23)
      assertThat(onorbitDetailsFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(onorbitDetailsFull.createdBy()).contains("some.user")
      assertThat(onorbitDetailsFull.crossSection()).contains(10.23)
      assertThat(onorbitDetailsFull.currentMass()).contains(500.0)
      assertThat(onorbitDetailsFull.deltaVUnc()).contains(50.1)
      assertThat(onorbitDetailsFull.depEstMasses().getOrNull()).containsExactly(20.0, 21.0)
      assertThat(onorbitDetailsFull.depMassUncs().getOrNull()).containsExactly(10.0, 5.0)
      assertThat(onorbitDetailsFull.depNames().getOrNull()).containsExactly("GOES-18A", "GOES-18B")
      assertThat(onorbitDetailsFull.driftRate()).contains(1.23)
      assertThat(onorbitDetailsFull.dryMass()).contains(10.23)
      assertThat(onorbitDetailsFull.estDeltaVDuration()).contains(10.23)
      assertThat(onorbitDetailsFull.fuelRemaining()).contains(10.23)
      assertThat(onorbitDetailsFull.geoSlot()).contains(90.23)
      assertThat(onorbitDetailsFull.lastObSource()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(onorbitDetailsFull.lastObTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
      assertThat(onorbitDetailsFull.launchMass()).contains(10.23)
      assertThat(onorbitDetailsFull.launchMassMax()).contains(15.23)
      assertThat(onorbitDetailsFull.launchMassMin()).contains(5.23)
      assertThat(onorbitDetailsFull.maneuverable()).contains(false)
      assertThat(onorbitDetailsFull.maxDeltaV()).contains(10.23)
      assertThat(onorbitDetailsFull.maxRadius()).contains(10.23)
      assertThat(onorbitDetailsFull.missionTypes().getOrNull()).containsExactly("Weather", "Space Weather")
      assertThat(onorbitDetailsFull.numDeployable()).contains(2)
      assertThat(onorbitDetailsFull.numMission()).contains(2)
      assertThat(onorbitDetailsFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(onorbitDetailsFull.origNetwork()).contains("OPS1")
      assertThat(onorbitDetailsFull.rcs()).contains(10.23)
      assertThat(onorbitDetailsFull.rcsMax()).contains(15.23)
      assertThat(onorbitDetailsFull.rcsMean()).contains(10.23)
      assertThat(onorbitDetailsFull.rcsMin()).contains(5.23)
      assertThat(onorbitDetailsFull.refSource()).contains("Wikipedia")
      assertThat(onorbitDetailsFull.solarArrayArea()).contains(10.23)
      assertThat(onorbitDetailsFull.totalMassUnc()).contains(50.1)
      assertThat(onorbitDetailsFull.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(onorbitDetailsFull.updatedBy()).contains("some.user")
      assertThat(onorbitDetailsFull.vismag()).contains(10.23)
      assertThat(onorbitDetailsFull.vismagMax()).contains(15.23)
      assertThat(onorbitDetailsFull.vismagMean()).contains(10.23)
      assertThat(onorbitDetailsFull.vismagMin()).contains(5.23)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val onorbitDetailsFull = OnorbitDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(OnorbitDetailsFull.DataMode.TEST)
          .idOnOrbit("REF-ONORBIT-ID")
          .source("Bluestaq")
          .id("ONORBITDETAILS-ID")
          .additionalMass(10.23)
          .adeptRadius(10.23)
          .bolDeltaV(1000.1)
          .bolFuelMass(10.23)
          .busCrossSection(10.23)
          .busType("A2100")
          .colaRadius(10.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .crossSection(10.23)
          .currentMass(500.0)
          .deltaVUnc(50.1)
          .addDepEstMass(20.0)
          .addDepEstMass(21.0)
          .addDepMassUnc(10.0)
          .addDepMassUnc(5.0)
          .addDepName("GOES-18A")
          .addDepName("GOES-18B")
          .driftRate(1.23)
          .dryMass(10.23)
          .estDeltaVDuration(10.23)
          .fuelRemaining(10.23)
          .geoSlot(90.23)
          .lastObSource("THIRD_PARTY_DATASOURCE")
          .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
          .launchMass(10.23)
          .launchMassMax(15.23)
          .launchMassMin(5.23)
          .maneuverable(false)
          .maxDeltaV(10.23)
          .maxRadius(10.23)
          .addMissionType("Weather")
          .addMissionType("Space Weather")
          .numDeployable(2)
          .numMission(2)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .rcs(10.23)
          .rcsMax(15.23)
          .rcsMean(10.23)
          .rcsMin(5.23)
          .refSource("Wikipedia")
          .solarArrayArea(10.23)
          .totalMassUnc(50.1)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .vismag(10.23)
          .vismagMax(15.23)
          .vismagMean(10.23)
          .vismagMin(5.23)
          .build()

      val roundtrippedOnorbitDetailsFull = jsonMapper.readValue(jsonMapper.writeValueAsString(onorbitDetailsFull), jacksonTypeRef<OnorbitDetailsFull>())

      assertThat(roundtrippedOnorbitDetailsFull).isEqualTo(onorbitDetailsFull)
    }
}
