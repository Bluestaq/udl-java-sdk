// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.reportandactivities.udlh3geo

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class UdlH3geoUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        UdlH3geoUnvalidatedPublishParams.builder()
            .addCell(
                UdlH3geoUnvalidatedPublishParams.Cell.builder()
                    .cellId("830b90fffffffff")
                    .classificationMarking("U")
                    .dataMode(UdlH3geoUnvalidatedPublishParams.Cell.DataMode.TEST)
                    .source("Bluestaq")
                    .id("443fg911-4ab6-3d74-1991-372149d87f89")
                    .altMean(450.1)
                    .altSigma(400.1)
                    .anomScoreInterference(0.125)
                    .anomScoreSpoofing(0.125)
                    .changeScore(12.34)
                    .coverage(8)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idH3Geo("026dd511-8ba5-47d3-9909-836149f87686")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .rpmMax(50.1)
                    .rpmMean(47.953125)
                    .rpmMedian(48.375)
                    .rpmMin(43.1)
                    .rpmSigma(1.23)
                    .sourceDl("AXE")
                    .build()
            )
            .classificationMarking("U")
            .dataMode(UdlH3geoUnvalidatedPublishParams.DataMode.TEST)
            .numCells(1)
            .source("Bluestaq")
            .startTime(OffsetDateTime.parse("2024-07-02T00:00:00.123Z"))
            .id("026dd511-8ba5-47d3-9909-836149f87686")
            .centerFreq(1575.42)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .endTime(OffsetDateTime.parse("2024-07-03T00:00:00.123Z"))
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .resolution(3)
            .sourceDl("AXE")
            .addTag("TAG1")
            .addTag("TAG2")
            .type("Cell Towers")
            .build()
    }

    @Test
    fun body() {
        val params =
            UdlH3geoUnvalidatedPublishParams.builder()
                .addCell(
                    UdlH3geoUnvalidatedPublishParams.Cell.builder()
                        .cellId("830b90fffffffff")
                        .classificationMarking("U")
                        .dataMode(UdlH3geoUnvalidatedPublishParams.Cell.DataMode.TEST)
                        .source("Bluestaq")
                        .id("443fg911-4ab6-3d74-1991-372149d87f89")
                        .altMean(450.1)
                        .altSigma(400.1)
                        .anomScoreInterference(0.125)
                        .anomScoreSpoofing(0.125)
                        .changeScore(12.34)
                        .coverage(8)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idH3Geo("026dd511-8ba5-47d3-9909-836149f87686")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .rpmMax(50.1)
                        .rpmMean(47.953125)
                        .rpmMedian(48.375)
                        .rpmMin(43.1)
                        .rpmSigma(1.23)
                        .sourceDl("AXE")
                        .build()
                )
                .classificationMarking("U")
                .dataMode(UdlH3geoUnvalidatedPublishParams.DataMode.TEST)
                .numCells(1)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2024-07-02T00:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .centerFreq(1575.42)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .endTime(OffsetDateTime.parse("2024-07-03T00:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .resolution(3)
                .sourceDl("AXE")
                .addTag("TAG1")
                .addTag("TAG2")
                .type("Cell Towers")
                .build()

        val body = params._body()

        assertThat(body.cells())
            .containsExactly(
                UdlH3geoUnvalidatedPublishParams.Cell.builder()
                    .cellId("830b90fffffffff")
                    .classificationMarking("U")
                    .dataMode(UdlH3geoUnvalidatedPublishParams.Cell.DataMode.TEST)
                    .source("Bluestaq")
                    .id("443fg911-4ab6-3d74-1991-372149d87f89")
                    .altMean(450.1)
                    .altSigma(400.1)
                    .anomScoreInterference(0.125)
                    .anomScoreSpoofing(0.125)
                    .changeScore(12.34)
                    .coverage(8)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idH3Geo("026dd511-8ba5-47d3-9909-836149f87686")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .rpmMax(50.1)
                    .rpmMean(47.953125)
                    .rpmMedian(48.375)
                    .rpmMin(43.1)
                    .rpmSigma(1.23)
                    .sourceDl("AXE")
                    .build()
            )
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(UdlH3geoUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.numCells()).isEqualTo(1)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2024-07-02T00:00:00.123Z"))
        assertThat(body.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(body.centerFreq()).contains(1575.42)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.endTime()).contains(OffsetDateTime.parse("2024-07-03T00:00:00.123Z"))
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.resolution()).contains(3)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.type()).contains("Cell Towers")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            UdlH3geoUnvalidatedPublishParams.builder()
                .addCell(
                    UdlH3geoUnvalidatedPublishParams.Cell.builder()
                        .cellId("830b90fffffffff")
                        .classificationMarking("U")
                        .dataMode(UdlH3geoUnvalidatedPublishParams.Cell.DataMode.TEST)
                        .source("Bluestaq")
                        .build()
                )
                .classificationMarking("U")
                .dataMode(UdlH3geoUnvalidatedPublishParams.DataMode.TEST)
                .numCells(1)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2024-07-02T00:00:00.123Z"))
                .build()

        val body = params._body()

        assertThat(body.cells())
            .containsExactly(
                UdlH3geoUnvalidatedPublishParams.Cell.builder()
                    .cellId("830b90fffffffff")
                    .classificationMarking("U")
                    .dataMode(UdlH3geoUnvalidatedPublishParams.Cell.DataMode.TEST)
                    .source("Bluestaq")
                    .build()
            )
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(UdlH3geoUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.numCells()).isEqualTo(1)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2024-07-02T00:00:00.123Z"))
    }
}
