// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.passiveradarobservation

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PassiveRadarObservationFileCreateParamsTest {

    @Test
    fun create() {
        PassiveRadarObservationFileCreateParams.builder()
            .addBody(
                PassiveRadarObservationFileCreateParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PassiveRadarObservationFileCreateParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                    .source("Bluestaq")
                    .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                    .accel(1.23)
                    .accelUnc(0.1)
                    .alt(478.056378)
                    .azimuth(134.5)
                    .azimuthBias(0.123)
                    .azimuthRate(0.5)
                    .azimuthUnc(0.5)
                    .bistaticRange(754.8212)
                    .bistaticRangeAccel(1.23)
                    .bistaticRangeAccelUnc(0.1)
                    .bistaticRangeBias(2.34)
                    .bistaticRangeRate(-0.30222)
                    .bistaticRangeRateUnc(0.123)
                    .bistaticRangeUnc(5.1)
                    .coning(60.1)
                    .coningUnc(0.5)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(10.23)
                    .delay(0.00505820232809312)
                    .delayBias(0.00000123)
                    .delayUnc(0.0000031)
                    .descriptor("Descriptor")
                    .doppler(-101.781641000597)
                    .dopplerUnc(0.2)
                    .elevation(76.1)
                    .elevationBias(0.123)
                    .elevationRate(0.5)
                    .elevationUnc(0.5)
                    .extObservationId("26892")
                    .idOnOrbit("40699")
                    .idRfEmitter("RED_CLIFFS_3ABCRN")
                    .idSensor("OCULUSA")
                    .idSensorRefReceiver("OculusRef1")
                    .lat(-35.1181763996856)
                    .lon(139.613567052763)
                    .obPosition("FIRST")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .orthogonalRcs(10.23)
                    .orthogonalRcsUnc(1.23)
                    .ra(1.23)
                    .rcs(100.23)
                    .rcsUnc(1.23)
                    .satNo(40699)
                    .snr(17.292053)
                    .sourceDl("AXE")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taskId("TASK-ID")
                    .timingBias(1.23)
                    .tof(0.00592856674135648)
                    .tofBias(0.00000123)
                    .tofUnc(0.0000031)
                    .trackId("12212")
                    .transactionId("TRANSACTION-ID")
                    .type("RADAR")
                    .uct(false)
                    .xvel(1.23)
                    .yvel(3.21)
                    .zvel(3.12)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            PassiveRadarObservationFileCreateParams.builder()
                .addBody(
                    PassiveRadarObservationFileCreateParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(PassiveRadarObservationFileCreateParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                        .source("Bluestaq")
                        .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                        .accel(1.23)
                        .accelUnc(0.1)
                        .alt(478.056378)
                        .azimuth(134.5)
                        .azimuthBias(0.123)
                        .azimuthRate(0.5)
                        .azimuthUnc(0.5)
                        .bistaticRange(754.8212)
                        .bistaticRangeAccel(1.23)
                        .bistaticRangeAccelUnc(0.1)
                        .bistaticRangeBias(2.34)
                        .bistaticRangeRate(-0.30222)
                        .bistaticRangeRateUnc(0.123)
                        .bistaticRangeUnc(5.1)
                        .coning(60.1)
                        .coningUnc(0.5)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .declination(10.23)
                        .delay(0.00505820232809312)
                        .delayBias(0.00000123)
                        .delayUnc(0.0000031)
                        .descriptor("Descriptor")
                        .doppler(-101.781641000597)
                        .dopplerUnc(0.2)
                        .elevation(76.1)
                        .elevationBias(0.123)
                        .elevationRate(0.5)
                        .elevationUnc(0.5)
                        .extObservationId("26892")
                        .idOnOrbit("40699")
                        .idRfEmitter("RED_CLIFFS_3ABCRN")
                        .idSensor("OCULUSA")
                        .idSensorRefReceiver("OculusRef1")
                        .lat(-35.1181763996856)
                        .lon(139.613567052763)
                        .obPosition("FIRST")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .origSensorId("ORIGSENSOR-ID")
                        .orthogonalRcs(10.23)
                        .orthogonalRcsUnc(1.23)
                        .ra(1.23)
                        .rcs(100.23)
                        .rcsUnc(1.23)
                        .satNo(40699)
                        .snr(17.292053)
                        .sourceDl("AXE")
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .taskId("TASK-ID")
                        .timingBias(1.23)
                        .tof(0.00592856674135648)
                        .tofBias(0.00000123)
                        .tofUnc(0.0000031)
                        .trackId("12212")
                        .transactionId("TRANSACTION-ID")
                        .type("RADAR")
                        .uct(false)
                        .xvel(1.23)
                        .yvel(3.21)
                        .zvel(3.12)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                PassiveRadarObservationFileCreateParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PassiveRadarObservationFileCreateParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                    .source("Bluestaq")
                    .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                    .accel(1.23)
                    .accelUnc(0.1)
                    .alt(478.056378)
                    .azimuth(134.5)
                    .azimuthBias(0.123)
                    .azimuthRate(0.5)
                    .azimuthUnc(0.5)
                    .bistaticRange(754.8212)
                    .bistaticRangeAccel(1.23)
                    .bistaticRangeAccelUnc(0.1)
                    .bistaticRangeBias(2.34)
                    .bistaticRangeRate(-0.30222)
                    .bistaticRangeRateUnc(0.123)
                    .bistaticRangeUnc(5.1)
                    .coning(60.1)
                    .coningUnc(0.5)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(10.23)
                    .delay(0.00505820232809312)
                    .delayBias(0.00000123)
                    .delayUnc(0.0000031)
                    .descriptor("Descriptor")
                    .doppler(-101.781641000597)
                    .dopplerUnc(0.2)
                    .elevation(76.1)
                    .elevationBias(0.123)
                    .elevationRate(0.5)
                    .elevationUnc(0.5)
                    .extObservationId("26892")
                    .idOnOrbit("40699")
                    .idRfEmitter("RED_CLIFFS_3ABCRN")
                    .idSensor("OCULUSA")
                    .idSensorRefReceiver("OculusRef1")
                    .lat(-35.1181763996856)
                    .lon(139.613567052763)
                    .obPosition("FIRST")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .orthogonalRcs(10.23)
                    .orthogonalRcsUnc(1.23)
                    .ra(1.23)
                    .rcs(100.23)
                    .rcsUnc(1.23)
                    .satNo(40699)
                    .snr(17.292053)
                    .sourceDl("AXE")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taskId("TASK-ID")
                    .timingBias(1.23)
                    .tof(0.00592856674135648)
                    .tofBias(0.00000123)
                    .tofUnc(0.0000031)
                    .trackId("12212")
                    .transactionId("TRANSACTION-ID")
                    .type("RADAR")
                    .uct(false)
                    .xvel(1.23)
                    .yvel(3.21)
                    .zvel(3.12)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            PassiveRadarObservationFileCreateParams.builder()
                .addBody(
                    PassiveRadarObservationFileCreateParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(PassiveRadarObservationFileCreateParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                        .source("Bluestaq")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                PassiveRadarObservationFileCreateParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PassiveRadarObservationFileCreateParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                    .source("Bluestaq")
                    .build()
            )
    }
}
