// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.linkstatus.datalink

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DatalinkTupleResponseTest {

    @Test
    fun create() {
        val datalinkTupleResponse =
            DatalinkTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(DatalinkTupleResponse.DataMode.TEST)
                .opExName("DESERT WIND")
                .originator("USCENTCOM")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAckInstUnit("AOC EXT 2345")
                .addAckInstUnit("317 AW")
                .ackReq(true)
                .altDiff(20)
                .canxId("ABSTAT")
                .canxOriginator("505 AOC")
                .canxSerialNum("ABC1234567")
                .addCanxSiC("RDU")
                .addCanxSiC("X234BS")
                .canxSpecialNotation("PASEP")
                .canxTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                .addClassReason("15C")
                .addClassReason("15D")
                .classSource("USJFCOM EXORD SOLID WASTE 98")
                .consecDecorr(3)
                .courseDiff(60)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDecExemptCode("X1")
                .addDecExemptCode("X2")
                .addDecInstDate("AT EXERCISE ENDEX")
                .addDecInstDate("DATE:25NOV1997")
                .decorrWinMult(1.7)
                .geoDatum("EUR-T")
                .jreCallSign("CHARLIE ONE")
                .jreDetails("JRE details")
                .jrePriAdd(71777)
                .jreSecAdd(77771)
                .jreUnitDes("CVN-72")
                .maxGeoPosQual(12)
                .maxTrackQual(12)
                .mgmtCode("VICTOR")
                .mgmtCodeMeaning("ORBIT AT POINT BRAVO")
                .minGeoPosQual(3)
                .minTrackQual(6)
                .month("OCT")
                .addMultiDuty(
                    DatalinkTupleResponse.MultiDuty.builder()
                        .duty("SICO")
                        .addDutyTeleFreqNum("TEL:804-555-4142")
                        .addDutyTeleFreqNum("TEL:804-867-5309")
                        .addMultiDutyVoiceCoord(
                            DatalinkTupleResponse.MultiDuty.MultiDutyVoiceCoord.builder()
                                .multiCommPri("P")
                                .multiFreqDes("ST300A")
                                .addMultiTeleFreqNum("TEL:804-555-4142")
                                .addMultiTeleFreqNum("TEL:804-867-5309")
                                .multiVoiceNetDes("VPN")
                                .build()
                        )
                        .name("POPOVICH")
                        .rank("LCDR")
                        .unitDes("SHIP:STENNIS")
                        .build()
                )
                .addNonLinkUnitDe("CS:GRAY GHOST")
                .addNonLinkUnitDe("CS:WHITE WHALE")
                .opExInfo("CONTROL")
                .opExInfoAlt("ORANGE")
                .addOp(
                    DatalinkTupleResponse.Op.builder()
                        .linkDetails("Link details")
                        .linkName("Link-16")
                        .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                        .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                        .linkStopTimeMod("AFTER")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .planOrigNum("SACEUR 106")
                .pocCallSign("4077 MASH")
                .pocLat(45.23)
                .pocLocName("CAMP SWAMPY")
                .pocLon(179.1)
                .pocName("F. BURNS")
                .addPocNum("TEL:804-555-4142")
                .addPocNum("TEL:804-867-5309")
                .pocRank("MAJ")
                .qualifier("CHG")
                .qualSn(1)
                .rawFileUri("Example URI")
                .addReference(
                    DatalinkTupleResponse.Reference.builder()
                        .refOriginator("CENTCOM")
                        .refSerialId("A")
                        .refSerialNum("1402001")
                        .addRefSiC("RDU")
                        .addRefSiC("C-123-92")
                        .refSpecialNotation("NOTAL")
                        .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                        .refType("ABSTAT")
                        .build()
                )
                .addRefPoint(
                    DatalinkTupleResponse.RefPoint.builder()
                        .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                        .refDes("L5")
                        .refLat(45.23)
                        .refLocName("FORT BRAGG")
                        .refLon(179.1)
                        .refPointType("DLRP")
                        .build()
                )
                .addRemark(
                    DatalinkTupleResponse.Remark.builder()
                        .text("Example data link remarks")
                        .type("CONTINGENCY PROCEDURES")
                        .build()
                )
                .resTrackQual(3)
                .serialNum("1201003")
                .sourceDl("AXE")
                .addSpecTrack(
                    DatalinkTupleResponse.SpecTrack.builder()
                        .specTrackNum("12345")
                        .specTrackNumDesc("SAM SITE CHARLIE")
                        .build()
                )
                .speedDiff(50)
                .stopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                .stopTimeMod("AFTER")
                .sysDefaultCode("MAN")
                .addTrackNumBlockLl(1234)
                .addTrackNumBlockLl(2345)
                .addTrackNumBlock("0200-0300")
                .addTrackNumBlock("0400-4412")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addVoiceCoord(
                    DatalinkTupleResponse.VoiceCoord.builder()
                        .commPri("P")
                        .freqDes("ST300A")
                        .addTeleFreqNum("TEL:804-555-4142")
                        .addTeleFreqNum("TEL:804-867-5309")
                        .voiceNetDes("VPN")
                        .build()
                )
                .winSizeMin(1.25)
                .winSizeMult(2.1)
                .build()

        assertThat(datalinkTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(datalinkTupleResponse.dataMode()).isEqualTo(DatalinkTupleResponse.DataMode.TEST)
        assertThat(datalinkTupleResponse.opExName()).isEqualTo("DESERT WIND")
        assertThat(datalinkTupleResponse.originator()).isEqualTo("USCENTCOM")
        assertThat(datalinkTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(datalinkTupleResponse.startTime())
            .isEqualTo(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
        assertThat(datalinkTupleResponse.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(datalinkTupleResponse.ackInstUnits().getOrNull())
            .containsExactly("AOC EXT 2345", "317 AW")
        assertThat(datalinkTupleResponse.ackReq()).contains(true)
        assertThat(datalinkTupleResponse.altDiff()).contains(20)
        assertThat(datalinkTupleResponse.canxId()).contains("ABSTAT")
        assertThat(datalinkTupleResponse.canxOriginator()).contains("505 AOC")
        assertThat(datalinkTupleResponse.canxSerialNum()).contains("ABC1234567")
        assertThat(datalinkTupleResponse.canxSiCs().getOrNull()).containsExactly("RDU", "X234BS")
        assertThat(datalinkTupleResponse.canxSpecialNotation()).contains("PASEP")
        assertThat(datalinkTupleResponse.canxTs())
            .contains(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
        assertThat(datalinkTupleResponse.classReasons().getOrNull()).containsExactly("15C", "15D")
        assertThat(datalinkTupleResponse.classSource()).contains("USJFCOM EXORD SOLID WASTE 98")
        assertThat(datalinkTupleResponse.consecDecorr()).contains(3)
        assertThat(datalinkTupleResponse.courseDiff()).contains(60)
        assertThat(datalinkTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(datalinkTupleResponse.createdBy()).contains("some.user")
        assertThat(datalinkTupleResponse.decExemptCodes().getOrNull()).containsExactly("X1", "X2")
        assertThat(datalinkTupleResponse.decInstDates().getOrNull())
            .containsExactly("AT EXERCISE ENDEX", "DATE:25NOV1997")
        assertThat(datalinkTupleResponse.decorrWinMult()).contains(1.7)
        assertThat(datalinkTupleResponse.geoDatum()).contains("EUR-T")
        assertThat(datalinkTupleResponse.jreCallSign()).contains("CHARLIE ONE")
        assertThat(datalinkTupleResponse.jreDetails()).contains("JRE details")
        assertThat(datalinkTupleResponse.jrePriAdd()).contains(71777)
        assertThat(datalinkTupleResponse.jreSecAdd()).contains(77771)
        assertThat(datalinkTupleResponse.jreUnitDes()).contains("CVN-72")
        assertThat(datalinkTupleResponse.maxGeoPosQual()).contains(12)
        assertThat(datalinkTupleResponse.maxTrackQual()).contains(12)
        assertThat(datalinkTupleResponse.mgmtCode()).contains("VICTOR")
        assertThat(datalinkTupleResponse.mgmtCodeMeaning()).contains("ORBIT AT POINT BRAVO")
        assertThat(datalinkTupleResponse.minGeoPosQual()).contains(3)
        assertThat(datalinkTupleResponse.minTrackQual()).contains(6)
        assertThat(datalinkTupleResponse.month()).contains("OCT")
        assertThat(datalinkTupleResponse.multiDuty().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.MultiDuty.builder()
                    .duty("SICO")
                    .addDutyTeleFreqNum("TEL:804-555-4142")
                    .addDutyTeleFreqNum("TEL:804-867-5309")
                    .addMultiDutyVoiceCoord(
                        DatalinkTupleResponse.MultiDuty.MultiDutyVoiceCoord.builder()
                            .multiCommPri("P")
                            .multiFreqDes("ST300A")
                            .addMultiTeleFreqNum("TEL:804-555-4142")
                            .addMultiTeleFreqNum("TEL:804-867-5309")
                            .multiVoiceNetDes("VPN")
                            .build()
                    )
                    .name("POPOVICH")
                    .rank("LCDR")
                    .unitDes("SHIP:STENNIS")
                    .build()
            )
        assertThat(datalinkTupleResponse.nonLinkUnitDes().getOrNull())
            .containsExactly("CS:GRAY GHOST", "CS:WHITE WHALE")
        assertThat(datalinkTupleResponse.opExInfo()).contains("CONTROL")
        assertThat(datalinkTupleResponse.opExInfoAlt()).contains("ORANGE")
        assertThat(datalinkTupleResponse.ops().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.Op.builder()
                    .linkDetails("Link details")
                    .linkName("Link-16")
                    .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                    .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                    .linkStopTimeMod("AFTER")
                    .build()
            )
        assertThat(datalinkTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(datalinkTupleResponse.origNetwork()).contains("OPS1")
        assertThat(datalinkTupleResponse.planOrigNum()).contains("SACEUR 106")
        assertThat(datalinkTupleResponse.pocCallSign()).contains("4077 MASH")
        assertThat(datalinkTupleResponse.pocLat()).contains(45.23)
        assertThat(datalinkTupleResponse.pocLocName()).contains("CAMP SWAMPY")
        assertThat(datalinkTupleResponse.pocLon()).contains(179.1)
        assertThat(datalinkTupleResponse.pocName()).contains("F. BURNS")
        assertThat(datalinkTupleResponse.pocNums().getOrNull())
            .containsExactly("TEL:804-555-4142", "TEL:804-867-5309")
        assertThat(datalinkTupleResponse.pocRank()).contains("MAJ")
        assertThat(datalinkTupleResponse.qualifier()).contains("CHG")
        assertThat(datalinkTupleResponse.qualSn()).contains(1)
        assertThat(datalinkTupleResponse.rawFileUri()).contains("Example URI")
        assertThat(datalinkTupleResponse.references().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.Reference.builder()
                    .refOriginator("CENTCOM")
                    .refSerialId("A")
                    .refSerialNum("1402001")
                    .addRefSiC("RDU")
                    .addRefSiC("C-123-92")
                    .refSpecialNotation("NOTAL")
                    .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                    .refType("ABSTAT")
                    .build()
            )
        assertThat(datalinkTupleResponse.refPoints().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.RefPoint.builder()
                    .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                    .refDes("L5")
                    .refLat(45.23)
                    .refLocName("FORT BRAGG")
                    .refLon(179.1)
                    .refPointType("DLRP")
                    .build()
            )
        assertThat(datalinkTupleResponse.remarks().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.Remark.builder()
                    .text("Example data link remarks")
                    .type("CONTINGENCY PROCEDURES")
                    .build()
            )
        assertThat(datalinkTupleResponse.resTrackQual()).contains(3)
        assertThat(datalinkTupleResponse.serialNum()).contains("1201003")
        assertThat(datalinkTupleResponse.sourceDl()).contains("AXE")
        assertThat(datalinkTupleResponse.specTracks().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.SpecTrack.builder()
                    .specTrackNum("12345")
                    .specTrackNumDesc("SAM SITE CHARLIE")
                    .build()
            )
        assertThat(datalinkTupleResponse.speedDiff()).contains(50)
        assertThat(datalinkTupleResponse.stopTime())
            .contains(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
        assertThat(datalinkTupleResponse.stopTimeMod()).contains("AFTER")
        assertThat(datalinkTupleResponse.sysDefaultCode()).contains("MAN")
        assertThat(datalinkTupleResponse.trackNumBlockLLs().getOrNull()).containsExactly(1234, 2345)
        assertThat(datalinkTupleResponse.trackNumBlocks().getOrNull())
            .containsExactly("0200-0300", "0400-4412")
        assertThat(datalinkTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(datalinkTupleResponse.updatedBy()).contains("some.user")
        assertThat(datalinkTupleResponse.voiceCoord().getOrNull())
            .containsExactly(
                DatalinkTupleResponse.VoiceCoord.builder()
                    .commPri("P")
                    .freqDes("ST300A")
                    .addTeleFreqNum("TEL:804-555-4142")
                    .addTeleFreqNum("TEL:804-867-5309")
                    .voiceNetDes("VPN")
                    .build()
            )
        assertThat(datalinkTupleResponse.winSizeMin()).contains(1.25)
        assertThat(datalinkTupleResponse.winSizeMult()).contains(2.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val datalinkTupleResponse =
            DatalinkTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(DatalinkTupleResponse.DataMode.TEST)
                .opExName("DESERT WIND")
                .originator("USCENTCOM")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAckInstUnit("AOC EXT 2345")
                .addAckInstUnit("317 AW")
                .ackReq(true)
                .altDiff(20)
                .canxId("ABSTAT")
                .canxOriginator("505 AOC")
                .canxSerialNum("ABC1234567")
                .addCanxSiC("RDU")
                .addCanxSiC("X234BS")
                .canxSpecialNotation("PASEP")
                .canxTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                .addClassReason("15C")
                .addClassReason("15D")
                .classSource("USJFCOM EXORD SOLID WASTE 98")
                .consecDecorr(3)
                .courseDiff(60)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDecExemptCode("X1")
                .addDecExemptCode("X2")
                .addDecInstDate("AT EXERCISE ENDEX")
                .addDecInstDate("DATE:25NOV1997")
                .decorrWinMult(1.7)
                .geoDatum("EUR-T")
                .jreCallSign("CHARLIE ONE")
                .jreDetails("JRE details")
                .jrePriAdd(71777)
                .jreSecAdd(77771)
                .jreUnitDes("CVN-72")
                .maxGeoPosQual(12)
                .maxTrackQual(12)
                .mgmtCode("VICTOR")
                .mgmtCodeMeaning("ORBIT AT POINT BRAVO")
                .minGeoPosQual(3)
                .minTrackQual(6)
                .month("OCT")
                .addMultiDuty(
                    DatalinkTupleResponse.MultiDuty.builder()
                        .duty("SICO")
                        .addDutyTeleFreqNum("TEL:804-555-4142")
                        .addDutyTeleFreqNum("TEL:804-867-5309")
                        .addMultiDutyVoiceCoord(
                            DatalinkTupleResponse.MultiDuty.MultiDutyVoiceCoord.builder()
                                .multiCommPri("P")
                                .multiFreqDes("ST300A")
                                .addMultiTeleFreqNum("TEL:804-555-4142")
                                .addMultiTeleFreqNum("TEL:804-867-5309")
                                .multiVoiceNetDes("VPN")
                                .build()
                        )
                        .name("POPOVICH")
                        .rank("LCDR")
                        .unitDes("SHIP:STENNIS")
                        .build()
                )
                .addNonLinkUnitDe("CS:GRAY GHOST")
                .addNonLinkUnitDe("CS:WHITE WHALE")
                .opExInfo("CONTROL")
                .opExInfoAlt("ORANGE")
                .addOp(
                    DatalinkTupleResponse.Op.builder()
                        .linkDetails("Link details")
                        .linkName("Link-16")
                        .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                        .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                        .linkStopTimeMod("AFTER")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .planOrigNum("SACEUR 106")
                .pocCallSign("4077 MASH")
                .pocLat(45.23)
                .pocLocName("CAMP SWAMPY")
                .pocLon(179.1)
                .pocName("F. BURNS")
                .addPocNum("TEL:804-555-4142")
                .addPocNum("TEL:804-867-5309")
                .pocRank("MAJ")
                .qualifier("CHG")
                .qualSn(1)
                .rawFileUri("Example URI")
                .addReference(
                    DatalinkTupleResponse.Reference.builder()
                        .refOriginator("CENTCOM")
                        .refSerialId("A")
                        .refSerialNum("1402001")
                        .addRefSiC("RDU")
                        .addRefSiC("C-123-92")
                        .refSpecialNotation("NOTAL")
                        .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
                        .refType("ABSTAT")
                        .build()
                )
                .addRefPoint(
                    DatalinkTupleResponse.RefPoint.builder()
                        .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                        .refDes("L5")
                        .refLat(45.23)
                        .refLocName("FORT BRAGG")
                        .refLon(179.1)
                        .refPointType("DLRP")
                        .build()
                )
                .addRemark(
                    DatalinkTupleResponse.Remark.builder()
                        .text("Example data link remarks")
                        .type("CONTINGENCY PROCEDURES")
                        .build()
                )
                .resTrackQual(3)
                .serialNum("1201003")
                .sourceDl("AXE")
                .addSpecTrack(
                    DatalinkTupleResponse.SpecTrack.builder()
                        .specTrackNum("12345")
                        .specTrackNumDesc("SAM SITE CHARLIE")
                        .build()
                )
                .speedDiff(50)
                .stopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
                .stopTimeMod("AFTER")
                .sysDefaultCode("MAN")
                .addTrackNumBlockLl(1234)
                .addTrackNumBlockLl(2345)
                .addTrackNumBlock("0200-0300")
                .addTrackNumBlock("0400-4412")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addVoiceCoord(
                    DatalinkTupleResponse.VoiceCoord.builder()
                        .commPri("P")
                        .freqDes("ST300A")
                        .addTeleFreqNum("TEL:804-555-4142")
                        .addTeleFreqNum("TEL:804-867-5309")
                        .voiceNetDes("VPN")
                        .build()
                )
                .winSizeMin(1.25)
                .winSizeMult(2.1)
                .build()

        val roundtrippedDatalinkTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(datalinkTupleResponse),
                jacksonTypeRef<DatalinkTupleResponse>(),
            )

        assertThat(roundtrippedDatalinkTupleResponse).isEqualTo(datalinkTupleResponse)
    }
}
