// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airoperations.diplomaticclearance

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DiplomaticclearanceAbridgedTest {

    @Test
    fun create() {
        val diplomaticclearanceAbridged =
            DiplomaticclearanceAbridged.builder()
                .classificationMarking("U")
                .dataMode(DiplomaticclearanceAbridged.DataMode.TEST)
                .firstDepDate(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                .idMission("0dba1363-2d09-49fa-a784-4bb4cbb1674a")
                .source("Bluestaq")
                .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                .apacsId("1083034")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDiplomaticClearanceDetail(
                    DiplomaticclearanceAbridged.DiplomaticClearanceDetail.builder()
                        .action("O")
                        .altCountryCode("IZ")
                        .clearanceId("MFMW225662GHQ")
                        .clearanceRemark("Clearance remarks")
                        .clearedCallSign("FALCN09")
                        .countryCode("NL")
                        .countryName("NETHERLANDS")
                        .entryNet(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .entryPoint("LOMOS")
                        .exitNlt(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .exitPoint("BUDOP")
                        .externalClearanceId("aa714f4d52a37ab1a00b21af9566e379")
                        .idSortie("207010e0-f97d-431c-8c00-7e46acfef0f5")
                        .legNum(825)
                        .profile("T LAND/OFLY IATA COMPLIANT CARGO 23")
                        .reqIcao(true)
                        .reqPoint(true)
                        .routeString("DCT DOH P430 BAYAN/M062F150 P430 RAMKI")
                        .sequenceNum(3)
                        .status("IN WORK")
                        .validDesc("CY2023")
                        .validEndTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .validStartTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .windowRemark("Period remarks")
                        .build()
                )
                .addDiplomaticClearanceRemark(
                    DiplomaticclearanceAbridged.DiplomaticClearanceRemark.builder()
                        .date(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .gdssRemarkId("GDSSREMARK-ID")
                        .text("Example mission remarks.")
                        .user("John Doe")
                        .build()
                )
                .dipWorksheetName("G2-939911-AC")
                .docDeadline(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                .externalWorksheetId("990ae849089e3d6cad69655324176bb6")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(diplomaticclearanceAbridged.classificationMarking()).isEqualTo("U")
        assertThat(diplomaticclearanceAbridged.dataMode())
            .isEqualTo(DiplomaticclearanceAbridged.DataMode.TEST)
        assertThat(diplomaticclearanceAbridged.firstDepDate())
            .isEqualTo(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
        assertThat(diplomaticclearanceAbridged.idMission())
            .isEqualTo("0dba1363-2d09-49fa-a784-4bb4cbb1674a")
        assertThat(diplomaticclearanceAbridged.source()).isEqualTo("Bluestaq")
        assertThat(diplomaticclearanceAbridged.id())
            .contains("25059135-4afc-45c2-b78b-d6e843dbd96d")
        assertThat(diplomaticclearanceAbridged.apacsId()).contains("1083034")
        assertThat(diplomaticclearanceAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(diplomaticclearanceAbridged.createdBy()).contains("some.user")
        assertThat(diplomaticclearanceAbridged.diplomaticClearanceDetails().getOrNull())
            .containsExactly(
                DiplomaticclearanceAbridged.DiplomaticClearanceDetail.builder()
                    .action("O")
                    .altCountryCode("IZ")
                    .clearanceId("MFMW225662GHQ")
                    .clearanceRemark("Clearance remarks")
                    .clearedCallSign("FALCN09")
                    .countryCode("NL")
                    .countryName("NETHERLANDS")
                    .entryNet(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .entryPoint("LOMOS")
                    .exitNlt(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .exitPoint("BUDOP")
                    .externalClearanceId("aa714f4d52a37ab1a00b21af9566e379")
                    .idSortie("207010e0-f97d-431c-8c00-7e46acfef0f5")
                    .legNum(825)
                    .profile("T LAND/OFLY IATA COMPLIANT CARGO 23")
                    .reqIcao(true)
                    .reqPoint(true)
                    .routeString("DCT DOH P430 BAYAN/M062F150 P430 RAMKI")
                    .sequenceNum(3)
                    .status("IN WORK")
                    .validDesc("CY2023")
                    .validEndTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .validStartTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .windowRemark("Period remarks")
                    .build()
            )
        assertThat(diplomaticclearanceAbridged.diplomaticClearanceRemarks().getOrNull())
            .containsExactly(
                DiplomaticclearanceAbridged.DiplomaticClearanceRemark.builder()
                    .date(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .gdssRemarkId("GDSSREMARK-ID")
                    .text("Example mission remarks.")
                    .user("John Doe")
                    .build()
            )
        assertThat(diplomaticclearanceAbridged.dipWorksheetName()).contains("G2-939911-AC")
        assertThat(diplomaticclearanceAbridged.docDeadline())
            .contains(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
        assertThat(diplomaticclearanceAbridged.externalWorksheetId())
            .contains("990ae849089e3d6cad69655324176bb6")
        assertThat(diplomaticclearanceAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(diplomaticclearanceAbridged.origNetwork()).contains("OPS1")
        assertThat(diplomaticclearanceAbridged.sourceDl()).contains("AXE")
        assertThat(diplomaticclearanceAbridged.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(diplomaticclearanceAbridged.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val diplomaticclearanceAbridged =
            DiplomaticclearanceAbridged.builder()
                .classificationMarking("U")
                .dataMode(DiplomaticclearanceAbridged.DataMode.TEST)
                .firstDepDate(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                .idMission("0dba1363-2d09-49fa-a784-4bb4cbb1674a")
                .source("Bluestaq")
                .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                .apacsId("1083034")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDiplomaticClearanceDetail(
                    DiplomaticclearanceAbridged.DiplomaticClearanceDetail.builder()
                        .action("O")
                        .altCountryCode("IZ")
                        .clearanceId("MFMW225662GHQ")
                        .clearanceRemark("Clearance remarks")
                        .clearedCallSign("FALCN09")
                        .countryCode("NL")
                        .countryName("NETHERLANDS")
                        .entryNet(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .entryPoint("LOMOS")
                        .exitNlt(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .exitPoint("BUDOP")
                        .externalClearanceId("aa714f4d52a37ab1a00b21af9566e379")
                        .idSortie("207010e0-f97d-431c-8c00-7e46acfef0f5")
                        .legNum(825)
                        .profile("T LAND/OFLY IATA COMPLIANT CARGO 23")
                        .reqIcao(true)
                        .reqPoint(true)
                        .routeString("DCT DOH P430 BAYAN/M062F150 P430 RAMKI")
                        .sequenceNum(3)
                        .status("IN WORK")
                        .validDesc("CY2023")
                        .validEndTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .validStartTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .windowRemark("Period remarks")
                        .build()
                )
                .addDiplomaticClearanceRemark(
                    DiplomaticclearanceAbridged.DiplomaticClearanceRemark.builder()
                        .date(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .gdssRemarkId("GDSSREMARK-ID")
                        .text("Example mission remarks.")
                        .user("John Doe")
                        .build()
                )
                .dipWorksheetName("G2-939911-AC")
                .docDeadline(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                .externalWorksheetId("990ae849089e3d6cad69655324176bb6")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedDiplomaticclearanceAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(diplomaticclearanceAbridged),
                jacksonTypeRef<DiplomaticclearanceAbridged>(),
            )

        assertThat(roundtrippedDiplomaticclearanceAbridged).isEqualTo(diplomaticclearanceAbridged)
    }
}
