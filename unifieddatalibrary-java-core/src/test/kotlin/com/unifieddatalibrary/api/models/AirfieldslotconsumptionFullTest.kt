// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirfieldslotconsumptionFullTest {

    @Test
    fun create() {
        val airfieldslotconsumptionFull =
            AirfieldslotconsumptionFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldslotconsumptionFull.DataMode.TEST)
                .idAirfieldSlot("3136498f-2969-3535-1432-e984b2e2e686")
                .numAircraft(1)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .id("be831d39-1822-da9f-7ace-6cc5643397dc")
                .altArrSortieId("ALT-SORTIE-ID")
                .altDepSortieId("ALT-SORTIE-ID")
                .appComment("The request was denied due to inoperable fuel pumps.")
                .appInitials("CB")
                .appOrg("KCHS/BOPS")
                .callSigns(listOf("RCH123", "ABC123", "LLS442"))
                .consumer("APRON1-230401001")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .endTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .idArrSortie("be831d39-1822-da9f-7ace-6cc5643397dc")
                .idDepSortie("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
                .missionId("AJM123456123")
                .occAircraftMds("C017A")
                .occStartTime(OffsetDateTime.parse("2023-01-01T01:01:03.123Z"))
                .occTailNumber("N702JG")
                .occupied(true)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .reqComment("Sorry for the late notice.")
                .reqInitials("CB")
                .reqOrg("TACC")
                .resAircraftMds("C017A")
                .resMissionId("AJM123456123")
                .resReason("Maintenance needed")
                .resTailNumber("N702JG")
                .resType("M")
                .sourceDl("AXE")
                .status(AirfieldslotconsumptionFull.Status.APPROVED)
                .targetTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(airfieldslotconsumptionFull.classificationMarking()).isEqualTo("U")
        assertThat(airfieldslotconsumptionFull.dataMode())
            .isEqualTo(AirfieldslotconsumptionFull.DataMode.TEST)
        assertThat(airfieldslotconsumptionFull.idAirfieldSlot())
            .isEqualTo("3136498f-2969-3535-1432-e984b2e2e686")
        assertThat(airfieldslotconsumptionFull.numAircraft()).isEqualTo(1)
        assertThat(airfieldslotconsumptionFull.source()).isEqualTo("Bluestaq")
        assertThat(airfieldslotconsumptionFull.startTime())
            .isEqualTo(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
        assertThat(airfieldslotconsumptionFull.id())
            .contains("be831d39-1822-da9f-7ace-6cc5643397dc")
        assertThat(airfieldslotconsumptionFull.altArrSortieId()).contains("ALT-SORTIE-ID")
        assertThat(airfieldslotconsumptionFull.altDepSortieId()).contains("ALT-SORTIE-ID")
        assertThat(airfieldslotconsumptionFull.appComment())
            .contains("The request was denied due to inoperable fuel pumps.")
        assertThat(airfieldslotconsumptionFull.appInitials()).contains("CB")
        assertThat(airfieldslotconsumptionFull.appOrg()).contains("KCHS/BOPS")
        assertThat(airfieldslotconsumptionFull.callSigns().getOrNull())
            .containsExactly("RCH123", "ABC123", "LLS442")
        assertThat(airfieldslotconsumptionFull.consumer()).contains("APRON1-230401001")
        assertThat(airfieldslotconsumptionFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(airfieldslotconsumptionFull.createdBy()).contains("some.user")
        assertThat(airfieldslotconsumptionFull.endTime())
            .contains(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
        assertThat(airfieldslotconsumptionFull.idArrSortie())
            .contains("be831d39-1822-da9f-7ace-6cc5643397dc")
        assertThat(airfieldslotconsumptionFull.idDepSortie())
            .contains("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
        assertThat(airfieldslotconsumptionFull.missionId()).contains("AJM123456123")
        assertThat(airfieldslotconsumptionFull.occAircraftMds()).contains("C017A")
        assertThat(airfieldslotconsumptionFull.occStartTime())
            .contains(OffsetDateTime.parse("2023-01-01T01:01:03.123Z"))
        assertThat(airfieldslotconsumptionFull.occTailNumber()).contains("N702JG")
        assertThat(airfieldslotconsumptionFull.occupied()).contains(true)
        assertThat(airfieldslotconsumptionFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(airfieldslotconsumptionFull.origNetwork()).contains("ORIG")
        assertThat(airfieldslotconsumptionFull.reqComment()).contains("Sorry for the late notice.")
        assertThat(airfieldslotconsumptionFull.reqInitials()).contains("CB")
        assertThat(airfieldslotconsumptionFull.reqOrg()).contains("TACC")
        assertThat(airfieldslotconsumptionFull.resAircraftMds()).contains("C017A")
        assertThat(airfieldslotconsumptionFull.resMissionId()).contains("AJM123456123")
        assertThat(airfieldslotconsumptionFull.resReason()).contains("Maintenance needed")
        assertThat(airfieldslotconsumptionFull.resTailNumber()).contains("N702JG")
        assertThat(airfieldslotconsumptionFull.resType()).contains("M")
        assertThat(airfieldslotconsumptionFull.sourceDl()).contains("AXE")
        assertThat(airfieldslotconsumptionFull.status())
            .contains(AirfieldslotconsumptionFull.Status.APPROVED)
        assertThat(airfieldslotconsumptionFull.targetTime())
            .contains(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
        assertThat(airfieldslotconsumptionFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(airfieldslotconsumptionFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val airfieldslotconsumptionFull =
            AirfieldslotconsumptionFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldslotconsumptionFull.DataMode.TEST)
                .idAirfieldSlot("3136498f-2969-3535-1432-e984b2e2e686")
                .numAircraft(1)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .id("be831d39-1822-da9f-7ace-6cc5643397dc")
                .altArrSortieId("ALT-SORTIE-ID")
                .altDepSortieId("ALT-SORTIE-ID")
                .appComment("The request was denied due to inoperable fuel pumps.")
                .appInitials("CB")
                .appOrg("KCHS/BOPS")
                .callSigns(listOf("RCH123", "ABC123", "LLS442"))
                .consumer("APRON1-230401001")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .endTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .idArrSortie("be831d39-1822-da9f-7ace-6cc5643397dc")
                .idDepSortie("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
                .missionId("AJM123456123")
                .occAircraftMds("C017A")
                .occStartTime(OffsetDateTime.parse("2023-01-01T01:01:03.123Z"))
                .occTailNumber("N702JG")
                .occupied(true)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .reqComment("Sorry for the late notice.")
                .reqInitials("CB")
                .reqOrg("TACC")
                .resAircraftMds("C017A")
                .resMissionId("AJM123456123")
                .resReason("Maintenance needed")
                .resTailNumber("N702JG")
                .resType("M")
                .sourceDl("AXE")
                .status(AirfieldslotconsumptionFull.Status.APPROVED)
                .targetTime(OffsetDateTime.parse("2023-01-01T01:01:01.123Z"))
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedAirfieldslotconsumptionFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(airfieldslotconsumptionFull),
                jacksonTypeRef<AirfieldslotconsumptionFull>(),
            )

        assertThat(roundtrippedAirfieldslotconsumptionFull).isEqualTo(airfieldslotconsumptionFull)
    }
}
