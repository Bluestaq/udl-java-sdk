// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.ephemeris

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EphemerisUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        EphemerisUnvalidatedPublishParams.builder()
            .category("ANALYST")
            .classificationMarking("U")
            .dataMode(EphemerisUnvalidatedPublishParams.DataMode.TEST)
            .numPoints(1)
            .pointEndTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .pointStartTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .type("LAUNCH")
            .id("EPHEMERISSET-ID")
            .bDot(1.1)
            .centBody("Earth")
            .comments("Example notes")
            .covReferenceFrame(EphemerisUnvalidatedPublishParams.CovReferenceFrame.J2000)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .description("Example notes")
            .descriptor("Example descriptor")
            .dragModel("JAC70")
            .edr(1.1)
            .addEphemerisList(
                EphemerisUnvalidatedPublishParams.EphemerisList.builder()
                    .classificationMarking("U")
                    .dataMode(EphemerisUnvalidatedPublishParams.EphemerisList.DataMode.TEST)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .xpos(1.1)
                    .xvel(1.1)
                    .ypos(1.1)
                    .yvel(1.1)
                    .zpos(1.1)
                    .zvel(1.1)
                    .id("EPHEMERIS-ID")
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .esId("ES-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origObjectId("ORIGOBJECT-ID")
                    .xaccel(1.1)
                    .yaccel(1.1)
                    .zaccel(1.1)
                    .build()
            )
            .filename("Example file name")
            .geopotentialModel("GEM-T3")
            .hasAccel(false)
            .hasCov(false)
            .hasMnvr(false)
            .addIdManeuver("EXAMPLE_ID1")
            .addIdManeuver("EXAMPLE_ID2")
            .idOnOrbit("ONORBIT-ID")
            .idStateVector("STATEVECTOR-ID")
            .integrator("COWELL")
            .interpolation("LINEAR")
            .interpolationDegree(5)
            .lunarSolar(false)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origObjectId("ORIGOBJECT-ID")
            .pedigree("PROPAGATED")
            .referenceFrame(EphemerisUnvalidatedPublishParams.ReferenceFrame.J2000)
            .satNo(2)
            .solidEarthTides(false)
            .stepSize(1L)
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .transactionId("TRANSACTION-ID")
            .usableEndTime(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
            .usableStartTime(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
            .build()
    }

    @Test
    fun body() {
        val params =
            EphemerisUnvalidatedPublishParams.builder()
                .category("ANALYST")
                .classificationMarking("U")
                .dataMode(EphemerisUnvalidatedPublishParams.DataMode.TEST)
                .numPoints(1)
                .pointEndTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .pointStartTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("LAUNCH")
                .id("EPHEMERISSET-ID")
                .bDot(1.1)
                .centBody("Earth")
                .comments("Example notes")
                .covReferenceFrame(EphemerisUnvalidatedPublishParams.CovReferenceFrame.J2000)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Example notes")
                .descriptor("Example descriptor")
                .dragModel("JAC70")
                .edr(1.1)
                .addEphemerisList(
                    EphemerisUnvalidatedPublishParams.EphemerisList.builder()
                        .classificationMarking("U")
                        .dataMode(EphemerisUnvalidatedPublishParams.EphemerisList.DataMode.TEST)
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .xpos(1.1)
                        .xvel(1.1)
                        .ypos(1.1)
                        .yvel(1.1)
                        .zpos(1.1)
                        .zvel(1.1)
                        .id("EPHEMERIS-ID")
                        .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .esId("ES-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origObjectId("ORIGOBJECT-ID")
                        .xaccel(1.1)
                        .yaccel(1.1)
                        .zaccel(1.1)
                        .build()
                )
                .filename("Example file name")
                .geopotentialModel("GEM-T3")
                .hasAccel(false)
                .hasCov(false)
                .hasMnvr(false)
                .addIdManeuver("EXAMPLE_ID1")
                .addIdManeuver("EXAMPLE_ID2")
                .idOnOrbit("ONORBIT-ID")
                .idStateVector("STATEVECTOR-ID")
                .integrator("COWELL")
                .interpolation("LINEAR")
                .interpolationDegree(5)
                .lunarSolar(false)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .pedigree("PROPAGATED")
                .referenceFrame(EphemerisUnvalidatedPublishParams.ReferenceFrame.J2000)
                .satNo(2)
                .solidEarthTides(false)
                .stepSize(1L)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .transactionId("TRANSACTION-ID")
                .usableEndTime(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
                .usableStartTime(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
                .build()

        val body = params._body()

        assertThat(body.category()).isEqualTo("ANALYST")
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EphemerisUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.numPoints()).isEqualTo(1)
        assertThat(body.pointEndTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.pointStartTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("LAUNCH")
        assertThat(body.id()).contains("EPHEMERISSET-ID")
        assertThat(body.bDot()).contains(1.1)
        assertThat(body.centBody()).contains("Earth")
        assertThat(body.comments()).contains("Example notes")
        assertThat(body.covReferenceFrame())
            .contains(EphemerisUnvalidatedPublishParams.CovReferenceFrame.J2000)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.description()).contains("Example notes")
        assertThat(body.descriptor()).contains("Example descriptor")
        assertThat(body.dragModel()).contains("JAC70")
        assertThat(body.edr()).contains(1.1)
        assertThat(body.ephemerisList().getOrNull())
            .containsExactly(
                EphemerisUnvalidatedPublishParams.EphemerisList.builder()
                    .classificationMarking("U")
                    .dataMode(EphemerisUnvalidatedPublishParams.EphemerisList.DataMode.TEST)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .xpos(1.1)
                    .xvel(1.1)
                    .ypos(1.1)
                    .yvel(1.1)
                    .zpos(1.1)
                    .zvel(1.1)
                    .id("EPHEMERIS-ID")
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .esId("ES-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origObjectId("ORIGOBJECT-ID")
                    .xaccel(1.1)
                    .yaccel(1.1)
                    .zaccel(1.1)
                    .build()
            )
        assertThat(body.filename()).contains("Example file name")
        assertThat(body.geopotentialModel()).contains("GEM-T3")
        assertThat(body.hasAccel()).contains(false)
        assertThat(body.hasCov()).contains(false)
        assertThat(body.hasMnvr()).contains(false)
        assertThat(body.idManeuvers().getOrNull()).containsExactly("EXAMPLE_ID1", "EXAMPLE_ID2")
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idStateVector()).contains("STATEVECTOR-ID")
        assertThat(body.integrator()).contains("COWELL")
        assertThat(body.interpolation()).contains("LINEAR")
        assertThat(body.interpolationDegree()).contains(5)
        assertThat(body.lunarSolar()).contains(false)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.pedigree()).contains("PROPAGATED")
        assertThat(body.referenceFrame())
            .contains(EphemerisUnvalidatedPublishParams.ReferenceFrame.J2000)
        assertThat(body.satNo()).contains(2)
        assertThat(body.solidEarthTides()).contains(false)
        assertThat(body.stepSize()).contains(1L)
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.usableEndTime())
            .contains(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
        assertThat(body.usableStartTime())
            .contains(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EphemerisUnvalidatedPublishParams.builder()
                .category("ANALYST")
                .classificationMarking("U")
                .dataMode(EphemerisUnvalidatedPublishParams.DataMode.TEST)
                .numPoints(1)
                .pointEndTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .pointStartTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("LAUNCH")
                .build()

        val body = params._body()

        assertThat(body.category()).isEqualTo("ANALYST")
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EphemerisUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.numPoints()).isEqualTo(1)
        assertThat(body.pointEndTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.pointStartTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("LAUNCH")
    }
}
