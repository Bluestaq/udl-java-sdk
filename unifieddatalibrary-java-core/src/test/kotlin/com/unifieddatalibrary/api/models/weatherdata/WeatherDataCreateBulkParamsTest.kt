// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.weatherdata

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WeatherDataCreateBulkParamsTest {

    @Test
    fun create() {
        WeatherDataCreateBulkParams.builder()
            .addBody(
                WeatherDataCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(WeatherDataCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .id("WEATHER-DATA-ID")
                    .angleOrientation(75.7)
                    .avgRefPwr(714.9)
                    .avgTxPwr(20.23)
                    .checksum(133)
                    .addCoInteg(4)
                    .addCoInteg(3)
                    .addConsRec(5)
                    .addConsRec(2)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addDoppVel(44.4)
                    .addDoppVel(467.3)
                    .fileCreation(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .addFirstGuessAvg(16)
                    .addFirstGuessAvg(1)
                    .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                    .addInterpulsePeriod(1000.3)
                    .addInterpulsePeriod(1000.2)
                    .lightDetSensors(listOf(11, 28, 190))
                    .lightEventNum(9)
                    .addNoiseLvl(58.2)
                    .addNoiseLvl(58.3)
                    .numElements(640)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origSensorId("ORIGSENSOR-ID")
                    .posConfidence(0.1)
                    .qcValue(4)
                    .sectorNum(20)
                    .semiMajorAxis(3.4)
                    .semiMinorAxis(0.3)
                    .addSigPwr(116.5)
                    .addSigPwr(121.6)
                    .sigStrength(163.7)
                    .addSnr(14.5)
                    .addSnr(-16.2)
                    .addSpecAvg(4)
                    .addSpecAvg(3)
                    .addSpecWidth(0.3)
                    .addSpecWidth(0.6)
                    .addSrcId("1b23ba93-0957-4654-b5ca-8c3703f3ec57")
                    .addSrcId("32944ee4-0437-4d94-95ce-2f2823ffa001")
                    .addSrcTyp("SENSOR")
                    .addSrcTyp("WEATHERREPORT")
                    .addTdAvgSampleNum(32)
                    .addTdAvgSampleNum(30)
                    .termAlt(19505.1)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            WeatherDataCreateBulkParams.builder()
                .addBody(
                    WeatherDataCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(WeatherDataCreateBulkParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .id("WEATHER-DATA-ID")
                        .angleOrientation(75.7)
                        .avgRefPwr(714.9)
                        .avgTxPwr(20.23)
                        .checksum(133)
                        .addCoInteg(4)
                        .addCoInteg(3)
                        .addConsRec(5)
                        .addConsRec(2)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .addDoppVel(44.4)
                        .addDoppVel(467.3)
                        .fileCreation(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .addFirstGuessAvg(16)
                        .addFirstGuessAvg(1)
                        .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                        .addInterpulsePeriod(1000.3)
                        .addInterpulsePeriod(1000.2)
                        .lightDetSensors(listOf(11, 28, 190))
                        .lightEventNum(9)
                        .addNoiseLvl(58.2)
                        .addNoiseLvl(58.3)
                        .numElements(640)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origSensorId("ORIGSENSOR-ID")
                        .posConfidence(0.1)
                        .qcValue(4)
                        .sectorNum(20)
                        .semiMajorAxis(3.4)
                        .semiMinorAxis(0.3)
                        .addSigPwr(116.5)
                        .addSigPwr(121.6)
                        .sigStrength(163.7)
                        .addSnr(14.5)
                        .addSnr(-16.2)
                        .addSpecAvg(4)
                        .addSpecAvg(3)
                        .addSpecWidth(0.3)
                        .addSpecWidth(0.6)
                        .addSrcId("1b23ba93-0957-4654-b5ca-8c3703f3ec57")
                        .addSrcId("32944ee4-0437-4d94-95ce-2f2823ffa001")
                        .addSrcTyp("SENSOR")
                        .addSrcTyp("WEATHERREPORT")
                        .addTdAvgSampleNum(32)
                        .addTdAvgSampleNum(30)
                        .termAlt(19505.1)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                WeatherDataCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(WeatherDataCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .id("WEATHER-DATA-ID")
                    .angleOrientation(75.7)
                    .avgRefPwr(714.9)
                    .avgTxPwr(20.23)
                    .checksum(133)
                    .addCoInteg(4)
                    .addCoInteg(3)
                    .addConsRec(5)
                    .addConsRec(2)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addDoppVel(44.4)
                    .addDoppVel(467.3)
                    .fileCreation(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .addFirstGuessAvg(16)
                    .addFirstGuessAvg(1)
                    .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                    .addInterpulsePeriod(1000.3)
                    .addInterpulsePeriod(1000.2)
                    .lightDetSensors(listOf(11, 28, 190))
                    .lightEventNum(9)
                    .addNoiseLvl(58.2)
                    .addNoiseLvl(58.3)
                    .numElements(640)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origSensorId("ORIGSENSOR-ID")
                    .posConfidence(0.1)
                    .qcValue(4)
                    .sectorNum(20)
                    .semiMajorAxis(3.4)
                    .semiMinorAxis(0.3)
                    .addSigPwr(116.5)
                    .addSigPwr(121.6)
                    .sigStrength(163.7)
                    .addSnr(14.5)
                    .addSnr(-16.2)
                    .addSpecAvg(4)
                    .addSpecAvg(3)
                    .addSpecWidth(0.3)
                    .addSpecWidth(0.6)
                    .addSrcId("1b23ba93-0957-4654-b5ca-8c3703f3ec57")
                    .addSrcId("32944ee4-0437-4d94-95ce-2f2823ffa001")
                    .addSrcTyp("SENSOR")
                    .addSrcTyp("WEATHERREPORT")
                    .addTdAvgSampleNum(32)
                    .addTdAvgSampleNum(30)
                    .termAlt(19505.1)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            WeatherDataCreateBulkParams.builder()
                .addBody(
                    WeatherDataCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(WeatherDataCreateBulkParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                WeatherDataCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(WeatherDataCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .build()
            )
    }
}
