// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.vessel

import com.unifieddatalibrary.api.models.entities.EntityIngest
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class VesselCreateParamsTest {

    @Test
    fun create() {
        VesselCreateParams.builder()
            .classificationMarking("U")
            .dataMode(VesselCreateParams.DataMode.TEST)
            .source("Bluestaq")
            .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
            .altVesselId("590b5194fc32e75dd00682ba")
            .callsign("V2OZ")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .entity(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
            .firstSeen(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .hullNum("A30081")
            .idEntity("ENTITY-ID")
            .idOrganization("0147f777-w09a-835f-85aa-0a07a730fgg0")
            .imon(9566356)
            .length(511.1)
            .maxDraught(21.1)
            .maxSpeed(32.5)
            .mmsi("416450000")
            .numBlades(4)
            .numShafts(3)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .propType("Diesel")
            .sconum("B45524")
            .status("In Service/Commission")
            .sternType("Cruiser")
            .vesselBuilder("Samsung Heavy Inds - Geoje")
            .vesselClass("Nimitz")
            .vesselDescription("Search and Rescue Vessel")
            .vesselFlag("United States")
            .vesselName("DORNUM")
            .vesselType("Passenger")
            .vslWt(3423.76)
            .width(24.1)
            .yearBuilt("2014")
            .build()
    }

    @Test
    fun body() {
        val params =
            VesselCreateParams.builder()
                .classificationMarking("U")
                .dataMode(VesselCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .altVesselId("590b5194fc32e75dd00682ba")
                .callsign("V2OZ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .entity(
                    EntityIngest.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(EntityIngest.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationIngest.builder()
                                .classificationMarking("U")
                                .dataMode(LocationIngest.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            EntityIngest.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(EntityIngest.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .addUrl("URL1")
                        .addUrl("URL2")
                        .build()
                )
                .firstSeen(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .hullNum("A30081")
                .idEntity("ENTITY-ID")
                .idOrganization("0147f777-w09a-835f-85aa-0a07a730fgg0")
                .imon(9566356)
                .length(511.1)
                .maxDraught(21.1)
                .maxSpeed(32.5)
                .mmsi("416450000")
                .numBlades(4)
                .numShafts(3)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .propType("Diesel")
                .sconum("B45524")
                .status("In Service/Commission")
                .sternType("Cruiser")
                .vesselBuilder("Samsung Heavy Inds - Geoje")
                .vesselClass("Nimitz")
                .vesselDescription("Search and Rescue Vessel")
                .vesselFlag("United States")
                .vesselName("DORNUM")
                .vesselType("Passenger")
                .vslWt(3423.76)
                .width(24.1)
                .yearBuilt("2014")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(VesselCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(body.altVesselId()).contains("590b5194fc32e75dd00682ba")
        assertThat(body.callsign()).contains("V2OZ")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.entity())
            .contains(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
        assertThat(body.firstSeen()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.hullNum()).contains("A30081")
        assertThat(body.idEntity()).contains("ENTITY-ID")
        assertThat(body.idOrganization()).contains("0147f777-w09a-835f-85aa-0a07a730fgg0")
        assertThat(body.imon()).contains(9566356)
        assertThat(body.length()).contains(511.1)
        assertThat(body.maxDraught()).contains(21.1)
        assertThat(body.maxSpeed()).contains(32.5)
        assertThat(body.mmsi()).contains("416450000")
        assertThat(body.numBlades()).contains(4)
        assertThat(body.numShafts()).contains(3)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.propType()).contains("Diesel")
        assertThat(body.sconum()).contains("B45524")
        assertThat(body.status()).contains("In Service/Commission")
        assertThat(body.sternType()).contains("Cruiser")
        assertThat(body.vesselBuilder()).contains("Samsung Heavy Inds - Geoje")
        assertThat(body.vesselClass()).contains("Nimitz")
        assertThat(body.vesselDescription()).contains("Search and Rescue Vessel")
        assertThat(body.vesselFlag()).contains("United States")
        assertThat(body.vesselName()).contains("DORNUM")
        assertThat(body.vesselType()).contains("Passenger")
        assertThat(body.vslWt()).contains(3423.76)
        assertThat(body.width()).contains(24.1)
        assertThat(body.yearBuilt()).contains("2014")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            VesselCreateParams.builder()
                .classificationMarking("U")
                .dataMode(VesselCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(VesselCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
