// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.AntennaDetailsFull
import com.unifieddatalibrary.api.models.AntennaFull
import com.unifieddatalibrary.api.models.OnorbitAntennaFull
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitAntennaFullTest {

    @Test
    fun create() {
      val onorbitAntennaFull = OnorbitAntennaFull.builder()
          .classificationMarking("U")
          .dataMode(OnorbitAntennaFull.DataMode.TEST)
          .idAntenna("ANTENNA-ID")
          .idOnOrbit("ONORBIT-ID")
          .source("Bluestaq")
          .id("ONORBITANTENNA-ID")
          .antenna(AntennaFull.builder()
              .dataMode(AntennaFull.DataMode.TEST)
              .name("IRIDIUM NEXT 121-ANTENNA-10075")
              .source("Bluestaq")
              .id("ANTENNA-ID")
              .addAntennaDetail(AntennaDetailsFull.builder()
                  .classificationMarking("U")
                  .dataMode(AntennaDetailsFull.DataMode.TEST)
                  .idAntenna("ANTENNA-ID")
                  .source("Bluestaq")
                  .id("ANTENNADETAILS-ID")
                  .beamForming(false)
                  .beamwidth(14.1)
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .description("Description of antenna A")
                  .diameter(0.01)
                  .endFrequency(3.3)
                  .gain(20.1)
                  .gainTolerance(5.1)
                  .manufacturerOrg(OrganizationFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationFull.DataMode.TEST)
                      .name("some.user")
                      .source("some.user")
                      .type("GOVERNMENT")
                      .id("ORGANIZATION-ID")
                      .active(false)
                      .category("Private company")
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("Example description")
                      .externalId("EXTERNAL-ID")
                      .nationality("US")
                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                          .idOrganization("ORGANIZATION-ID")
                          .name("some.user")
                          .source("some.user")
                          .id("ORGANIZATIONDETAILS-ID")
                          .address1("123 Main Street")
                          .address2("Apt 4B")
                          .address3("Colorado Springs CO, 80903")
                          .broker("some.user")
                          .ceo("some.user")
                          .cfo("some.user")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .cto("some.user")
                          .description("Example description")
                          .ebitda(123.4)
                          .email("some_organization@organization.com")
                          .financialNotes("Example notes")
                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                          .fleetPlanNotes("Example notes")
                          .formerOrgId("FORMERORG-ID")
                          .ftes(123)
                          .geoAdminLevel1("Colorado")
                          .geoAdminLevel2("El Paso County")
                          .geoAdminLevel3("Colorado Springs")
                          .massRanking(123)
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .parentOrgId("PARENTORG-ID")
                          .postalCode("80903")
                          .profit(123.4)
                          .revenue(123.4)
                          .revenueRanking(123)
                          .riskManager("some.user")
                          .servicesNotes("Example notes")
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .manufacturerOrgId("MANUFACTUREORG-ID")
                  .mode(AntennaDetailsFull.Mode.TX)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .polarization(45.1)
                  .position("Top")
                  .addSize(0.03)
                  .addSize(0.05)
                  .startFrequency(2.1)
                  .steerable(false)
                  .addTag("PROVIDER_TAG1")
                  .addTag("PROVIDER_TAG2")
                  .type("Reflector")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(onorbitAntennaFull.classificationMarking()).isEqualTo("U")
      assertThat(onorbitAntennaFull.dataMode()).isEqualTo(OnorbitAntennaFull.DataMode.TEST)
      assertThat(onorbitAntennaFull.idAntenna()).isEqualTo("ANTENNA-ID")
      assertThat(onorbitAntennaFull.idOnOrbit()).isEqualTo("ONORBIT-ID")
      assertThat(onorbitAntennaFull.source()).isEqualTo("Bluestaq")
      assertThat(onorbitAntennaFull.id()).contains("ONORBITANTENNA-ID")
      assertThat(onorbitAntennaFull.antenna()).contains(AntennaFull.builder()
          .dataMode(AntennaFull.DataMode.TEST)
          .name("IRIDIUM NEXT 121-ANTENNA-10075")
          .source("Bluestaq")
          .id("ANTENNA-ID")
          .addAntennaDetail(AntennaDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(AntennaDetailsFull.DataMode.TEST)
              .idAntenna("ANTENNA-ID")
              .source("Bluestaq")
              .id("ANTENNADETAILS-ID")
              .beamForming(false)
              .beamwidth(14.1)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .description("Description of antenna A")
              .diameter(0.01)
              .endFrequency(3.3)
              .gain(20.1)
              .gainTolerance(5.1)
              .manufacturerOrg(OrganizationFull.builder()
                  .classificationMarking("U")
                  .dataMode(OrganizationFull.DataMode.TEST)
                  .name("some.user")
                  .source("some.user")
                  .type("GOVERNMENT")
                  .id("ORGANIZATION-ID")
                  .active(false)
                  .category("Private company")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .description("Example description")
                  .externalId("EXTERNAL-ID")
                  .nationality("US")
                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                      .idOrganization("ORGANIZATION-ID")
                      .name("some.user")
                      .source("some.user")
                      .id("ORGANIZATIONDETAILS-ID")
                      .address1("123 Main Street")
                      .address2("Apt 4B")
                      .address3("Colorado Springs CO, 80903")
                      .broker("some.user")
                      .ceo("some.user")
                      .cfo("some.user")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .cto("some.user")
                      .description("Example description")
                      .ebitda(123.4)
                      .email("some_organization@organization.com")
                      .financialNotes("Example notes")
                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                      .fleetPlanNotes("Example notes")
                      .formerOrgId("FORMERORG-ID")
                      .ftes(123)
                      .geoAdminLevel1("Colorado")
                      .geoAdminLevel2("El Paso County")
                      .geoAdminLevel3("Colorado Springs")
                      .massRanking(123)
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .parentOrgId("PARENTORG-ID")
                      .postalCode("80903")
                      .profit(123.4)
                      .revenue(123.4)
                      .revenueRanking(123)
                      .riskManager("some.user")
                      .servicesNotes("Example notes")
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("some.user")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .manufacturerOrgId("MANUFACTUREORG-ID")
              .mode(AntennaDetailsFull.Mode.TX)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .polarization(45.1)
              .position("Top")
              .addSize(0.03)
              .addSize(0.05)
              .startFrequency(2.1)
              .steerable(false)
              .addTag("PROVIDER_TAG1")
              .addTag("PROVIDER_TAG2")
              .type("Reflector")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(onorbitAntennaFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(onorbitAntennaFull.createdBy()).contains("some.user")
      assertThat(onorbitAntennaFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(onorbitAntennaFull.origNetwork()).contains("OPS1")
      assertThat(onorbitAntennaFull.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(onorbitAntennaFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val onorbitAntennaFull = OnorbitAntennaFull.builder()
          .classificationMarking("U")
          .dataMode(OnorbitAntennaFull.DataMode.TEST)
          .idAntenna("ANTENNA-ID")
          .idOnOrbit("ONORBIT-ID")
          .source("Bluestaq")
          .id("ONORBITANTENNA-ID")
          .antenna(AntennaFull.builder()
              .dataMode(AntennaFull.DataMode.TEST)
              .name("IRIDIUM NEXT 121-ANTENNA-10075")
              .source("Bluestaq")
              .id("ANTENNA-ID")
              .addAntennaDetail(AntennaDetailsFull.builder()
                  .classificationMarking("U")
                  .dataMode(AntennaDetailsFull.DataMode.TEST)
                  .idAntenna("ANTENNA-ID")
                  .source("Bluestaq")
                  .id("ANTENNADETAILS-ID")
                  .beamForming(false)
                  .beamwidth(14.1)
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .description("Description of antenna A")
                  .diameter(0.01)
                  .endFrequency(3.3)
                  .gain(20.1)
                  .gainTolerance(5.1)
                  .manufacturerOrg(OrganizationFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationFull.DataMode.TEST)
                      .name("some.user")
                      .source("some.user")
                      .type("GOVERNMENT")
                      .id("ORGANIZATION-ID")
                      .active(false)
                      .category("Private company")
                      .countryCode("US")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .description("Example description")
                      .externalId("EXTERNAL-ID")
                      .nationality("US")
                      .addOrganizationDetail(OrganizationDetailsFull.builder()
                          .classificationMarking("U")
                          .dataMode(OrganizationDetailsFull.DataMode.TEST)
                          .idOrganization("ORGANIZATION-ID")
                          .name("some.user")
                          .source("some.user")
                          .id("ORGANIZATIONDETAILS-ID")
                          .address1("123 Main Street")
                          .address2("Apt 4B")
                          .address3("Colorado Springs CO, 80903")
                          .broker("some.user")
                          .ceo("some.user")
                          .cfo("some.user")
                          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .createdBy("some.user")
                          .cto("some.user")
                          .description("Example description")
                          .ebitda(123.4)
                          .email("some_organization@organization.com")
                          .financialNotes("Example notes")
                          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                          .fleetPlanNotes("Example notes")
                          .formerOrgId("FORMERORG-ID")
                          .ftes(123)
                          .geoAdminLevel1("Colorado")
                          .geoAdminLevel2("El Paso County")
                          .geoAdminLevel3("Colorado Springs")
                          .massRanking(123)
                          .origin("some.user")
                          .origNetwork("OPS1")
                          .parentOrgId("PARENTORG-ID")
                          .postalCode("80903")
                          .profit(123.4)
                          .revenue(123.4)
                          .revenueRanking(123)
                          .riskManager("some.user")
                          .servicesNotes("Example notes")
                          .addTag("PROVIDER_TAG1")
                          .addTag("PROVIDER_TAG2")
                          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                          .updatedBy("some.user")
                          .build())
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .manufacturerOrgId("MANUFACTUREORG-ID")
                  .mode(AntennaDetailsFull.Mode.TX)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("ORIG")
                  .polarization(45.1)
                  .position("Top")
                  .addSize(0.03)
                  .addSize(0.05)
                  .startFrequency(2.1)
                  .steerable(false)
                  .addTag("PROVIDER_TAG1")
                  .addTag("PROVIDER_TAG2")
                  .type("Reflector")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedOnorbitAntennaFull = jsonMapper.readValue(jsonMapper.writeValueAsString(onorbitAntennaFull), jacksonTypeRef<OnorbitAntennaFull>())

      assertThat(roundtrippedOnorbitAntennaFull).isEqualTo(onorbitAntennaFull)
    }
}
