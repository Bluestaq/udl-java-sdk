// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.diplomaticclearance.country

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CountryCreateParamsTest {

    @Test
    fun create() {
        CountryCreateParams.builder()
            .classificationMarking("U")
            .countryCode("NL")
            .dataMode(CountryCreateParams.DataMode.TEST)
            .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
            .source("Bluestaq")
            .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
            .acceptsDms(true)
            .acceptsEmail(true)
            .acceptsFax(true)
            .acceptsSiprNet(false)
            .agency("TACC")
            .altCountryCode("IZ")
            .closeTime("16:00")
            .countryId("GDSSBL010412140742262246")
            .countryName("NETHERLANDS")
            .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .addDiplomaticClearanceCountryContact(
                CountryCreateParams.DiplomaticClearanceCountryContact.builder()
                    .ahNum("256039858")
                    .ahSpdDialCode("75")
                    .commNum("904716104")
                    .commSpdDialCode("74")
                    .contactId("GDSSMC112108191329534522")
                    .contactName("John Smith")
                    .contactRemark("Contact remark")
                    .dsnNum("513827215")
                    .dsnSpdDialCode("94")
                    .faxNum("571654897")
                    .niprNum("525574441")
                    .siprNum("546144352")
                    .build()
            )
            .addDiplomaticClearanceCountryEntryExitPoint(
                CountryCreateParams.DiplomaticClearanceCountryEntryExitPoint.builder()
                    .isEntry(true)
                    .isExit(true)
                    .pointName("BATEL")
                    .build()
            )
            .addDiplomaticClearanceCountryProfile(
                CountryCreateParams.DiplomaticClearanceCountryProfile.builder()
                    .cargoPaxRemark("Cargo passenger remark")
                    .clearanceId("MDCNPER231360050AAR")
                    .crewInfoRemark("Crew info remark")
                    .defClearanceStatus("R")
                    .defEntryRemark("Default entry remark")
                    .defEntryTime("15:00")
                    .defExitRemark("Default exit remark")
                    .defExitTime("17:00")
                    .fltInfoRemark("Flight info remark")
                    .hazInfoRemark("Hazmat remark")
                    .landDefProf(true)
                    .landLeadTime(7)
                    .landLeadTimeRemark("Landing lead time remark")
                    .landLeadTimeUnit("Day")
                    .landValidPeriodMinus(0)
                    .landValidPeriodPlus(72)
                    .landValidPeriodRemark("Landing valid period remark")
                    .landValidPeriodUnit("Hour")
                    .overflyDefProf(true)
                    .overflyLeadTime(7)
                    .overflyLeadTimeRemark("Overfly remark")
                    .overflyLeadTimeUnit("Day")
                    .overflyValidPeriodMinus(0)
                    .overflyValidPeriodPlus(72)
                    .overflyValidPeriodRemark("Overfly valid period remark")
                    .overflyValidPeriodUnit("Hour")
                    .profile("Netherlands Non Haz Landing")
                    .profileAgency("USAFE")
                    .profileId("GDSSBL010412140742262247")
                    .profileRemark("Profile remark")
                    .reqAcAltName(false)
                    .reqAllHazInfo(false)
                    .reqAmcStdInfo(false)
                    .reqCargoList(false)
                    .reqCargoPax(false)
                    .reqClass1Info(false)
                    .reqClass9Info(false)
                    .reqCrewComp(false)
                    .reqCrewDetail(false)
                    .reqCrewInfo(false)
                    .reqDiv1Info(false)
                    .reqDv(false)
                    .reqEntryExitCoord(false)
                    .reqFltInfo(false)
                    .reqFltPlanRoute(false)
                    .reqFundSource(false)
                    .reqHazInfo(false)
                    .reqIcao(false)
                    .reqPassportInfo(false)
                    .reqRaven(false)
                    .reqRepChange(false)
                    .reqTailNum(false)
                    .reqWeaponsInfo(false)
                    .undefinedCrewReporting(false)
                    .build()
            )
            .existingProfile(true)
            .gmtOffset("-04:30")
            .officeName("DAO.EU")
            .officePoc("John Smith")
            .officeRemark("Diplomatic clearance office remark")
            .openFri(true)
            .openMon(true)
            .openSat(false)
            .openSun(false)
            .openThu(true)
            .openTime("07:00")
            .openTue(true)
            .openWed(true)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .sourceDl("AXE")
            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .build()
    }

    @Test
    fun body() {
        val params =
            CountryCreateParams.builder()
                .classificationMarking("U")
                .countryCode("NL")
                .dataMode(CountryCreateParams.DataMode.TEST)
                .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                .acceptsDms(true)
                .acceptsEmail(true)
                .acceptsFax(true)
                .acceptsSiprNet(false)
                .agency("TACC")
                .altCountryCode("IZ")
                .closeTime("16:00")
                .countryId("GDSSBL010412140742262246")
                .countryName("NETHERLANDS")
                .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDiplomaticClearanceCountryContact(
                    CountryCreateParams.DiplomaticClearanceCountryContact.builder()
                        .ahNum("256039858")
                        .ahSpdDialCode("75")
                        .commNum("904716104")
                        .commSpdDialCode("74")
                        .contactId("GDSSMC112108191329534522")
                        .contactName("John Smith")
                        .contactRemark("Contact remark")
                        .dsnNum("513827215")
                        .dsnSpdDialCode("94")
                        .faxNum("571654897")
                        .niprNum("525574441")
                        .siprNum("546144352")
                        .build()
                )
                .addDiplomaticClearanceCountryEntryExitPoint(
                    CountryCreateParams.DiplomaticClearanceCountryEntryExitPoint.builder()
                        .isEntry(true)
                        .isExit(true)
                        .pointName("BATEL")
                        .build()
                )
                .addDiplomaticClearanceCountryProfile(
                    CountryCreateParams.DiplomaticClearanceCountryProfile.builder()
                        .cargoPaxRemark("Cargo passenger remark")
                        .clearanceId("MDCNPER231360050AAR")
                        .crewInfoRemark("Crew info remark")
                        .defClearanceStatus("R")
                        .defEntryRemark("Default entry remark")
                        .defEntryTime("15:00")
                        .defExitRemark("Default exit remark")
                        .defExitTime("17:00")
                        .fltInfoRemark("Flight info remark")
                        .hazInfoRemark("Hazmat remark")
                        .landDefProf(true)
                        .landLeadTime(7)
                        .landLeadTimeRemark("Landing lead time remark")
                        .landLeadTimeUnit("Day")
                        .landValidPeriodMinus(0)
                        .landValidPeriodPlus(72)
                        .landValidPeriodRemark("Landing valid period remark")
                        .landValidPeriodUnit("Hour")
                        .overflyDefProf(true)
                        .overflyLeadTime(7)
                        .overflyLeadTimeRemark("Overfly remark")
                        .overflyLeadTimeUnit("Day")
                        .overflyValidPeriodMinus(0)
                        .overflyValidPeriodPlus(72)
                        .overflyValidPeriodRemark("Overfly valid period remark")
                        .overflyValidPeriodUnit("Hour")
                        .profile("Netherlands Non Haz Landing")
                        .profileAgency("USAFE")
                        .profileId("GDSSBL010412140742262247")
                        .profileRemark("Profile remark")
                        .reqAcAltName(false)
                        .reqAllHazInfo(false)
                        .reqAmcStdInfo(false)
                        .reqCargoList(false)
                        .reqCargoPax(false)
                        .reqClass1Info(false)
                        .reqClass9Info(false)
                        .reqCrewComp(false)
                        .reqCrewDetail(false)
                        .reqCrewInfo(false)
                        .reqDiv1Info(false)
                        .reqDv(false)
                        .reqEntryExitCoord(false)
                        .reqFltInfo(false)
                        .reqFltPlanRoute(false)
                        .reqFundSource(false)
                        .reqHazInfo(false)
                        .reqIcao(false)
                        .reqPassportInfo(false)
                        .reqRaven(false)
                        .reqRepChange(false)
                        .reqTailNum(false)
                        .reqWeaponsInfo(false)
                        .undefinedCrewReporting(false)
                        .build()
                )
                .existingProfile(true)
                .gmtOffset("-04:30")
                .officeName("DAO.EU")
                .officePoc("John Smith")
                .officeRemark("Diplomatic clearance office remark")
                .openFri(true)
                .openMon(true)
                .openSat(false)
                .openSun(false)
                .openThu(true)
                .openTime("07:00")
                .openTue(true)
                .openWed(true)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.countryCode()).isEqualTo("NL")
        assertThat(body.dataMode()).isEqualTo(CountryCreateParams.DataMode.TEST)
        assertThat(body.lastChangedDate())
            .isEqualTo(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("25059135-4afc-45c2-b78b-d6e843dbd96d")
        assertThat(body.acceptsDms()).contains(true)
        assertThat(body.acceptsEmail()).contains(true)
        assertThat(body.acceptsFax()).contains(true)
        assertThat(body.acceptsSiprNet()).contains(false)
        assertThat(body.agency()).contains("TACC")
        assertThat(body.altCountryCode()).contains("IZ")
        assertThat(body.closeTime()).contains("16:00")
        assertThat(body.countryId()).contains("GDSSBL010412140742262246")
        assertThat(body.countryName()).contains("NETHERLANDS")
        assertThat(body.countryRemark())
            .contains("Amsterdam airport EHAM will not accept hazardous cargo.")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.diplomaticClearanceCountryContacts().getOrNull())
            .containsExactly(
                CountryCreateParams.DiplomaticClearanceCountryContact.builder()
                    .ahNum("256039858")
                    .ahSpdDialCode("75")
                    .commNum("904716104")
                    .commSpdDialCode("74")
                    .contactId("GDSSMC112108191329534522")
                    .contactName("John Smith")
                    .contactRemark("Contact remark")
                    .dsnNum("513827215")
                    .dsnSpdDialCode("94")
                    .faxNum("571654897")
                    .niprNum("525574441")
                    .siprNum("546144352")
                    .build()
            )
        assertThat(body.diplomaticClearanceCountryEntryExitPoints().getOrNull())
            .containsExactly(
                CountryCreateParams.DiplomaticClearanceCountryEntryExitPoint.builder()
                    .isEntry(true)
                    .isExit(true)
                    .pointName("BATEL")
                    .build()
            )
        assertThat(body.diplomaticClearanceCountryProfiles().getOrNull())
            .containsExactly(
                CountryCreateParams.DiplomaticClearanceCountryProfile.builder()
                    .cargoPaxRemark("Cargo passenger remark")
                    .clearanceId("MDCNPER231360050AAR")
                    .crewInfoRemark("Crew info remark")
                    .defClearanceStatus("R")
                    .defEntryRemark("Default entry remark")
                    .defEntryTime("15:00")
                    .defExitRemark("Default exit remark")
                    .defExitTime("17:00")
                    .fltInfoRemark("Flight info remark")
                    .hazInfoRemark("Hazmat remark")
                    .landDefProf(true)
                    .landLeadTime(7)
                    .landLeadTimeRemark("Landing lead time remark")
                    .landLeadTimeUnit("Day")
                    .landValidPeriodMinus(0)
                    .landValidPeriodPlus(72)
                    .landValidPeriodRemark("Landing valid period remark")
                    .landValidPeriodUnit("Hour")
                    .overflyDefProf(true)
                    .overflyLeadTime(7)
                    .overflyLeadTimeRemark("Overfly remark")
                    .overflyLeadTimeUnit("Day")
                    .overflyValidPeriodMinus(0)
                    .overflyValidPeriodPlus(72)
                    .overflyValidPeriodRemark("Overfly valid period remark")
                    .overflyValidPeriodUnit("Hour")
                    .profile("Netherlands Non Haz Landing")
                    .profileAgency("USAFE")
                    .profileId("GDSSBL010412140742262247")
                    .profileRemark("Profile remark")
                    .reqAcAltName(false)
                    .reqAllHazInfo(false)
                    .reqAmcStdInfo(false)
                    .reqCargoList(false)
                    .reqCargoPax(false)
                    .reqClass1Info(false)
                    .reqClass9Info(false)
                    .reqCrewComp(false)
                    .reqCrewDetail(false)
                    .reqCrewInfo(false)
                    .reqDiv1Info(false)
                    .reqDv(false)
                    .reqEntryExitCoord(false)
                    .reqFltInfo(false)
                    .reqFltPlanRoute(false)
                    .reqFundSource(false)
                    .reqHazInfo(false)
                    .reqIcao(false)
                    .reqPassportInfo(false)
                    .reqRaven(false)
                    .reqRepChange(false)
                    .reqTailNum(false)
                    .reqWeaponsInfo(false)
                    .undefinedCrewReporting(false)
                    .build()
            )
        assertThat(body.existingProfile()).contains(true)
        assertThat(body.gmtOffset()).contains("-04:30")
        assertThat(body.officeName()).contains("DAO.EU")
        assertThat(body.officePoc()).contains("John Smith")
        assertThat(body.officeRemark()).contains("Diplomatic clearance office remark")
        assertThat(body.openFri()).contains(true)
        assertThat(body.openMon()).contains(true)
        assertThat(body.openSat()).contains(false)
        assertThat(body.openSun()).contains(false)
        assertThat(body.openThu()).contains(true)
        assertThat(body.openTime()).contains("07:00")
        assertThat(body.openTue()).contains(true)
        assertThat(body.openWed()).contains(true)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            CountryCreateParams.builder()
                .classificationMarking("U")
                .countryCode("NL")
                .dataMode(CountryCreateParams.DataMode.TEST)
                .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.countryCode()).isEqualTo("NL")
        assertThat(body.dataMode()).isEqualTo(CountryCreateParams.DataMode.TEST)
        assertThat(body.lastChangedDate())
            .isEqualTo(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
