// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.site.operations

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OperationCreateParamsTest {

    @Test
    fun create() {
        OperationCreateParams.builder()
            .classificationMarking("U")
            .dataMode(OperationCreateParams.DataMode.TEST)
            .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
            .source("Bluestaq")
            .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .addDailyOperation(
                OperationCreateParams.DailyOperation.builder()
                    .dayOfWeek(OperationCreateParams.DailyOperation.DayOfWeek.MONDAY)
                    .addOperatingHour(
                        OperationCreateParams.DailyOperation.OperatingHour.builder()
                            .opStartTime("12:00")
                            .opStopTime("22:00")
                            .build()
                    )
                    .operationName("Arrivals")
                    .ophrsLastChangedBy("John Smith")
                    .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .build()
            )
            .dopsLastChangedBy("John Smith")
            .dopsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
            .dopsLastChangedReason("Example reason for change.")
            .idLaunchSite("b150b3ee-884b-b9ac-60a0-6408b4b16088")
            .addMaximumOnGround(
                OperationCreateParams.MaximumOnGround.builder()
                    .aircraftMds("C017A")
                    .contingencyMog(3)
                    .mogLastChangedBy("John Smith")
                    .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .wideParkingMog(1)
                    .wideWorkingMog(1)
                    .build()
            )
            .mogsLastChangedBy("Jane Doe")
            .mogsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
            .mogsLastChangedReason("Example reason for change.")
            .addOperationalDeviation(
                OperationCreateParams.OperationalDeviation.builder()
                    .affectedAircraftMds("C017A")
                    .affectedMog(1)
                    .aircraftOnGroundTime("14:00")
                    .crewRestTime("14:00")
                    .odLastChangedBy("John Smith")
                    .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .odRemark("Example remark about this operational deviation.")
                    .build()
            )
            .addOperationalPlanning(
                OperationCreateParams.OperationalPlanning.builder()
                    .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opLastChangedBy("John Smith")
                    .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opRemark("Example planning remark")
                    .opSource("a3")
                    .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opStatus("Verified")
                    .build()
            )
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .addPathway(
                OperationCreateParams.Pathway.builder()
                    .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                    .pwLastChangedBy("John Smith")
                    .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .pwType("Taxiway")
                    .pwUsage("Arrival")
                    .build()
            )
            .sourceDl("AXE")
            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .addWaiver(
                OperationCreateParams.Waiver.builder()
                    .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .hasExpired(false)
                    .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .issuerName("John Smith")
                    .requesterName("Jane Doe")
                    .requesterPhoneNumber("808-123-4567")
                    .requestingUnit("2A1")
                    .waiverAppliesTo("C017A")
                    .waiverDescription("Example waiver description")
                    .waiverLastChangedBy("J. Appleseed")
                    .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            OperationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OperationCreateParams.DataMode.TEST)
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .source("Bluestaq")
                .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDailyOperation(
                    OperationCreateParams.DailyOperation.builder()
                        .dayOfWeek(OperationCreateParams.DailyOperation.DayOfWeek.MONDAY)
                        .addOperatingHour(
                            OperationCreateParams.DailyOperation.OperatingHour.builder()
                                .opStartTime("12:00")
                                .opStopTime("22:00")
                                .build()
                        )
                        .operationName("Arrivals")
                        .ophrsLastChangedBy("John Smith")
                        .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .build()
                )
                .dopsLastChangedBy("John Smith")
                .dopsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .dopsLastChangedReason("Example reason for change.")
                .idLaunchSite("b150b3ee-884b-b9ac-60a0-6408b4b16088")
                .addMaximumOnGround(
                    OperationCreateParams.MaximumOnGround.builder()
                        .aircraftMds("C017A")
                        .contingencyMog(3)
                        .mogLastChangedBy("John Smith")
                        .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .wideParkingMog(1)
                        .wideWorkingMog(1)
                        .build()
                )
                .mogsLastChangedBy("Jane Doe")
                .mogsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .mogsLastChangedReason("Example reason for change.")
                .addOperationalDeviation(
                    OperationCreateParams.OperationalDeviation.builder()
                        .affectedAircraftMds("C017A")
                        .affectedMog(1)
                        .aircraftOnGroundTime("14:00")
                        .crewRestTime("14:00")
                        .odLastChangedBy("John Smith")
                        .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .odRemark("Example remark about this operational deviation.")
                        .build()
                )
                .addOperationalPlanning(
                    OperationCreateParams.OperationalPlanning.builder()
                        .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opLastChangedBy("John Smith")
                        .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opRemark("Example planning remark")
                        .opSource("a3")
                        .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opStatus("Verified")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPathway(
                    OperationCreateParams.Pathway.builder()
                        .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                        .pwLastChangedBy("John Smith")
                        .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .pwType("Taxiway")
                        .pwUsage("Arrival")
                        .build()
                )
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addWaiver(
                    OperationCreateParams.Waiver.builder()
                        .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .hasExpired(false)
                        .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .issuerName("John Smith")
                        .requesterName("Jane Doe")
                        .requesterPhoneNumber("808-123-4567")
                        .requestingUnit("2A1")
                        .waiverAppliesTo("C017A")
                        .waiverDescription("Example waiver description")
                        .waiverLastChangedBy("J. Appleseed")
                        .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OperationCreateParams.DataMode.TEST)
        assertThat(body.idSite()).isEqualTo("a150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.dailyOperations().getOrNull())
            .containsExactly(
                OperationCreateParams.DailyOperation.builder()
                    .dayOfWeek(OperationCreateParams.DailyOperation.DayOfWeek.MONDAY)
                    .addOperatingHour(
                        OperationCreateParams.DailyOperation.OperatingHour.builder()
                            .opStartTime("12:00")
                            .opStopTime("22:00")
                            .build()
                    )
                    .operationName("Arrivals")
                    .ophrsLastChangedBy("John Smith")
                    .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .build()
            )
        assertThat(body.dopsLastChangedBy()).contains("John Smith")
        assertThat(body.dopsLastChangedDate())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
        assertThat(body.dopsLastChangedReason()).contains("Example reason for change.")
        assertThat(body.idLaunchSite()).contains("b150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(body.maximumOnGrounds().getOrNull())
            .containsExactly(
                OperationCreateParams.MaximumOnGround.builder()
                    .aircraftMds("C017A")
                    .contingencyMog(3)
                    .mogLastChangedBy("John Smith")
                    .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .wideParkingMog(1)
                    .wideWorkingMog(1)
                    .build()
            )
        assertThat(body.mogsLastChangedBy()).contains("Jane Doe")
        assertThat(body.mogsLastChangedDate())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
        assertThat(body.mogsLastChangedReason()).contains("Example reason for change.")
        assertThat(body.operationalDeviations().getOrNull())
            .containsExactly(
                OperationCreateParams.OperationalDeviation.builder()
                    .affectedAircraftMds("C017A")
                    .affectedMog(1)
                    .aircraftOnGroundTime("14:00")
                    .crewRestTime("14:00")
                    .odLastChangedBy("John Smith")
                    .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .odRemark("Example remark about this operational deviation.")
                    .build()
            )
        assertThat(body.operationalPlannings().getOrNull())
            .containsExactly(
                OperationCreateParams.OperationalPlanning.builder()
                    .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opLastChangedBy("John Smith")
                    .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opRemark("Example planning remark")
                    .opSource("a3")
                    .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opStatus("Verified")
                    .build()
            )
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.pathways().getOrNull())
            .containsExactly(
                OperationCreateParams.Pathway.builder()
                    .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                    .pwLastChangedBy("John Smith")
                    .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .pwType("Taxiway")
                    .pwUsage("Arrival")
                    .build()
            )
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
        assertThat(body.waivers().getOrNull())
            .containsExactly(
                OperationCreateParams.Waiver.builder()
                    .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .hasExpired(false)
                    .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .issuerName("John Smith")
                    .requesterName("Jane Doe")
                    .requesterPhoneNumber("808-123-4567")
                    .requestingUnit("2A1")
                    .waiverAppliesTo("C017A")
                    .waiverDescription("Example waiver description")
                    .waiverLastChangedBy("J. Appleseed")
                    .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OperationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OperationCreateParams.DataMode.TEST)
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OperationCreateParams.DataMode.TEST)
        assertThat(body.idSite()).isEqualTo("a150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
