// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.soiobservationset

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.soiobservationset.SoiObservationSetListResponse
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SoiObservationSetListResponseTest {

    @Test
    fun create() {
      val soiObservationSetListResponse = SoiObservationSetListResponse.builder()
          .classificationMarking("U")
          .dataMode(SoiObservationSetListResponse.DataMode.TEST)
          .numObs(1)
          .source("Bluestaq")
          .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .type(SoiObservationSetListResponse.Type.OPTICAL)
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .binningHoriz(2)
          .binningVert(2)
          .brightnessVarianceChangeDetected(true)
          .addCalibration(SoiObservationSetListResponse.Calibration.builder()
              .calBgIntensity(1.1)
              .calExtinctionCoeff(0.2)
              .calExtinctionCoeffMaxUnc(0.19708838)
              .calExtinctionCoeffUnc(0.06474939)
              .calNumCorrelatedStars(1)
              .calNumDetectedStars(1)
              .calSkyBg(30086.25)
              .calSpectralFilterSolarMag(19.23664587)
              .calTime(OffsetDateTime.parse("2023-01-02T16:00:00.123Z"))
              .calType("PRE")
              .calZeroPoint(25.15682157)
              .build())
          .calibrationType("ALL SKY")
          .changeConf("MEDIUM")
          .changeDetected(true)
          .collectionDensityConf("MEDIUM")
          .collectionId("b5133288-ab63-4b15-81f6-c7eec0cdb0c0")
          .collectionMode("RATE TRACK")
          .corrQuality(0.327)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .endTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .gain(234.2)
          .idElset("REF-ELSET-ID")
          .idOnOrbit("ONORBIT-ID")
          .idSensor("SENSOR-ID")
          .losDeclinationEnd(1.1)
          .losDeclinationStart(1.1)
          .msgCreateDate(OffsetDateTime.parse("2022-07-07T16:00:00.123Z"))
          .numSpectralFilters(10)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .origObjectId("ORIGOBJECT-ID")
          .origSensorId("ORIGSENSOR-ID")
          .percentSatThreshold(0.1)
          .periodicityChangeDetected(true)
          .periodicityDetectionConf("MEDIUM")
          .periodicitySamplingConf("MEDIUM")
          .pixelArrayHeight(32)
          .pixelArrayWidth(32)
          .pixelMax(16383)
          .pixelMin(0)
          .pointingAngleAzEnd(1.1)
          .pointingAngleAzStart(1.1)
          .pointingAngleElEnd(1.1)
          .pointingAngleElStart(1.1)
          .polarAngleEnd(1.1)
          .polarAngleStart(1.1)
          .referenceFrame(SoiObservationSetListResponse.ReferenceFrame.J2000)
          .satelliteName("TITAN 3C TRANSTAGE R/B")
          .satNo(101)
          .senalt(1.1)
          .senlat(45.1)
          .senlon(179.1)
          .senReferenceFrame(SoiObservationSetListResponse.SenReferenceFrame.J2000)
          .sensorAsId("026dd511-8ba5-47d3-9909-836149f87686")
          .senvelx(1.1)
          .senvely(1.1)
          .senvelz(1.1)
          .senx(1.1)
          .seny(1.1)
          .senz(1.1)
          .softwareVersion("GSV99/17-1")
          .solarMag(-26.91)
          .solarPhaseAngleBrightnessChangeDetected(true)
          .sourceDl("AXE")
          .addSpectralFilter("Keyword1")
          .addSpectralFilter("Keyword2")
          .starCatName("SSTRC5")
          .addTag("TAG1")
          .addTag("TAG2")
          .transactionId("TRANSACTION-ID")
          .uct(true)
          .validCalibrations("BOTH")
          .build()

      assertThat(soiObservationSetListResponse.classificationMarking()).isEqualTo("U")
      assertThat(soiObservationSetListResponse.dataMode()).isEqualTo(SoiObservationSetListResponse.DataMode.TEST)
      assertThat(soiObservationSetListResponse.numObs()).isEqualTo(1)
      assertThat(soiObservationSetListResponse.source()).isEqualTo("Bluestaq")
      assertThat(soiObservationSetListResponse.startTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
      assertThat(soiObservationSetListResponse.type()).isEqualTo(SoiObservationSetListResponse.Type.OPTICAL)
      assertThat(soiObservationSetListResponse.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
      assertThat(soiObservationSetListResponse.binningHoriz()).contains(2)
      assertThat(soiObservationSetListResponse.binningVert()).contains(2)
      assertThat(soiObservationSetListResponse.brightnessVarianceChangeDetected()).contains(true)
      assertThat(soiObservationSetListResponse.calibrations().getOrNull()).containsExactly(SoiObservationSetListResponse.Calibration.builder()
          .calBgIntensity(1.1)
          .calExtinctionCoeff(0.2)
          .calExtinctionCoeffMaxUnc(0.19708838)
          .calExtinctionCoeffUnc(0.06474939)
          .calNumCorrelatedStars(1)
          .calNumDetectedStars(1)
          .calSkyBg(30086.25)
          .calSpectralFilterSolarMag(19.23664587)
          .calTime(OffsetDateTime.parse("2023-01-02T16:00:00.123Z"))
          .calType("PRE")
          .calZeroPoint(25.15682157)
          .build())
      assertThat(soiObservationSetListResponse.calibrationType()).contains("ALL SKY")
      assertThat(soiObservationSetListResponse.changeConf()).contains("MEDIUM")
      assertThat(soiObservationSetListResponse.changeDetected()).contains(true)
      assertThat(soiObservationSetListResponse.collectionDensityConf()).contains("MEDIUM")
      assertThat(soiObservationSetListResponse.collectionId()).contains("b5133288-ab63-4b15-81f6-c7eec0cdb0c0")
      assertThat(soiObservationSetListResponse.collectionMode()).contains("RATE TRACK")
      assertThat(soiObservationSetListResponse.corrQuality()).contains(0.327)
      assertThat(soiObservationSetListResponse.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(soiObservationSetListResponse.createdBy()).contains("some.user")
      assertThat(soiObservationSetListResponse.endTime()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
      assertThat(soiObservationSetListResponse.gain()).contains(234.2)
      assertThat(soiObservationSetListResponse.idElset()).contains("REF-ELSET-ID")
      assertThat(soiObservationSetListResponse.idOnOrbit()).contains("ONORBIT-ID")
      assertThat(soiObservationSetListResponse.idSensor()).contains("SENSOR-ID")
      assertThat(soiObservationSetListResponse.losDeclinationEnd()).contains(1.1)
      assertThat(soiObservationSetListResponse.losDeclinationStart()).contains(1.1)
      assertThat(soiObservationSetListResponse.msgCreateDate()).contains(OffsetDateTime.parse("2022-07-07T16:00:00.123Z"))
      assertThat(soiObservationSetListResponse.numSpectralFilters()).contains(10)
      assertThat(soiObservationSetListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(soiObservationSetListResponse.origNetwork()).contains("OPS1")
      assertThat(soiObservationSetListResponse.origObjectId()).contains("ORIGOBJECT-ID")
      assertThat(soiObservationSetListResponse.origSensorId()).contains("ORIGSENSOR-ID")
      assertThat(soiObservationSetListResponse.percentSatThreshold()).contains(0.1)
      assertThat(soiObservationSetListResponse.periodicityChangeDetected()).contains(true)
      assertThat(soiObservationSetListResponse.periodicityDetectionConf()).contains("MEDIUM")
      assertThat(soiObservationSetListResponse.periodicitySamplingConf()).contains("MEDIUM")
      assertThat(soiObservationSetListResponse.pixelArrayHeight()).contains(32)
      assertThat(soiObservationSetListResponse.pixelArrayWidth()).contains(32)
      assertThat(soiObservationSetListResponse.pixelMax()).contains(16383)
      assertThat(soiObservationSetListResponse.pixelMin()).contains(0)
      assertThat(soiObservationSetListResponse.pointingAngleAzEnd()).contains(1.1)
      assertThat(soiObservationSetListResponse.pointingAngleAzStart()).contains(1.1)
      assertThat(soiObservationSetListResponse.pointingAngleElEnd()).contains(1.1)
      assertThat(soiObservationSetListResponse.pointingAngleElStart()).contains(1.1)
      assertThat(soiObservationSetListResponse.polarAngleEnd()).contains(1.1)
      assertThat(soiObservationSetListResponse.polarAngleStart()).contains(1.1)
      assertThat(soiObservationSetListResponse.referenceFrame()).contains(SoiObservationSetListResponse.ReferenceFrame.J2000)
      assertThat(soiObservationSetListResponse.satelliteName()).contains("TITAN 3C TRANSTAGE R/B")
      assertThat(soiObservationSetListResponse.satNo()).contains(101)
      assertThat(soiObservationSetListResponse.senalt()).contains(1.1)
      assertThat(soiObservationSetListResponse.senlat()).contains(45.1)
      assertThat(soiObservationSetListResponse.senlon()).contains(179.1)
      assertThat(soiObservationSetListResponse.senReferenceFrame()).contains(SoiObservationSetListResponse.SenReferenceFrame.J2000)
      assertThat(soiObservationSetListResponse.sensorAsId()).contains("026dd511-8ba5-47d3-9909-836149f87686")
      assertThat(soiObservationSetListResponse.senvelx()).contains(1.1)
      assertThat(soiObservationSetListResponse.senvely()).contains(1.1)
      assertThat(soiObservationSetListResponse.senvelz()).contains(1.1)
      assertThat(soiObservationSetListResponse.senx()).contains(1.1)
      assertThat(soiObservationSetListResponse.seny()).contains(1.1)
      assertThat(soiObservationSetListResponse.senz()).contains(1.1)
      assertThat(soiObservationSetListResponse.softwareVersion()).contains("GSV99/17-1")
      assertThat(soiObservationSetListResponse.solarMag()).contains(-26.91)
      assertThat(soiObservationSetListResponse.solarPhaseAngleBrightnessChangeDetected()).contains(true)
      assertThat(soiObservationSetListResponse.sourceDl()).contains("AXE")
      assertThat(soiObservationSetListResponse.spectralFilters().getOrNull()).containsExactly("Keyword1", "Keyword2")
      assertThat(soiObservationSetListResponse.starCatName()).contains("SSTRC5")
      assertThat(soiObservationSetListResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
      assertThat(soiObservationSetListResponse.transactionId()).contains("TRANSACTION-ID")
      assertThat(soiObservationSetListResponse.uct()).contains(true)
      assertThat(soiObservationSetListResponse.validCalibrations()).contains("BOTH")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val soiObservationSetListResponse = SoiObservationSetListResponse.builder()
          .classificationMarking("U")
          .dataMode(SoiObservationSetListResponse.DataMode.TEST)
          .numObs(1)
          .source("Bluestaq")
          .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .type(SoiObservationSetListResponse.Type.OPTICAL)
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .binningHoriz(2)
          .binningVert(2)
          .brightnessVarianceChangeDetected(true)
          .addCalibration(SoiObservationSetListResponse.Calibration.builder()
              .calBgIntensity(1.1)
              .calExtinctionCoeff(0.2)
              .calExtinctionCoeffMaxUnc(0.19708838)
              .calExtinctionCoeffUnc(0.06474939)
              .calNumCorrelatedStars(1)
              .calNumDetectedStars(1)
              .calSkyBg(30086.25)
              .calSpectralFilterSolarMag(19.23664587)
              .calTime(OffsetDateTime.parse("2023-01-02T16:00:00.123Z"))
              .calType("PRE")
              .calZeroPoint(25.15682157)
              .build())
          .calibrationType("ALL SKY")
          .changeConf("MEDIUM")
          .changeDetected(true)
          .collectionDensityConf("MEDIUM")
          .collectionId("b5133288-ab63-4b15-81f6-c7eec0cdb0c0")
          .collectionMode("RATE TRACK")
          .corrQuality(0.327)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .endTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .gain(234.2)
          .idElset("REF-ELSET-ID")
          .idOnOrbit("ONORBIT-ID")
          .idSensor("SENSOR-ID")
          .losDeclinationEnd(1.1)
          .losDeclinationStart(1.1)
          .msgCreateDate(OffsetDateTime.parse("2022-07-07T16:00:00.123Z"))
          .numSpectralFilters(10)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .origObjectId("ORIGOBJECT-ID")
          .origSensorId("ORIGSENSOR-ID")
          .percentSatThreshold(0.1)
          .periodicityChangeDetected(true)
          .periodicityDetectionConf("MEDIUM")
          .periodicitySamplingConf("MEDIUM")
          .pixelArrayHeight(32)
          .pixelArrayWidth(32)
          .pixelMax(16383)
          .pixelMin(0)
          .pointingAngleAzEnd(1.1)
          .pointingAngleAzStart(1.1)
          .pointingAngleElEnd(1.1)
          .pointingAngleElStart(1.1)
          .polarAngleEnd(1.1)
          .polarAngleStart(1.1)
          .referenceFrame(SoiObservationSetListResponse.ReferenceFrame.J2000)
          .satelliteName("TITAN 3C TRANSTAGE R/B")
          .satNo(101)
          .senalt(1.1)
          .senlat(45.1)
          .senlon(179.1)
          .senReferenceFrame(SoiObservationSetListResponse.SenReferenceFrame.J2000)
          .sensorAsId("026dd511-8ba5-47d3-9909-836149f87686")
          .senvelx(1.1)
          .senvely(1.1)
          .senvelz(1.1)
          .senx(1.1)
          .seny(1.1)
          .senz(1.1)
          .softwareVersion("GSV99/17-1")
          .solarMag(-26.91)
          .solarPhaseAngleBrightnessChangeDetected(true)
          .sourceDl("AXE")
          .addSpectralFilter("Keyword1")
          .addSpectralFilter("Keyword2")
          .starCatName("SSTRC5")
          .addTag("TAG1")
          .addTag("TAG2")
          .transactionId("TRANSACTION-ID")
          .uct(true)
          .validCalibrations("BOTH")
          .build()

      val roundtrippedSoiObservationSetListResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(soiObservationSetListResponse), jacksonTypeRef<SoiObservationSetListResponse>())

      assertThat(roundtrippedSoiObservationSetListResponse).isEqualTo(soiObservationSetListResponse)
    }
}
