// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sensor

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.LocationAbridged
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SensorListResponseTest {

    @Test
    fun create() {
        val sensorListResponse =
            SensorListResponse.builder()
                .classificationMarking("U")
                .dataMode(SensorListResponse.DataMode.TEST)
                .sensorName("SENSOR_NAME")
                .source("some.user")
                .active(true)
                .afId("AF-ID")
                .asrType("SENSOR_TYPE")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataControl("observations")
                .entity(
                    SensorListResponse.Entity.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.Entity.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(SensorListResponse.Entity.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationAbridged.builder()
                                .classificationMarking("U")
                                .dataMode(LocationAbridged.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            SensorListResponse.Entity.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(SensorListResponse.Entity.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(SensorListResponse.Entity.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(SensorListResponse.Entity.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(SensorListResponse.Entity.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .terrestrialId("TERRESTRIAL-ID")
                        .build()
                )
                .idEntity("ENTITY-ID")
                .idSensor("SENSOR-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addSensorcharacteristic(
                    SensorListResponse.Sensorcharacteristic.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.Sensorcharacteristic.DataMode.TEST)
                        .idSensor("SENSOR-ID")
                        .source("Bluestaq")
                        .id("SENSORCHARACTERISTICS-ID")
                        .addAcceptSampleRange(3.01)
                        .addAcceptSampleRange(3.02)
                        .analogToDigitalBitSize(2)
                        .aperture(2.23)
                        .asrScanRate(20.23)
                        .atmosReceiverLoss(0.5)
                        .atmosTransmissionLoss(0.5)
                        .avgAtmosSeeingConditions(10.23)
                        .addAzAng(135.1)
                        .addAzAng(45.2)
                        .azimuthRate(0.3334)
                        .backgroundSkyRadiance(10.23)
                        .backgroundSkyVisMag(10.23)
                        .band("BAND")
                        .bandwidth(100.23)
                        .addBeamOrder("vb1")
                        .addBeamOrder("ob1")
                        .beamQty(2)
                        .boresight(20.23)
                        .boresightOffAngle(20.23)
                        .centerWavelength(4.56)
                        .collapsingLoss(1.23)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .critShear(47.1)
                        .darkCurrent(12.3)
                        .addDelayGate(690.2)
                        .addDelayGate(690.3)
                        .description(
                            "PROFILER DATA - PROFILE/SOUNDER DATA FROM PRIMARY WINDS SOURCE"
                        )
                        .detectSnr(2.1)
                        .dutyCycle(0.5)
                        .earthLimbExclHgt(20.23)
                        .addElAng(75.3)
                        .addElAng(75.4)
                        .elevationRateGeolm(0.9555)
                        .equipmentType("PS")
                        .fanBeamWidth(3.1)
                        .fft(4096)
                        .fgpCrit(5)
                        .filterMismatchFactor(10.23)
                        .fNum(1.23)
                        .focalPoint(20.23)
                        .hFov(20.23)
                        .hResPixels(1000)
                        .k(1.4)
                        .leftClockAngle(20.23)
                        .leftGeoBeltLimit(20.23)
                        .location("KENNEDY SPACE CENTER, FL")
                        .loopGain(150.1)
                        .lunarExclAngle(45.2)
                        .magDec(45.23)
                        .magnitudeLimit(23.5)
                        .maxDeviationAngle(20.23)
                        .maxIntegrationTime(1.1)
                        .maxObservableRange(20.23)
                        .maxRangeLimit(4972.1)
                        .maxWavelength(7.89)
                        .minIntegrationTime(0.3)
                        .minRangeLimit(165.1)
                        .minSignalNoiseRatio(31.5)
                        .minWavelength(1.23)
                        .negativeRangeRateLimit(-19.25)
                        .noiseFigure(10.23)
                        .nonCoherentIntegratedPulses(2)
                        .numIntegratedPulses(10)
                        .numIntegrationFrames(2)
                        .numOpticalIntegrationModes(2)
                        .numWaveforms(2)
                        .addOpticalIntegrationAngularRate(15.1)
                        .addOpticalIntegrationAngularRate(0.1)
                        .addOpticalIntegrationFrame(2.1)
                        .addOpticalIntegrationFrame(3.1)
                        .addOpticalIntegrationPixelBinning(2.1)
                        .addOpticalIntegrationPixelBinning(1.1)
                        .addOpticalIntegrationSnR(6.1)
                        .addOpticalIntegrationSnR(6.1)
                        .addOpticalIntegrationTime(0.3)
                        .addOpticalIntegrationTime(1.0)
                        .opticalTransmission(0.5)
                        .origNetwork("ORIG")
                        .patternAbsorptionLoss(1.23)
                        .patternScanLoss(1.23)
                        .peakPower(5000000.1)
                        .pixelInstantaneousFov(10.23)
                        .pixelWellDepth(12)
                        .positiveRangeRateLimit(19.25)
                        .prf(20.23)
                        .probDetectSnr(0.5)
                        .probFalseAlarm(0.5)
                        .addPulseRepPeriod(153.8)
                        .addPulseRepPeriod(153.9)
                        .quantumEff(0.5)
                        .radarFrequency(45300000000.1)
                        .radarMessageFormat("DATA_FORMAT")
                        .radarMur(20.23)
                        .addRadarPulseWidth(20.23)
                        .addRadarPulseWidth(20.33)
                        .radioFrequency(20.23)
                        .radomeLoss(1.23)
                        .addRangeGate(51)
                        .addRangeGate(52)
                        .addRangeSpacing(690.2)
                        .addRangeSpacing(690.3)
                        .readNoise(12)
                        .receiveGain(10.2)
                        .receiveHorizBeamWidth(75.3)
                        .receiveLoss(1.23)
                        .receiveVertBeamWidth(75.4)
                        .refTemp(3.5)
                        .addReqRecord(0)
                        .addReqRecord(1)
                        .rightClockAngle(20.23)
                        .rightGeoBeltLimit(20.23)
                        .addRunMeanCode(0)
                        .addRunMeanCode(5)
                        .signalProcessingLoss(1.23)
                        .siteCode("07")
                        .solarExclAngle(50.5)
                        .addSpecAvgSpectraNum(3)
                        .addSpecAvgSpectraNum(4)
                        .systemNoiseTemperature(3.5)
                        .taskableRange(20.23)
                        .addTempMedFiltCode(3)
                        .addTempMedFiltCode(4)
                        .testNumber("02022")
                        .addTotRecNum(5)
                        .addTotRecNum(2)
                        .towerHeight(20.23)
                        .trackAngle(0.043)
                        .trackSnr(15.1)
                        .transmitGain(32.1)
                        .transmitHorizBeamWidth(135.1)
                        .transmitLoss(7.1)
                        .transmitPower(190000.1)
                        .transmitVertBeamWidth(45.2)
                        .trueNorthCorrector(10)
                        .trueTilt(20.23)
                        .twilightAngle(7.5)
                        .vertBeamFlag(false)
                        .addVertGateSpacing(149.1)
                        .addVertGateSpacing(149.2)
                        .addVertGateWidth(149.1)
                        .addVertGateWidth(149.2)
                        .vFov(20.23)
                        .vResPixels(1000)
                        .addWaveformBandwidth(0.25)
                        .addWaveformBandwidth(0.25)
                        .addWaveformLoopGain(150.1)
                        .addWaveformLoopGain(155.1)
                        .addWaveformMaxRange(2000.1)
                        .addWaveformMaxRange(2000.1)
                        .addWaveformMinRange(150.1)
                        .addWaveformMinRange(150.1)
                        .addWaveformPulseWidth(100.1)
                        .addWaveformPulseWidth(200.1)
                        .z1MaxRange(50.23)
                        .z1MinRange(20.23)
                        .z2MaxRange(50.23)
                        .z2MinRange(20.23)
                        .build()
                )
                .addSensorlimitsCollection(
                    SensorListResponse.SensorlimitsCollection.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.SensorlimitsCollection.DataMode.TEST)
                        .source("Bluestaq")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idSensor("SENSORLIMITS-ID")
                        .idSensorLimits("SENSORLIMITS-ID")
                        .lowerLeftAzimuthLimit(1.23)
                        .lowerLeftElevationLimit(1.23)
                        .lowerRightAzimuthLimit(1.23)
                        .lowerRightElevationLimit(1.23)
                        .origNetwork("ORIG")
                        .upperLeftAzimuthLimit(1.23)
                        .upperLeftElevationLimit(1.23)
                        .upperRightAzimuthLimit(1.23)
                        .upperRightElevationLimit(1.23)
                        .build()
                )
                .sensorNumber(1234)
                .sensorObservationType(
                    SensorListResponse.SensorObservationType.builder()
                        .id("3")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origNetwork("OPS1")
                        .type("5")
                        .build()
                )
                .addSensorStat(
                    SensorListResponse.SensorStat.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.SensorStat.DataMode.TEST)
                        .idSensor("idSensor")
                        .source("Bluestaq")
                        .id("SENSORSTATS-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .sensorType(
                    SensorListResponse.SensorType.builder()
                        .id(12344411)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origNetwork("OPS1")
                        .type("Space Borne")
                        .build()
                )
                .shortName("SNR-1")
                .build()

        assertThat(sensorListResponse.classificationMarking()).isEqualTo("U")
        assertThat(sensorListResponse.dataMode()).isEqualTo(SensorListResponse.DataMode.TEST)
        assertThat(sensorListResponse.sensorName()).isEqualTo("SENSOR_NAME")
        assertThat(sensorListResponse.source()).isEqualTo("some.user")
        assertThat(sensorListResponse.active()).contains(true)
        assertThat(sensorListResponse.afId()).contains("AF-ID")
        assertThat(sensorListResponse.asrType()).contains("SENSOR_TYPE")
        assertThat(sensorListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(sensorListResponse.createdBy()).contains("some.user")
        assertThat(sensorListResponse.dataControl()).contains("observations")
        assertThat(sensorListResponse.entity())
            .contains(
                SensorListResponse.Entity.builder()
                    .classificationMarking("U")
                    .dataMode(SensorListResponse.Entity.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(SensorListResponse.Entity.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationAbridged.builder()
                            .classificationMarking("U")
                            .dataMode(LocationAbridged.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        SensorListResponse.Entity.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(SensorListResponse.Entity.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(SensorListResponse.Entity.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(SensorListResponse.Entity.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(SensorListResponse.Entity.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .terrestrialId("TERRESTRIAL-ID")
                    .build()
            )
        assertThat(sensorListResponse.idEntity()).contains("ENTITY-ID")
        assertThat(sensorListResponse.idSensor()).contains("SENSOR-ID")
        assertThat(sensorListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(sensorListResponse.origNetwork()).contains("ORIG")
        assertThat(sensorListResponse.sensorcharacteristics().getOrNull())
            .containsExactly(
                SensorListResponse.Sensorcharacteristic.builder()
                    .classificationMarking("U")
                    .dataMode(SensorListResponse.Sensorcharacteristic.DataMode.TEST)
                    .idSensor("SENSOR-ID")
                    .source("Bluestaq")
                    .id("SENSORCHARACTERISTICS-ID")
                    .addAcceptSampleRange(3.01)
                    .addAcceptSampleRange(3.02)
                    .analogToDigitalBitSize(2)
                    .aperture(2.23)
                    .asrScanRate(20.23)
                    .atmosReceiverLoss(0.5)
                    .atmosTransmissionLoss(0.5)
                    .avgAtmosSeeingConditions(10.23)
                    .addAzAng(135.1)
                    .addAzAng(45.2)
                    .azimuthRate(0.3334)
                    .backgroundSkyRadiance(10.23)
                    .backgroundSkyVisMag(10.23)
                    .band("BAND")
                    .bandwidth(100.23)
                    .addBeamOrder("vb1")
                    .addBeamOrder("ob1")
                    .beamQty(2)
                    .boresight(20.23)
                    .boresightOffAngle(20.23)
                    .centerWavelength(4.56)
                    .collapsingLoss(1.23)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .critShear(47.1)
                    .darkCurrent(12.3)
                    .addDelayGate(690.2)
                    .addDelayGate(690.3)
                    .description("PROFILER DATA - PROFILE/SOUNDER DATA FROM PRIMARY WINDS SOURCE")
                    .detectSnr(2.1)
                    .dutyCycle(0.5)
                    .earthLimbExclHgt(20.23)
                    .addElAng(75.3)
                    .addElAng(75.4)
                    .elevationRateGeolm(0.9555)
                    .equipmentType("PS")
                    .fanBeamWidth(3.1)
                    .fft(4096)
                    .fgpCrit(5)
                    .filterMismatchFactor(10.23)
                    .fNum(1.23)
                    .focalPoint(20.23)
                    .hFov(20.23)
                    .hResPixels(1000)
                    .k(1.4)
                    .leftClockAngle(20.23)
                    .leftGeoBeltLimit(20.23)
                    .location("KENNEDY SPACE CENTER, FL")
                    .loopGain(150.1)
                    .lunarExclAngle(45.2)
                    .magDec(45.23)
                    .magnitudeLimit(23.5)
                    .maxDeviationAngle(20.23)
                    .maxIntegrationTime(1.1)
                    .maxObservableRange(20.23)
                    .maxRangeLimit(4972.1)
                    .maxWavelength(7.89)
                    .minIntegrationTime(0.3)
                    .minRangeLimit(165.1)
                    .minSignalNoiseRatio(31.5)
                    .minWavelength(1.23)
                    .negativeRangeRateLimit(-19.25)
                    .noiseFigure(10.23)
                    .nonCoherentIntegratedPulses(2)
                    .numIntegratedPulses(10)
                    .numIntegrationFrames(2)
                    .numOpticalIntegrationModes(2)
                    .numWaveforms(2)
                    .addOpticalIntegrationAngularRate(15.1)
                    .addOpticalIntegrationAngularRate(0.1)
                    .addOpticalIntegrationFrame(2.1)
                    .addOpticalIntegrationFrame(3.1)
                    .addOpticalIntegrationPixelBinning(2.1)
                    .addOpticalIntegrationPixelBinning(1.1)
                    .addOpticalIntegrationSnR(6.1)
                    .addOpticalIntegrationSnR(6.1)
                    .addOpticalIntegrationTime(0.3)
                    .addOpticalIntegrationTime(1.0)
                    .opticalTransmission(0.5)
                    .origNetwork("ORIG")
                    .patternAbsorptionLoss(1.23)
                    .patternScanLoss(1.23)
                    .peakPower(5000000.1)
                    .pixelInstantaneousFov(10.23)
                    .pixelWellDepth(12)
                    .positiveRangeRateLimit(19.25)
                    .prf(20.23)
                    .probDetectSnr(0.5)
                    .probFalseAlarm(0.5)
                    .addPulseRepPeriod(153.8)
                    .addPulseRepPeriod(153.9)
                    .quantumEff(0.5)
                    .radarFrequency(45300000000.1)
                    .radarMessageFormat("DATA_FORMAT")
                    .radarMur(20.23)
                    .addRadarPulseWidth(20.23)
                    .addRadarPulseWidth(20.33)
                    .radioFrequency(20.23)
                    .radomeLoss(1.23)
                    .addRangeGate(51)
                    .addRangeGate(52)
                    .addRangeSpacing(690.2)
                    .addRangeSpacing(690.3)
                    .readNoise(12)
                    .receiveGain(10.2)
                    .receiveHorizBeamWidth(75.3)
                    .receiveLoss(1.23)
                    .receiveVertBeamWidth(75.4)
                    .refTemp(3.5)
                    .addReqRecord(0)
                    .addReqRecord(1)
                    .rightClockAngle(20.23)
                    .rightGeoBeltLimit(20.23)
                    .addRunMeanCode(0)
                    .addRunMeanCode(5)
                    .signalProcessingLoss(1.23)
                    .siteCode("07")
                    .solarExclAngle(50.5)
                    .addSpecAvgSpectraNum(3)
                    .addSpecAvgSpectraNum(4)
                    .systemNoiseTemperature(3.5)
                    .taskableRange(20.23)
                    .addTempMedFiltCode(3)
                    .addTempMedFiltCode(4)
                    .testNumber("02022")
                    .addTotRecNum(5)
                    .addTotRecNum(2)
                    .towerHeight(20.23)
                    .trackAngle(0.043)
                    .trackSnr(15.1)
                    .transmitGain(32.1)
                    .transmitHorizBeamWidth(135.1)
                    .transmitLoss(7.1)
                    .transmitPower(190000.1)
                    .transmitVertBeamWidth(45.2)
                    .trueNorthCorrector(10)
                    .trueTilt(20.23)
                    .twilightAngle(7.5)
                    .vertBeamFlag(false)
                    .addVertGateSpacing(149.1)
                    .addVertGateSpacing(149.2)
                    .addVertGateWidth(149.1)
                    .addVertGateWidth(149.2)
                    .vFov(20.23)
                    .vResPixels(1000)
                    .addWaveformBandwidth(0.25)
                    .addWaveformBandwidth(0.25)
                    .addWaveformLoopGain(150.1)
                    .addWaveformLoopGain(155.1)
                    .addWaveformMaxRange(2000.1)
                    .addWaveformMaxRange(2000.1)
                    .addWaveformMinRange(150.1)
                    .addWaveformMinRange(150.1)
                    .addWaveformPulseWidth(100.1)
                    .addWaveformPulseWidth(200.1)
                    .z1MaxRange(50.23)
                    .z1MinRange(20.23)
                    .z2MaxRange(50.23)
                    .z2MinRange(20.23)
                    .build()
            )
        assertThat(sensorListResponse.sensorlimitsCollection().getOrNull())
            .containsExactly(
                SensorListResponse.SensorlimitsCollection.builder()
                    .classificationMarking("U")
                    .dataMode(SensorListResponse.SensorlimitsCollection.DataMode.TEST)
                    .source("Bluestaq")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idSensor("SENSORLIMITS-ID")
                    .idSensorLimits("SENSORLIMITS-ID")
                    .lowerLeftAzimuthLimit(1.23)
                    .lowerLeftElevationLimit(1.23)
                    .lowerRightAzimuthLimit(1.23)
                    .lowerRightElevationLimit(1.23)
                    .origNetwork("ORIG")
                    .upperLeftAzimuthLimit(1.23)
                    .upperLeftElevationLimit(1.23)
                    .upperRightAzimuthLimit(1.23)
                    .upperRightElevationLimit(1.23)
                    .build()
            )
        assertThat(sensorListResponse.sensorNumber()).contains(1234)
        assertThat(sensorListResponse.sensorObservationType())
            .contains(
                SensorListResponse.SensorObservationType.builder()
                    .id("3")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .origNetwork("OPS1")
                    .type("5")
                    .build()
            )
        assertThat(sensorListResponse.sensorStats().getOrNull())
            .containsExactly(
                SensorListResponse.SensorStat.builder()
                    .classificationMarking("U")
                    .dataMode(SensorListResponse.SensorStat.DataMode.TEST)
                    .idSensor("idSensor")
                    .source("Bluestaq")
                    .id("SENSORSTATS-ID")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(sensorListResponse.sensorType())
            .contains(
                SensorListResponse.SensorType.builder()
                    .id(12344411)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .origNetwork("OPS1")
                    .type("Space Borne")
                    .build()
            )
        assertThat(sensorListResponse.shortName()).contains("SNR-1")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val sensorListResponse =
            SensorListResponse.builder()
                .classificationMarking("U")
                .dataMode(SensorListResponse.DataMode.TEST)
                .sensorName("SENSOR_NAME")
                .source("some.user")
                .active(true)
                .afId("AF-ID")
                .asrType("SENSOR_TYPE")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataControl("observations")
                .entity(
                    SensorListResponse.Entity.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.Entity.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(SensorListResponse.Entity.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationAbridged.builder()
                                .classificationMarking("U")
                                .dataMode(LocationAbridged.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            SensorListResponse.Entity.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(SensorListResponse.Entity.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(SensorListResponse.Entity.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(SensorListResponse.Entity.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(SensorListResponse.Entity.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .terrestrialId("TERRESTRIAL-ID")
                        .build()
                )
                .idEntity("ENTITY-ID")
                .idSensor("SENSOR-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addSensorcharacteristic(
                    SensorListResponse.Sensorcharacteristic.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.Sensorcharacteristic.DataMode.TEST)
                        .idSensor("SENSOR-ID")
                        .source("Bluestaq")
                        .id("SENSORCHARACTERISTICS-ID")
                        .addAcceptSampleRange(3.01)
                        .addAcceptSampleRange(3.02)
                        .analogToDigitalBitSize(2)
                        .aperture(2.23)
                        .asrScanRate(20.23)
                        .atmosReceiverLoss(0.5)
                        .atmosTransmissionLoss(0.5)
                        .avgAtmosSeeingConditions(10.23)
                        .addAzAng(135.1)
                        .addAzAng(45.2)
                        .azimuthRate(0.3334)
                        .backgroundSkyRadiance(10.23)
                        .backgroundSkyVisMag(10.23)
                        .band("BAND")
                        .bandwidth(100.23)
                        .addBeamOrder("vb1")
                        .addBeamOrder("ob1")
                        .beamQty(2)
                        .boresight(20.23)
                        .boresightOffAngle(20.23)
                        .centerWavelength(4.56)
                        .collapsingLoss(1.23)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .critShear(47.1)
                        .darkCurrent(12.3)
                        .addDelayGate(690.2)
                        .addDelayGate(690.3)
                        .description(
                            "PROFILER DATA - PROFILE/SOUNDER DATA FROM PRIMARY WINDS SOURCE"
                        )
                        .detectSnr(2.1)
                        .dutyCycle(0.5)
                        .earthLimbExclHgt(20.23)
                        .addElAng(75.3)
                        .addElAng(75.4)
                        .elevationRateGeolm(0.9555)
                        .equipmentType("PS")
                        .fanBeamWidth(3.1)
                        .fft(4096)
                        .fgpCrit(5)
                        .filterMismatchFactor(10.23)
                        .fNum(1.23)
                        .focalPoint(20.23)
                        .hFov(20.23)
                        .hResPixels(1000)
                        .k(1.4)
                        .leftClockAngle(20.23)
                        .leftGeoBeltLimit(20.23)
                        .location("KENNEDY SPACE CENTER, FL")
                        .loopGain(150.1)
                        .lunarExclAngle(45.2)
                        .magDec(45.23)
                        .magnitudeLimit(23.5)
                        .maxDeviationAngle(20.23)
                        .maxIntegrationTime(1.1)
                        .maxObservableRange(20.23)
                        .maxRangeLimit(4972.1)
                        .maxWavelength(7.89)
                        .minIntegrationTime(0.3)
                        .minRangeLimit(165.1)
                        .minSignalNoiseRatio(31.5)
                        .minWavelength(1.23)
                        .negativeRangeRateLimit(-19.25)
                        .noiseFigure(10.23)
                        .nonCoherentIntegratedPulses(2)
                        .numIntegratedPulses(10)
                        .numIntegrationFrames(2)
                        .numOpticalIntegrationModes(2)
                        .numWaveforms(2)
                        .addOpticalIntegrationAngularRate(15.1)
                        .addOpticalIntegrationAngularRate(0.1)
                        .addOpticalIntegrationFrame(2.1)
                        .addOpticalIntegrationFrame(3.1)
                        .addOpticalIntegrationPixelBinning(2.1)
                        .addOpticalIntegrationPixelBinning(1.1)
                        .addOpticalIntegrationSnR(6.1)
                        .addOpticalIntegrationSnR(6.1)
                        .addOpticalIntegrationTime(0.3)
                        .addOpticalIntegrationTime(1.0)
                        .opticalTransmission(0.5)
                        .origNetwork("ORIG")
                        .patternAbsorptionLoss(1.23)
                        .patternScanLoss(1.23)
                        .peakPower(5000000.1)
                        .pixelInstantaneousFov(10.23)
                        .pixelWellDepth(12)
                        .positiveRangeRateLimit(19.25)
                        .prf(20.23)
                        .probDetectSnr(0.5)
                        .probFalseAlarm(0.5)
                        .addPulseRepPeriod(153.8)
                        .addPulseRepPeriod(153.9)
                        .quantumEff(0.5)
                        .radarFrequency(45300000000.1)
                        .radarMessageFormat("DATA_FORMAT")
                        .radarMur(20.23)
                        .addRadarPulseWidth(20.23)
                        .addRadarPulseWidth(20.33)
                        .radioFrequency(20.23)
                        .radomeLoss(1.23)
                        .addRangeGate(51)
                        .addRangeGate(52)
                        .addRangeSpacing(690.2)
                        .addRangeSpacing(690.3)
                        .readNoise(12)
                        .receiveGain(10.2)
                        .receiveHorizBeamWidth(75.3)
                        .receiveLoss(1.23)
                        .receiveVertBeamWidth(75.4)
                        .refTemp(3.5)
                        .addReqRecord(0)
                        .addReqRecord(1)
                        .rightClockAngle(20.23)
                        .rightGeoBeltLimit(20.23)
                        .addRunMeanCode(0)
                        .addRunMeanCode(5)
                        .signalProcessingLoss(1.23)
                        .siteCode("07")
                        .solarExclAngle(50.5)
                        .addSpecAvgSpectraNum(3)
                        .addSpecAvgSpectraNum(4)
                        .systemNoiseTemperature(3.5)
                        .taskableRange(20.23)
                        .addTempMedFiltCode(3)
                        .addTempMedFiltCode(4)
                        .testNumber("02022")
                        .addTotRecNum(5)
                        .addTotRecNum(2)
                        .towerHeight(20.23)
                        .trackAngle(0.043)
                        .trackSnr(15.1)
                        .transmitGain(32.1)
                        .transmitHorizBeamWidth(135.1)
                        .transmitLoss(7.1)
                        .transmitPower(190000.1)
                        .transmitVertBeamWidth(45.2)
                        .trueNorthCorrector(10)
                        .trueTilt(20.23)
                        .twilightAngle(7.5)
                        .vertBeamFlag(false)
                        .addVertGateSpacing(149.1)
                        .addVertGateSpacing(149.2)
                        .addVertGateWidth(149.1)
                        .addVertGateWidth(149.2)
                        .vFov(20.23)
                        .vResPixels(1000)
                        .addWaveformBandwidth(0.25)
                        .addWaveformBandwidth(0.25)
                        .addWaveformLoopGain(150.1)
                        .addWaveformLoopGain(155.1)
                        .addWaveformMaxRange(2000.1)
                        .addWaveformMaxRange(2000.1)
                        .addWaveformMinRange(150.1)
                        .addWaveformMinRange(150.1)
                        .addWaveformPulseWidth(100.1)
                        .addWaveformPulseWidth(200.1)
                        .z1MaxRange(50.23)
                        .z1MinRange(20.23)
                        .z2MaxRange(50.23)
                        .z2MinRange(20.23)
                        .build()
                )
                .addSensorlimitsCollection(
                    SensorListResponse.SensorlimitsCollection.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.SensorlimitsCollection.DataMode.TEST)
                        .source("Bluestaq")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idSensor("SENSORLIMITS-ID")
                        .idSensorLimits("SENSORLIMITS-ID")
                        .lowerLeftAzimuthLimit(1.23)
                        .lowerLeftElevationLimit(1.23)
                        .lowerRightAzimuthLimit(1.23)
                        .lowerRightElevationLimit(1.23)
                        .origNetwork("ORIG")
                        .upperLeftAzimuthLimit(1.23)
                        .upperLeftElevationLimit(1.23)
                        .upperRightAzimuthLimit(1.23)
                        .upperRightElevationLimit(1.23)
                        .build()
                )
                .sensorNumber(1234)
                .sensorObservationType(
                    SensorListResponse.SensorObservationType.builder()
                        .id("3")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origNetwork("OPS1")
                        .type("5")
                        .build()
                )
                .addSensorStat(
                    SensorListResponse.SensorStat.builder()
                        .classificationMarking("U")
                        .dataMode(SensorListResponse.SensorStat.DataMode.TEST)
                        .idSensor("idSensor")
                        .source("Bluestaq")
                        .id("SENSORSTATS-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .sensorType(
                    SensorListResponse.SensorType.builder()
                        .id(12344411)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origNetwork("OPS1")
                        .type("Space Borne")
                        .build()
                )
                .shortName("SNR-1")
                .build()

        val roundtrippedSensorListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(sensorListResponse),
                jacksonTypeRef<SensorListResponse>(),
            )

        assertThat(roundtrippedSensorListResponse).isEqualTo(sensorListResponse)
    }
}
