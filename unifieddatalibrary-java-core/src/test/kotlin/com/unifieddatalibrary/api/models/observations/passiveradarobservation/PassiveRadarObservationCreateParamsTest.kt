// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.passiveradarobservation

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PassiveRadarObservationCreateParamsTest {

    @Test
    fun create() {
        PassiveRadarObservationCreateParams.builder()
            .classificationMarking("U")
            .dataMode(PassiveRadarObservationCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
            .source("Bluestaq")
            .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
            .accel(1.23)
            .accelUnc(0.1)
            .alt(478.056378)
            .azimuth(134.5)
            .azimuthBias(0.123)
            .azimuthRate(0.5)
            .azimuthUnc(0.5)
            .bistaticRange(754.8212)
            .bistaticRangeAccel(1.23)
            .bistaticRangeAccelUnc(0.1)
            .bistaticRangeBias(2.34)
            .bistaticRangeRate(-0.30222)
            .bistaticRangeRateUnc(0.123)
            .bistaticRangeUnc(5.1)
            .coning(60.1)
            .coningUnc(0.5)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .declination(10.23)
            .delay(0.00505820232809312)
            .delayBias(0.00000123)
            .delayUnc(0.0000031)
            .descriptor("Descriptor")
            .doppler(-101.781641000597)
            .dopplerUnc(0.2)
            .elevation(76.1)
            .elevationBias(0.123)
            .elevationRate(0.5)
            .elevationUnc(0.5)
            .extObservationId("26892")
            .idOnOrbit("40699")
            .idRfEmitter("RED_CLIFFS_3ABCRN")
            .idSensor("OCULUSA")
            .idSensorRefReceiver("OculusRef1")
            .lat(-35.1181763996856)
            .lon(139.613567052763)
            .obPosition("FIRST")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId("ORIGSENSOR-ID")
            .orthogonalRcs(10.23)
            .orthogonalRcsUnc(1.23)
            .ra(1.23)
            .rcs(100.23)
            .rcsUnc(1.23)
            .satNo(40699)
            .snr(17.292053)
            .sourceDl("AXE")
            .addTag("TAG1")
            .addTag("TAG2")
            .taskId("TASK-ID")
            .timingBias(1.23)
            .tof(0.00592856674135648)
            .tofBias(0.00000123)
            .tofUnc(0.0000031)
            .trackId("12212")
            .transactionId("TRANSACTION-ID")
            .type("RADAR")
            .uct(false)
            .xvel(1.23)
            .yvel(3.21)
            .zvel(3.12)
            .build()
    }

    @Test
    fun body() {
        val params =
            PassiveRadarObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(PassiveRadarObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                .source("Bluestaq")
                .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                .accel(1.23)
                .accelUnc(0.1)
                .alt(478.056378)
                .azimuth(134.5)
                .azimuthBias(0.123)
                .azimuthRate(0.5)
                .azimuthUnc(0.5)
                .bistaticRange(754.8212)
                .bistaticRangeAccel(1.23)
                .bistaticRangeAccelUnc(0.1)
                .bistaticRangeBias(2.34)
                .bistaticRangeRate(-0.30222)
                .bistaticRangeRateUnc(0.123)
                .bistaticRangeUnc(5.1)
                .coning(60.1)
                .coningUnc(0.5)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .delay(0.00505820232809312)
                .delayBias(0.00000123)
                .delayUnc(0.0000031)
                .descriptor("Descriptor")
                .doppler(-101.781641000597)
                .dopplerUnc(0.2)
                .elevation(76.1)
                .elevationBias(0.123)
                .elevationRate(0.5)
                .elevationUnc(0.5)
                .extObservationId("26892")
                .idOnOrbit("40699")
                .idRfEmitter("RED_CLIFFS_3ABCRN")
                .idSensor("OCULUSA")
                .idSensorRefReceiver("OculusRef1")
                .lat(-35.1181763996856)
                .lon(139.613567052763)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(10.23)
                .orthogonalRcsUnc(1.23)
                .ra(1.23)
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(40699)
                .snr(17.292053)
                .sourceDl("AXE")
                .addTag("TAG1")
                .addTag("TAG2")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .tof(0.00592856674135648)
                .tofBias(0.00000123)
                .tofUnc(0.0000031)
                .trackId("12212")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(false)
                .xvel(1.23)
                .yvel(3.21)
                .zvel(3.12)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(PassiveRadarObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
        assertThat(body.accel()).contains(1.23)
        assertThat(body.accelUnc()).contains(0.1)
        assertThat(body.alt()).contains(478.056378)
        assertThat(body.azimuth()).contains(134.5)
        assertThat(body.azimuthBias()).contains(0.123)
        assertThat(body.azimuthRate()).contains(0.5)
        assertThat(body.azimuthUnc()).contains(0.5)
        assertThat(body.bistaticRange()).contains(754.8212)
        assertThat(body.bistaticRangeAccel()).contains(1.23)
        assertThat(body.bistaticRangeAccelUnc()).contains(0.1)
        assertThat(body.bistaticRangeBias()).contains(2.34)
        assertThat(body.bistaticRangeRate()).contains(-0.30222)
        assertThat(body.bistaticRangeRateUnc()).contains(0.123)
        assertThat(body.bistaticRangeUnc()).contains(5.1)
        assertThat(body.coning()).contains(60.1)
        assertThat(body.coningUnc()).contains(0.5)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.declination()).contains(10.23)
        assertThat(body.delay()).contains(0.00505820232809312)
        assertThat(body.delayBias()).contains(0.00000123)
        assertThat(body.delayUnc()).contains(0.0000031)
        assertThat(body.descriptor()).contains("Descriptor")
        assertThat(body.doppler()).contains(-101.781641000597)
        assertThat(body.dopplerUnc()).contains(0.2)
        assertThat(body.elevation()).contains(76.1)
        assertThat(body.elevationBias()).contains(0.123)
        assertThat(body.elevationRate()).contains(0.5)
        assertThat(body.elevationUnc()).contains(0.5)
        assertThat(body.extObservationId()).contains("26892")
        assertThat(body.idOnOrbit()).contains("40699")
        assertThat(body.idRfEmitter()).contains("RED_CLIFFS_3ABCRN")
        assertThat(body.idSensor()).contains("OCULUSA")
        assertThat(body.idSensorRefReceiver()).contains("OculusRef1")
        assertThat(body.lat()).contains(-35.1181763996856)
        assertThat(body.lon()).contains(139.613567052763)
        assertThat(body.obPosition()).contains("FIRST")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.orthogonalRcs()).contains(10.23)
        assertThat(body.orthogonalRcsUnc()).contains(1.23)
        assertThat(body.ra()).contains(1.23)
        assertThat(body.rcs()).contains(100.23)
        assertThat(body.rcsUnc()).contains(1.23)
        assertThat(body.satNo()).contains(40699)
        assertThat(body.snr()).contains(17.292053)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.timingBias()).contains(1.23)
        assertThat(body.tof()).contains(0.00592856674135648)
        assertThat(body.tofBias()).contains(0.00000123)
        assertThat(body.tofUnc()).contains(0.0000031)
        assertThat(body.trackId()).contains("12212")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.type()).contains("RADAR")
        assertThat(body.uct()).contains(false)
        assertThat(body.xvel()).contains(1.23)
        assertThat(body.yvel()).contains(3.21)
        assertThat(body.zvel()).contains(3.12)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            PassiveRadarObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(PassiveRadarObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(PassiveRadarObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
