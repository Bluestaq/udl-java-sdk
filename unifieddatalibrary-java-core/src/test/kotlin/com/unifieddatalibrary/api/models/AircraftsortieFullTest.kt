// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftsortieFullTest {

    @Test
    fun create() {
        val aircraftsortieFull =
            AircraftsortieFull.builder()
                .classificationMarking("U")
                .dataMode(AircraftsortieFull.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("AIRCRAFTSORTIE-ID")
                .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .aircraftAdsb("AE123C")
                .aircraftAltId("ALT-AIRCRAFT-ID")
                .aircraftEvent("Example event")
                .aircraftMds("C017A")
                .aircraftRemarks("Some remark about aircraft A")
                .alertStatus(22)
                .alertStatusCode("C1")
                .amcMsnNum("AJM512571333")
                .amcMsnType("SAAM")
                .arrFaa("FAA1")
                .arrIata("AAA")
                .arrIcao("KCOS")
                .arrItinerary(101)
                .arrPurposeCode("O")
                .callSign("BAKER")
                .cargoConfig("C-1")
                .commanderName("Smith")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crew(
                    CrewFull.builder()
                        .classificationMarking("U")
                        .dataMode(CrewFull.DataMode.TEST)
                        .origCrewId("JHJDHjhuu929o92")
                        .source("Bluestaq")
                        .id("bdad6945-c9e4-b829-f7be-1ad075541921")
                        .adjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .adjReturnTimeApprover("Smith")
                        .aircraftMds("C017A")
                        .alertedTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .alertType("ALPHA")
                        .armsCrewUnit("00016ALSQ")
                        .addAssignedQualCode("AL")
                        .addAssignedQualCode("CS")
                        .commanderId("763a1c1e8d2f3c16af825a11e3f1f579")
                        .commanderLast4Ssn("1234")
                        .commanderName("John Doe")
                        .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .crewHome(false)
                        .addCrewMember(
                            CrewFull.CrewMember.builder()
                                .alerted(true)
                                .allSortie(true)
                                .approved(true)
                                .attached(true)
                                .branch("Air Force")
                                .civilian(false)
                                .commander(false)
                                .crewPosition("EP A")
                                .dodId("0123456789")
                                .dutyPosition("IP")
                                .dutyStatus("AGR")
                                .emailed(true)
                                .extraTime(true)
                                .firstName("Freddie")
                                .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .fltCurrencyExpId("SS05AM")
                                .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .flySquadron("141ARS")
                                .funded(true)
                                .gender("F")
                                .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .gndCurrencyExpId("AH03YM")
                                .grounded(true)
                                .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .last4Ssn("1234")
                                .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .lastName("Smith")
                                .loanedTo("Thunderbirds")
                                .lodging("Peterson SFB")
                                .memberActualAlertTime(
                                    OffsetDateTime.parse("2024-02-26T09:15:00.123Z")
                                )
                                .memberAdjReturnTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberAdjReturnTimeApprover("Smith")
                                .memberId("12345678abc")
                                .memberInitStartTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberLastAlertTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberLegalAlertTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                                .memberPostRestOffset("+05:00")
                                .memberPostRestTime(
                                    OffsetDateTime.parse("2024-01-02T16:00:00.123Z")
                                )
                                .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .memberRemarks("Crew member remark")
                                .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .memberSchedAlertTime(
                                    OffsetDateTime.parse("2024-02-26T09:15:00.123Z")
                                )
                                .memberSource("ACTIVE")
                                .memberStageName("Falcon Squadron")
                                .memberTransportReq(true)
                                .memberType("AIRCREW")
                                .middleInitial("G")
                                .notified(true)
                                .phoneNumber("+14155552671")
                                .physAvCode("D")
                                .physAvStatus("OVERDUE")
                                .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .rank("Capt")
                                .remarkCode("ABE33")
                                .rmsMds("C017A")
                                .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                                .squadron("21AS")
                                .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .username("fgsmith")
                                .wing("60AMW")
                                .build()
                        )
                        .crewName("falcon")
                        .crewRms("ARMS")
                        .crewRole("DEADHEAD")
                        .crewSource("ACTIVE")
                        .crewSquadron("21AS")
                        .crewType("AIRLAND")
                        .crewUnit("00016ALSQ")
                        .crewWing("60AMW")
                        .currentIcao("KCOS")
                        .fdpEligType("A")
                        .fdpType("A")
                        .femaleEnlistedQty(2)
                        .femaleOfficerQty(1)
                        .fltAuthNum("KT001")
                        .idSiteCurrent("b677cf3b-d44d-450e-8b8f-d23f997f8778")
                        .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                        .initStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .lastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .legalAlertTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .legalBravoTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .linkedTask(false)
                        .maleEnlistedQty(3)
                        .maleOfficerQty(1)
                        .missionAlias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
                        .missionId("AJM123456123")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .personnelType("AIRCREW")
                        .pickupTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .postRestApplied(false)
                        .postRestEnd(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
                        .postRestOffset("+05:00")
                        .preRestApplied(false)
                        .preRestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .addReqQualCode("AL")
                        .addReqQualCode("CS")
                        .returnTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .sourceDl("AXE")
                        .stage1Qual("1AXXX")
                        .stage2Qual("2AXXX")
                        .stage3Qual("3AXXX")
                        .stageName("Falcon Squadron")
                        .stageTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .status("APPROVED")
                        .transportReq(true)
                        .tripKit("TK-1234")
                        .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .currentState("Park")
                .delayCode("500")
                .depFaa("FAA1")
                .depIata("AAA")
                .depIcao("KCOS")
                .depItinerary(100)
                .depPurposeCode("P")
                .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
                .dhdReason("Due for maintenance")
                .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .filename("ExampleFileName")
                .filesize(12)
                .flightTime(104.5)
                .fmDeskNum("7198675309")
                .fmName("Smith")
                .fuelReq(20000.1)
                .gndTime(387.8)
                .idAircraft("REF-AIRCRAFT-ID")
                .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
                .jcsPriority("1A3")
                .legNum(14)
                .lineNumber(99)
                .missionId("ABLE")
                .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
                .objectiveRemarks("Some objective remark about aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSortieId("A0640")
                .oxyOnCrew(12.3)
                .oxyOnPax(12.3)
                .oxyReqCrew(12.3)
                .oxyReqPax(12.3)
                .paperStatus(AircraftsortieFull.PaperStatus.PUBLISHED)
                .papersVersion("1.1")
                .parkingLoc("KCOS")
                .passengers(17)
                .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .pprStatus(AircraftsortieFull.PprStatus.PENDING)
                .primaryScl("ABC")
                .rawFileUri("Example URI")
                .reqConfig("C-1")
                .resultRemarks("Some remark about aircraft A")
                .rvnReq(AircraftsortieFull.RvnReq.R)
                .scheduleRemarks("Some schedule remark about aircraft A")
                .secondaryScl("ABC")
                .soe("OPS")
                .sortieDate(LocalDate.parse("2021-01-01"))
                .addSortiePpr(
                    SortiePprFull.builder()
                        .classificationMarking("U")
                        .dataMode(SortiePprFull.DataMode.TEST)
                        .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                        .source("Bluestaq")
                        .id("SORTIEPPR-ID")
                        .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .endTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .externalId("aa714f4d52a37ab1a00b21af9566e379")
                        .grantor("SMITH")
                        .number("07-21-07W")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .remarks("PPR remark")
                        .requestor("jsmith1")
                        .sourceDl("AXE")
                        .startTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .type(SortiePprFull.Type.M)
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .sourceDl("AXE")
                .tailNumber("Tail_1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(aircraftsortieFull.classificationMarking()).isEqualTo("U")
        assertThat(aircraftsortieFull.dataMode()).isEqualTo(AircraftsortieFull.DataMode.TEST)
        assertThat(aircraftsortieFull.plannedDepTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.source()).isEqualTo("Bluestaq")
        assertThat(aircraftsortieFull.id()).contains("AIRCRAFTSORTIE-ID")
        assertThat(aircraftsortieFull.actualArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.actualBlockInTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(aircraftsortieFull.actualBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(aircraftsortieFull.actualDepTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.aircraftAdsb()).contains("AE123C")
        assertThat(aircraftsortieFull.aircraftAltId()).contains("ALT-AIRCRAFT-ID")
        assertThat(aircraftsortieFull.aircraftEvent()).contains("Example event")
        assertThat(aircraftsortieFull.aircraftMds()).contains("C017A")
        assertThat(aircraftsortieFull.aircraftRemarks()).contains("Some remark about aircraft A")
        assertThat(aircraftsortieFull.alertStatus()).contains(22)
        assertThat(aircraftsortieFull.alertStatusCode()).contains("C1")
        assertThat(aircraftsortieFull.amcMsnNum()).contains("AJM512571333")
        assertThat(aircraftsortieFull.amcMsnType()).contains("SAAM")
        assertThat(aircraftsortieFull.arrFaa()).contains("FAA1")
        assertThat(aircraftsortieFull.arrIata()).contains("AAA")
        assertThat(aircraftsortieFull.arrIcao()).contains("KCOS")
        assertThat(aircraftsortieFull.arrItinerary()).contains(101)
        assertThat(aircraftsortieFull.arrPurposeCode()).contains("O")
        assertThat(aircraftsortieFull.callSign()).contains("BAKER")
        assertThat(aircraftsortieFull.cargoConfig()).contains("C-1")
        assertThat(aircraftsortieFull.commanderName()).contains("Smith")
        assertThat(aircraftsortieFull.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftsortieFull.createdBy()).contains("some.user")
        assertThat(aircraftsortieFull.crew())
            .contains(
                CrewFull.builder()
                    .classificationMarking("U")
                    .dataMode(CrewFull.DataMode.TEST)
                    .origCrewId("JHJDHjhuu929o92")
                    .source("Bluestaq")
                    .id("bdad6945-c9e4-b829-f7be-1ad075541921")
                    .adjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .adjReturnTimeApprover("Smith")
                    .aircraftMds("C017A")
                    .alertedTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .alertType("ALPHA")
                    .armsCrewUnit("00016ALSQ")
                    .addAssignedQualCode("AL")
                    .addAssignedQualCode("CS")
                    .commanderId("763a1c1e8d2f3c16af825a11e3f1f579")
                    .commanderLast4Ssn("1234")
                    .commanderName("John Doe")
                    .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .crewHome(false)
                    .addCrewMember(
                        CrewFull.CrewMember.builder()
                            .alerted(true)
                            .allSortie(true)
                            .approved(true)
                            .attached(true)
                            .branch("Air Force")
                            .civilian(false)
                            .commander(false)
                            .crewPosition("EP A")
                            .dodId("0123456789")
                            .dutyPosition("IP")
                            .dutyStatus("AGR")
                            .emailed(true)
                            .extraTime(true)
                            .firstName("Freddie")
                            .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .fltCurrencyExpId("SS05AM")
                            .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .flySquadron("141ARS")
                            .funded(true)
                            .gender("F")
                            .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .gndCurrencyExpId("AH03YM")
                            .grounded(true)
                            .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .last4Ssn("1234")
                            .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .lastName("Smith")
                            .loanedTo("Thunderbirds")
                            .lodging("Peterson SFB")
                            .memberActualAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
                            .memberAdjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberAdjReturnTimeApprover("Smith")
                            .memberId("12345678abc")
                            .memberInitStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberLastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberLegalAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                            .memberPostRestOffset("+05:00")
                            .memberPostRestTime(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
                            .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberRemarks("Crew member remark")
                            .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .memberSchedAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
                            .memberSource("ACTIVE")
                            .memberStageName("Falcon Squadron")
                            .memberTransportReq(true)
                            .memberType("AIRCREW")
                            .middleInitial("G")
                            .notified(true)
                            .phoneNumber("+14155552671")
                            .physAvCode("D")
                            .physAvStatus("OVERDUE")
                            .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .rank("Capt")
                            .remarkCode("ABE33")
                            .rmsMds("C017A")
                            .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                            .squadron("21AS")
                            .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .username("fgsmith")
                            .wing("60AMW")
                            .build()
                    )
                    .crewName("falcon")
                    .crewRms("ARMS")
                    .crewRole("DEADHEAD")
                    .crewSource("ACTIVE")
                    .crewSquadron("21AS")
                    .crewType("AIRLAND")
                    .crewUnit("00016ALSQ")
                    .crewWing("60AMW")
                    .currentIcao("KCOS")
                    .fdpEligType("A")
                    .fdpType("A")
                    .femaleEnlistedQty(2)
                    .femaleOfficerQty(1)
                    .fltAuthNum("KT001")
                    .idSiteCurrent("b677cf3b-d44d-450e-8b8f-d23f997f8778")
                    .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                    .initStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .lastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .legalAlertTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .legalBravoTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .linkedTask(false)
                    .maleEnlistedQty(3)
                    .maleOfficerQty(1)
                    .missionAlias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
                    .missionId("AJM123456123")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .personnelType("AIRCREW")
                    .pickupTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .postRestApplied(false)
                    .postRestEnd(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
                    .postRestOffset("+05:00")
                    .preRestApplied(false)
                    .preRestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .addReqQualCode("AL")
                    .addReqQualCode("CS")
                    .returnTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .sourceDl("AXE")
                    .stage1Qual("1AXXX")
                    .stage2Qual("2AXXX")
                    .stage3Qual("3AXXX")
                    .stageName("Falcon Squadron")
                    .stageTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .status("APPROVED")
                    .transportReq(true)
                    .tripKit("TK-1234")
                    .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(aircraftsortieFull.currentState()).contains("Park")
        assertThat(aircraftsortieFull.delayCode()).contains("500")
        assertThat(aircraftsortieFull.depFaa()).contains("FAA1")
        assertThat(aircraftsortieFull.depIata()).contains("AAA")
        assertThat(aircraftsortieFull.depIcao()).contains("KCOS")
        assertThat(aircraftsortieFull.depItinerary()).contains(100)
        assertThat(aircraftsortieFull.depPurposeCode()).contains("P")
        assertThat(aircraftsortieFull.dhd())
            .contains(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
        assertThat(aircraftsortieFull.dhdReason()).contains("Due for maintenance")
        assertThat(aircraftsortieFull.estArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.estBlockInTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(aircraftsortieFull.estBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(aircraftsortieFull.estDepTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.filename()).contains("ExampleFileName")
        assertThat(aircraftsortieFull.filesize()).contains(12)
        assertThat(aircraftsortieFull.flightTime()).contains(104.5)
        assertThat(aircraftsortieFull.fmDeskNum()).contains("7198675309")
        assertThat(aircraftsortieFull.fmName()).contains("Smith")
        assertThat(aircraftsortieFull.fuelReq()).contains(20000.1)
        assertThat(aircraftsortieFull.gndTime()).contains(387.8)
        assertThat(aircraftsortieFull.idAircraft()).contains("REF-AIRCRAFT-ID")
        assertThat(aircraftsortieFull.idMission()).contains("fa18d96e-91ea-60da-a7a8-1af6500066c8")
        assertThat(aircraftsortieFull.jcsPriority()).contains("1A3")
        assertThat(aircraftsortieFull.legNum()).contains(14)
        assertThat(aircraftsortieFull.lineNumber()).contains(99)
        assertThat(aircraftsortieFull.missionId()).contains("ABLE")
        assertThat(aircraftsortieFull.missionUpdate())
            .contains(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
        assertThat(aircraftsortieFull.objectiveRemarks())
            .contains("Some objective remark about aircraft A")
        assertThat(aircraftsortieFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(aircraftsortieFull.origNetwork()).contains("OPS1")
        assertThat(aircraftsortieFull.origSortieId()).contains("A0640")
        assertThat(aircraftsortieFull.oxyOnCrew()).contains(12.3)
        assertThat(aircraftsortieFull.oxyOnPax()).contains(12.3)
        assertThat(aircraftsortieFull.oxyReqCrew()).contains(12.3)
        assertThat(aircraftsortieFull.oxyReqPax()).contains(12.3)
        assertThat(aircraftsortieFull.paperStatus())
            .contains(AircraftsortieFull.PaperStatus.PUBLISHED)
        assertThat(aircraftsortieFull.papersVersion()).contains("1.1")
        assertThat(aircraftsortieFull.parkingLoc()).contains("KCOS")
        assertThat(aircraftsortieFull.passengers()).contains(17)
        assertThat(aircraftsortieFull.plannedArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieFull.pprStatus()).contains(AircraftsortieFull.PprStatus.PENDING)
        assertThat(aircraftsortieFull.primaryScl()).contains("ABC")
        assertThat(aircraftsortieFull.rawFileUri()).contains("Example URI")
        assertThat(aircraftsortieFull.reqConfig()).contains("C-1")
        assertThat(aircraftsortieFull.resultRemarks()).contains("Some remark about aircraft A")
        assertThat(aircraftsortieFull.rvnReq()).contains(AircraftsortieFull.RvnReq.R)
        assertThat(aircraftsortieFull.scheduleRemarks())
            .contains("Some schedule remark about aircraft A")
        assertThat(aircraftsortieFull.secondaryScl()).contains("ABC")
        assertThat(aircraftsortieFull.soe()).contains("OPS")
        assertThat(aircraftsortieFull.sortieDate()).contains(LocalDate.parse("2021-01-01"))
        assertThat(aircraftsortieFull.sortiePpr().getOrNull())
            .containsExactly(
                SortiePprFull.builder()
                    .classificationMarking("U")
                    .dataMode(SortiePprFull.DataMode.TEST)
                    .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                    .source("Bluestaq")
                    .id("SORTIEPPR-ID")
                    .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .endTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .externalId("aa714f4d52a37ab1a00b21af9566e379")
                    .grantor("SMITH")
                    .number("07-21-07W")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .remarks("PPR remark")
                    .requestor("jsmith1")
                    .sourceDl("AXE")
                    .startTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                    .type(SortiePprFull.Type.M)
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(aircraftsortieFull.sourceDl()).contains("AXE")
        assertThat(aircraftsortieFull.tailNumber()).contains("Tail_1")
        assertThat(aircraftsortieFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(aircraftsortieFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val aircraftsortieFull =
            AircraftsortieFull.builder()
                .classificationMarking("U")
                .dataMode(AircraftsortieFull.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("AIRCRAFTSORTIE-ID")
                .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .aircraftAdsb("AE123C")
                .aircraftAltId("ALT-AIRCRAFT-ID")
                .aircraftEvent("Example event")
                .aircraftMds("C017A")
                .aircraftRemarks("Some remark about aircraft A")
                .alertStatus(22)
                .alertStatusCode("C1")
                .amcMsnNum("AJM512571333")
                .amcMsnType("SAAM")
                .arrFaa("FAA1")
                .arrIata("AAA")
                .arrIcao("KCOS")
                .arrItinerary(101)
                .arrPurposeCode("O")
                .callSign("BAKER")
                .cargoConfig("C-1")
                .commanderName("Smith")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crew(
                    CrewFull.builder()
                        .classificationMarking("U")
                        .dataMode(CrewFull.DataMode.TEST)
                        .origCrewId("JHJDHjhuu929o92")
                        .source("Bluestaq")
                        .id("bdad6945-c9e4-b829-f7be-1ad075541921")
                        .adjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .adjReturnTimeApprover("Smith")
                        .aircraftMds("C017A")
                        .alertedTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .alertType("ALPHA")
                        .armsCrewUnit("00016ALSQ")
                        .addAssignedQualCode("AL")
                        .addAssignedQualCode("CS")
                        .commanderId("763a1c1e8d2f3c16af825a11e3f1f579")
                        .commanderLast4Ssn("1234")
                        .commanderName("John Doe")
                        .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .crewHome(false)
                        .addCrewMember(
                            CrewFull.CrewMember.builder()
                                .alerted(true)
                                .allSortie(true)
                                .approved(true)
                                .attached(true)
                                .branch("Air Force")
                                .civilian(false)
                                .commander(false)
                                .crewPosition("EP A")
                                .dodId("0123456789")
                                .dutyPosition("IP")
                                .dutyStatus("AGR")
                                .emailed(true)
                                .extraTime(true)
                                .firstName("Freddie")
                                .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .fltCurrencyExpId("SS05AM")
                                .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .flySquadron("141ARS")
                                .funded(true)
                                .gender("F")
                                .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .gndCurrencyExpId("AH03YM")
                                .grounded(true)
                                .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .last4Ssn("1234")
                                .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .lastName("Smith")
                                .loanedTo("Thunderbirds")
                                .lodging("Peterson SFB")
                                .memberActualAlertTime(
                                    OffsetDateTime.parse("2024-02-26T09:15:00.123Z")
                                )
                                .memberAdjReturnTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberAdjReturnTimeApprover("Smith")
                                .memberId("12345678abc")
                                .memberInitStartTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberLastAlertTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberLegalAlertTime(
                                    OffsetDateTime.parse("2024-01-01T16:00:00.123Z")
                                )
                                .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                                .memberPostRestOffset("+05:00")
                                .memberPostRestTime(
                                    OffsetDateTime.parse("2024-01-02T16:00:00.123Z")
                                )
                                .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .memberRemarks("Crew member remark")
                                .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .memberSchedAlertTime(
                                    OffsetDateTime.parse("2024-02-26T09:15:00.123Z")
                                )
                                .memberSource("ACTIVE")
                                .memberStageName("Falcon Squadron")
                                .memberTransportReq(true)
                                .memberType("AIRCREW")
                                .middleInitial("G")
                                .notified(true)
                                .phoneNumber("+14155552671")
                                .physAvCode("D")
                                .physAvStatus("OVERDUE")
                                .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .rank("Capt")
                                .remarkCode("ABE33")
                                .rmsMds("C017A")
                                .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
                                .squadron("21AS")
                                .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                                .username("fgsmith")
                                .wing("60AMW")
                                .build()
                        )
                        .crewName("falcon")
                        .crewRms("ARMS")
                        .crewRole("DEADHEAD")
                        .crewSource("ACTIVE")
                        .crewSquadron("21AS")
                        .crewType("AIRLAND")
                        .crewUnit("00016ALSQ")
                        .crewWing("60AMW")
                        .currentIcao("KCOS")
                        .fdpEligType("A")
                        .fdpType("A")
                        .femaleEnlistedQty(2)
                        .femaleOfficerQty(1)
                        .fltAuthNum("KT001")
                        .idSiteCurrent("b677cf3b-d44d-450e-8b8f-d23f997f8778")
                        .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                        .initStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .lastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .legalAlertTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .legalBravoTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .linkedTask(false)
                        .maleEnlistedQty(3)
                        .maleOfficerQty(1)
                        .missionAlias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
                        .missionId("AJM123456123")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .personnelType("AIRCREW")
                        .pickupTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .postRestApplied(false)
                        .postRestEnd(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
                        .postRestOffset("+05:00")
                        .preRestApplied(false)
                        .preRestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .addReqQualCode("AL")
                        .addReqQualCode("CS")
                        .returnTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .sourceDl("AXE")
                        .stage1Qual("1AXXX")
                        .stage2Qual("2AXXX")
                        .stage3Qual("3AXXX")
                        .stageName("Falcon Squadron")
                        .stageTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .status("APPROVED")
                        .transportReq(true)
                        .tripKit("TK-1234")
                        .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .currentState("Park")
                .delayCode("500")
                .depFaa("FAA1")
                .depIata("AAA")
                .depIcao("KCOS")
                .depItinerary(100)
                .depPurposeCode("P")
                .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
                .dhdReason("Due for maintenance")
                .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .filename("ExampleFileName")
                .filesize(12)
                .flightTime(104.5)
                .fmDeskNum("7198675309")
                .fmName("Smith")
                .fuelReq(20000.1)
                .gndTime(387.8)
                .idAircraft("REF-AIRCRAFT-ID")
                .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
                .jcsPriority("1A3")
                .legNum(14)
                .lineNumber(99)
                .missionId("ABLE")
                .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
                .objectiveRemarks("Some objective remark about aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSortieId("A0640")
                .oxyOnCrew(12.3)
                .oxyOnPax(12.3)
                .oxyReqCrew(12.3)
                .oxyReqPax(12.3)
                .paperStatus(AircraftsortieFull.PaperStatus.PUBLISHED)
                .papersVersion("1.1")
                .parkingLoc("KCOS")
                .passengers(17)
                .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .pprStatus(AircraftsortieFull.PprStatus.PENDING)
                .primaryScl("ABC")
                .rawFileUri("Example URI")
                .reqConfig("C-1")
                .resultRemarks("Some remark about aircraft A")
                .rvnReq(AircraftsortieFull.RvnReq.R)
                .scheduleRemarks("Some schedule remark about aircraft A")
                .secondaryScl("ABC")
                .soe("OPS")
                .sortieDate(LocalDate.parse("2021-01-01"))
                .addSortiePpr(
                    SortiePprFull.builder()
                        .classificationMarking("U")
                        .dataMode(SortiePprFull.DataMode.TEST)
                        .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
                        .source("Bluestaq")
                        .id("SORTIEPPR-ID")
                        .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .endTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .externalId("aa714f4d52a37ab1a00b21af9566e379")
                        .grantor("SMITH")
                        .number("07-21-07W")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .remarks("PPR remark")
                        .requestor("jsmith1")
                        .sourceDl("AXE")
                        .startTime(OffsetDateTime.parse("2024-01-01T01:01:01.123Z"))
                        .type(SortiePprFull.Type.M)
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .sourceDl("AXE")
                .tailNumber("Tail_1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedAircraftsortieFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(aircraftsortieFull),
                jacksonTypeRef<AircraftsortieFull>(),
            )

        assertThat(roundtrippedAircraftsortieFull).isEqualTo(aircraftsortieFull)
    }
}
