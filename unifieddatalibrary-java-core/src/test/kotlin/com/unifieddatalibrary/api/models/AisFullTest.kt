// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.AisFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AisFullTest {

    @Test
    fun create() {
      val aisFull = AisFull.builder()
          .classificationMarking("U")
          .dataMode(AisFull.DataMode.TEST)
          .source("Bluestaq")
          .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .id("AIS-ID")
          .antennaRefDimensions(listOf(
            50.1,
            50.1,
            20.1,
            20.1,
          ))
          .avgSpeed(12.1)
          .callSign("V2OZ")
          .cargoType("Freight")
          .course(157.1)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .currentPortGuid("0ABC")
          .currentPortLocode("XF013")
          .destination("USCLE")
          .destinationEta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .distanceToGo(150.5)
          .distanceTravelled(200.3)
          .draught(21.1)
          .engagedIn("Cargo")
          .etaCalculated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .etaUpdated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .idTrack("TRACK-ID")
          .idVessel("VESSEL-ID")
          .imon(9015462L)
          .lastPortGuid("0VAX")
          .lastPortLocode("USSKY")
          .lat(47.758499)
          .length(511.1)
          .lon(-5.154223)
          .maxSpeed(13.3)
          .mmsi(304010417L)
          .navStatus("Underway Using Engine")
          .nextPortGuid("0Z8Q")
          .nextPortLocode("USCLE")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .posDeviceType("GPS")
          .posHiAccuracy(true)
          .posHiLatency(true)
          .rateOfTurn(22.1)
          .shipDescription("Search and rescue vessels")
          .shipName("DORNUM")
          .shipType("Passenger")
          .sourceDl("AXE")
          .specialCraft("Tug")
          .specialManeuver(false)
          .speed(10.5)
          .trueHeading(329.1)
          .vesselFlag("United States")
          .width(24.1)
          .build()

      assertThat(aisFull.classificationMarking()).isEqualTo("U")
      assertThat(aisFull.dataMode()).isEqualTo(AisFull.DataMode.TEST)
      assertThat(aisFull.source()).isEqualTo("Bluestaq")
      assertThat(aisFull.ts()).isEqualTo(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
      assertThat(aisFull.id()).contains("AIS-ID")
      assertThat(aisFull.antennaRefDimensions().getOrNull()).containsExactly(50.1, 50.1, 20.1, 20.1)
      assertThat(aisFull.avgSpeed()).contains(12.1)
      assertThat(aisFull.callSign()).contains("V2OZ")
      assertThat(aisFull.cargoType()).contains("Freight")
      assertThat(aisFull.course()).contains(157.1)
      assertThat(aisFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(aisFull.createdBy()).contains("some.user")
      assertThat(aisFull.currentPortGuid()).contains("0ABC")
      assertThat(aisFull.currentPortLocode()).contains("XF013")
      assertThat(aisFull.destination()).contains("USCLE")
      assertThat(aisFull.destinationEta()).contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
      assertThat(aisFull.distanceToGo()).contains(150.5)
      assertThat(aisFull.distanceTravelled()).contains(200.3)
      assertThat(aisFull.draught()).contains(21.1)
      assertThat(aisFull.engagedIn()).contains("Cargo")
      assertThat(aisFull.etaCalculated()).contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
      assertThat(aisFull.etaUpdated()).contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
      assertThat(aisFull.idTrack()).contains("TRACK-ID")
      assertThat(aisFull.idVessel()).contains("VESSEL-ID")
      assertThat(aisFull.imon()).contains(9015462L)
      assertThat(aisFull.lastPortGuid()).contains("0VAX")
      assertThat(aisFull.lastPortLocode()).contains("USSKY")
      assertThat(aisFull.lat()).contains(47.758499)
      assertThat(aisFull.length()).contains(511.1)
      assertThat(aisFull.lon()).contains(-5.154223)
      assertThat(aisFull.maxSpeed()).contains(13.3)
      assertThat(aisFull.mmsi()).contains(304010417L)
      assertThat(aisFull.navStatus()).contains("Underway Using Engine")
      assertThat(aisFull.nextPortGuid()).contains("0Z8Q")
      assertThat(aisFull.nextPortLocode()).contains("USCLE")
      assertThat(aisFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(aisFull.origNetwork()).contains("ORIG")
      assertThat(aisFull.posDeviceType()).contains("GPS")
      assertThat(aisFull.posHiAccuracy()).contains(true)
      assertThat(aisFull.posHiLatency()).contains(true)
      assertThat(aisFull.rateOfTurn()).contains(22.1)
      assertThat(aisFull.shipDescription()).contains("Search and rescue vessels")
      assertThat(aisFull.shipName()).contains("DORNUM")
      assertThat(aisFull.shipType()).contains("Passenger")
      assertThat(aisFull.sourceDl()).contains("AXE")
      assertThat(aisFull.specialCraft()).contains("Tug")
      assertThat(aisFull.specialManeuver()).contains(false)
      assertThat(aisFull.speed()).contains(10.5)
      assertThat(aisFull.trueHeading()).contains(329.1)
      assertThat(aisFull.vesselFlag()).contains("United States")
      assertThat(aisFull.width()).contains(24.1)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val aisFull = AisFull.builder()
          .classificationMarking("U")
          .dataMode(AisFull.DataMode.TEST)
          .source("Bluestaq")
          .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .id("AIS-ID")
          .antennaRefDimensions(listOf(
            50.1,
            50.1,
            20.1,
            20.1,
          ))
          .avgSpeed(12.1)
          .callSign("V2OZ")
          .cargoType("Freight")
          .course(157.1)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .currentPortGuid("0ABC")
          .currentPortLocode("XF013")
          .destination("USCLE")
          .destinationEta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .distanceToGo(150.5)
          .distanceTravelled(200.3)
          .draught(21.1)
          .engagedIn("Cargo")
          .etaCalculated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .etaUpdated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
          .idTrack("TRACK-ID")
          .idVessel("VESSEL-ID")
          .imon(9015462L)
          .lastPortGuid("0VAX")
          .lastPortLocode("USSKY")
          .lat(47.758499)
          .length(511.1)
          .lon(-5.154223)
          .maxSpeed(13.3)
          .mmsi(304010417L)
          .navStatus("Underway Using Engine")
          .nextPortGuid("0Z8Q")
          .nextPortLocode("USCLE")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .posDeviceType("GPS")
          .posHiAccuracy(true)
          .posHiLatency(true)
          .rateOfTurn(22.1)
          .shipDescription("Search and rescue vessels")
          .shipName("DORNUM")
          .shipType("Passenger")
          .sourceDl("AXE")
          .specialCraft("Tug")
          .specialManeuver(false)
          .speed(10.5)
          .trueHeading(329.1)
          .vesselFlag("United States")
          .width(24.1)
          .build()

      val roundtrippedAisFull = jsonMapper.readValue(jsonMapper.writeValueAsString(aisFull), jacksonTypeRef<AisFull>())

      assertThat(roundtrippedAisFull).isEqualTo(aisFull)
    }
}
