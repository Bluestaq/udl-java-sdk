// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.weatherdata

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WeatherDataCreateParamsTest {

    @Test
    fun create() {
        WeatherDataCreateParams.builder()
            .classificationMarking("U")
            .dataMode(WeatherDataCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .id("WEATHER-DATA-ID")
            .angleOrientation(75.7)
            .avgRefPwr(714.9)
            .avgTxPwr(20.23)
            .checksum(133)
            .addCoInteg(4)
            .addCoInteg(3)
            .addConsRec(5)
            .addConsRec(2)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .addDoppVel(44.4)
            .addDoppVel(467.3)
            .fileCreation(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .addFirstGuessAvg(16)
            .addFirstGuessAvg(1)
            .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
            .addInterpulsePeriod(1000.3)
            .addInterpulsePeriod(1000.2)
            .lightDetSensors(listOf(11, 28, 190))
            .lightEventNum(9)
            .addNoiseLvl(58.2)
            .addNoiseLvl(58.3)
            .numElements(640)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origSensorId("ORIGSENSOR-ID")
            .posConfidence(0.1)
            .qcValue(4)
            .sectorNum(20)
            .semiMajorAxis(3.4)
            .semiMinorAxis(0.3)
            .addSigPwr(116.5)
            .addSigPwr(121.6)
            .sigStrength(163.7)
            .addSnr(14.5)
            .addSnr(-16.2)
            .addSpecAvg(4)
            .addSpecAvg(3)
            .addSpecWidth(0.3)
            .addSpecWidth(0.6)
            .addSrcId("1b23ba93-0957-4654-b5ca-8c3703f3ec57")
            .addSrcId("32944ee4-0437-4d94-95ce-2f2823ffa001")
            .addSrcTyp("SENSOR")
            .addSrcTyp("WEATHERREPORT")
            .addTdAvgSampleNum(32)
            .addTdAvgSampleNum(30)
            .termAlt(19505.1)
            .build()
    }

    @Test
    fun body() {
        val params =
            WeatherDataCreateParams.builder()
                .classificationMarking("U")
                .dataMode(WeatherDataCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("WEATHER-DATA-ID")
                .angleOrientation(75.7)
                .avgRefPwr(714.9)
                .avgTxPwr(20.23)
                .checksum(133)
                .addCoInteg(4)
                .addCoInteg(3)
                .addConsRec(5)
                .addConsRec(2)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDoppVel(44.4)
                .addDoppVel(467.3)
                .fileCreation(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .addFirstGuessAvg(16)
                .addFirstGuessAvg(1)
                .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                .addInterpulsePeriod(1000.3)
                .addInterpulsePeriod(1000.2)
                .lightDetSensors(listOf(11, 28, 190))
                .lightEventNum(9)
                .addNoiseLvl(58.2)
                .addNoiseLvl(58.3)
                .numElements(640)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .posConfidence(0.1)
                .qcValue(4)
                .sectorNum(20)
                .semiMajorAxis(3.4)
                .semiMinorAxis(0.3)
                .addSigPwr(116.5)
                .addSigPwr(121.6)
                .sigStrength(163.7)
                .addSnr(14.5)
                .addSnr(-16.2)
                .addSpecAvg(4)
                .addSpecAvg(3)
                .addSpecWidth(0.3)
                .addSpecWidth(0.6)
                .addSrcId("1b23ba93-0957-4654-b5ca-8c3703f3ec57")
                .addSrcId("32944ee4-0437-4d94-95ce-2f2823ffa001")
                .addSrcTyp("SENSOR")
                .addSrcTyp("WEATHERREPORT")
                .addTdAvgSampleNum(32)
                .addTdAvgSampleNum(30)
                .termAlt(19505.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(WeatherDataCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("WEATHER-DATA-ID")
        assertThat(body.angleOrientation()).contains(75.7)
        assertThat(body.avgRefPwr()).contains(714.9)
        assertThat(body.avgTxPwr()).contains(20.23)
        assertThat(body.checksum()).contains(133)
        assertThat(body.coIntegs().getOrNull()).containsExactly(4, 3)
        assertThat(body.consRecs().getOrNull()).containsExactly(5, 2)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.doppVels().getOrNull()).containsExactly(44.4, 467.3)
        assertThat(body.fileCreation())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.firstGuessAvgs().getOrNull()).containsExactly(16, 1)
        assertThat(body.idSensor()).contains("0129f577-e04c-441e-65ca-0a04a750bed9")
        assertThat(body.interpulsePeriods().getOrNull()).containsExactly(1000.3, 1000.2)
        assertThat(body.lightDetSensors().getOrNull()).containsExactly(11, 28, 190)
        assertThat(body.lightEventNum()).contains(9)
        assertThat(body.noiseLvls().getOrNull()).containsExactly(58.2, 58.3)
        assertThat(body.numElements()).contains(640)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.posConfidence()).contains(0.1)
        assertThat(body.qcValue()).contains(4)
        assertThat(body.sectorNum()).contains(20)
        assertThat(body.semiMajorAxis()).contains(3.4)
        assertThat(body.semiMinorAxis()).contains(0.3)
        assertThat(body.sigPwrs().getOrNull()).containsExactly(116.5, 121.6)
        assertThat(body.sigStrength()).contains(163.7)
        assertThat(body.snrs().getOrNull()).containsExactly(14.5, -16.2)
        assertThat(body.specAvgs().getOrNull()).containsExactly(4, 3)
        assertThat(body.specWidths().getOrNull()).containsExactly(0.3, 0.6)
        assertThat(body.srcIds().getOrNull())
            .containsExactly(
                "1b23ba93-0957-4654-b5ca-8c3703f3ec57",
                "32944ee4-0437-4d94-95ce-2f2823ffa001",
            )
        assertThat(body.srcTyps().getOrNull()).containsExactly("SENSOR", "WEATHERREPORT")
        assertThat(body.tdAvgSampleNums().getOrNull()).containsExactly(32, 30)
        assertThat(body.termAlt()).contains(19505.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            WeatherDataCreateParams.builder()
                .classificationMarking("U")
                .dataMode(WeatherDataCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(WeatherDataCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
