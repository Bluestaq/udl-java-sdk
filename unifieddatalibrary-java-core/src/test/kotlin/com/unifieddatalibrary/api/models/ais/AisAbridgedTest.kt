// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.ais

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AisAbridgedTest {

    @Test
    fun create() {
        val aisAbridged =
            AisAbridged.builder()
                .classificationMarking("U")
                .dataMode(AisAbridged.DataMode.TEST)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("AIS-ID")
                .antennaRefDimensions(listOf(50.1, 50.1, 20.1, 20.1))
                .avgSpeed(12.1)
                .callSign("V2OZ")
                .cargoType("Freight")
                .course(157.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentPortGuid("0ABC")
                .currentPortLocode("XF013")
                .destination("USCLE")
                .destinationEta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .distanceToGo(150.5)
                .distanceTravelled(200.3)
                .draught(21.1)
                .engagedIn("Cargo")
                .etaCalculated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .etaUpdated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .idTrack("TRACK-ID")
                .idVessel("VESSEL-ID")
                .imon(9015462L)
                .lastPortGuid("0VAX")
                .lastPortLocode("USSKY")
                .lat(47.758499)
                .length(511.1)
                .lon(-5.154223)
                .maxSpeed(13.3)
                .mmsi(304010417L)
                .navStatus("Underway Using Engine")
                .nextPortGuid("0Z8Q")
                .nextPortLocode("USCLE")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .posDeviceType("GPS")
                .posHiAccuracy(true)
                .posHiLatency(true)
                .rateOfTurn(22.1)
                .shipDescription("Search and rescue vessels")
                .shipName("DORNUM")
                .shipType("Passenger")
                .sourceDl("AXE")
                .specialCraft("Tug")
                .specialManeuver(false)
                .speed(10.5)
                .trueHeading(329.1)
                .vesselFlag("United States")
                .width(24.1)
                .build()

        assertThat(aisAbridged.classificationMarking()).isEqualTo("U")
        assertThat(aisAbridged.dataMode()).isEqualTo(AisAbridged.DataMode.TEST)
        assertThat(aisAbridged.source()).isEqualTo("Bluestaq")
        assertThat(aisAbridged.ts()).isEqualTo(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(aisAbridged.id()).contains("AIS-ID")
        assertThat(aisAbridged.antennaRefDimensions().getOrNull())
            .containsExactly(50.1, 50.1, 20.1, 20.1)
        assertThat(aisAbridged.avgSpeed()).contains(12.1)
        assertThat(aisAbridged.callSign()).contains("V2OZ")
        assertThat(aisAbridged.cargoType()).contains("Freight")
        assertThat(aisAbridged.course()).contains(157.1)
        assertThat(aisAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(aisAbridged.createdBy()).contains("some.user")
        assertThat(aisAbridged.currentPortGuid()).contains("0ABC")
        assertThat(aisAbridged.currentPortLocode()).contains("XF013")
        assertThat(aisAbridged.destination()).contains("USCLE")
        assertThat(aisAbridged.destinationEta())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(aisAbridged.distanceToGo()).contains(150.5)
        assertThat(aisAbridged.distanceTravelled()).contains(200.3)
        assertThat(aisAbridged.draught()).contains(21.1)
        assertThat(aisAbridged.engagedIn()).contains("Cargo")
        assertThat(aisAbridged.etaCalculated())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(aisAbridged.etaUpdated())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(aisAbridged.idTrack()).contains("TRACK-ID")
        assertThat(aisAbridged.idVessel()).contains("VESSEL-ID")
        assertThat(aisAbridged.imon()).contains(9015462L)
        assertThat(aisAbridged.lastPortGuid()).contains("0VAX")
        assertThat(aisAbridged.lastPortLocode()).contains("USSKY")
        assertThat(aisAbridged.lat()).contains(47.758499)
        assertThat(aisAbridged.length()).contains(511.1)
        assertThat(aisAbridged.lon()).contains(-5.154223)
        assertThat(aisAbridged.maxSpeed()).contains(13.3)
        assertThat(aisAbridged.mmsi()).contains(304010417L)
        assertThat(aisAbridged.navStatus()).contains("Underway Using Engine")
        assertThat(aisAbridged.nextPortGuid()).contains("0Z8Q")
        assertThat(aisAbridged.nextPortLocode()).contains("USCLE")
        assertThat(aisAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(aisAbridged.origNetwork()).contains("OPS1")
        assertThat(aisAbridged.posDeviceType()).contains("GPS")
        assertThat(aisAbridged.posHiAccuracy()).contains(true)
        assertThat(aisAbridged.posHiLatency()).contains(true)
        assertThat(aisAbridged.rateOfTurn()).contains(22.1)
        assertThat(aisAbridged.shipDescription()).contains("Search and rescue vessels")
        assertThat(aisAbridged.shipName()).contains("DORNUM")
        assertThat(aisAbridged.shipType()).contains("Passenger")
        assertThat(aisAbridged.sourceDl()).contains("AXE")
        assertThat(aisAbridged.specialCraft()).contains("Tug")
        assertThat(aisAbridged.specialManeuver()).contains(false)
        assertThat(aisAbridged.speed()).contains(10.5)
        assertThat(aisAbridged.trueHeading()).contains(329.1)
        assertThat(aisAbridged.vesselFlag()).contains("United States")
        assertThat(aisAbridged.width()).contains(24.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val aisAbridged =
            AisAbridged.builder()
                .classificationMarking("U")
                .dataMode(AisAbridged.DataMode.TEST)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("AIS-ID")
                .antennaRefDimensions(listOf(50.1, 50.1, 20.1, 20.1))
                .avgSpeed(12.1)
                .callSign("V2OZ")
                .cargoType("Freight")
                .course(157.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentPortGuid("0ABC")
                .currentPortLocode("XF013")
                .destination("USCLE")
                .destinationEta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .distanceToGo(150.5)
                .distanceTravelled(200.3)
                .draught(21.1)
                .engagedIn("Cargo")
                .etaCalculated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .etaUpdated(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .idTrack("TRACK-ID")
                .idVessel("VESSEL-ID")
                .imon(9015462L)
                .lastPortGuid("0VAX")
                .lastPortLocode("USSKY")
                .lat(47.758499)
                .length(511.1)
                .lon(-5.154223)
                .maxSpeed(13.3)
                .mmsi(304010417L)
                .navStatus("Underway Using Engine")
                .nextPortGuid("0Z8Q")
                .nextPortLocode("USCLE")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .posDeviceType("GPS")
                .posHiAccuracy(true)
                .posHiLatency(true)
                .rateOfTurn(22.1)
                .shipDescription("Search and rescue vessels")
                .shipName("DORNUM")
                .shipType("Passenger")
                .sourceDl("AXE")
                .specialCraft("Tug")
                .specialManeuver(false)
                .speed(10.5)
                .trueHeading(329.1)
                .vesselFlag("United States")
                .width(24.1)
                .build()

        val roundtrippedAisAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(aisAbridged),
                jacksonTypeRef<AisAbridged>(),
            )

        assertThat(roundtrippedAisAbridged).isEqualTo(aisAbridged)
    }
}
