// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.scs.file

import com.unifieddatalibrary.api.models.FileData
import com.unifieddatalibrary.api.models.scs.file.FileUpdateParams
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class FileUpdateParamsTest {

    @Test
    fun create() {
      FileUpdateParams.builder()
          .addFileDataList(FileData.builder()
              .id("/example/folder/example_file.txt")
              .attributes(FileData.Attributes.builder()
                  .id("id")
                  .classification("U")
                  .classificationMarking("classificationMarking")
                  .createdBy("createdBy")
                  .createdDate("createdDate")
                  .deleteOn(0L)
                  .description("A new Example description")
                  .docTitle("docTitle")
                  .docType("docType")
                  .addDoi("string")
                  .ellipseLat(0.0f)
                  .ellipseLon(0.0f)
                  .fileName("fileName")
                  .intrinsicTitle("intrinsicTitle")
                  .keywords("keywords")
                  .mediaTitle("mediaTitle")
                  .metaInfo("A new Example metaInfo")
                  .milgrid("milgrid")
                  .milgridLat(0.0f)
                  .milgridLon(0.0f)
                  .modifiedBy("modifiedBy")
                  .modifiedDate("modifiedDate")
                  .name("name")
                  .path("path")
                  .read("read")
                  .searchable(true)
                  .searchAfter("searchAfter")
                  .serialNumber("serialNumber")
                  .size(0L)
                  .addTag("string")
                  .write("write")
                  .build())
              .contentAction(FileData.ContentAction.UPDATE)
              .targetName("targetName")
              .targetPath("targetPath")
              .type(FileData.Type.FILE)
              .build())
          .build()
    }

    @Test
    fun body() {
      val params = FileUpdateParams.builder()
          .addFileDataList(FileData.builder()
              .id("/example/folder/example_file.txt")
              .attributes(FileData.Attributes.builder()
                  .id("id")
                  .classification("U")
                  .classificationMarking("classificationMarking")
                  .createdBy("createdBy")
                  .createdDate("createdDate")
                  .deleteOn(0L)
                  .description("A new Example description")
                  .docTitle("docTitle")
                  .docType("docType")
                  .addDoi("string")
                  .ellipseLat(0.0f)
                  .ellipseLon(0.0f)
                  .fileName("fileName")
                  .intrinsicTitle("intrinsicTitle")
                  .keywords("keywords")
                  .mediaTitle("mediaTitle")
                  .metaInfo("A new Example metaInfo")
                  .milgrid("milgrid")
                  .milgridLat(0.0f)
                  .milgridLon(0.0f)
                  .modifiedBy("modifiedBy")
                  .modifiedDate("modifiedDate")
                  .name("name")
                  .path("path")
                  .read("read")
                  .searchable(true)
                  .searchAfter("searchAfter")
                  .serialNumber("serialNumber")
                  .size(0L)
                  .addTag("string")
                  .write("write")
                  .build())
              .contentAction(FileData.ContentAction.UPDATE)
              .targetName("targetName")
              .targetPath("targetPath")
              .type(FileData.Type.FILE)
              .build())
          .build()

      val body = params._body()

      assertThat(body.fileDataList().getOrNull()).containsExactly(FileData.builder()
          .id("/example/folder/example_file.txt")
          .attributes(FileData.Attributes.builder()
              .id("id")
              .classification("U")
              .classificationMarking("classificationMarking")
              .createdBy("createdBy")
              .createdDate("createdDate")
              .deleteOn(0L)
              .description("A new Example description")
              .docTitle("docTitle")
              .docType("docType")
              .addDoi("string")
              .ellipseLat(0.0f)
              .ellipseLon(0.0f)
              .fileName("fileName")
              .intrinsicTitle("intrinsicTitle")
              .keywords("keywords")
              .mediaTitle("mediaTitle")
              .metaInfo("A new Example metaInfo")
              .milgrid("milgrid")
              .milgridLat(0.0f)
              .milgridLon(0.0f)
              .modifiedBy("modifiedBy")
              .modifiedDate("modifiedDate")
              .name("name")
              .path("path")
              .read("read")
              .searchable(true)
              .searchAfter("searchAfter")
              .serialNumber("serialNumber")
              .size(0L)
              .addTag("string")
              .write("write")
              .build())
          .contentAction(FileData.ContentAction.UPDATE)
          .targetName("targetName")
          .targetPath("targetPath")
          .type(FileData.Type.FILE)
          .build())
    }

    @Test
    fun bodyWithoutOptionalFields() {
      val params = FileUpdateParams.builder().build()

      val body = params._body()
    }
}
