// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.orbitdetermination

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrbitdeterminationListResponseTest {

    @Test
    fun create() {
        val orbitdeterminationListResponse =
            OrbitdeterminationListResponse.builder()
                .classificationMarking("U")
                .dataMode(OrbitdeterminationListResponse.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2023-08-28T15:20:21.247192Z"))
                .initialOd(false)
                .method("BLS")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAcceptedObId("EOOBSERVATION-ID1")
                .addAcceptedObId("RADAROBSERVATION-ID1")
                .addAcceptedObTyp("EO")
                .addAcceptedObTyp("RADAR")
                .agomEst(false)
                .agomModel("RandomWalk")
                .aprioriElset(
                    OrbitdeterminationListResponse.AprioriElset.builder()
                        .classificationMarking("U")
                        .dataMode(OrbitdeterminationListResponse.AprioriElset.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .agom(0.0126)
                        .algorithm("Example algorithm")
                        .apogee(1.1)
                        .argOfPerigee(1.1)
                        .ballisticCoeff(0.00815)
                        .bStar(1.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("Example description")
                        .eccentricity(0.333)
                        .ephemType(1L)
                        .idElset("ELSET-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .inclination(45.1)
                        .line1("Example line1")
                        .line2("Example line2")
                        .meanAnomaly(179.1)
                        .meanMotion(1.1)
                        .meanMotionDDot(1.1)
                        .meanMotionDot(1.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("ORIGOBJECT-ID")
                        .perigee(1.1)
                        .period(1.1)
                        .raan(1.1)
                        .revNo(111)
                        .satNo(12)
                        .semiMajorAxis(1.1)
                        .sourceDl("AXE")
                        .transactionId("TRANSACTION-ID")
                        .uct(false)
                        .build()
                )
                .aprioriIdElset("80e544b7-6a17-4554-8abf-7301e98f8e5d")
                .aprioriIdStateVector("6e291992-8ae3-4592-bb0f-055715bf4803")
                .aprioriStateVector(
                    OrbitdeterminationListResponse.AprioriStateVector.builder()
                        .classificationMarking("U")
                        .dataMode(OrbitdeterminationListResponse.AprioriStateVector.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .actualOdSpan(3.5)
                        .algorithm("SAMPLE_ALGORITHM")
                        .alt1ReferenceFrame("TEME")
                        .alt2ReferenceFrame("EFG/TDR")
                        .area(5.065)
                        .bDot(1.23)
                        .cmOffset(1.23)
                        .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                        .covMethod("CALCULATED")
                        .covReferenceFrame(
                            OrbitdeterminationListResponse.AprioriStateVector.CovReferenceFrame
                                .J2000
                        )
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("descriptor")
                        .dragArea(4.739)
                        .dragCoeff(0.0224391269775)
                        .dragModel("JAC70")
                        .edr(1.23)
                        .addEqCov(1.1)
                        .addEqCov(2.2)
                        .errorControl(1.23)
                        .fixedStep(true)
                        .geopotentialModel("EGM-96")
                        .iau1980Terms(4)
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .idStateVector("STATEVECTOR-ID")
                        .integratorMode("integratorMode")
                        .inTrackThrust(true)
                        .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                        .lunarSolar(true)
                        .mass(164.5)
                        .obsAvailable(376)
                        .obsUsed(374)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("ORIGOBJECT-ID")
                        .partials("ANALYTIC")
                        .pedigree("CONJUNCTION")
                        .polarMotionX(1.23)
                        .polarMotionY(1.23)
                        .posUnc(0.333399744452)
                        .recOdSpan(3.5)
                        .referenceFrame(
                            OrbitdeterminationListResponse.AprioriStateVector.ReferenceFrame.J2000
                        )
                        .residualsAcc(99.5)
                        .revNo(7205)
                        .rms(0.991)
                        .satNo(12)
                        .addSigmaPosUvw(1.23)
                        .addSigmaPosUvw(4.56)
                        .addSigmaVelUvw(1.23)
                        .addSigmaVelUvw(4.56)
                        .solarFluxApAvg(1.23)
                        .solarFluxF10(1.23)
                        .solarFluxF10Avg(1.23)
                        .solarRadPress(true)
                        .solarRadPressCoeff(0.0244394)
                        .solidEarthTides(true)
                        .sourceDl("AXE")
                        .srpArea(4.311)
                        .stepMode("AUTO")
                        .stepSize(1.23)
                        .stepSizeSelection("AUTO")
                        .taiUtc(1.23)
                        .thrustAccel(1.23)
                        .tracksAvail(163)
                        .tracksUsed(163)
                        .transactionId("transactionId")
                        .uct(true)
                        .ut1Rate(1.23)
                        .ut1Utc(1.23)
                        .velUnc(0.000004)
                        .xaccel(-2.12621392)
                        .xpos(-1118.577381)
                        .xposAlt1(-1145.688502)
                        .xposAlt2(-1456.915926)
                        .xvel(-4.25242784)
                        .xvelAlt1(-4.270832252)
                        .xvelAlt2(-1.219814294)
                        .yaccel(2.645553717)
                        .ypos(3026.231084)
                        .yposAlt1(3020.729572)
                        .yposAlt2(-2883.540406)
                        .yvel(5.291107434)
                        .yvelAlt1(5.27074276)
                        .yvelAlt2(-6.602080212)
                        .zaccel(-1.06310696)
                        .zpos(6167.831808)
                        .zposAlt1(6165.55187)
                        .zposAlt2(6165.55187)
                        .zvel(-3.356493869)
                        .zvelAlt1(-3.365155181)
                        .zvelAlt2(-3.365155181)
                        .build()
                )
                .ballisticCoeffEst(false)
                .ballisticCoeffModel("GaussMarkov")
                .bestPassWrms(0.975)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .edr(1.23)
                .effectiveFrom(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .effectiveUntil(OffsetDateTime.parse("2023-08-30T08:15:00.123456Z"))
                .errorGrowthRate(1.23)
                .firstPassWrms(0.985)
                .fitSpan(0.6)
                .idOnOrbit("54741")
                .lastObEnd(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .lastObStart(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .methodSource("ASW")
                .numIterations(8)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .previousWrms(1.02)
                .addRejectedObId("DIFFOFARRIVAL-ID2")
                .addRejectedObId("RFOBSERVATION-ID2")
                .addRejectedObTyp("DOA")
                .addRejectedObTyp("RF")
                .rmsConvergenceCriteria(0.001)
                .satNo(54741)
                .addSensorId("SENSOR-ID1")
                .addSensorId("SENSOR-ID2")
                .sourceDl("AXE")
                .timeSpan(3.5)
                .wrms(0.991)
                .build()

        assertThat(orbitdeterminationListResponse.classificationMarking()).isEqualTo("U")
        assertThat(orbitdeterminationListResponse.dataMode())
            .isEqualTo(OrbitdeterminationListResponse.DataMode.TEST)
        assertThat(orbitdeterminationListResponse.endTime())
            .isEqualTo(OffsetDateTime.parse("2023-08-28T15:20:21.247192Z"))
        assertThat(orbitdeterminationListResponse.initialOd()).isEqualTo(false)
        assertThat(orbitdeterminationListResponse.method()).isEqualTo("BLS")
        assertThat(orbitdeterminationListResponse.source()).isEqualTo("Bluestaq")
        assertThat(orbitdeterminationListResponse.startTime())
            .isEqualTo(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
        assertThat(orbitdeterminationListResponse.id())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(orbitdeterminationListResponse.acceptedObIds().getOrNull())
            .containsExactly("EOOBSERVATION-ID1", "RADAROBSERVATION-ID1")
        assertThat(orbitdeterminationListResponse.acceptedObTyps().getOrNull())
            .containsExactly("EO", "RADAR")
        assertThat(orbitdeterminationListResponse.agomEst()).contains(false)
        assertThat(orbitdeterminationListResponse.agomModel()).contains("RandomWalk")
        assertThat(orbitdeterminationListResponse.aprioriElset())
            .contains(
                OrbitdeterminationListResponse.AprioriElset.builder()
                    .classificationMarking("U")
                    .dataMode(OrbitdeterminationListResponse.AprioriElset.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .agom(0.0126)
                    .algorithm("Example algorithm")
                    .apogee(1.1)
                    .argOfPerigee(1.1)
                    .ballisticCoeff(0.00815)
                    .bStar(1.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("Example description")
                    .eccentricity(0.333)
                    .ephemType(1L)
                    .idElset("ELSET-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .inclination(45.1)
                    .line1("Example line1")
                    .line2("Example line2")
                    .meanAnomaly(179.1)
                    .meanMotion(1.1)
                    .meanMotionDDot(1.1)
                    .meanMotionDot(1.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("ORIGOBJECT-ID")
                    .perigee(1.1)
                    .period(1.1)
                    .raan(1.1)
                    .revNo(111)
                    .satNo(12)
                    .semiMajorAxis(1.1)
                    .sourceDl("AXE")
                    .transactionId("TRANSACTION-ID")
                    .uct(false)
                    .build()
            )
        assertThat(orbitdeterminationListResponse.aprioriIdElset())
            .contains("80e544b7-6a17-4554-8abf-7301e98f8e5d")
        assertThat(orbitdeterminationListResponse.aprioriIdStateVector())
            .contains("6e291992-8ae3-4592-bb0f-055715bf4803")
        assertThat(orbitdeterminationListResponse.aprioriStateVector())
            .contains(
                OrbitdeterminationListResponse.AprioriStateVector.builder()
                    .classificationMarking("U")
                    .dataMode(OrbitdeterminationListResponse.AprioriStateVector.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .actualOdSpan(3.5)
                    .algorithm("SAMPLE_ALGORITHM")
                    .alt1ReferenceFrame("TEME")
                    .alt2ReferenceFrame("EFG/TDR")
                    .area(5.065)
                    .bDot(1.23)
                    .cmOffset(1.23)
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .covMethod("CALCULATED")
                    .covReferenceFrame(
                        OrbitdeterminationListResponse.AprioriStateVector.CovReferenceFrame.J2000
                    )
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .dragArea(4.739)
                    .dragCoeff(0.0224391269775)
                    .dragModel("JAC70")
                    .edr(1.23)
                    .addEqCov(1.1)
                    .addEqCov(2.2)
                    .errorControl(1.23)
                    .fixedStep(true)
                    .geopotentialModel("EGM-96")
                    .iau1980Terms(4)
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .idStateVector("STATEVECTOR-ID")
                    .integratorMode("integratorMode")
                    .inTrackThrust(true)
                    .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                    .lunarSolar(true)
                    .mass(164.5)
                    .obsAvailable(376)
                    .obsUsed(374)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("ORIGOBJECT-ID")
                    .partials("ANALYTIC")
                    .pedigree("CONJUNCTION")
                    .polarMotionX(1.23)
                    .polarMotionY(1.23)
                    .posUnc(0.333399744452)
                    .recOdSpan(3.5)
                    .referenceFrame(
                        OrbitdeterminationListResponse.AprioriStateVector.ReferenceFrame.J2000
                    )
                    .residualsAcc(99.5)
                    .revNo(7205)
                    .rms(0.991)
                    .satNo(12)
                    .addSigmaPosUvw(1.23)
                    .addSigmaPosUvw(4.56)
                    .addSigmaVelUvw(1.23)
                    .addSigmaVelUvw(4.56)
                    .solarFluxApAvg(1.23)
                    .solarFluxF10(1.23)
                    .solarFluxF10Avg(1.23)
                    .solarRadPress(true)
                    .solarRadPressCoeff(0.0244394)
                    .solidEarthTides(true)
                    .sourceDl("AXE")
                    .srpArea(4.311)
                    .stepMode("AUTO")
                    .stepSize(1.23)
                    .stepSizeSelection("AUTO")
                    .taiUtc(1.23)
                    .thrustAccel(1.23)
                    .tracksAvail(163)
                    .tracksUsed(163)
                    .transactionId("transactionId")
                    .uct(true)
                    .ut1Rate(1.23)
                    .ut1Utc(1.23)
                    .velUnc(0.000004)
                    .xaccel(-2.12621392)
                    .xpos(-1118.577381)
                    .xposAlt1(-1145.688502)
                    .xposAlt2(-1456.915926)
                    .xvel(-4.25242784)
                    .xvelAlt1(-4.270832252)
                    .xvelAlt2(-1.219814294)
                    .yaccel(2.645553717)
                    .ypos(3026.231084)
                    .yposAlt1(3020.729572)
                    .yposAlt2(-2883.540406)
                    .yvel(5.291107434)
                    .yvelAlt1(5.27074276)
                    .yvelAlt2(-6.602080212)
                    .zaccel(-1.06310696)
                    .zpos(6167.831808)
                    .zposAlt1(6165.55187)
                    .zposAlt2(6165.55187)
                    .zvel(-3.356493869)
                    .zvelAlt1(-3.365155181)
                    .zvelAlt2(-3.365155181)
                    .build()
            )
        assertThat(orbitdeterminationListResponse.ballisticCoeffEst()).contains(false)
        assertThat(orbitdeterminationListResponse.ballisticCoeffModel()).contains("GaussMarkov")
        assertThat(orbitdeterminationListResponse.bestPassWrms()).contains(0.975)
        assertThat(orbitdeterminationListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(orbitdeterminationListResponse.createdBy()).contains("some.user")
        assertThat(orbitdeterminationListResponse.edr()).contains(1.23)
        assertThat(orbitdeterminationListResponse.effectiveFrom())
            .contains(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
        assertThat(orbitdeterminationListResponse.effectiveUntil())
            .contains(OffsetDateTime.parse("2023-08-30T08:15:00.123456Z"))
        assertThat(orbitdeterminationListResponse.errorGrowthRate()).contains(1.23)
        assertThat(orbitdeterminationListResponse.firstPassWrms()).contains(0.985)
        assertThat(orbitdeterminationListResponse.fitSpan()).contains(0.6)
        assertThat(orbitdeterminationListResponse.idOnOrbit()).contains("54741")
        assertThat(orbitdeterminationListResponse.lastObEnd())
            .contains(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
        assertThat(orbitdeterminationListResponse.lastObStart())
            .contains(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
        assertThat(orbitdeterminationListResponse.methodSource()).contains("ASW")
        assertThat(orbitdeterminationListResponse.numIterations()).contains(8)
        assertThat(orbitdeterminationListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(orbitdeterminationListResponse.origNetwork()).contains("OPS1")
        assertThat(orbitdeterminationListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(orbitdeterminationListResponse.previousWrms()).contains(1.02)
        assertThat(orbitdeterminationListResponse.rejectedObIds().getOrNull())
            .containsExactly("DIFFOFARRIVAL-ID2", "RFOBSERVATION-ID2")
        assertThat(orbitdeterminationListResponse.rejectedObTyps().getOrNull())
            .containsExactly("DOA", "RF")
        assertThat(orbitdeterminationListResponse.rmsConvergenceCriteria()).contains(0.001)
        assertThat(orbitdeterminationListResponse.satNo()).contains(54741)
        assertThat(orbitdeterminationListResponse.sensorIds().getOrNull())
            .containsExactly("SENSOR-ID1", "SENSOR-ID2")
        assertThat(orbitdeterminationListResponse.sourceDl()).contains("AXE")
        assertThat(orbitdeterminationListResponse.timeSpan()).contains(3.5)
        assertThat(orbitdeterminationListResponse.wrms()).contains(0.991)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val orbitdeterminationListResponse =
            OrbitdeterminationListResponse.builder()
                .classificationMarking("U")
                .dataMode(OrbitdeterminationListResponse.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2023-08-28T15:20:21.247192Z"))
                .initialOd(false)
                .method("BLS")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAcceptedObId("EOOBSERVATION-ID1")
                .addAcceptedObId("RADAROBSERVATION-ID1")
                .addAcceptedObTyp("EO")
                .addAcceptedObTyp("RADAR")
                .agomEst(false)
                .agomModel("RandomWalk")
                .aprioriElset(
                    OrbitdeterminationListResponse.AprioriElset.builder()
                        .classificationMarking("U")
                        .dataMode(OrbitdeterminationListResponse.AprioriElset.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .agom(0.0126)
                        .algorithm("Example algorithm")
                        .apogee(1.1)
                        .argOfPerigee(1.1)
                        .ballisticCoeff(0.00815)
                        .bStar(1.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("Example description")
                        .eccentricity(0.333)
                        .ephemType(1L)
                        .idElset("ELSET-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .inclination(45.1)
                        .line1("Example line1")
                        .line2("Example line2")
                        .meanAnomaly(179.1)
                        .meanMotion(1.1)
                        .meanMotionDDot(1.1)
                        .meanMotionDot(1.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("ORIGOBJECT-ID")
                        .perigee(1.1)
                        .period(1.1)
                        .raan(1.1)
                        .revNo(111)
                        .satNo(12)
                        .semiMajorAxis(1.1)
                        .sourceDl("AXE")
                        .transactionId("TRANSACTION-ID")
                        .uct(false)
                        .build()
                )
                .aprioriIdElset("80e544b7-6a17-4554-8abf-7301e98f8e5d")
                .aprioriIdStateVector("6e291992-8ae3-4592-bb0f-055715bf4803")
                .aprioriStateVector(
                    OrbitdeterminationListResponse.AprioriStateVector.builder()
                        .classificationMarking("U")
                        .dataMode(OrbitdeterminationListResponse.AprioriStateVector.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .actualOdSpan(3.5)
                        .algorithm("SAMPLE_ALGORITHM")
                        .alt1ReferenceFrame("TEME")
                        .alt2ReferenceFrame("EFG/TDR")
                        .area(5.065)
                        .bDot(1.23)
                        .cmOffset(1.23)
                        .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                        .covMethod("CALCULATED")
                        .covReferenceFrame(
                            OrbitdeterminationListResponse.AprioriStateVector.CovReferenceFrame
                                .J2000
                        )
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("descriptor")
                        .dragArea(4.739)
                        .dragCoeff(0.0224391269775)
                        .dragModel("JAC70")
                        .edr(1.23)
                        .addEqCov(1.1)
                        .addEqCov(2.2)
                        .errorControl(1.23)
                        .fixedStep(true)
                        .geopotentialModel("EGM-96")
                        .iau1980Terms(4)
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .idStateVector("STATEVECTOR-ID")
                        .integratorMode("integratorMode")
                        .inTrackThrust(true)
                        .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                        .lunarSolar(true)
                        .mass(164.5)
                        .obsAvailable(376)
                        .obsUsed(374)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("ORIGOBJECT-ID")
                        .partials("ANALYTIC")
                        .pedigree("CONJUNCTION")
                        .polarMotionX(1.23)
                        .polarMotionY(1.23)
                        .posUnc(0.333399744452)
                        .recOdSpan(3.5)
                        .referenceFrame(
                            OrbitdeterminationListResponse.AprioriStateVector.ReferenceFrame.J2000
                        )
                        .residualsAcc(99.5)
                        .revNo(7205)
                        .rms(0.991)
                        .satNo(12)
                        .addSigmaPosUvw(1.23)
                        .addSigmaPosUvw(4.56)
                        .addSigmaVelUvw(1.23)
                        .addSigmaVelUvw(4.56)
                        .solarFluxApAvg(1.23)
                        .solarFluxF10(1.23)
                        .solarFluxF10Avg(1.23)
                        .solarRadPress(true)
                        .solarRadPressCoeff(0.0244394)
                        .solidEarthTides(true)
                        .sourceDl("AXE")
                        .srpArea(4.311)
                        .stepMode("AUTO")
                        .stepSize(1.23)
                        .stepSizeSelection("AUTO")
                        .taiUtc(1.23)
                        .thrustAccel(1.23)
                        .tracksAvail(163)
                        .tracksUsed(163)
                        .transactionId("transactionId")
                        .uct(true)
                        .ut1Rate(1.23)
                        .ut1Utc(1.23)
                        .velUnc(0.000004)
                        .xaccel(-2.12621392)
                        .xpos(-1118.577381)
                        .xposAlt1(-1145.688502)
                        .xposAlt2(-1456.915926)
                        .xvel(-4.25242784)
                        .xvelAlt1(-4.270832252)
                        .xvelAlt2(-1.219814294)
                        .yaccel(2.645553717)
                        .ypos(3026.231084)
                        .yposAlt1(3020.729572)
                        .yposAlt2(-2883.540406)
                        .yvel(5.291107434)
                        .yvelAlt1(5.27074276)
                        .yvelAlt2(-6.602080212)
                        .zaccel(-1.06310696)
                        .zpos(6167.831808)
                        .zposAlt1(6165.55187)
                        .zposAlt2(6165.55187)
                        .zvel(-3.356493869)
                        .zvelAlt1(-3.365155181)
                        .zvelAlt2(-3.365155181)
                        .build()
                )
                .ballisticCoeffEst(false)
                .ballisticCoeffModel("GaussMarkov")
                .bestPassWrms(0.975)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .edr(1.23)
                .effectiveFrom(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .effectiveUntil(OffsetDateTime.parse("2023-08-30T08:15:00.123456Z"))
                .errorGrowthRate(1.23)
                .firstPassWrms(0.985)
                .fitSpan(0.6)
                .idOnOrbit("54741")
                .lastObEnd(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .lastObStart(OffsetDateTime.parse("2023-08-28T11:20:21.247192Z"))
                .methodSource("ASW")
                .numIterations(8)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .previousWrms(1.02)
                .addRejectedObId("DIFFOFARRIVAL-ID2")
                .addRejectedObId("RFOBSERVATION-ID2")
                .addRejectedObTyp("DOA")
                .addRejectedObTyp("RF")
                .rmsConvergenceCriteria(0.001)
                .satNo(54741)
                .addSensorId("SENSOR-ID1")
                .addSensorId("SENSOR-ID2")
                .sourceDl("AXE")
                .timeSpan(3.5)
                .wrms(0.991)
                .build()

        val roundtrippedOrbitdeterminationListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(orbitdeterminationListResponse),
                jacksonTypeRef<OrbitdeterminationListResponse>(),
            )

        assertThat(roundtrippedOrbitdeterminationListResponse)
            .isEqualTo(orbitdeterminationListResponse)
    }
}
