// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airtransportmissions

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirTransportMissionUpdateParamsTest {

    @Test
    fun create() {
        AirTransportMissionUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(AirTransportMissionUpdateParams.DataMode.TEST)
            .source("Bluestaq")
            .bodyId("bdad6945-c9e4-b829-f7be-1ad075541921")
            .abp("ZZ12")
            .alias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
            .allocatedUnit("437 AEW")
            .amcMissionId("AJM7939B1123")
            .apacsId("1083034")
            .atoCallSign("CHARLIE")
            .atoMissionId("8900")
            .callSign("RCH123")
            .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .cw(true)
            .dipWorksheetName("G2-182402-AB")
            .firstPickUp("KFAY")
            .gdssMissionId("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
            .addHazMat(
                AirTransportMissionUpdateParams.HazMat.builder()
                    .applicableNotes("11,12")
                    .cgc("A")
                    .cgn("4,5,7,8")
                    .classDiv(1.1)
                    .extHazMatId("cb6289e0f38534e01291ab6421d42724")
                    .itemName("LITHIUM METAL BATTERIES")
                    .netExpWt(12.1)
                    .offIcao("MBPV")
                    .offItin(300)
                    .onIcao("LIRQ")
                    .onItin(50)
                    .pieces(29)
                    .planned("P")
                    .unNum("0181")
                    .weight(22.1)
                    .build()
            )
            .jcsPriority("1A3")
            .lastDropOff("PGUA")
            .loadCategoryType("MIXED")
            .m1("11")
            .m2("3214")
            .m3a("6655")
            .naf("18AF")
            .nextAmcMissionId("AJM7939B1124")
            .nextMissionId("186e5658-1079-45c0-bccc-02d2fa31b663")
            .node("45TEST")
            .objective("Deliver water to island X.")
            .operation("Golden Eye")
            .origin("THIRD_PARTY_DATASOURCE")
            .origMissionId("614bebb6-a62e-053c-ca51-e79f8a402b28")
            .origNetwork("OPS1")
            .prevAmcMissionId("AJM7939B1122")
            .prevMissionId("a77055df-edc3-4047-a5fa-604f80b9fe3c")
            .purpose(
                "People at island X need water ASAP. Two previous attempts failed due to weather."
            )
            .addRemark(
                AirTransportMissionUpdateParams.Remark.builder()
                    .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .gdssRemarkId("GDSSREMARK-ID")
                    .itineraryNum(825)
                    .text("Example mission remarks.")
                    .type("MP")
                    .user("John Doe")
                    .build()
            )
            .addRequirement(
                AirTransportMissionUpdateParams.Requirement.builder()
                    .bulkWeight(1.3)
                    .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
                    .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .numAmbulatory(10)
                    .numAttendant(10)
                    .numLitter(10)
                    .numPax(44)
                    .offloadId(300)
                    .offloadLoCode("KHOP")
                    .onloadId(200)
                    .onloadLoCode("KCHS")
                    .oplan("5027")
                    .outsizeWeight(1.3)
                    .oversizeWeight(1.3)
                    .projName("CENTINTRA21")
                    .transReqNum("T01ME01")
                    .uln("T01ME01")
                    .build()
            )
            .sourceDl("AXE")
            .sourceSysDeviation(-90.12)
            .state("EXECUTION")
            .type("SAAM")
            .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            AirTransportMissionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirTransportMissionUpdateParams.DataMode.TEST)
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            AirTransportMissionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirTransportMissionUpdateParams.DataMode.TEST)
                .source("Bluestaq")
                .bodyId("bdad6945-c9e4-b829-f7be-1ad075541921")
                .abp("ZZ12")
                .alias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
                .allocatedUnit("437 AEW")
                .amcMissionId("AJM7939B1123")
                .apacsId("1083034")
                .atoCallSign("CHARLIE")
                .atoMissionId("8900")
                .callSign("RCH123")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cw(true)
                .dipWorksheetName("G2-182402-AB")
                .firstPickUp("KFAY")
                .gdssMissionId("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
                .addHazMat(
                    AirTransportMissionUpdateParams.HazMat.builder()
                        .applicableNotes("11,12")
                        .cgc("A")
                        .cgn("4,5,7,8")
                        .classDiv(1.1)
                        .extHazMatId("cb6289e0f38534e01291ab6421d42724")
                        .itemName("LITHIUM METAL BATTERIES")
                        .netExpWt(12.1)
                        .offIcao("MBPV")
                        .offItin(300)
                        .onIcao("LIRQ")
                        .onItin(50)
                        .pieces(29)
                        .planned("P")
                        .unNum("0181")
                        .weight(22.1)
                        .build()
                )
                .jcsPriority("1A3")
                .lastDropOff("PGUA")
                .loadCategoryType("MIXED")
                .m1("11")
                .m2("3214")
                .m3a("6655")
                .naf("18AF")
                .nextAmcMissionId("AJM7939B1124")
                .nextMissionId("186e5658-1079-45c0-bccc-02d2fa31b663")
                .node("45TEST")
                .objective("Deliver water to island X.")
                .operation("Golden Eye")
                .origin("THIRD_PARTY_DATASOURCE")
                .origMissionId("614bebb6-a62e-053c-ca51-e79f8a402b28")
                .origNetwork("OPS1")
                .prevAmcMissionId("AJM7939B1122")
                .prevMissionId("a77055df-edc3-4047-a5fa-604f80b9fe3c")
                .purpose(
                    "People at island X need water ASAP. Two previous attempts failed due to weather."
                )
                .addRemark(
                    AirTransportMissionUpdateParams.Remark.builder()
                        .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                        .gdssRemarkId("GDSSREMARK-ID")
                        .itineraryNum(825)
                        .text("Example mission remarks.")
                        .type("MP")
                        .user("John Doe")
                        .build()
                )
                .addRequirement(
                    AirTransportMissionUpdateParams.Requirement.builder()
                        .bulkWeight(1.3)
                        .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
                        .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .numAmbulatory(10)
                        .numAttendant(10)
                        .numLitter(10)
                        .numPax(44)
                        .offloadId(300)
                        .offloadLoCode("KHOP")
                        .onloadId(200)
                        .onloadLoCode("KCHS")
                        .oplan("5027")
                        .outsizeWeight(1.3)
                        .oversizeWeight(1.3)
                        .projName("CENTINTRA21")
                        .transReqNum("T01ME01")
                        .uln("T01ME01")
                        .build()
                )
                .sourceDl("AXE")
                .sourceSysDeviation(-90.12)
                .state("EXECUTION")
                .type("SAAM")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AirTransportMissionUpdateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("bdad6945-c9e4-b829-f7be-1ad075541921")
        assertThat(body.abp()).contains("ZZ12")
        assertThat(body.alias()).contains("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
        assertThat(body.allocatedUnit()).contains("437 AEW")
        assertThat(body.amcMissionId()).contains("AJM7939B1123")
        assertThat(body.apacsId()).contains("1083034")
        assertThat(body.atoCallSign()).contains("CHARLIE")
        assertThat(body.atoMissionId()).contains("8900")
        assertThat(body.callSign()).contains("RCH123")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.cw()).contains(true)
        assertThat(body.dipWorksheetName()).contains("G2-182402-AB")
        assertThat(body.firstPickUp()).contains("KFAY")
        assertThat(body.gdssMissionId()).contains("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
        assertThat(body.hazMat().getOrNull())
            .containsExactly(
                AirTransportMissionUpdateParams.HazMat.builder()
                    .applicableNotes("11,12")
                    .cgc("A")
                    .cgn("4,5,7,8")
                    .classDiv(1.1)
                    .extHazMatId("cb6289e0f38534e01291ab6421d42724")
                    .itemName("LITHIUM METAL BATTERIES")
                    .netExpWt(12.1)
                    .offIcao("MBPV")
                    .offItin(300)
                    .onIcao("LIRQ")
                    .onItin(50)
                    .pieces(29)
                    .planned("P")
                    .unNum("0181")
                    .weight(22.1)
                    .build()
            )
        assertThat(body.jcsPriority()).contains("1A3")
        assertThat(body.lastDropOff()).contains("PGUA")
        assertThat(body.loadCategoryType()).contains("MIXED")
        assertThat(body.m1()).contains("11")
        assertThat(body.m2()).contains("3214")
        assertThat(body.m3a()).contains("6655")
        assertThat(body.naf()).contains("18AF")
        assertThat(body.nextAmcMissionId()).contains("AJM7939B1124")
        assertThat(body.nextMissionId()).contains("186e5658-1079-45c0-bccc-02d2fa31b663")
        assertThat(body.node()).contains("45TEST")
        assertThat(body.objective()).contains("Deliver water to island X.")
        assertThat(body.operation()).contains("Golden Eye")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origMissionId()).contains("614bebb6-a62e-053c-ca51-e79f8a402b28")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.prevAmcMissionId()).contains("AJM7939B1122")
        assertThat(body.prevMissionId()).contains("a77055df-edc3-4047-a5fa-604f80b9fe3c")
        assertThat(body.purpose())
            .contains(
                "People at island X need water ASAP. Two previous attempts failed due to weather."
            )
        assertThat(body.remarks().getOrNull())
            .containsExactly(
                AirTransportMissionUpdateParams.Remark.builder()
                    .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                    .gdssRemarkId("GDSSREMARK-ID")
                    .itineraryNum(825)
                    .text("Example mission remarks.")
                    .type("MP")
                    .user("John Doe")
                    .build()
            )
        assertThat(body.requirements().getOrNull())
            .containsExactly(
                AirTransportMissionUpdateParams.Requirement.builder()
                    .bulkWeight(1.3)
                    .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
                    .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .numAmbulatory(10)
                    .numAttendant(10)
                    .numLitter(10)
                    .numPax(44)
                    .offloadId(300)
                    .offloadLoCode("KHOP")
                    .onloadId(200)
                    .onloadLoCode("KCHS")
                    .oplan("5027")
                    .outsizeWeight(1.3)
                    .oversizeWeight(1.3)
                    .projName("CENTINTRA21")
                    .transReqNum("T01ME01")
                    .uln("T01ME01")
                    .build()
            )
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.sourceSysDeviation()).contains(-90.12)
        assertThat(body.state()).contains("EXECUTION")
        assertThat(body.type()).contains("SAAM")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            AirTransportMissionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirTransportMissionUpdateParams.DataMode.TEST)
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AirTransportMissionUpdateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
