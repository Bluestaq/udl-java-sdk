// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.launchsite

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.LocationFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaunchSiteTupleResponseTest {

    @Test
    fun create() {
        val launchSiteTupleResponse =
            LaunchSiteTupleResponse.builder()
                .classificationMarking("U")
                .code("SAN MARCO")
                .dataMode(LaunchSiteTupleResponse.DataMode.TEST)
                .name("Example launch site name")
                .source("Bluestaq")
                .id("LAUNCHSITE-ID")
                .altCode("35")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .addLaunchSiteDetail(
                    LaunchSiteTupleResponse.LaunchSiteDetail.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchSiteTupleResponse.LaunchSiteDetail.DataMode.TEST)
                        .idLaunchSite("LAUNCHSITE-ID")
                        .source("Bluestaq")
                        .id("LAUNCHSITEDETAILS-ID")
                        .availableInclinations(listOf(10.23, 10.23, 12.23, 14.23))
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example notes")
                        .idLocation("LOCATION-ID")
                        .launchGroup("Example-group-name")
                        .location(
                            LocationFull.builder()
                                .classificationMarking("U")
                                .dataMode(LocationFull.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .shortCode("SNMLP")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(launchSiteTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(launchSiteTupleResponse.code()).isEqualTo("SAN MARCO")
        assertThat(launchSiteTupleResponse.dataMode())
            .isEqualTo(LaunchSiteTupleResponse.DataMode.TEST)
        assertThat(launchSiteTupleResponse.name()).isEqualTo("Example launch site name")
        assertThat(launchSiteTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(launchSiteTupleResponse.id()).contains("LAUNCHSITE-ID")
        assertThat(launchSiteTupleResponse.altCode()).contains("35")
        assertThat(launchSiteTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchSiteTupleResponse.createdBy()).contains("some.user")
        assertThat(launchSiteTupleResponse.idSite())
            .contains("a150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(launchSiteTupleResponse.launchSiteDetails().getOrNull())
            .containsExactly(
                LaunchSiteTupleResponse.LaunchSiteDetail.builder()
                    .classificationMarking("U")
                    .dataMode(LaunchSiteTupleResponse.LaunchSiteDetail.DataMode.TEST)
                    .idLaunchSite("LAUNCHSITE-ID")
                    .source("Bluestaq")
                    .id("LAUNCHSITEDETAILS-ID")
                    .availableInclinations(listOf(10.23, 10.23, 12.23, 14.23))
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("Example notes")
                    .idLocation("LOCATION-ID")
                    .launchGroup("Example-group-name")
                    .location(
                        LocationFull.builder()
                            .classificationMarking("U")
                            .dataMode(LocationFull.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(launchSiteTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(launchSiteTupleResponse.origNetwork()).contains("OPS1")
        assertThat(launchSiteTupleResponse.shortCode()).contains("SNMLP")
        assertThat(launchSiteTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchSiteTupleResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val launchSiteTupleResponse =
            LaunchSiteTupleResponse.builder()
                .classificationMarking("U")
                .code("SAN MARCO")
                .dataMode(LaunchSiteTupleResponse.DataMode.TEST)
                .name("Example launch site name")
                .source("Bluestaq")
                .id("LAUNCHSITE-ID")
                .altCode("35")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .addLaunchSiteDetail(
                    LaunchSiteTupleResponse.LaunchSiteDetail.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchSiteTupleResponse.LaunchSiteDetail.DataMode.TEST)
                        .idLaunchSite("LAUNCHSITE-ID")
                        .source("Bluestaq")
                        .id("LAUNCHSITEDETAILS-ID")
                        .availableInclinations(listOf(10.23, 10.23, 12.23, 14.23))
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example notes")
                        .idLocation("LOCATION-ID")
                        .launchGroup("Example-group-name")
                        .location(
                            LocationFull.builder()
                                .classificationMarking("U")
                                .dataMode(LocationFull.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .shortCode("SNMLP")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedLaunchSiteTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(launchSiteTupleResponse),
                jacksonTypeRef<LaunchSiteTupleResponse>(),
            )

        assertThat(roundtrippedLaunchSiteTupleResponse).isEqualTo(launchSiteTupleResponse)
    }
}
