// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.equipment

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.equipmentremarks.EquipmentRemarkFull
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EquipmentFullTest {

    @Test
    fun create() {
        val equipmentFull =
            EquipmentFull.builder()
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentFull.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altEqpId("ORIG-EQP-ID")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eqpCode("X12345")
                .eqpIdNum("001")
                .addEquipmentRemark(
                    EquipmentRemarkFull.builder()
                        .classificationMarking("U")
                        .dataMode(EquipmentRemarkFull.DataMode.TEST)
                        .idEquipment("EQUIPMENT-ID")
                        .source("Bluestaq")
                        .text("This is a remark")
                        .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                        .altRmkId("123456ABC")
                        .code("M")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .name("Remark name")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .type("Restriction")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .eval(7)
                .fpa("NOB")
                .function("OCC")
                .functPrimary("JG")
                .geoidalMslSep(12.34)
                .ident("FRIEND")
                .idOperatingUnit("UNIT-ID")
                .idParentEquipment("PARENT-EQUIPMENT-ID")
                .idSite("SITE-ID")
                .locReason("GR")
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .nomen("AMPHIBIOUS WARFARE SHIP")
                .operAreaPrimary("Territorial Sea")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .qtyOh(7)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .seqNum(5)
                .addSrcId("SRC_ID_1")
                .addSrcTyp("AIRCRAFT")
                .symCode("SOGPU----------")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        assertThat(equipmentFull.classificationMarking()).isEqualTo("U")
        assertThat(equipmentFull.countryCode()).isEqualTo("IQ")
        assertThat(equipmentFull.dataMode()).isEqualTo(EquipmentFull.DataMode.TEST)
        assertThat(equipmentFull.lat()).isEqualTo(39.019242)
        assertThat(equipmentFull.lon()).isEqualTo(-104.251659)
        assertThat(equipmentFull.source()).isEqualTo("Bluestaq")
        assertThat(equipmentFull.id()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(equipmentFull.airDefArea()).contains("AL006")
        assertThat(equipmentFull.allegiance()).contains("OTHR")
        assertThat(equipmentFull.altAllegiance()).contains("HL")
        assertThat(equipmentFull.altCountryCode()).contains("IZ")
        assertThat(equipmentFull.altEqpId()).contains("ORIG-EQP-ID")
        assertThat(equipmentFull.classRating()).contains("1")
        assertThat(equipmentFull.condition()).contains("RDY")
        assertThat(equipmentFull.conditionAvail()).contains("A")
        assertThat(equipmentFull.coord()).contains("340000000N0430000000E")
        assertThat(equipmentFull.coordDatum()).contains("WGS")
        assertThat(equipmentFull.coordDerivAcc()).contains(12.345)
        assertThat(equipmentFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(equipmentFull.createdBy()).contains("some.user")
        assertThat(equipmentFull.elevMsl()).contains(123.45)
        assertThat(equipmentFull.elevMslConfLvl()).contains(50)
        assertThat(equipmentFull.elevMslDerivAcc()).contains(12.34)
        assertThat(equipmentFull.eqpCode()).contains("X12345")
        assertThat(equipmentFull.eqpIdNum()).contains("001")
        assertThat(equipmentFull.equipmentRemarks().getOrNull())
            .containsExactly(
                EquipmentRemarkFull.builder()
                    .classificationMarking("U")
                    .dataMode(EquipmentRemarkFull.DataMode.TEST)
                    .idEquipment("EQUIPMENT-ID")
                    .source("Bluestaq")
                    .text("This is a remark")
                    .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                    .altRmkId("123456ABC")
                    .code("M")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .name("Remark name")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .type("Restriction")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(equipmentFull.eval()).contains(7)
        assertThat(equipmentFull.fpa()).contains("NOB")
        assertThat(equipmentFull.function()).contains("OCC")
        assertThat(equipmentFull.functPrimary()).contains("JG")
        assertThat(equipmentFull.geoidalMslSep()).contains(12.34)
        assertThat(equipmentFull.ident()).contains("FRIEND")
        assertThat(equipmentFull.idOperatingUnit()).contains("UNIT-ID")
        assertThat(equipmentFull.idParentEquipment()).contains("PARENT-EQUIPMENT-ID")
        assertThat(equipmentFull.idSite()).contains("SITE-ID")
        assertThat(equipmentFull.locReason()).contains("GR")
        assertThat(equipmentFull.milGrid()).contains("4QFJ12345678")
        assertThat(equipmentFull.milGridSys()).contains("UTM")
        assertThat(equipmentFull.nomen()).contains("AMPHIBIOUS WARFARE SHIP")
        assertThat(equipmentFull.operAreaPrimary()).contains("Territorial Sea")
        assertThat(equipmentFull.operStatus()).contains("OPR")
        assertThat(equipmentFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(equipmentFull.polSubdiv()).contains("IZ07")
        assertThat(equipmentFull.qtyOh()).contains(7)
        assertThat(equipmentFull.recStatus()).contains("A")
        assertThat(equipmentFull.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(equipmentFull.resProd()).contains("RT")
        assertThat(equipmentFull.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(equipmentFull.seqNum()).contains(5)
        assertThat(equipmentFull.srcIds().getOrNull()).containsExactly("SRC_ID_1")
        assertThat(equipmentFull.srcTyps().getOrNull()).containsExactly("AIRCRAFT")
        assertThat(equipmentFull.symCode()).contains("SOGPU----------")
        assertThat(equipmentFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(equipmentFull.updatedBy()).contains("some.user")
        assertThat(equipmentFull.utm()).contains("19P4390691376966")
        assertThat(equipmentFull.wac()).contains("0427")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val equipmentFull =
            EquipmentFull.builder()
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentFull.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altEqpId("ORIG-EQP-ID")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eqpCode("X12345")
                .eqpIdNum("001")
                .addEquipmentRemark(
                    EquipmentRemarkFull.builder()
                        .classificationMarking("U")
                        .dataMode(EquipmentRemarkFull.DataMode.TEST)
                        .idEquipment("EQUIPMENT-ID")
                        .source("Bluestaq")
                        .text("This is a remark")
                        .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                        .altRmkId("123456ABC")
                        .code("M")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .name("Remark name")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .type("Restriction")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .eval(7)
                .fpa("NOB")
                .function("OCC")
                .functPrimary("JG")
                .geoidalMslSep(12.34)
                .ident("FRIEND")
                .idOperatingUnit("UNIT-ID")
                .idParentEquipment("PARENT-EQUIPMENT-ID")
                .idSite("SITE-ID")
                .locReason("GR")
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .nomen("AMPHIBIOUS WARFARE SHIP")
                .operAreaPrimary("Territorial Sea")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .qtyOh(7)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .seqNum(5)
                .addSrcId("SRC_ID_1")
                .addSrcTyp("AIRCRAFT")
                .symCode("SOGPU----------")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val roundtrippedEquipmentFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(equipmentFull),
                jacksonTypeRef<EquipmentFull>(),
            )

        assertThat(roundtrippedEquipmentFull).isEqualTo(equipmentFull)
    }
}
