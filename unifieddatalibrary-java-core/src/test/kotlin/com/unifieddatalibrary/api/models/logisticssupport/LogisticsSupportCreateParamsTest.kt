// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.logisticssupport

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LogisticsSupportCreateParamsTest {

    @Test
    fun create() {
        LogisticsSupportCreateParams.builder()
            .classificationMarking("U")
            .dataMode(LogisticsSupportCreateParams.DataMode.TEST)
            .rptCreatedTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .source("Bluestaq")
            .id("LOGISTICS-SUPPORT-DETAILS UUID")
            .aircraftMds("CO17A")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .currIcao("KCOS")
            .etic(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .etmc(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .extSystemId("GDSSBL012307131347070165")
            .logisticAction("WA")
            .addLogisticsDiscrepancyInfo(
                LogisticsSupportCreateParams.LogisticsDiscrepancyInfo.builder()
                    .closureTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .discrepancyInfo(
                        "PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10"
                    )
                    .jcn("231942400")
                    .jobStTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .build()
            )
            .logisticsRecordId("L62017")
            .addLogisticsRemark(
                LogisticsRemarksIngest.builder()
                    .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .remark("EXAMPLE REMARK")
                    .username("JSMITH")
                    .build()
            )
            .addLogisticsSupportItem(
                LogisticsSupportCreateParams.LogisticsSupportItem.builder()
                    .cannibalized(true)
                    .deployPlanNumber("T89003")
                    .description("HOIST ADAPTER KIT")
                    .itemLastChangedDate(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .jobControlNumber("231942400")
                    .addLogisticsPart(
                        LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart.builder()
                            .figureNumber("3")
                            .indexNumber("4")
                            .locationVerifier("JANE DOE")
                            .addLogisticsStock(
                                LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart
                                    .LogisticsStock
                                    .builder()
                                    .quantity(4)
                                    .sourceIcao("PHIK")
                                    .stockCheckTime(
                                        OffsetDateTime.parse("2023-07-13T13:47:00.123Z")
                                    )
                                    .stockPoc("SMITH, JOHN J")
                                    .build()
                            )
                            .measurementUnitCode("EA")
                            .nationalStockNumber("5310-00-045-3299")
                            .partNumber("MS35338-42")
                            .requestVerifier("JOHN SMITH")
                            .supplyDocumentNumber("J223FU31908300")
                            .technicalOrderText("1C-17A-4")
                            .workUnitCode("5611UU001")
                            .build()
                    )
                    .addLogisticsRemark(
                        LogisticsRemarksIngest.builder()
                            .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                            .remark("EXAMPLE REMARK")
                            .username("JSMITH")
                            .build()
                    )
                    .addLogisticsSpecialty(
                        LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsSpecialty
                            .builder()
                            .firstName("JOHN")
                            .last4Ssn("9999")
                            .lastName("SMITH")
                            .rankCode("MAJ")
                            .roleTypeCode("TC")
                            .skillLevel(3)
                            .specialty("ELEN")
                            .build()
                    )
                    .quantity(1)
                    .readyTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .receivedTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .recoveryRequestTypeCode("E")
                    .redeployPlanNumber("T89003")
                    .redeployShipmentUnitId("X400LA31949108")
                    .requestNumber("89208")
                    .resupportFlag(true)
                    .shipmentUnitId("FB44273196X501XXX")
                    .siPoc("SMITH, JOHN J")
                    .sourceIcao("PHIK")
                    .build()
            )
            .addLogisticsTransportationPlan(
                LogisticsSupportCreateParams.LogisticsTransportationPlan.builder()
                    .actDepTime(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
                    .aircraftStatus("NMCMU")
                    .approxArrTime(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .cancelledDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .closedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .coordinator("SMITH, JOHN")
                    .coordinatorUnit("TACC")
                    .destinationIcao("YBCS")
                    .duration("086:20")
                    .estArrTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                    .estDepTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                    .lastChangedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .logisticMasterRecordId("L62126")
                    .addLogisticsSegment(
                        LogisticsSupportCreateParams.LogisticsTransportationPlan.LogisticsSegment
                            .builder()
                            .arrivalIcao("YBCS")
                            .departureIcao("PHIK")
                            .extMissionId("2001101RF01202307062205")
                            .idMission("EXAMPLE-UUID")
                            .itin(200)
                            .missionNumber("TAM308901196")
                            .missionType("SAAM")
                            .modeCode("A")
                            .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segAircraftMds("B7772E")
                            .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segmentNumber(3)
                            .segTailNumber("N819AX")
                            .build()
                    )
                    .addLogisticsTransportationPlansRemark(
                        LogisticsRemarksIngest.builder()
                            .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                            .remark("EXAMPLE REMARK")
                            .username("JSMITH")
                            .build()
                    )
                    .majcom("HQAMC")
                    .missionChange(false)
                    .numEnrouteStops(4)
                    .numTransLoads(3)
                    .originIcao("KATL")
                    .planDefinition("DEPLOY")
                    .plansNumber("T89002")
                    .serialNumber("9009209")
                    .statusCode("N")
                    .tpAircraftMds("C17A")
                    .tpTailNumber("99209")
                    .build()
            )
            .maintStatusCode("NMCMU")
            .mcTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .meTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .owner("EXAMPLE_OWNER")
            .reopenFlag(true)
            .rptClosedTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
            .suppIcao("KCOS")
            .tailNumber("99290")
            .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .build()
    }

    @Test
    fun body() {
        val params =
            LogisticsSupportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(LogisticsSupportCreateParams.DataMode.TEST)
                .rptCreatedTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .source("Bluestaq")
                .id("LOGISTICS-SUPPORT-DETAILS UUID")
                .aircraftMds("CO17A")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currIcao("KCOS")
                .etic(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .etmc(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .extSystemId("GDSSBL012307131347070165")
                .logisticAction("WA")
                .addLogisticsDiscrepancyInfo(
                    LogisticsSupportCreateParams.LogisticsDiscrepancyInfo.builder()
                        .closureTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                        .discrepancyInfo(
                            "PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10"
                        )
                        .jcn("231942400")
                        .jobStTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                        .build()
                )
                .logisticsRecordId("L62017")
                .addLogisticsRemark(
                    LogisticsRemarksIngest.builder()
                        .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                        .remark("EXAMPLE REMARK")
                        .username("JSMITH")
                        .build()
                )
                .addLogisticsSupportItem(
                    LogisticsSupportCreateParams.LogisticsSupportItem.builder()
                        .cannibalized(true)
                        .deployPlanNumber("T89003")
                        .description("HOIST ADAPTER KIT")
                        .itemLastChangedDate(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                        .jobControlNumber("231942400")
                        .addLogisticsPart(
                            LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart
                                .builder()
                                .figureNumber("3")
                                .indexNumber("4")
                                .locationVerifier("JANE DOE")
                                .addLogisticsStock(
                                    LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart
                                        .LogisticsStock
                                        .builder()
                                        .quantity(4)
                                        .sourceIcao("PHIK")
                                        .stockCheckTime(
                                            OffsetDateTime.parse("2023-07-13T13:47:00.123Z")
                                        )
                                        .stockPoc("SMITH, JOHN J")
                                        .build()
                                )
                                .measurementUnitCode("EA")
                                .nationalStockNumber("5310-00-045-3299")
                                .partNumber("MS35338-42")
                                .requestVerifier("JOHN SMITH")
                                .supplyDocumentNumber("J223FU31908300")
                                .technicalOrderText("1C-17A-4")
                                .workUnitCode("5611UU001")
                                .build()
                        )
                        .addLogisticsRemark(
                            LogisticsRemarksIngest.builder()
                                .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                                .remark("EXAMPLE REMARK")
                                .username("JSMITH")
                                .build()
                        )
                        .addLogisticsSpecialty(
                            LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsSpecialty
                                .builder()
                                .firstName("JOHN")
                                .last4Ssn("9999")
                                .lastName("SMITH")
                                .rankCode("MAJ")
                                .roleTypeCode("TC")
                                .skillLevel(3)
                                .specialty("ELEN")
                                .build()
                        )
                        .quantity(1)
                        .readyTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                        .receivedTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                        .recoveryRequestTypeCode("E")
                        .redeployPlanNumber("T89003")
                        .redeployShipmentUnitId("X400LA31949108")
                        .requestNumber("89208")
                        .resupportFlag(true)
                        .shipmentUnitId("FB44273196X501XXX")
                        .siPoc("SMITH, JOHN J")
                        .sourceIcao("PHIK")
                        .build()
                )
                .addLogisticsTransportationPlan(
                    LogisticsSupportCreateParams.LogisticsTransportationPlan.builder()
                        .actDepTime(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
                        .aircraftStatus("NMCMU")
                        .approxArrTime(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                        .cancelledDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                        .closedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                        .coordinator("SMITH, JOHN")
                        .coordinatorUnit("TACC")
                        .destinationIcao("YBCS")
                        .duration("086:20")
                        .estArrTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                        .estDepTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                        .lastChangedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                        .logisticMasterRecordId("L62126")
                        .addLogisticsSegment(
                            LogisticsSupportCreateParams.LogisticsTransportationPlan
                                .LogisticsSegment
                                .builder()
                                .arrivalIcao("YBCS")
                                .departureIcao("PHIK")
                                .extMissionId("2001101RF01202307062205")
                                .idMission("EXAMPLE-UUID")
                                .itin(200)
                                .missionNumber("TAM308901196")
                                .missionType("SAAM")
                                .modeCode("A")
                                .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                                .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                                .segAircraftMds("B7772E")
                                .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                                .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                                .segmentNumber(3)
                                .segTailNumber("N819AX")
                                .build()
                        )
                        .addLogisticsTransportationPlansRemark(
                            LogisticsRemarksIngest.builder()
                                .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                                .remark("EXAMPLE REMARK")
                                .username("JSMITH")
                                .build()
                        )
                        .majcom("HQAMC")
                        .missionChange(false)
                        .numEnrouteStops(4)
                        .numTransLoads(3)
                        .originIcao("KATL")
                        .planDefinition("DEPLOY")
                        .plansNumber("T89002")
                        .serialNumber("9009209")
                        .statusCode("N")
                        .tpAircraftMds("C17A")
                        .tpTailNumber("99209")
                        .build()
                )
                .maintStatusCode("NMCMU")
                .mcTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .meTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .owner("EXAMPLE_OWNER")
                .reopenFlag(true)
                .rptClosedTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .suppIcao("KCOS")
                .tailNumber("99290")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LogisticsSupportCreateParams.DataMode.TEST)
        assertThat(body.rptCreatedTime())
            .isEqualTo(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("LOGISTICS-SUPPORT-DETAILS UUID")
        assertThat(body.aircraftMds()).contains("CO17A")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.currIcao()).contains("KCOS")
        assertThat(body.etic()).contains(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.etmc()).contains(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.extSystemId()).contains("GDSSBL012307131347070165")
        assertThat(body.logisticAction()).contains("WA")
        assertThat(body.logisticsDiscrepancyInfos().getOrNull())
            .containsExactly(
                LogisticsSupportCreateParams.LogisticsDiscrepancyInfo.builder()
                    .closureTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .discrepancyInfo(
                        "PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10"
                    )
                    .jcn("231942400")
                    .jobStTime(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .build()
            )
        assertThat(body.logisticsRecordId()).contains("L62017")
        assertThat(body.logisticsRemarks().getOrNull())
            .containsExactly(
                LogisticsRemarksIngest.builder()
                    .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .remark("EXAMPLE REMARK")
                    .username("JSMITH")
                    .build()
            )
        assertThat(body.logisticsSupportItems().getOrNull())
            .containsExactly(
                LogisticsSupportCreateParams.LogisticsSupportItem.builder()
                    .cannibalized(true)
                    .deployPlanNumber("T89003")
                    .description("HOIST ADAPTER KIT")
                    .itemLastChangedDate(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .jobControlNumber("231942400")
                    .addLogisticsPart(
                        LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart.builder()
                            .figureNumber("3")
                            .indexNumber("4")
                            .locationVerifier("JANE DOE")
                            .addLogisticsStock(
                                LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsPart
                                    .LogisticsStock
                                    .builder()
                                    .quantity(4)
                                    .sourceIcao("PHIK")
                                    .stockCheckTime(
                                        OffsetDateTime.parse("2023-07-13T13:47:00.123Z")
                                    )
                                    .stockPoc("SMITH, JOHN J")
                                    .build()
                            )
                            .measurementUnitCode("EA")
                            .nationalStockNumber("5310-00-045-3299")
                            .partNumber("MS35338-42")
                            .requestVerifier("JOHN SMITH")
                            .supplyDocumentNumber("J223FU31908300")
                            .technicalOrderText("1C-17A-4")
                            .workUnitCode("5611UU001")
                            .build()
                    )
                    .addLogisticsRemark(
                        LogisticsRemarksIngest.builder()
                            .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                            .remark("EXAMPLE REMARK")
                            .username("JSMITH")
                            .build()
                    )
                    .addLogisticsSpecialty(
                        LogisticsSupportCreateParams.LogisticsSupportItem.LogisticsSpecialty
                            .builder()
                            .firstName("JOHN")
                            .last4Ssn("9999")
                            .lastName("SMITH")
                            .rankCode("MAJ")
                            .roleTypeCode("TC")
                            .skillLevel(3)
                            .specialty("ELEN")
                            .build()
                    )
                    .quantity(1)
                    .readyTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .receivedTime(OffsetDateTime.parse("2023-07-17T19:04:00.123Z"))
                    .recoveryRequestTypeCode("E")
                    .redeployPlanNumber("T89003")
                    .redeployShipmentUnitId("X400LA31949108")
                    .requestNumber("89208")
                    .resupportFlag(true)
                    .shipmentUnitId("FB44273196X501XXX")
                    .siPoc("SMITH, JOHN J")
                    .sourceIcao("PHIK")
                    .build()
            )
        assertThat(body.logisticsTransportationPlans().getOrNull())
            .containsExactly(
                LogisticsSupportCreateParams.LogisticsTransportationPlan.builder()
                    .actDepTime(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
                    .aircraftStatus("NMCMU")
                    .approxArrTime(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .cancelledDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .closedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .coordinator("SMITH, JOHN")
                    .coordinatorUnit("TACC")
                    .destinationIcao("YBCS")
                    .duration("086:20")
                    .estArrTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                    .estDepTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                    .lastChangedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                    .logisticMasterRecordId("L62126")
                    .addLogisticsSegment(
                        LogisticsSupportCreateParams.LogisticsTransportationPlan.LogisticsSegment
                            .builder()
                            .arrivalIcao("YBCS")
                            .departureIcao("PHIK")
                            .extMissionId("2001101RF01202307062205")
                            .idMission("EXAMPLE-UUID")
                            .itin(200)
                            .missionNumber("TAM308901196")
                            .missionType("SAAM")
                            .modeCode("A")
                            .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segAircraftMds("B7772E")
                            .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                            .segmentNumber(3)
                            .segTailNumber("N819AX")
                            .build()
                    )
                    .addLogisticsTransportationPlansRemark(
                        LogisticsRemarksIngest.builder()
                            .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                            .remark("EXAMPLE REMARK")
                            .username("JSMITH")
                            .build()
                    )
                    .majcom("HQAMC")
                    .missionChange(false)
                    .numEnrouteStops(4)
                    .numTransLoads(3)
                    .originIcao("KATL")
                    .planDefinition("DEPLOY")
                    .plansNumber("T89002")
                    .serialNumber("9009209")
                    .statusCode("N")
                    .tpAircraftMds("C17A")
                    .tpTailNumber("99209")
                    .build()
            )
        assertThat(body.maintStatusCode()).contains("NMCMU")
        assertThat(body.mcTime()).contains(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.meTime()).contains(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.owner()).contains("EXAMPLE_OWNER")
        assertThat(body.reopenFlag()).contains(true)
        assertThat(body.rptClosedTime()).contains(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.suppIcao()).contains("KCOS")
        assertThat(body.tailNumber()).contains("99290")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            LogisticsSupportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(LogisticsSupportCreateParams.DataMode.TEST)
                .rptCreatedTime(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LogisticsSupportCreateParams.DataMode.TEST)
        assertThat(body.rptCreatedTime())
            .isEqualTo(OffsetDateTime.parse("2023-07-13T13:47:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
