// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.deconflictset.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryListResponseTest {

    @Test
    fun create() {
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .eventStartTime(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
                .numWindows(250001)
                .source("Bluestaq")
                .id("123dd511-8ba5-47d3-9909-836149f87434")
                .calculationEndTime(OffsetDateTime.parse("2023-09-25T20:00:00.123Z"))
                .calculationId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .calculationStartTime(OffsetDateTime.parse("2023-09-25T18:00:00.123Z"))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDeconflictWindow(
                    HistoryListResponse.DeconflictWindow.builder()
                        .classificationMarking("U")
                        .dataMode(HistoryListResponse.DeconflictWindow.DataMode.TEST)
                        .eventStartTime(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
                        .source("Bluestaq")
                        .startTime(OffsetDateTime.parse("2023-07-19T00:00:00.001Z"))
                        .stopTime(OffsetDateTime.parse("2023-07-19T04:20:34.257Z"))
                        .id("123dd511-8ba5-47d3-9909-836149f87434")
                        .angleOfEntry(0.65)
                        .angleOfExit(0.65)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .entryCoords(
                            listOf(-191500.74728263554, -987729.0529358581, 6735105.853234725)
                        )
                        .eventType("LASER")
                        .exitCoords(
                            listOf(-361767.9896431379, -854021.6371921108, 6746208.020741149)
                        )
                        .idDeconflictSet("765dd511-8ba5-47d3-9909-836149f87da1")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .sourceDl("AXE")
                        .target("41715")
                        .targetType("VICTIM")
                        .victim("55914")
                        .windowType("CLOSED")
                        .build()
                )
                .addError("ERROR1")
                .addError("ERROR2")
                .eventEndTime(OffsetDateTime.parse("2023-09-28T20:49:37.812Z"))
                .eventType("LASER")
                .idLaserDeconflictRequest("026dd511-8ba5-47d3-9909-836149f87686")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .referenceFrame("J2000")
                .sourceDl("AXE")
                .addTag("TAG1")
                .addTag("TAG2")
                .transactionId("TRANSACTION-ID")
                .addWarning("WARNING1")
                .addWarning("WARNING2")
                .build()

        assertThat(historyListResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyListResponse.dataMode()).isEqualTo(HistoryListResponse.DataMode.TEST)
        assertThat(historyListResponse.eventStartTime())
            .isEqualTo(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
        assertThat(historyListResponse.numWindows()).isEqualTo(250001)
        assertThat(historyListResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyListResponse.id()).contains("123dd511-8ba5-47d3-9909-836149f87434")
        assertThat(historyListResponse.calculationEndTime())
            .contains(OffsetDateTime.parse("2023-09-25T20:00:00.123Z"))
        assertThat(historyListResponse.calculationId())
            .contains("3856c0a0-585f-4232-af5d-93bad320fac6")
        assertThat(historyListResponse.calculationStartTime())
            .contains(OffsetDateTime.parse("2023-09-25T18:00:00.123Z"))
        assertThat(historyListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.createdBy()).contains("some.user")
        assertThat(historyListResponse.deconflictWindows().getOrNull())
            .containsExactly(
                HistoryListResponse.DeconflictWindow.builder()
                    .classificationMarking("U")
                    .dataMode(HistoryListResponse.DeconflictWindow.DataMode.TEST)
                    .eventStartTime(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
                    .source("Bluestaq")
                    .startTime(OffsetDateTime.parse("2023-07-19T00:00:00.001Z"))
                    .stopTime(OffsetDateTime.parse("2023-07-19T04:20:34.257Z"))
                    .id("123dd511-8ba5-47d3-9909-836149f87434")
                    .angleOfEntry(0.65)
                    .angleOfExit(0.65)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .entryCoords(listOf(-191500.74728263554, -987729.0529358581, 6735105.853234725))
                    .eventType("LASER")
                    .exitCoords(listOf(-361767.9896431379, -854021.6371921108, 6746208.020741149))
                    .idDeconflictSet("765dd511-8ba5-47d3-9909-836149f87da1")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .sourceDl("AXE")
                    .target("41715")
                    .targetType("VICTIM")
                    .victim("55914")
                    .windowType("CLOSED")
                    .build()
            )
        assertThat(historyListResponse.errors().getOrNull()).containsExactly("ERROR1", "ERROR2")
        assertThat(historyListResponse.eventEndTime())
            .contains(OffsetDateTime.parse("2023-09-28T20:49:37.812Z"))
        assertThat(historyListResponse.eventType()).contains("LASER")
        assertThat(historyListResponse.idLaserDeconflictRequest())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(historyListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyListResponse.origNetwork()).contains("OPS1")
        assertThat(historyListResponse.referenceFrame()).contains("J2000")
        assertThat(historyListResponse.sourceDl()).contains("AXE")
        assertThat(historyListResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(historyListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(historyListResponse.warnings().getOrNull())
            .containsExactly("WARNING1", "WARNING2")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .eventStartTime(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
                .numWindows(250001)
                .source("Bluestaq")
                .id("123dd511-8ba5-47d3-9909-836149f87434")
                .calculationEndTime(OffsetDateTime.parse("2023-09-25T20:00:00.123Z"))
                .calculationId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .calculationStartTime(OffsetDateTime.parse("2023-09-25T18:00:00.123Z"))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDeconflictWindow(
                    HistoryListResponse.DeconflictWindow.builder()
                        .classificationMarking("U")
                        .dataMode(HistoryListResponse.DeconflictWindow.DataMode.TEST)
                        .eventStartTime(OffsetDateTime.parse("2023-09-27T20:49:37.812Z"))
                        .source("Bluestaq")
                        .startTime(OffsetDateTime.parse("2023-07-19T00:00:00.001Z"))
                        .stopTime(OffsetDateTime.parse("2023-07-19T04:20:34.257Z"))
                        .id("123dd511-8ba5-47d3-9909-836149f87434")
                        .angleOfEntry(0.65)
                        .angleOfExit(0.65)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .entryCoords(
                            listOf(-191500.74728263554, -987729.0529358581, 6735105.853234725)
                        )
                        .eventType("LASER")
                        .exitCoords(
                            listOf(-361767.9896431379, -854021.6371921108, 6746208.020741149)
                        )
                        .idDeconflictSet("765dd511-8ba5-47d3-9909-836149f87da1")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .sourceDl("AXE")
                        .target("41715")
                        .targetType("VICTIM")
                        .victim("55914")
                        .windowType("CLOSED")
                        .build()
                )
                .addError("ERROR1")
                .addError("ERROR2")
                .eventEndTime(OffsetDateTime.parse("2023-09-28T20:49:37.812Z"))
                .eventType("LASER")
                .idLaserDeconflictRequest("026dd511-8ba5-47d3-9909-836149f87686")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .referenceFrame("J2000")
                .sourceDl("AXE")
                .addTag("TAG1")
                .addTag("TAG2")
                .transactionId("TRANSACTION-ID")
                .addWarning("WARNING1")
                .addWarning("WARNING2")
                .build()

        val roundtrippedHistoryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyListResponse),
                jacksonTypeRef<HistoryListResponse>(),
            )

        assertThat(roundtrippedHistoryListResponse).isEqualTo(historyListResponse)
    }
}
