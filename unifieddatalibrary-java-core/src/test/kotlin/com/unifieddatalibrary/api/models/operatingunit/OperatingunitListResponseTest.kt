// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.operatingunit

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OperatingunitListResponseTest {

    @Test
    fun create() {
        val operatingunitListResponse =
            OperatingunitListResponse.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitListResponse.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altOperatingUnitId("32100000000021")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .countryCode("IQ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deployStatus("ND")
                .description("Description of unit")
                .divCat("5")
                .echelon("SHIP")
                .echelonTier("68")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .flagFlown("IZ")
                .fleetId("A")
                .force("NV")
                .forceName("FORCE-NAME")
                .fpa("EOB")
                .functRole("MIL")
                .geoidalMslSep(12.34)
                .idContact("CONTACT-ID")
                .ident("FRIEND")
                .idLocation("LOCATION-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .idOrganization("ORGANIZATION-ID")
                .lat(45.23)
                .locName("LOCATION_NAME")
                .locReason("GR")
                .lon(179.1)
                .masterUnit(true)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("W6")
                .msnPrimarySpecialty("QK")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .stylizedUnit(true)
                .symCode("SOGPU----------")
                .unitIdentifier("AZXAZ12345")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        assertThat(operatingunitListResponse.classificationMarking()).isEqualTo("U")
        assertThat(operatingunitListResponse.dataMode())
            .isEqualTo(OperatingunitListResponse.DataMode.TEST)
        assertThat(operatingunitListResponse.name()).isEqualTo("SOME_NAME")
        assertThat(operatingunitListResponse.source()).isEqualTo("some.user")
        assertThat(operatingunitListResponse.airDefArea()).contains("AL006")
        assertThat(operatingunitListResponse.allegiance()).contains("OTHR")
        assertThat(operatingunitListResponse.altAllegiance()).contains("HL")
        assertThat(operatingunitListResponse.altCountryCode()).contains("IZ")
        assertThat(operatingunitListResponse.altOperatingUnitId()).contains("32100000000021")
        assertThat(operatingunitListResponse.classRating()).contains("1")
        assertThat(operatingunitListResponse.condition()).contains("RDY")
        assertThat(operatingunitListResponse.conditionAvail()).contains("A")
        assertThat(operatingunitListResponse.coord()).contains("340000000N0430000000E")
        assertThat(operatingunitListResponse.coordDatum()).contains("WGS")
        assertThat(operatingunitListResponse.coordDerivAcc()).contains(12.345)
        assertThat(operatingunitListResponse.countryCode()).contains("IQ")
        assertThat(operatingunitListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(operatingunitListResponse.createdBy()).contains("some.user")
        assertThat(operatingunitListResponse.deployStatus()).contains("ND")
        assertThat(operatingunitListResponse.description()).contains("Description of unit")
        assertThat(operatingunitListResponse.divCat()).contains("5")
        assertThat(operatingunitListResponse.echelon()).contains("SHIP")
        assertThat(operatingunitListResponse.echelonTier()).contains("68")
        assertThat(operatingunitListResponse.elevMsl()).contains(123.45)
        assertThat(operatingunitListResponse.elevMslConfLvl()).contains(50)
        assertThat(operatingunitListResponse.elevMslDerivAcc()).contains(12.34)
        assertThat(operatingunitListResponse.eval()).contains(7)
        assertThat(operatingunitListResponse.flagFlown()).contains("IZ")
        assertThat(operatingunitListResponse.fleetId()).contains("A")
        assertThat(operatingunitListResponse.force()).contains("NV")
        assertThat(operatingunitListResponse.forceName()).contains("FORCE-NAME")
        assertThat(operatingunitListResponse.fpa()).contains("EOB")
        assertThat(operatingunitListResponse.functRole()).contains("MIL")
        assertThat(operatingunitListResponse.geoidalMslSep()).contains(12.34)
        assertThat(operatingunitListResponse.idContact()).contains("CONTACT-ID")
        assertThat(operatingunitListResponse.ident()).contains("FRIEND")
        assertThat(operatingunitListResponse.idLocation()).contains("LOCATION-ID")
        assertThat(operatingunitListResponse.idOperatingUnit()).contains("OPERATINGUNIT-ID")
        assertThat(operatingunitListResponse.idOrganization()).contains("ORGANIZATION-ID")
        assertThat(operatingunitListResponse.lat()).contains(45.23)
        assertThat(operatingunitListResponse.locName()).contains("LOCATION_NAME")
        assertThat(operatingunitListResponse.locReason()).contains("GR")
        assertThat(operatingunitListResponse.lon()).contains(179.1)
        assertThat(operatingunitListResponse.masterUnit()).contains(true)
        assertThat(operatingunitListResponse.milGrid()).contains("4QFJ12345678")
        assertThat(operatingunitListResponse.milGridSys()).contains("UTM")
        assertThat(operatingunitListResponse.msnPrimary()).contains("W6")
        assertThat(operatingunitListResponse.msnPrimarySpecialty()).contains("QK")
        assertThat(operatingunitListResponse.operStatus()).contains("OPR")
        assertThat(operatingunitListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(operatingunitListResponse.polSubdiv()).contains("IZ07")
        assertThat(operatingunitListResponse.recStatus()).contains("A")
        assertThat(operatingunitListResponse.referenceDoc())
            .contains("Provider Reference Documentation")
        assertThat(operatingunitListResponse.resProd()).contains("RT")
        assertThat(operatingunitListResponse.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(operatingunitListResponse.stylizedUnit()).contains(true)
        assertThat(operatingunitListResponse.symCode()).contains("SOGPU----------")
        assertThat(operatingunitListResponse.unitIdentifier()).contains("AZXAZ12345")
        assertThat(operatingunitListResponse.utm()).contains("19P4390691376966")
        assertThat(operatingunitListResponse.wac()).contains("0427")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val operatingunitListResponse =
            OperatingunitListResponse.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitListResponse.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altOperatingUnitId("32100000000021")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .countryCode("IQ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deployStatus("ND")
                .description("Description of unit")
                .divCat("5")
                .echelon("SHIP")
                .echelonTier("68")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .flagFlown("IZ")
                .fleetId("A")
                .force("NV")
                .forceName("FORCE-NAME")
                .fpa("EOB")
                .functRole("MIL")
                .geoidalMslSep(12.34)
                .idContact("CONTACT-ID")
                .ident("FRIEND")
                .idLocation("LOCATION-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .idOrganization("ORGANIZATION-ID")
                .lat(45.23)
                .locName("LOCATION_NAME")
                .locReason("GR")
                .lon(179.1)
                .masterUnit(true)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("W6")
                .msnPrimarySpecialty("QK")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .stylizedUnit(true)
                .symCode("SOGPU----------")
                .unitIdentifier("AZXAZ12345")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val roundtrippedOperatingunitListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(operatingunitListResponse),
                jacksonTypeRef<OperatingunitListResponse>(),
            )

        assertThat(roundtrippedOperatingunitListResponse).isEqualTo(operatingunitListResponse)
    }
}
