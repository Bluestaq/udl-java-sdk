// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.elsets

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ElsetIngestTest {

    @Test
    fun create() {
        val elsetIngest =
            ElsetIngest.builder()
                .classificationMarking("U")
                .dataMode(ElsetIngest.DataMode.TEST)
                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .agom(0.0126)
                .algorithm("Example algorithm")
                .apogee(1.1)
                .argOfPerigee(1.1)
                .ballisticCoeff(0.00815)
                .bStar(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("Example description")
                .eccentricity(0.333)
                .ephemType(1L)
                .idElset("ELSET-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                .inclination(45.1)
                .line1("Example line1")
                .line2("Example line2")
                .meanAnomaly(179.1)
                .meanMotion(1.1)
                .meanMotionDDot(1.1)
                .meanMotionDot(1.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .perigee(1.1)
                .period(1.1)
                .raan(1.1)
                .rawFileUri("Example URI")
                .revNo(111)
                .satNo(12)
                .semiMajorAxis(1.1)
                .addSourcedData("OBSERVATION_UUID1")
                .addSourcedData("OBSERVATION_UUID2")
                .addSourcedDataType(ElsetIngest.SourcedDataType.RADAR)
                .addSourcedDataType(ElsetIngest.SourcedDataType.RF)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .transactionId("TRANSACTION-ID")
                .uct(false)
                .build()

        assertThat(elsetIngest.classificationMarking()).isEqualTo("U")
        assertThat(elsetIngest.dataMode()).isEqualTo(ElsetIngest.DataMode.TEST)
        assertThat(elsetIngest.epoch())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(elsetIngest.source()).isEqualTo("Bluestaq")
        assertThat(elsetIngest.agom()).contains(0.0126)
        assertThat(elsetIngest.algorithm()).contains("Example algorithm")
        assertThat(elsetIngest.apogee()).contains(1.1)
        assertThat(elsetIngest.argOfPerigee()).contains(1.1)
        assertThat(elsetIngest.ballisticCoeff()).contains(0.00815)
        assertThat(elsetIngest.bStar()).contains(1.1)
        assertThat(elsetIngest.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(elsetIngest.createdBy()).contains("some.user")
        assertThat(elsetIngest.descriptor()).contains("Example description")
        assertThat(elsetIngest.eccentricity()).contains(0.333)
        assertThat(elsetIngest.ephemType()).contains(1L)
        assertThat(elsetIngest.idElset()).contains("ELSET-ID")
        assertThat(elsetIngest.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(elsetIngest.idOrbitDetermination())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(elsetIngest.inclination()).contains(45.1)
        assertThat(elsetIngest.line1()).contains("Example line1")
        assertThat(elsetIngest.line2()).contains("Example line2")
        assertThat(elsetIngest.meanAnomaly()).contains(179.1)
        assertThat(elsetIngest.meanMotion()).contains(1.1)
        assertThat(elsetIngest.meanMotionDDot()).contains(1.1)
        assertThat(elsetIngest.meanMotionDot()).contains(1.1)
        assertThat(elsetIngest.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(elsetIngest.origNetwork()).contains("ORIG")
        assertThat(elsetIngest.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(elsetIngest.perigee()).contains(1.1)
        assertThat(elsetIngest.period()).contains(1.1)
        assertThat(elsetIngest.raan()).contains(1.1)
        assertThat(elsetIngest.rawFileUri()).contains("Example URI")
        assertThat(elsetIngest.revNo()).contains(111)
        assertThat(elsetIngest.satNo()).contains(12)
        assertThat(elsetIngest.semiMajorAxis()).contains(1.1)
        assertThat(elsetIngest.sourcedData().getOrNull())
            .containsExactly("OBSERVATION_UUID1", "OBSERVATION_UUID2")
        assertThat(elsetIngest.sourcedDataTypes().getOrNull())
            .containsExactly(ElsetIngest.SourcedDataType.RADAR, ElsetIngest.SourcedDataType.RF)
        assertThat(elsetIngest.sourceDl()).contains("AXE")
        assertThat(elsetIngest.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(elsetIngest.transactionId()).contains("TRANSACTION-ID")
        assertThat(elsetIngest.uct()).contains(false)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val elsetIngest =
            ElsetIngest.builder()
                .classificationMarking("U")
                .dataMode(ElsetIngest.DataMode.TEST)
                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .agom(0.0126)
                .algorithm("Example algorithm")
                .apogee(1.1)
                .argOfPerigee(1.1)
                .ballisticCoeff(0.00815)
                .bStar(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("Example description")
                .eccentricity(0.333)
                .ephemType(1L)
                .idElset("ELSET-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                .inclination(45.1)
                .line1("Example line1")
                .line2("Example line2")
                .meanAnomaly(179.1)
                .meanMotion(1.1)
                .meanMotionDDot(1.1)
                .meanMotionDot(1.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .perigee(1.1)
                .period(1.1)
                .raan(1.1)
                .rawFileUri("Example URI")
                .revNo(111)
                .satNo(12)
                .semiMajorAxis(1.1)
                .addSourcedData("OBSERVATION_UUID1")
                .addSourcedData("OBSERVATION_UUID2")
                .addSourcedDataType(ElsetIngest.SourcedDataType.RADAR)
                .addSourcedDataType(ElsetIngest.SourcedDataType.RF)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .transactionId("TRANSACTION-ID")
                .uct(false)
                .build()

        val roundtrippedElsetIngest =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(elsetIngest),
                jacksonTypeRef<ElsetIngest>(),
            )

        assertThat(roundtrippedElsetIngest).isEqualTo(elsetIngest)
    }
}
