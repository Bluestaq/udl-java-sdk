// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.rfobservation

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RfObservationListResponseTest {

    @Test
    fun create() {
        val rfObservationListResponse =
            RfObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(RfObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("RF")
                .id("RFOBSERVATION-ID")
                .antennaName("Antenna1")
                .azimuth(10.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(2.1)
                .bandwidth(10.1)
                .baudRate(10.1)
                .bitErrorRate(10.1)
                .carrierStandard("DVB-S2")
                .channel(10)
                .collectionMode("SURVEY")
                .confidence(10.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("descriptor")
                .detectionStatus("DETECTED")
                .eirp(10.1)
                .elevation(10.1)
                .elevationMeasured(true)
                .elevationRate(10.1)
                .elevationUnc(10.1)
                .elnot("Ex. ELINT")
                .endFrequency(10.1)
                .frequency(10.1)
                .frequencyShift(10.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .incoming(false)
                .innerCodingRate(7)
                .maxPsd(10.1)
                .minPsd(10.1)
                .modulation("Auto")
                .noisePwrDensity(10.1)
                .nominalBandwidth(10.1)
                .nominalEirp(10.1)
                .nominalFrequency(10.1)
                .nominalPowerOverNoise(10.1)
                .nominalSnr(10.1)
                .origCountry("AU")
                .origin("THIRD_PARTY_DATASOURCE")
                .origMarking("U")
                .origNetwork("OPS1")
                .origObjectId("ORIG-OBJECT-ID")
                .origSensorId("ORIG-SENSOR-ID")
                .outerCodingRate(4)
                .peak(false)
                .pgri(10.1)
                .polarity(10.1)
                .polarityType(RfObservationListResponse.PolarityType.H)
                .powerOverNoise(10.1)
                .range(10.1)
                .rangeMeasured(true)
                .rangeRate(10.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(10.1)
                .rangeUnc(10.1)
                .rawFileUri("Example URI")
                .referenceLevel(10.1)
                .relativeCarrierPower(10.1)
                .relativeNoiseFloor(10.1)
                .resolutionBandwidth(10.1)
                .satNo(32258)
                .senalt(10.1)
                .senlat(45.2)
                .senlon(80.3)
                .snr(10.1)
                .sourceDl("AXE")
                .spectrumAnalyzerPower(10.1)
                .startFrequency(10.1)
                .switchPoint(10)
                .symbolToNoiseRatio(10.1)
                .taskId("TASK-ID")
                .trackId("TRACK-ID")
                .trackRange(10.1)
                .transactionId("TRANSACTION-ID")
                .transmitFilterRollOff(10.1)
                .transmitFilterType("RRC")
                .transponder("TRANSPONDER-A")
                .uct(false)
                .url("https://some-url")
                .videoBandwidth(10.1)
                .build()

        assertThat(rfObservationListResponse.classificationMarking()).isEqualTo("U")
        assertThat(rfObservationListResponse.dataMode())
            .isEqualTo(RfObservationListResponse.DataMode.TEST)
        assertThat(rfObservationListResponse.obTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(rfObservationListResponse.source()).isEqualTo("Bluestaq")
        assertThat(rfObservationListResponse.type()).isEqualTo("RF")
        assertThat(rfObservationListResponse.id()).contains("RFOBSERVATION-ID")
        assertThat(rfObservationListResponse.antennaName()).contains("Antenna1")
        assertThat(rfObservationListResponse.azimuth()).contains(10.1)
        assertThat(rfObservationListResponse.azimuthMeasured()).contains(true)
        assertThat(rfObservationListResponse.azimuthRate()).contains(1.1)
        assertThat(rfObservationListResponse.azimuthUnc()).contains(2.1)
        assertThat(rfObservationListResponse.bandwidth()).contains(10.1)
        assertThat(rfObservationListResponse.baudRate()).contains(10.1)
        assertThat(rfObservationListResponse.bitErrorRate()).contains(10.1)
        assertThat(rfObservationListResponse.carrierStandard()).contains("DVB-S2")
        assertThat(rfObservationListResponse.channel()).contains(10)
        assertThat(rfObservationListResponse.collectionMode()).contains("SURVEY")
        assertThat(rfObservationListResponse.confidence()).contains(10.1)
        assertThat(rfObservationListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(rfObservationListResponse.createdBy()).contains("some.user")
        assertThat(rfObservationListResponse.descriptor()).contains("descriptor")
        assertThat(rfObservationListResponse.detectionStatus()).contains("DETECTED")
        assertThat(rfObservationListResponse.eirp()).contains(10.1)
        assertThat(rfObservationListResponse.elevation()).contains(10.1)
        assertThat(rfObservationListResponse.elevationMeasured()).contains(true)
        assertThat(rfObservationListResponse.elevationRate()).contains(10.1)
        assertThat(rfObservationListResponse.elevationUnc()).contains(10.1)
        assertThat(rfObservationListResponse.elnot()).contains("Ex. ELINT")
        assertThat(rfObservationListResponse.endFrequency()).contains(10.1)
        assertThat(rfObservationListResponse.frequency()).contains(10.1)
        assertThat(rfObservationListResponse.frequencyShift()).contains(10.1)
        assertThat(rfObservationListResponse.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(rfObservationListResponse.idSensor()).contains("SENSOR-ID")
        assertThat(rfObservationListResponse.incoming()).contains(false)
        assertThat(rfObservationListResponse.innerCodingRate()).contains(7)
        assertThat(rfObservationListResponse.maxPsd()).contains(10.1)
        assertThat(rfObservationListResponse.minPsd()).contains(10.1)
        assertThat(rfObservationListResponse.modulation()).contains("Auto")
        assertThat(rfObservationListResponse.noisePwrDensity()).contains(10.1)
        assertThat(rfObservationListResponse.nominalBandwidth()).contains(10.1)
        assertThat(rfObservationListResponse.nominalEirp()).contains(10.1)
        assertThat(rfObservationListResponse.nominalFrequency()).contains(10.1)
        assertThat(rfObservationListResponse.nominalPowerOverNoise()).contains(10.1)
        assertThat(rfObservationListResponse.nominalSnr()).contains(10.1)
        assertThat(rfObservationListResponse.origCountry()).contains("AU")
        assertThat(rfObservationListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(rfObservationListResponse.origMarking()).contains("U")
        assertThat(rfObservationListResponse.origNetwork()).contains("OPS1")
        assertThat(rfObservationListResponse.origObjectId()).contains("ORIG-OBJECT-ID")
        assertThat(rfObservationListResponse.origSensorId()).contains("ORIG-SENSOR-ID")
        assertThat(rfObservationListResponse.outerCodingRate()).contains(4)
        assertThat(rfObservationListResponse.peak()).contains(false)
        assertThat(rfObservationListResponse.pgri()).contains(10.1)
        assertThat(rfObservationListResponse.polarity()).contains(10.1)
        assertThat(rfObservationListResponse.polarityType())
            .contains(RfObservationListResponse.PolarityType.H)
        assertThat(rfObservationListResponse.powerOverNoise()).contains(10.1)
        assertThat(rfObservationListResponse.range()).contains(10.1)
        assertThat(rfObservationListResponse.rangeMeasured()).contains(true)
        assertThat(rfObservationListResponse.rangeRate()).contains(10.1)
        assertThat(rfObservationListResponse.rangeRateMeasured()).contains(true)
        assertThat(rfObservationListResponse.rangeRateUnc()).contains(10.1)
        assertThat(rfObservationListResponse.rangeUnc()).contains(10.1)
        assertThat(rfObservationListResponse.rawFileUri()).contains("Example URI")
        assertThat(rfObservationListResponse.referenceLevel()).contains(10.1)
        assertThat(rfObservationListResponse.relativeCarrierPower()).contains(10.1)
        assertThat(rfObservationListResponse.relativeNoiseFloor()).contains(10.1)
        assertThat(rfObservationListResponse.resolutionBandwidth()).contains(10.1)
        assertThat(rfObservationListResponse.satNo()).contains(32258)
        assertThat(rfObservationListResponse.senalt()).contains(10.1)
        assertThat(rfObservationListResponse.senlat()).contains(45.2)
        assertThat(rfObservationListResponse.senlon()).contains(80.3)
        assertThat(rfObservationListResponse.snr()).contains(10.1)
        assertThat(rfObservationListResponse.sourceDl()).contains("AXE")
        assertThat(rfObservationListResponse.spectrumAnalyzerPower()).contains(10.1)
        assertThat(rfObservationListResponse.startFrequency()).contains(10.1)
        assertThat(rfObservationListResponse.switchPoint()).contains(10)
        assertThat(rfObservationListResponse.symbolToNoiseRatio()).contains(10.1)
        assertThat(rfObservationListResponse.taskId()).contains("TASK-ID")
        assertThat(rfObservationListResponse.trackId()).contains("TRACK-ID")
        assertThat(rfObservationListResponse.trackRange()).contains(10.1)
        assertThat(rfObservationListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(rfObservationListResponse.transmitFilterRollOff()).contains(10.1)
        assertThat(rfObservationListResponse.transmitFilterType()).contains("RRC")
        assertThat(rfObservationListResponse.transponder()).contains("TRANSPONDER-A")
        assertThat(rfObservationListResponse.uct()).contains(false)
        assertThat(rfObservationListResponse.url()).contains("https://some-url")
        assertThat(rfObservationListResponse.videoBandwidth()).contains(10.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val rfObservationListResponse =
            RfObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(RfObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("RF")
                .id("RFOBSERVATION-ID")
                .antennaName("Antenna1")
                .azimuth(10.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(2.1)
                .bandwidth(10.1)
                .baudRate(10.1)
                .bitErrorRate(10.1)
                .carrierStandard("DVB-S2")
                .channel(10)
                .collectionMode("SURVEY")
                .confidence(10.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("descriptor")
                .detectionStatus("DETECTED")
                .eirp(10.1)
                .elevation(10.1)
                .elevationMeasured(true)
                .elevationRate(10.1)
                .elevationUnc(10.1)
                .elnot("Ex. ELINT")
                .endFrequency(10.1)
                .frequency(10.1)
                .frequencyShift(10.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .incoming(false)
                .innerCodingRate(7)
                .maxPsd(10.1)
                .minPsd(10.1)
                .modulation("Auto")
                .noisePwrDensity(10.1)
                .nominalBandwidth(10.1)
                .nominalEirp(10.1)
                .nominalFrequency(10.1)
                .nominalPowerOverNoise(10.1)
                .nominalSnr(10.1)
                .origCountry("AU")
                .origin("THIRD_PARTY_DATASOURCE")
                .origMarking("U")
                .origNetwork("OPS1")
                .origObjectId("ORIG-OBJECT-ID")
                .origSensorId("ORIG-SENSOR-ID")
                .outerCodingRate(4)
                .peak(false)
                .pgri(10.1)
                .polarity(10.1)
                .polarityType(RfObservationListResponse.PolarityType.H)
                .powerOverNoise(10.1)
                .range(10.1)
                .rangeMeasured(true)
                .rangeRate(10.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(10.1)
                .rangeUnc(10.1)
                .rawFileUri("Example URI")
                .referenceLevel(10.1)
                .relativeCarrierPower(10.1)
                .relativeNoiseFloor(10.1)
                .resolutionBandwidth(10.1)
                .satNo(32258)
                .senalt(10.1)
                .senlat(45.2)
                .senlon(80.3)
                .snr(10.1)
                .sourceDl("AXE")
                .spectrumAnalyzerPower(10.1)
                .startFrequency(10.1)
                .switchPoint(10)
                .symbolToNoiseRatio(10.1)
                .taskId("TASK-ID")
                .trackId("TRACK-ID")
                .trackRange(10.1)
                .transactionId("TRANSACTION-ID")
                .transmitFilterRollOff(10.1)
                .transmitFilterType("RRC")
                .transponder("TRANSPONDER-A")
                .uct(false)
                .url("https://some-url")
                .videoBandwidth(10.1)
                .build()

        val roundtrippedRfObservationListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(rfObservationListResponse),
                jacksonTypeRef<RfObservationListResponse>(),
            )

        assertThat(roundtrippedRfObservationListResponse).isEqualTo(rfObservationListResponse)
    }
}
