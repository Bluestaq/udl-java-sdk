// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.rfobservation

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RfObservationCreateParamsTest {

    @Test
    fun create() {
        RfObservationCreateParams.builder()
            .classificationMarking("U")
            .dataMode(RfObservationCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .type("RF")
            .id("RFOBSERVATION-ID")
            .antennaName("Antenna1")
            .azimuth(10.1)
            .azimuthMeasured(true)
            .azimuthRate(1.1)
            .azimuthUnc(2.1)
            .bandwidth(10.1)
            .baudRate(10.1)
            .addBaudRate(1.1)
            .addBaudRate(2.2)
            .bitErrorRate(10.1)
            .carrierStandard("DVB-S2")
            .channel(10)
            .addChipRate(1.1)
            .addChipRate(2.2)
            .addCodeFill("TAG1")
            .addCodeFill("TAG2")
            .addCodeLength(1.1)
            .addCodeLength(2.2)
            .addCodeTap("TAG1")
            .addCodeTap("TAG2")
            .collectionMode("SURVEY")
            .confidence(10.1)
            .addConfidence(1.1)
            .addConfidence(2.2)
            .addConstellationXPoint(1.1)
            .addConstellationXPoint(2.2)
            .addConstellationYPoint(1.1)
            .addConstellationYPoint(2.2)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .descriptor("descriptor")
            .detectionStatus("DETECTED")
            .addDetectionStatus("DETECTED")
            .eirp(10.1)
            .elevation(10.1)
            .elevationMeasured(true)
            .elevationRate(10.1)
            .elevationUnc(10.1)
            .elnot("Ex. ELINT")
            .endFrequency(10.1)
            .addFrequency(1.1)
            .addFrequency(2.2)
            .frequency(10.1)
            .frequencyShift(10.1)
            .idOnOrbit("ONORBIT-ID")
            .idSensor("SENSOR-ID")
            .incoming(false)
            .innerCodingRate(7)
            .maxPsd(10.1)
            .minPsd(10.1)
            .modulation("Auto")
            .noisePwrDensity(10.1)
            .nominalBandwidth(10.1)
            .nominalEirp(10.1)
            .nominalFrequency(10.1)
            .nominalPowerOverNoise(10.1)
            .nominalSnr(10.1)
            .origCountry("AU")
            .origin("THIRD_PARTY_DATASOURCE")
            .origMarking("U")
            .origNetwork("OPS1")
            .origObjectId("ORIG-OBJECT-ID")
            .origSensorId("ORIG-SENSOR-ID")
            .outerCodingRate(4)
            .peak(false)
            .pgri(10.1)
            .addPnOrder(1)
            .addPnOrder(2)
            .polarity(10.1)
            .polarityType(RfObservationCreateParams.PolarityType.H)
            .powerOverNoise(10.1)
            .addPower(1.1)
            .addPower(2.2)
            .range(10.1)
            .rangeMeasured(true)
            .rangeRate(10.1)
            .rangeRateMeasured(true)
            .rangeRateUnc(10.1)
            .rangeUnc(10.1)
            .rawFileUri("Example URI")
            .referenceLevel(10.1)
            .relativeCarrierPower(10.1)
            .relativeNoiseFloor(10.1)
            .resolutionBandwidth(10.1)
            .satNo(32258)
            .senalt(10.1)
            .senlat(45.2)
            .senlon(80.3)
            .addSignalId("ID1")
            .addSignalId("ID2")
            .snr(10.1)
            .addSnr(1.1)
            .addSnr(2.2)
            .sourceDl("AXE")
            .spectrumAnalyzerPower(10.1)
            .startFrequency(10.1)
            .switchPoint(10)
            .symbolToNoiseRatio(10.1)
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .taskId("TASK-ID")
            .addTelemetryId("ID1")
            .addTelemetryId("ID2")
            .trackId("TRACK-ID")
            .trackRange(10.1)
            .transactionId("TRANSACTION-ID")
            .transmitFilterRollOff(10.1)
            .transmitFilterType("RRC")
            .transponder("TRANSPONDER-A")
            .uct(false)
            .url("https://some-url")
            .videoBandwidth(10.1)
            .build()
    }

    @Test
    fun body() {
        val params =
            RfObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(RfObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("RF")
                .id("RFOBSERVATION-ID")
                .antennaName("Antenna1")
                .azimuth(10.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(2.1)
                .bandwidth(10.1)
                .baudRate(10.1)
                .addBaudRate(1.1)
                .addBaudRate(2.2)
                .bitErrorRate(10.1)
                .carrierStandard("DVB-S2")
                .channel(10)
                .addChipRate(1.1)
                .addChipRate(2.2)
                .addCodeFill("TAG1")
                .addCodeFill("TAG2")
                .addCodeLength(1.1)
                .addCodeLength(2.2)
                .addCodeTap("TAG1")
                .addCodeTap("TAG2")
                .collectionMode("SURVEY")
                .confidence(10.1)
                .addConfidence(1.1)
                .addConfidence(2.2)
                .addConstellationXPoint(1.1)
                .addConstellationXPoint(2.2)
                .addConstellationYPoint(1.1)
                .addConstellationYPoint(2.2)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("descriptor")
                .detectionStatus("DETECTED")
                .addDetectionStatus("DETECTED")
                .eirp(10.1)
                .elevation(10.1)
                .elevationMeasured(true)
                .elevationRate(10.1)
                .elevationUnc(10.1)
                .elnot("Ex. ELINT")
                .endFrequency(10.1)
                .addFrequency(1.1)
                .addFrequency(2.2)
                .frequency(10.1)
                .frequencyShift(10.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .incoming(false)
                .innerCodingRate(7)
                .maxPsd(10.1)
                .minPsd(10.1)
                .modulation("Auto")
                .noisePwrDensity(10.1)
                .nominalBandwidth(10.1)
                .nominalEirp(10.1)
                .nominalFrequency(10.1)
                .nominalPowerOverNoise(10.1)
                .nominalSnr(10.1)
                .origCountry("AU")
                .origin("THIRD_PARTY_DATASOURCE")
                .origMarking("U")
                .origNetwork("OPS1")
                .origObjectId("ORIG-OBJECT-ID")
                .origSensorId("ORIG-SENSOR-ID")
                .outerCodingRate(4)
                .peak(false)
                .pgri(10.1)
                .addPnOrder(1)
                .addPnOrder(2)
                .polarity(10.1)
                .polarityType(RfObservationCreateParams.PolarityType.H)
                .powerOverNoise(10.1)
                .addPower(1.1)
                .addPower(2.2)
                .range(10.1)
                .rangeMeasured(true)
                .rangeRate(10.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(10.1)
                .rangeUnc(10.1)
                .rawFileUri("Example URI")
                .referenceLevel(10.1)
                .relativeCarrierPower(10.1)
                .relativeNoiseFloor(10.1)
                .resolutionBandwidth(10.1)
                .satNo(32258)
                .senalt(10.1)
                .senlat(45.2)
                .senlon(80.3)
                .addSignalId("ID1")
                .addSignalId("ID2")
                .snr(10.1)
                .addSnr(1.1)
                .addSnr(2.2)
                .sourceDl("AXE")
                .spectrumAnalyzerPower(10.1)
                .startFrequency(10.1)
                .switchPoint(10)
                .symbolToNoiseRatio(10.1)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .taskId("TASK-ID")
                .addTelemetryId("ID1")
                .addTelemetryId("ID2")
                .trackId("TRACK-ID")
                .trackRange(10.1)
                .transactionId("TRANSACTION-ID")
                .transmitFilterRollOff(10.1)
                .transmitFilterType("RRC")
                .transponder("TRANSPONDER-A")
                .uct(false)
                .url("https://some-url")
                .videoBandwidth(10.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(RfObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("RF")
        assertThat(body.id()).contains("RFOBSERVATION-ID")
        assertThat(body.antennaName()).contains("Antenna1")
        assertThat(body.azimuth()).contains(10.1)
        assertThat(body.azimuthMeasured()).contains(true)
        assertThat(body.azimuthRate()).contains(1.1)
        assertThat(body.azimuthUnc()).contains(2.1)
        assertThat(body.bandwidth()).contains(10.1)
        assertThat(body.baudRate()).contains(10.1)
        assertThat(body.baudRates().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.bitErrorRate()).contains(10.1)
        assertThat(body.carrierStandard()).contains("DVB-S2")
        assertThat(body.channel()).contains(10)
        assertThat(body.chipRates().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.codeFills().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.codeLengths().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.codeTaps().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.collectionMode()).contains("SURVEY")
        assertThat(body.confidence()).contains(10.1)
        assertThat(body.confidences().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.constellationXPoints().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.constellationYPoints().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.descriptor()).contains("descriptor")
        assertThat(body.detectionStatus()).contains("DETECTED")
        assertThat(body.detectionStatuses().getOrNull()).containsExactly("DETECTED")
        assertThat(body.eirp()).contains(10.1)
        assertThat(body.elevation()).contains(10.1)
        assertThat(body.elevationMeasured()).contains(true)
        assertThat(body.elevationRate()).contains(10.1)
        assertThat(body.elevationUnc()).contains(10.1)
        assertThat(body.elnot()).contains("Ex. ELINT")
        assertThat(body.endFrequency()).contains(10.1)
        assertThat(body.frequencies().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.frequency()).contains(10.1)
        assertThat(body.frequencyShift()).contains(10.1)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idSensor()).contains("SENSOR-ID")
        assertThat(body.incoming()).contains(false)
        assertThat(body.innerCodingRate()).contains(7)
        assertThat(body.maxPsd()).contains(10.1)
        assertThat(body.minPsd()).contains(10.1)
        assertThat(body.modulation()).contains("Auto")
        assertThat(body.noisePwrDensity()).contains(10.1)
        assertThat(body.nominalBandwidth()).contains(10.1)
        assertThat(body.nominalEirp()).contains(10.1)
        assertThat(body.nominalFrequency()).contains(10.1)
        assertThat(body.nominalPowerOverNoise()).contains(10.1)
        assertThat(body.nominalSnr()).contains(10.1)
        assertThat(body.origCountry()).contains("AU")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origMarking()).contains("U")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("ORIG-OBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIG-SENSOR-ID")
        assertThat(body.outerCodingRate()).contains(4)
        assertThat(body.peak()).contains(false)
        assertThat(body.pgri()).contains(10.1)
        assertThat(body.pnOrders().getOrNull()).containsExactly(1, 2)
        assertThat(body.polarity()).contains(10.1)
        assertThat(body.polarityType()).contains(RfObservationCreateParams.PolarityType.H)
        assertThat(body.powerOverNoise()).contains(10.1)
        assertThat(body.powers().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.range()).contains(10.1)
        assertThat(body.rangeMeasured()).contains(true)
        assertThat(body.rangeRate()).contains(10.1)
        assertThat(body.rangeRateMeasured()).contains(true)
        assertThat(body.rangeRateUnc()).contains(10.1)
        assertThat(body.rangeUnc()).contains(10.1)
        assertThat(body.rawFileUri()).contains("Example URI")
        assertThat(body.referenceLevel()).contains(10.1)
        assertThat(body.relativeCarrierPower()).contains(10.1)
        assertThat(body.relativeNoiseFloor()).contains(10.1)
        assertThat(body.resolutionBandwidth()).contains(10.1)
        assertThat(body.satNo()).contains(32258)
        assertThat(body.senalt()).contains(10.1)
        assertThat(body.senlat()).contains(45.2)
        assertThat(body.senlon()).contains(80.3)
        assertThat(body.signalIds().getOrNull()).containsExactly("ID1", "ID2")
        assertThat(body.snr()).contains(10.1)
        assertThat(body.snrs().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.spectrumAnalyzerPower()).contains(10.1)
        assertThat(body.startFrequency()).contains(10.1)
        assertThat(body.switchPoint()).contains(10)
        assertThat(body.symbolToNoiseRatio()).contains(10.1)
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.telemetryIds().getOrNull()).containsExactly("ID1", "ID2")
        assertThat(body.trackId()).contains("TRACK-ID")
        assertThat(body.trackRange()).contains(10.1)
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.transmitFilterRollOff()).contains(10.1)
        assertThat(body.transmitFilterType()).contains("RRC")
        assertThat(body.transponder()).contains("TRANSPONDER-A")
        assertThat(body.uct()).contains(false)
        assertThat(body.url()).contains("https://some-url")
        assertThat(body.videoBandwidth()).contains(10.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            RfObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(RfObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("RF")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(RfObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("RF")
    }
}
