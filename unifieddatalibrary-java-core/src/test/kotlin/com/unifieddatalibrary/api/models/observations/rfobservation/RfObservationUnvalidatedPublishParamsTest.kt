// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.rfobservation

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RfObservationUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        RfObservationUnvalidatedPublishParams.builder()
            .addBody(
                RfObservationUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .type("RF")
                    .id("RFOBSERVATION-ID")
                    .antennaName("Antenna1")
                    .azimuth(10.1)
                    .azimuthMeasured(true)
                    .azimuthRate(1.1)
                    .azimuthUnc(2.1)
                    .bandwidth(10.1)
                    .baudRate(10.1)
                    .addBaudRate(1.1)
                    .addBaudRate(2.2)
                    .bitErrorRate(10.1)
                    .carrierStandard("DVB-S2")
                    .channel(10)
                    .addChipRate(1.1)
                    .addChipRate(2.2)
                    .addCodeFill("TAG1")
                    .addCodeFill("TAG2")
                    .addCodeLength(1.1)
                    .addCodeLength(2.2)
                    .addCodeTap("TAG1")
                    .addCodeTap("TAG2")
                    .collectionMode("SURVEY")
                    .confidence(10.1)
                    .addConfidence(1.1)
                    .addConfidence(2.2)
                    .addConstellationXPoint(1.1)
                    .addConstellationXPoint(2.2)
                    .addConstellationYPoint(1.1)
                    .addConstellationYPoint(2.2)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .detectionStatus("DETECTED")
                    .addDetectionStatus("DETECTED")
                    .eirp(10.1)
                    .elevation(10.1)
                    .elevationMeasured(true)
                    .elevationRate(10.1)
                    .elevationUnc(10.1)
                    .elnot("Ex. ELINT")
                    .endFrequency(10.1)
                    .addFrequency(1.1)
                    .addFrequency(2.2)
                    .frequency(10.1)
                    .frequencyShift(10.1)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .incoming(false)
                    .innerCodingRate(7)
                    .maxPsd(10.1)
                    .minPsd(10.1)
                    .modulation("Auto")
                    .noisePwrDensity(10.1)
                    .nominalBandwidth(10.1)
                    .nominalEirp(10.1)
                    .nominalFrequency(10.1)
                    .nominalPowerOverNoise(10.1)
                    .nominalSnr(10.1)
                    .origCountry("AU")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origMarking("U")
                    .origNetwork("OPS1")
                    .origObjectId("ORIG-OBJECT-ID")
                    .origSensorId("ORIG-SENSOR-ID")
                    .outerCodingRate(4)
                    .peak(false)
                    .pgri(10.1)
                    .addPnOrder(1)
                    .addPnOrder(2)
                    .polarity(10.1)
                    .polarityType(RfObservationUnvalidatedPublishParams.Body.PolarityType.H)
                    .powerOverNoise(10.1)
                    .addPower(1.1)
                    .addPower(2.2)
                    .range(10.1)
                    .rangeMeasured(true)
                    .rangeRate(10.1)
                    .rangeRateMeasured(true)
                    .rangeRateUnc(10.1)
                    .rangeUnc(10.1)
                    .rawFileUri("Example URI")
                    .referenceLevel(10.1)
                    .relativeCarrierPower(10.1)
                    .relativeNoiseFloor(10.1)
                    .resolutionBandwidth(10.1)
                    .satNo(32258)
                    .senalt(10.1)
                    .senlat(45.2)
                    .senlon(80.3)
                    .addSignalId("ID1")
                    .addSignalId("ID2")
                    .snr(10.1)
                    .addSnr(1.1)
                    .addSnr(2.2)
                    .sourceDl("AXE")
                    .spectrumAnalyzerPower(10.1)
                    .startFrequency(10.1)
                    .switchPoint(10)
                    .symbolToNoiseRatio(10.1)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .taskId("TASK-ID")
                    .addTelemetryId("ID1")
                    .addTelemetryId("ID2")
                    .trackId("TRACK-ID")
                    .trackRange(10.1)
                    .transactionId("TRANSACTION-ID")
                    .transmitFilterRollOff(10.1)
                    .transmitFilterType("RRC")
                    .transponder("TRANSPONDER-A")
                    .uct(false)
                    .url("https://some-url")
                    .videoBandwidth(10.1)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            RfObservationUnvalidatedPublishParams.builder()
                .addBody(
                    RfObservationUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .type("RF")
                        .id("RFOBSERVATION-ID")
                        .antennaName("Antenna1")
                        .azimuth(10.1)
                        .azimuthMeasured(true)
                        .azimuthRate(1.1)
                        .azimuthUnc(2.1)
                        .bandwidth(10.1)
                        .baudRate(10.1)
                        .addBaudRate(1.1)
                        .addBaudRate(2.2)
                        .bitErrorRate(10.1)
                        .carrierStandard("DVB-S2")
                        .channel(10)
                        .addChipRate(1.1)
                        .addChipRate(2.2)
                        .addCodeFill("TAG1")
                        .addCodeFill("TAG2")
                        .addCodeLength(1.1)
                        .addCodeLength(2.2)
                        .addCodeTap("TAG1")
                        .addCodeTap("TAG2")
                        .collectionMode("SURVEY")
                        .confidence(10.1)
                        .addConfidence(1.1)
                        .addConfidence(2.2)
                        .addConstellationXPoint(1.1)
                        .addConstellationXPoint(2.2)
                        .addConstellationYPoint(1.1)
                        .addConstellationYPoint(2.2)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("descriptor")
                        .detectionStatus("DETECTED")
                        .addDetectionStatus("DETECTED")
                        .eirp(10.1)
                        .elevation(10.1)
                        .elevationMeasured(true)
                        .elevationRate(10.1)
                        .elevationUnc(10.1)
                        .elnot("Ex. ELINT")
                        .endFrequency(10.1)
                        .addFrequency(1.1)
                        .addFrequency(2.2)
                        .frequency(10.1)
                        .frequencyShift(10.1)
                        .idOnOrbit("ONORBIT-ID")
                        .idSensor("SENSOR-ID")
                        .incoming(false)
                        .innerCodingRate(7)
                        .maxPsd(10.1)
                        .minPsd(10.1)
                        .modulation("Auto")
                        .noisePwrDensity(10.1)
                        .nominalBandwidth(10.1)
                        .nominalEirp(10.1)
                        .nominalFrequency(10.1)
                        .nominalPowerOverNoise(10.1)
                        .nominalSnr(10.1)
                        .origCountry("AU")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origMarking("U")
                        .origNetwork("OPS1")
                        .origObjectId("ORIG-OBJECT-ID")
                        .origSensorId("ORIG-SENSOR-ID")
                        .outerCodingRate(4)
                        .peak(false)
                        .pgri(10.1)
                        .addPnOrder(1)
                        .addPnOrder(2)
                        .polarity(10.1)
                        .polarityType(RfObservationUnvalidatedPublishParams.Body.PolarityType.H)
                        .powerOverNoise(10.1)
                        .addPower(1.1)
                        .addPower(2.2)
                        .range(10.1)
                        .rangeMeasured(true)
                        .rangeRate(10.1)
                        .rangeRateMeasured(true)
                        .rangeRateUnc(10.1)
                        .rangeUnc(10.1)
                        .rawFileUri("Example URI")
                        .referenceLevel(10.1)
                        .relativeCarrierPower(10.1)
                        .relativeNoiseFloor(10.1)
                        .resolutionBandwidth(10.1)
                        .satNo(32258)
                        .senalt(10.1)
                        .senlat(45.2)
                        .senlon(80.3)
                        .addSignalId("ID1")
                        .addSignalId("ID2")
                        .snr(10.1)
                        .addSnr(1.1)
                        .addSnr(2.2)
                        .sourceDl("AXE")
                        .spectrumAnalyzerPower(10.1)
                        .startFrequency(10.1)
                        .switchPoint(10)
                        .symbolToNoiseRatio(10.1)
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .taskId("TASK-ID")
                        .addTelemetryId("ID1")
                        .addTelemetryId("ID2")
                        .trackId("TRACK-ID")
                        .trackRange(10.1)
                        .transactionId("TRANSACTION-ID")
                        .transmitFilterRollOff(10.1)
                        .transmitFilterType("RRC")
                        .transponder("TRANSPONDER-A")
                        .uct(false)
                        .url("https://some-url")
                        .videoBandwidth(10.1)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                RfObservationUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .type("RF")
                    .id("RFOBSERVATION-ID")
                    .antennaName("Antenna1")
                    .azimuth(10.1)
                    .azimuthMeasured(true)
                    .azimuthRate(1.1)
                    .azimuthUnc(2.1)
                    .bandwidth(10.1)
                    .baudRate(10.1)
                    .addBaudRate(1.1)
                    .addBaudRate(2.2)
                    .bitErrorRate(10.1)
                    .carrierStandard("DVB-S2")
                    .channel(10)
                    .addChipRate(1.1)
                    .addChipRate(2.2)
                    .addCodeFill("TAG1")
                    .addCodeFill("TAG2")
                    .addCodeLength(1.1)
                    .addCodeLength(2.2)
                    .addCodeTap("TAG1")
                    .addCodeTap("TAG2")
                    .collectionMode("SURVEY")
                    .confidence(10.1)
                    .addConfidence(1.1)
                    .addConfidence(2.2)
                    .addConstellationXPoint(1.1)
                    .addConstellationXPoint(2.2)
                    .addConstellationYPoint(1.1)
                    .addConstellationYPoint(2.2)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .detectionStatus("DETECTED")
                    .addDetectionStatus("DETECTED")
                    .eirp(10.1)
                    .elevation(10.1)
                    .elevationMeasured(true)
                    .elevationRate(10.1)
                    .elevationUnc(10.1)
                    .elnot("Ex. ELINT")
                    .endFrequency(10.1)
                    .addFrequency(1.1)
                    .addFrequency(2.2)
                    .frequency(10.1)
                    .frequencyShift(10.1)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .incoming(false)
                    .innerCodingRate(7)
                    .maxPsd(10.1)
                    .minPsd(10.1)
                    .modulation("Auto")
                    .noisePwrDensity(10.1)
                    .nominalBandwidth(10.1)
                    .nominalEirp(10.1)
                    .nominalFrequency(10.1)
                    .nominalPowerOverNoise(10.1)
                    .nominalSnr(10.1)
                    .origCountry("AU")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origMarking("U")
                    .origNetwork("OPS1")
                    .origObjectId("ORIG-OBJECT-ID")
                    .origSensorId("ORIG-SENSOR-ID")
                    .outerCodingRate(4)
                    .peak(false)
                    .pgri(10.1)
                    .addPnOrder(1)
                    .addPnOrder(2)
                    .polarity(10.1)
                    .polarityType(RfObservationUnvalidatedPublishParams.Body.PolarityType.H)
                    .powerOverNoise(10.1)
                    .addPower(1.1)
                    .addPower(2.2)
                    .range(10.1)
                    .rangeMeasured(true)
                    .rangeRate(10.1)
                    .rangeRateMeasured(true)
                    .rangeRateUnc(10.1)
                    .rangeUnc(10.1)
                    .rawFileUri("Example URI")
                    .referenceLevel(10.1)
                    .relativeCarrierPower(10.1)
                    .relativeNoiseFloor(10.1)
                    .resolutionBandwidth(10.1)
                    .satNo(32258)
                    .senalt(10.1)
                    .senlat(45.2)
                    .senlon(80.3)
                    .addSignalId("ID1")
                    .addSignalId("ID2")
                    .snr(10.1)
                    .addSnr(1.1)
                    .addSnr(2.2)
                    .sourceDl("AXE")
                    .spectrumAnalyzerPower(10.1)
                    .startFrequency(10.1)
                    .switchPoint(10)
                    .symbolToNoiseRatio(10.1)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .taskId("TASK-ID")
                    .addTelemetryId("ID1")
                    .addTelemetryId("ID2")
                    .trackId("TRACK-ID")
                    .trackRange(10.1)
                    .transactionId("TRANSACTION-ID")
                    .transmitFilterRollOff(10.1)
                    .transmitFilterType("RRC")
                    .transponder("TRANSPONDER-A")
                    .uct(false)
                    .url("https://some-url")
                    .videoBandwidth(10.1)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            RfObservationUnvalidatedPublishParams.builder()
                .addBody(
                    RfObservationUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .type("RF")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                RfObservationUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .type("RF")
                    .build()
            )
    }
}
