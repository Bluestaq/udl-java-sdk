// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.isrcollections

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class IsrCollectionListResponseTest {

    @Test
    fun create() {
        val isrCollectionListResponse =
            IsrCollectionListResponse.builder()
                .classificationMarking("U")
                .dataMode(IsrCollectionListResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("ISRCOLLECTION-ID")
                .addCollectionRequirement(
                    IsrCollectionListResponse.CollectionRequirement.builder()
                        .id("ISCRCOLLECTIONREQUIREMENTS")
                        .country("VE")
                        .cridNumbers("CRID")
                        .criticalTimes(
                            IsrCollectionListResponse.CollectionRequirement.CriticalTimes.builder()
                                .earliestImagingTime(
                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                )
                                .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                                .build()
                        )
                        .emphasized(false)
                        .exploitationRequirement(
                            IsrCollectionListResponse.CollectionRequirement.ExploitationRequirement
                                .builder()
                                .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                                .amplification("AMPLIFICATION")
                                .dissemination("EMAILS")
                                .eei("ESSENTIAL_ELEMENTS")
                                .poc(
                                    IsrCollectionListResponse.CollectionRequirement
                                        .ExploitationRequirement
                                        .Poc
                                        .builder()
                                        .id("ISRCOLLECTIONPOC-ID")
                                        .callsign("CALLSIGN")
                                        .chatName("CHAT_NAME")
                                        .chatSystem("CHAT")
                                        .email("EMAIL")
                                        .name("NAME")
                                        .notes("NOTES")
                                        .phone("PHONE")
                                        .radioFrequency(123.23)
                                        .unit("UNIT")
                                        .build()
                                )
                                .reportingCriteria("CRITERIA")
                                .build()
                        )
                        .hash("HASH")
                        .intelDiscipline("Sig")
                        .isPrismCr(true)
                        .operation("NAME")
                        .priority(20.23)
                        .reconSurvey("SURVEY_INFO")
                        .recordId("RECORD-ID")
                        .region("REGION")
                        .secondary(false)
                        .specialComGuidance("TEXT")
                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                        .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                        .subregion("SUBREGION")
                        .supportedUnit("UNIT")
                        .addTargetList("string")
                        .type("COLLECTION_TYPE")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                .createdBy("some.user")
                .idexVersion(2)
                .missionAor("Kandahar")
                .missionCollectionArea("Example collection area")
                .missionCountry("US")
                .missionEmphasis("Mission emphasis")
                .missionId("myTask-2020-04-23T00:00:00.000Z")
                .missionJoa("Operation area")
                .missionOperation("OP-HONEY-BADGER")
                .missionPrimaryIntelDiscipline("Sig")
                .missionPrimarySubCategory("FMV")
                .missionPriority(1)
                .missionRegion("Example Region")
                .missionRole("Targeting of Lead Vehicle")
                .missionSecondaryIntelDiscipline("Intelligence_2")
                .missionSecondarySubCategory("Convoy")
                .missionStartPointLat(45.23)
                .missionStartPointLong(80.23)
                .missionSubRegion("Example Subregion")
                .missionSupportedUnit("ENVOYS")
                .missionSyncMatrixBin("MATRIX")
                .name("Example mission name")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addTasking(
                    IsrCollectionListResponse.Tasking.builder()
                        .id("ISRCOLLECTIONTASKINGS-ID")
                        .collectionPeriods(
                            IsrCollectionListResponse.Tasking.CollectionPeriods.builder()
                                .addActual(
                                    IsrCollectionListResponse.Tasking.CollectionPeriods.Actual
                                        .builder()
                                        .id("ISRCOLLECTIONACTUAL-ID")
                                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .build()
                                )
                                .planned(
                                    IsrCollectionListResponse.Tasking.CollectionPeriods.Planned
                                        .builder()
                                        .addAdditional(
                                            IsrCollectionListResponse.Tasking.CollectionPeriods
                                                .Planned
                                                .Additional
                                                .builder()
                                                .id("ISRCOLLECTIONADDITIONAL")
                                                .start(
                                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                                )
                                                .stop(
                                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                                )
                                                .build()
                                        )
                                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .build()
                                )
                                .build()
                        )
                        .collectionType(
                            IsrCollectionListResponse.Tasking.CollectionType.SIMULTANEOUS
                        )
                        .eightLine("eightLine")
                        .specialComGuidance("TEXT")
                        .sroTrack("SRO")
                        .taskingAor("Kandahar")
                        .taskingCollectionArea("AREA")
                        .addTaskingCollectionRequirement(
                            IsrCollectionListResponse.Tasking.TaskingCollectionRequirement.builder()
                                .id("ISCRCOLLECTIONREQUIREMENTS")
                                .country("VE")
                                .cridNumbers("CRID")
                                .criticalTimes(
                                    IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                        .CriticalTimes
                                        .builder()
                                        .earliestImagingTime(
                                            OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                        )
                                        .latestImagingTime(
                                            OffsetDateTime.parse("2021-01-19T01:11:15.001Z")
                                        )
                                        .build()
                                )
                                .emphasized(false)
                                .exploitationRequirement(
                                    IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                        .ExploitationRequirement
                                        .builder()
                                        .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                                        .amplification("AMPLIFICATION")
                                        .dissemination("EMAILS")
                                        .eei("ESSENTIAL_ELEMENTS")
                                        .poc(
                                            IsrCollectionListResponse.Tasking
                                                .TaskingCollectionRequirement
                                                .ExploitationRequirement
                                                .Poc
                                                .builder()
                                                .id("ISRCOLLECTIONPOC-ID")
                                                .callsign("CALLSIGN")
                                                .chatName("CHAT_NAME")
                                                .chatSystem("CHAT")
                                                .email("EMAIL")
                                                .name("NAME")
                                                .notes("NOTES")
                                                .phone("PHONE")
                                                .radioFrequency(123.23)
                                                .unit("UNIT")
                                                .build()
                                        )
                                        .reportingCriteria("CRITERIA")
                                        .build()
                                )
                                .hash("HASH")
                                .intelDiscipline("Sig")
                                .isPrismCr(true)
                                .operation("NAME")
                                .priority(20.23)
                                .reconSurvey("SURVEY_INFO")
                                .recordId("RECORD-ID")
                                .region("REGION")
                                .secondary(false)
                                .specialComGuidance("TEXT")
                                .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                                .subregion("SUBREGION")
                                .supportedUnit("UNIT")
                                .addTargetList("string")
                                .type("COLLECTION_TYPE")
                                .build()
                        )
                        .taskingCountry("CODE")
                        .taskingEmphasis("EMPHASIS")
                        .taskingJoa("AREA")
                        .taskingOperation("OP-HONEY-BADGER")
                        .taskingPrimaryIntelDiscipline("Sig")
                        .taskingPrimarySubCategory("FMV")
                        .taskingPriority(10.23)
                        .taskingRegion("REGION")
                        .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                        .taskingRole("Track Lead Vehicle")
                        .taskingSecondaryIntelDiscipline("Intelligence_2")
                        .taskingSecondarySubCategory("Convoy")
                        .taskingStartPointLat(45.23)
                        .taskingStartPointLong(45.23)
                        .taskingSubRegion("SUBREGION")
                        .taskingSupportedUnit("ENVOYS")
                        .taskingSyncMatrixBin("MATRIX")
                        .type(IsrCollectionListResponse.Tasking.Type.DELIBERATE)
                        .build()
                )
                .addTransit(
                    IsrCollectionListResponse.Transit.builder()
                        .id("ISRCOLLECTIONTRANSIT-ID")
                        .base("ENVOYS")
                        .duration(200.23)
                        .build()
                )
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(isrCollectionListResponse.classificationMarking()).isEqualTo("U")
        assertThat(isrCollectionListResponse.dataMode())
            .isEqualTo(IsrCollectionListResponse.DataMode.TEST)
        assertThat(isrCollectionListResponse.source()).isEqualTo("Bluestaq")
        assertThat(isrCollectionListResponse.id()).contains("ISRCOLLECTION-ID")
        assertThat(isrCollectionListResponse.collectionRequirements().getOrNull())
            .containsExactly(
                IsrCollectionListResponse.CollectionRequirement.builder()
                    .id("ISCRCOLLECTIONREQUIREMENTS")
                    .country("VE")
                    .cridNumbers("CRID")
                    .criticalTimes(
                        IsrCollectionListResponse.CollectionRequirement.CriticalTimes.builder()
                            .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                            .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                            .build()
                    )
                    .emphasized(false)
                    .exploitationRequirement(
                        IsrCollectionListResponse.CollectionRequirement.ExploitationRequirement
                            .builder()
                            .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                            .amplification("AMPLIFICATION")
                            .dissemination("EMAILS")
                            .eei("ESSENTIAL_ELEMENTS")
                            .poc(
                                IsrCollectionListResponse.CollectionRequirement
                                    .ExploitationRequirement
                                    .Poc
                                    .builder()
                                    .id("ISRCOLLECTIONPOC-ID")
                                    .callsign("CALLSIGN")
                                    .chatName("CHAT_NAME")
                                    .chatSystem("CHAT")
                                    .email("EMAIL")
                                    .name("NAME")
                                    .notes("NOTES")
                                    .phone("PHONE")
                                    .radioFrequency(123.23)
                                    .unit("UNIT")
                                    .build()
                            )
                            .reportingCriteria("CRITERIA")
                            .build()
                    )
                    .hash("HASH")
                    .intelDiscipline("Sig")
                    .isPrismCr(true)
                    .operation("NAME")
                    .priority(20.23)
                    .reconSurvey("SURVEY_INFO")
                    .recordId("RECORD-ID")
                    .region("REGION")
                    .secondary(false)
                    .specialComGuidance("TEXT")
                    .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                    .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                    .subregion("SUBREGION")
                    .supportedUnit("UNIT")
                    .addTargetList("string")
                    .type("COLLECTION_TYPE")
                    .build()
            )
        assertThat(isrCollectionListResponse.createdAt())
            .contains(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
        assertThat(isrCollectionListResponse.createdBy()).contains("some.user")
        assertThat(isrCollectionListResponse.idexVersion()).contains(2)
        assertThat(isrCollectionListResponse.missionAor()).contains("Kandahar")
        assertThat(isrCollectionListResponse.missionCollectionArea())
            .contains("Example collection area")
        assertThat(isrCollectionListResponse.missionCountry()).contains("US")
        assertThat(isrCollectionListResponse.missionEmphasis()).contains("Mission emphasis")
        assertThat(isrCollectionListResponse.missionId())
            .contains("myTask-2020-04-23T00:00:00.000Z")
        assertThat(isrCollectionListResponse.missionJoa()).contains("Operation area")
        assertThat(isrCollectionListResponse.missionOperation()).contains("OP-HONEY-BADGER")
        assertThat(isrCollectionListResponse.missionPrimaryIntelDiscipline()).contains("Sig")
        assertThat(isrCollectionListResponse.missionPrimarySubCategory()).contains("FMV")
        assertThat(isrCollectionListResponse.missionPriority()).contains(1)
        assertThat(isrCollectionListResponse.missionRegion()).contains("Example Region")
        assertThat(isrCollectionListResponse.missionRole()).contains("Targeting of Lead Vehicle")
        assertThat(isrCollectionListResponse.missionSecondaryIntelDiscipline())
            .contains("Intelligence_2")
        assertThat(isrCollectionListResponse.missionSecondarySubCategory()).contains("Convoy")
        assertThat(isrCollectionListResponse.missionStartPointLat()).contains(45.23)
        assertThat(isrCollectionListResponse.missionStartPointLong()).contains(80.23)
        assertThat(isrCollectionListResponse.missionSubRegion()).contains("Example Subregion")
        assertThat(isrCollectionListResponse.missionSupportedUnit()).contains("ENVOYS")
        assertThat(isrCollectionListResponse.missionSyncMatrixBin()).contains("MATRIX")
        assertThat(isrCollectionListResponse.name()).contains("Example mission name")
        assertThat(isrCollectionListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(isrCollectionListResponse.origNetwork()).contains("OPS1")
        assertThat(isrCollectionListResponse.taskings().getOrNull())
            .containsExactly(
                IsrCollectionListResponse.Tasking.builder()
                    .id("ISRCOLLECTIONTASKINGS-ID")
                    .collectionPeriods(
                        IsrCollectionListResponse.Tasking.CollectionPeriods.builder()
                            .addActual(
                                IsrCollectionListResponse.Tasking.CollectionPeriods.Actual.builder()
                                    .id("ISRCOLLECTIONACTUAL-ID")
                                    .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                    .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                    .build()
                            )
                            .planned(
                                IsrCollectionListResponse.Tasking.CollectionPeriods.Planned
                                    .builder()
                                    .addAdditional(
                                        IsrCollectionListResponse.Tasking.CollectionPeriods.Planned
                                            .Additional
                                            .builder()
                                            .id("ISRCOLLECTIONADDITIONAL")
                                            .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                            .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                            .build()
                                    )
                                    .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                    .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                    .build()
                            )
                            .build()
                    )
                    .collectionType(IsrCollectionListResponse.Tasking.CollectionType.SIMULTANEOUS)
                    .eightLine("eightLine")
                    .specialComGuidance("TEXT")
                    .sroTrack("SRO")
                    .taskingAor("Kandahar")
                    .taskingCollectionArea("AREA")
                    .addTaskingCollectionRequirement(
                        IsrCollectionListResponse.Tasking.TaskingCollectionRequirement.builder()
                            .id("ISCRCOLLECTIONREQUIREMENTS")
                            .country("VE")
                            .cridNumbers("CRID")
                            .criticalTimes(
                                IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                    .CriticalTimes
                                    .builder()
                                    .earliestImagingTime(
                                        OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                    )
                                    .latestImagingTime(
                                        OffsetDateTime.parse("2021-01-19T01:11:15.001Z")
                                    )
                                    .build()
                            )
                            .emphasized(false)
                            .exploitationRequirement(
                                IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                    .ExploitationRequirement
                                    .builder()
                                    .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                                    .amplification("AMPLIFICATION")
                                    .dissemination("EMAILS")
                                    .eei("ESSENTIAL_ELEMENTS")
                                    .poc(
                                        IsrCollectionListResponse.Tasking
                                            .TaskingCollectionRequirement
                                            .ExploitationRequirement
                                            .Poc
                                            .builder()
                                            .id("ISRCOLLECTIONPOC-ID")
                                            .callsign("CALLSIGN")
                                            .chatName("CHAT_NAME")
                                            .chatSystem("CHAT")
                                            .email("EMAIL")
                                            .name("NAME")
                                            .notes("NOTES")
                                            .phone("PHONE")
                                            .radioFrequency(123.23)
                                            .unit("UNIT")
                                            .build()
                                    )
                                    .reportingCriteria("CRITERIA")
                                    .build()
                            )
                            .hash("HASH")
                            .intelDiscipline("Sig")
                            .isPrismCr(true)
                            .operation("NAME")
                            .priority(20.23)
                            .reconSurvey("SURVEY_INFO")
                            .recordId("RECORD-ID")
                            .region("REGION")
                            .secondary(false)
                            .specialComGuidance("TEXT")
                            .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                            .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                            .subregion("SUBREGION")
                            .supportedUnit("UNIT")
                            .addTargetList("string")
                            .type("COLLECTION_TYPE")
                            .build()
                    )
                    .taskingCountry("CODE")
                    .taskingEmphasis("EMPHASIS")
                    .taskingJoa("AREA")
                    .taskingOperation("OP-HONEY-BADGER")
                    .taskingPrimaryIntelDiscipline("Sig")
                    .taskingPrimarySubCategory("FMV")
                    .taskingPriority(10.23)
                    .taskingRegion("REGION")
                    .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                    .taskingRole("Track Lead Vehicle")
                    .taskingSecondaryIntelDiscipline("Intelligence_2")
                    .taskingSecondarySubCategory("Convoy")
                    .taskingStartPointLat(45.23)
                    .taskingStartPointLong(45.23)
                    .taskingSubRegion("SUBREGION")
                    .taskingSupportedUnit("ENVOYS")
                    .taskingSyncMatrixBin("MATRIX")
                    .type(IsrCollectionListResponse.Tasking.Type.DELIBERATE)
                    .build()
            )
        assertThat(isrCollectionListResponse.transit().getOrNull())
            .containsExactly(
                IsrCollectionListResponse.Transit.builder()
                    .id("ISRCOLLECTIONTRANSIT-ID")
                    .base("ENVOYS")
                    .duration(200.23)
                    .build()
            )
        assertThat(isrCollectionListResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(isrCollectionListResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val isrCollectionListResponse =
            IsrCollectionListResponse.builder()
                .classificationMarking("U")
                .dataMode(IsrCollectionListResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("ISRCOLLECTION-ID")
                .addCollectionRequirement(
                    IsrCollectionListResponse.CollectionRequirement.builder()
                        .id("ISCRCOLLECTIONREQUIREMENTS")
                        .country("VE")
                        .cridNumbers("CRID")
                        .criticalTimes(
                            IsrCollectionListResponse.CollectionRequirement.CriticalTimes.builder()
                                .earliestImagingTime(
                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                )
                                .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
                                .build()
                        )
                        .emphasized(false)
                        .exploitationRequirement(
                            IsrCollectionListResponse.CollectionRequirement.ExploitationRequirement
                                .builder()
                                .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                                .amplification("AMPLIFICATION")
                                .dissemination("EMAILS")
                                .eei("ESSENTIAL_ELEMENTS")
                                .poc(
                                    IsrCollectionListResponse.CollectionRequirement
                                        .ExploitationRequirement
                                        .Poc
                                        .builder()
                                        .id("ISRCOLLECTIONPOC-ID")
                                        .callsign("CALLSIGN")
                                        .chatName("CHAT_NAME")
                                        .chatSystem("CHAT")
                                        .email("EMAIL")
                                        .name("NAME")
                                        .notes("NOTES")
                                        .phone("PHONE")
                                        .radioFrequency(123.23)
                                        .unit("UNIT")
                                        .build()
                                )
                                .reportingCriteria("CRITERIA")
                                .build()
                        )
                        .hash("HASH")
                        .intelDiscipline("Sig")
                        .isPrismCr(true)
                        .operation("NAME")
                        .priority(20.23)
                        .reconSurvey("SURVEY_INFO")
                        .recordId("RECORD-ID")
                        .region("REGION")
                        .secondary(false)
                        .specialComGuidance("TEXT")
                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                        .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                        .subregion("SUBREGION")
                        .supportedUnit("UNIT")
                        .addTargetList("string")
                        .type("COLLECTION_TYPE")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                .createdBy("some.user")
                .idexVersion(2)
                .missionAor("Kandahar")
                .missionCollectionArea("Example collection area")
                .missionCountry("US")
                .missionEmphasis("Mission emphasis")
                .missionId("myTask-2020-04-23T00:00:00.000Z")
                .missionJoa("Operation area")
                .missionOperation("OP-HONEY-BADGER")
                .missionPrimaryIntelDiscipline("Sig")
                .missionPrimarySubCategory("FMV")
                .missionPriority(1)
                .missionRegion("Example Region")
                .missionRole("Targeting of Lead Vehicle")
                .missionSecondaryIntelDiscipline("Intelligence_2")
                .missionSecondarySubCategory("Convoy")
                .missionStartPointLat(45.23)
                .missionStartPointLong(80.23)
                .missionSubRegion("Example Subregion")
                .missionSupportedUnit("ENVOYS")
                .missionSyncMatrixBin("MATRIX")
                .name("Example mission name")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addTasking(
                    IsrCollectionListResponse.Tasking.builder()
                        .id("ISRCOLLECTIONTASKINGS-ID")
                        .collectionPeriods(
                            IsrCollectionListResponse.Tasking.CollectionPeriods.builder()
                                .addActual(
                                    IsrCollectionListResponse.Tasking.CollectionPeriods.Actual
                                        .builder()
                                        .id("ISRCOLLECTIONACTUAL-ID")
                                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .build()
                                )
                                .planned(
                                    IsrCollectionListResponse.Tasking.CollectionPeriods.Planned
                                        .builder()
                                        .addAdditional(
                                            IsrCollectionListResponse.Tasking.CollectionPeriods
                                                .Planned
                                                .Additional
                                                .builder()
                                                .id("ISRCOLLECTIONADDITIONAL")
                                                .start(
                                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                                )
                                                .stop(
                                                    OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                                )
                                                .build()
                                        )
                                        .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .stop(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                        .build()
                                )
                                .build()
                        )
                        .collectionType(
                            IsrCollectionListResponse.Tasking.CollectionType.SIMULTANEOUS
                        )
                        .eightLine("eightLine")
                        .specialComGuidance("TEXT")
                        .sroTrack("SRO")
                        .taskingAor("Kandahar")
                        .taskingCollectionArea("AREA")
                        .addTaskingCollectionRequirement(
                            IsrCollectionListResponse.Tasking.TaskingCollectionRequirement.builder()
                                .id("ISCRCOLLECTIONREQUIREMENTS")
                                .country("VE")
                                .cridNumbers("CRID")
                                .criticalTimes(
                                    IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                        .CriticalTimes
                                        .builder()
                                        .earliestImagingTime(
                                            OffsetDateTime.parse("2021-01-19T01:01:15.001Z")
                                        )
                                        .latestImagingTime(
                                            OffsetDateTime.parse("2021-01-19T01:11:15.001Z")
                                        )
                                        .build()
                                )
                                .emphasized(false)
                                .exploitationRequirement(
                                    IsrCollectionListResponse.Tasking.TaskingCollectionRequirement
                                        .ExploitationRequirement
                                        .builder()
                                        .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                                        .amplification("AMPLIFICATION")
                                        .dissemination("EMAILS")
                                        .eei("ESSENTIAL_ELEMENTS")
                                        .poc(
                                            IsrCollectionListResponse.Tasking
                                                .TaskingCollectionRequirement
                                                .ExploitationRequirement
                                                .Poc
                                                .builder()
                                                .id("ISRCOLLECTIONPOC-ID")
                                                .callsign("CALLSIGN")
                                                .chatName("CHAT_NAME")
                                                .chatSystem("CHAT")
                                                .email("EMAIL")
                                                .name("NAME")
                                                .notes("NOTES")
                                                .phone("PHONE")
                                                .radioFrequency(123.23)
                                                .unit("UNIT")
                                                .build()
                                        )
                                        .reportingCriteria("CRITERIA")
                                        .build()
                                )
                                .hash("HASH")
                                .intelDiscipline("Sig")
                                .isPrismCr(true)
                                .operation("NAME")
                                .priority(20.23)
                                .reconSurvey("SURVEY_INFO")
                                .recordId("RECORD-ID")
                                .region("REGION")
                                .secondary(false)
                                .specialComGuidance("TEXT")
                                .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                                .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
                                .subregion("SUBREGION")
                                .supportedUnit("UNIT")
                                .addTargetList("string")
                                .type("COLLECTION_TYPE")
                                .build()
                        )
                        .taskingCountry("CODE")
                        .taskingEmphasis("EMPHASIS")
                        .taskingJoa("AREA")
                        .taskingOperation("OP-HONEY-BADGER")
                        .taskingPrimaryIntelDiscipline("Sig")
                        .taskingPrimarySubCategory("FMV")
                        .taskingPriority(10.23)
                        .taskingRegion("REGION")
                        .taskingRetaskTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
                        .taskingRole("Track Lead Vehicle")
                        .taskingSecondaryIntelDiscipline("Intelligence_2")
                        .taskingSecondarySubCategory("Convoy")
                        .taskingStartPointLat(45.23)
                        .taskingStartPointLong(45.23)
                        .taskingSubRegion("SUBREGION")
                        .taskingSupportedUnit("ENVOYS")
                        .taskingSyncMatrixBin("MATRIX")
                        .type(IsrCollectionListResponse.Tasking.Type.DELIBERATE)
                        .build()
                )
                .addTransit(
                    IsrCollectionListResponse.Transit.builder()
                        .id("ISRCOLLECTIONTRANSIT-ID")
                        .base("ENVOYS")
                        .duration(200.23)
                        .build()
                )
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedIsrCollectionListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(isrCollectionListResponse),
                jacksonTypeRef<IsrCollectionListResponse>(),
            )

        assertThat(roundtrippedIsrCollectionListResponse).isEqualTo(isrCollectionListResponse)
    }
}
