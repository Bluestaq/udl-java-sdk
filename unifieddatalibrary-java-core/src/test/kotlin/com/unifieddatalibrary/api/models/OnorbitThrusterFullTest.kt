// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitThrusterFullTest {

    @Test
    fun create() {
        val onorbitThrusterFull =
            OnorbitThrusterFull.builder()
                .classificationMarking("U")
                .dataMode(OnorbitThrusterFull.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idOnOrbit("ONORBIT-ID")
                .source("Bluestaq")
                .id("ONORBITTHRUSTER-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .engine(
                    Engine.builder()
                        .classificationMarking("U")
                        .dataMode(Engine.DataMode.TEST)
                        .name("ENGINE_VARIANT1")
                        .source("Bluestaq")
                        .id("ENGINE-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .addEngineDetail(
                            EngineDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(EngineDetailsFull.DataMode.TEST)
                                .idEngine("ENGINE-ID")
                                .source("Bluestaq")
                                .id("ENGINEDETAILS-ID")
                                .burnTime(1.1)
                                .chamberPressure(1.1)
                                .characteristicType("Electric")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cycleType("Pressure Fed")
                                .family("ENGINE_TYPE1")
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .maxFirings(5)
                                .notes("Example notes")
                                .nozzleExpansionRatio(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .oxidizer("Liquid Oxygen")
                                .propellant("Liquid")
                                .seaLevelThrust(1.1)
                                .specificImpulse(1.1)
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .vacuumThrust(1.1)
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .quantity(10)
                .type("Hydrazine REA")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(onorbitThrusterFull.classificationMarking()).isEqualTo("U")
        assertThat(onorbitThrusterFull.dataMode()).isEqualTo(OnorbitThrusterFull.DataMode.TEST)
        assertThat(onorbitThrusterFull.idEngine()).isEqualTo("ENGINE-ID")
        assertThat(onorbitThrusterFull.idOnOrbit()).isEqualTo("ONORBIT-ID")
        assertThat(onorbitThrusterFull.source()).isEqualTo("Bluestaq")
        assertThat(onorbitThrusterFull.id()).contains("ONORBITTHRUSTER-ID")
        assertThat(onorbitThrusterFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbitThrusterFull.createdBy()).contains("some.user")
        assertThat(onorbitThrusterFull.engine())
            .contains(
                Engine.builder()
                    .classificationMarking("U")
                    .dataMode(Engine.DataMode.TEST)
                    .name("ENGINE_VARIANT1")
                    .source("Bluestaq")
                    .id("ENGINE-ID")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addEngineDetail(
                        EngineDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(EngineDetailsFull.DataMode.TEST)
                            .idEngine("ENGINE-ID")
                            .source("Bluestaq")
                            .id("ENGINEDETAILS-ID")
                            .burnTime(1.1)
                            .chamberPressure(1.1)
                            .characteristicType("Electric")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cycleType("Pressure Fed")
                            .family("ENGINE_TYPE1")
                            .manufacturerOrgId("MANUFACTURERORG-ID")
                            .maxFirings(5)
                            .notes("Example notes")
                            .nozzleExpansionRatio(1.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .oxidizer("Liquid Oxygen")
                            .propellant("Liquid")
                            .seaLevelThrust(1.1)
                            .specificImpulse(1.1)
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .vacuumThrust(1.1)
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(onorbitThrusterFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(onorbitThrusterFull.origNetwork()).contains("OPS1")
        assertThat(onorbitThrusterFull.quantity()).contains(10)
        assertThat(onorbitThrusterFull.type()).contains("Hydrazine REA")
        assertThat(onorbitThrusterFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbitThrusterFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val onorbitThrusterFull =
            OnorbitThrusterFull.builder()
                .classificationMarking("U")
                .dataMode(OnorbitThrusterFull.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idOnOrbit("ONORBIT-ID")
                .source("Bluestaq")
                .id("ONORBITTHRUSTER-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .engine(
                    Engine.builder()
                        .classificationMarking("U")
                        .dataMode(Engine.DataMode.TEST)
                        .name("ENGINE_VARIANT1")
                        .source("Bluestaq")
                        .id("ENGINE-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .addEngineDetail(
                            EngineDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(EngineDetailsFull.DataMode.TEST)
                                .idEngine("ENGINE-ID")
                                .source("Bluestaq")
                                .id("ENGINEDETAILS-ID")
                                .burnTime(1.1)
                                .chamberPressure(1.1)
                                .characteristicType("Electric")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cycleType("Pressure Fed")
                                .family("ENGINE_TYPE1")
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .maxFirings(5)
                                .notes("Example notes")
                                .nozzleExpansionRatio(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .oxidizer("Liquid Oxygen")
                                .propellant("Liquid")
                                .seaLevelThrust(1.1)
                                .specificImpulse(1.1)
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .vacuumThrust(1.1)
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .quantity(10)
                .type("Hydrazine REA")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedOnorbitThrusterFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(onorbitThrusterFull),
                jacksonTypeRef<OnorbitThrusterFull>(),
            )

        assertThat(roundtrippedOnorbitThrusterFull).isEqualTo(onorbitThrusterFull)
    }
}
