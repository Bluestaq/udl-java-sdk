// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.navigationalobstruction

import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class NavigationalObstructionUpdateParamsTest {

    @Test
    fun create() {
        NavigationalObstructionUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .cycleDate(LocalDate.parse("2024-06-13"))
            .dataMode(NavigationalObstructionUpdateParams.DataMode.TEST)
            .obstacleId("359655")
            .obstacleType("V")
            .source("Bluestaq")
            .bodyId("026dd511-8ba5-47d3-9909-836149f87686")
            .actDelCode("A")
            .airacCycle(2406)
            .baseAiracCycle(2405)
            .baselineCutoffDate(LocalDate.parse("2024-04-23"))
            .boundNeLat(29.1)
            .boundNeLon(99.1)
            .boundSwLat(-44.1)
            .boundSwLon(-144.1)
            .countryCode("US")
            .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .cutoffDate(LocalDate.parse("2024-05-21"))
            .dataSetRemarks("Data set remarks")
            .deletingOrg("ACME")
            .derivingOrg("ACME")
            .directivityCode(2)
            .elevation(840.1)
            .elevationAcc(17.1)
            .externalId("OU812")
            .facc("AT040")
            .featureCode("540")
            .featureDescription("Powerline Pylon, General")
            .featureName("PYLON")
            .featureType("540")
            .heightAgl(314.1)
            .heightAglAcc(30.1)
            .heightMsl(1154.1)
            .heightMslAcc(34.1)
            .horizAcc(8.1)
            .horizDatumCode("WGS-84")
            .initRecordDate(LocalDate.parse("1991-03-28"))
            .addKey("key1")
            .addKey("key2")
            .lightingCode("U")
            .lineNeLat(49.000584)
            .lineNeLon(-122.197891)
            .linesFilename("lines.txt")
            .lineSwLat(48.507027)
            .lineSwLon(-122.722946)
            .minHeightAgl(20.1)
            .multObs("S")
            .nextCycleDate(LocalDate.parse("2024-07-11"))
            .numLines(45993)
            .numObs(1)
            .numPoints(21830590)
            .obstacleRemarks("Obstacle remarks")
            .origId("L0000002289")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .ownerCountryCode("US")
            .pointLat(46.757211)
            .pointLon(-67.759494)
            .pointsFilename("points.txt")
            .processCode("OT")
            .producer("ACME")
            .provinceCode("23")
            .quality("0")
            .rawFileUri("Example URI")
            .revDate(LocalDate.parse("2020-02-26"))
            .segEndPoint(359655)
            .segNum(1)
            .segStartPoint(359655)
            .sourceDate(LocalDate.parse("2016-04-01"))
            .sourceDl("AXE")
            .surfaceMatCode("U")
            .transactionCode("V")
            .validationCode(3)
            .addValue("value1")
            .addValue("value2")
            .vectorsFilename("vectors.txt")
            .wac("262")
            .wacInnr("0409-00039")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            NavigationalObstructionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .cycleDate(LocalDate.parse("2024-06-13"))
                .dataMode(NavigationalObstructionUpdateParams.DataMode.TEST)
                .obstacleId("359655")
                .obstacleType("V")
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            NavigationalObstructionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .cycleDate(LocalDate.parse("2024-06-13"))
                .dataMode(NavigationalObstructionUpdateParams.DataMode.TEST)
                .obstacleId("359655")
                .obstacleType("V")
                .source("Bluestaq")
                .bodyId("026dd511-8ba5-47d3-9909-836149f87686")
                .actDelCode("A")
                .airacCycle(2406)
                .baseAiracCycle(2405)
                .baselineCutoffDate(LocalDate.parse("2024-04-23"))
                .boundNeLat(29.1)
                .boundNeLon(99.1)
                .boundSwLat(-44.1)
                .boundSwLon(-144.1)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cutoffDate(LocalDate.parse("2024-05-21"))
                .dataSetRemarks("Data set remarks")
                .deletingOrg("ACME")
                .derivingOrg("ACME")
                .directivityCode(2)
                .elevation(840.1)
                .elevationAcc(17.1)
                .externalId("OU812")
                .facc("AT040")
                .featureCode("540")
                .featureDescription("Powerline Pylon, General")
                .featureName("PYLON")
                .featureType("540")
                .heightAgl(314.1)
                .heightAglAcc(30.1)
                .heightMsl(1154.1)
                .heightMslAcc(34.1)
                .horizAcc(8.1)
                .horizDatumCode("WGS-84")
                .initRecordDate(LocalDate.parse("1991-03-28"))
                .addKey("key1")
                .addKey("key2")
                .lightingCode("U")
                .lineNeLat(49.000584)
                .lineNeLon(-122.197891)
                .linesFilename("lines.txt")
                .lineSwLat(48.507027)
                .lineSwLon(-122.722946)
                .minHeightAgl(20.1)
                .multObs("S")
                .nextCycleDate(LocalDate.parse("2024-07-11"))
                .numLines(45993)
                .numObs(1)
                .numPoints(21830590)
                .obstacleRemarks("Obstacle remarks")
                .origId("L0000002289")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerCountryCode("US")
                .pointLat(46.757211)
                .pointLon(-67.759494)
                .pointsFilename("points.txt")
                .processCode("OT")
                .producer("ACME")
                .provinceCode("23")
                .quality("0")
                .rawFileUri("Example URI")
                .revDate(LocalDate.parse("2020-02-26"))
                .segEndPoint(359655)
                .segNum(1)
                .segStartPoint(359655)
                .sourceDate(LocalDate.parse("2016-04-01"))
                .sourceDl("AXE")
                .surfaceMatCode("U")
                .transactionCode("V")
                .validationCode(3)
                .addValue("value1")
                .addValue("value2")
                .vectorsFilename("vectors.txt")
                .wac("262")
                .wacInnr("0409-00039")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.cycleDate()).isEqualTo(LocalDate.parse("2024-06-13"))
        assertThat(body.dataMode()).isEqualTo(NavigationalObstructionUpdateParams.DataMode.TEST)
        assertThat(body.obstacleId()).isEqualTo("359655")
        assertThat(body.obstacleType()).isEqualTo("V")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(body.actDelCode()).contains("A")
        assertThat(body.airacCycle()).contains(2406)
        assertThat(body.baseAiracCycle()).contains(2405)
        assertThat(body.baselineCutoffDate()).contains(LocalDate.parse("2024-04-23"))
        assertThat(body.boundNeLat()).contains(29.1)
        assertThat(body.boundNeLon()).contains(99.1)
        assertThat(body.boundSwLat()).contains(-44.1)
        assertThat(body.boundSwLon()).contains(-144.1)
        assertThat(body.countryCode()).contains("US")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.cutoffDate()).contains(LocalDate.parse("2024-05-21"))
        assertThat(body.dataSetRemarks()).contains("Data set remarks")
        assertThat(body.deletingOrg()).contains("ACME")
        assertThat(body.derivingOrg()).contains("ACME")
        assertThat(body.directivityCode()).contains(2)
        assertThat(body.elevation()).contains(840.1)
        assertThat(body.elevationAcc()).contains(17.1)
        assertThat(body.externalId()).contains("OU812")
        assertThat(body.facc()).contains("AT040")
        assertThat(body.featureCode()).contains("540")
        assertThat(body.featureDescription()).contains("Powerline Pylon, General")
        assertThat(body.featureName()).contains("PYLON")
        assertThat(body.featureType()).contains("540")
        assertThat(body.heightAgl()).contains(314.1)
        assertThat(body.heightAglAcc()).contains(30.1)
        assertThat(body.heightMsl()).contains(1154.1)
        assertThat(body.heightMslAcc()).contains(34.1)
        assertThat(body.horizAcc()).contains(8.1)
        assertThat(body.horizDatumCode()).contains("WGS-84")
        assertThat(body.initRecordDate()).contains(LocalDate.parse("1991-03-28"))
        assertThat(body.keys().getOrNull()).containsExactly("key1", "key2")
        assertThat(body.lightingCode()).contains("U")
        assertThat(body.lineNeLat()).contains(49.000584)
        assertThat(body.lineNeLon()).contains(-122.197891)
        assertThat(body.linesFilename()).contains("lines.txt")
        assertThat(body.lineSwLat()).contains(48.507027)
        assertThat(body.lineSwLon()).contains(-122.722946)
        assertThat(body.minHeightAgl()).contains(20.1)
        assertThat(body.multObs()).contains("S")
        assertThat(body.nextCycleDate()).contains(LocalDate.parse("2024-07-11"))
        assertThat(body.numLines()).contains(45993)
        assertThat(body.numObs()).contains(1)
        assertThat(body.numPoints()).contains(21830590)
        assertThat(body.obstacleRemarks()).contains("Obstacle remarks")
        assertThat(body.origId()).contains("L0000002289")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.ownerCountryCode()).contains("US")
        assertThat(body.pointLat()).contains(46.757211)
        assertThat(body.pointLon()).contains(-67.759494)
        assertThat(body.pointsFilename()).contains("points.txt")
        assertThat(body.processCode()).contains("OT")
        assertThat(body.producer()).contains("ACME")
        assertThat(body.provinceCode()).contains("23")
        assertThat(body.quality()).contains("0")
        assertThat(body.rawFileUri()).contains("Example URI")
        assertThat(body.revDate()).contains(LocalDate.parse("2020-02-26"))
        assertThat(body.segEndPoint()).contains(359655)
        assertThat(body.segNum()).contains(1)
        assertThat(body.segStartPoint()).contains(359655)
        assertThat(body.sourceDate()).contains(LocalDate.parse("2016-04-01"))
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.surfaceMatCode()).contains("U")
        assertThat(body.transactionCode()).contains("V")
        assertThat(body.validationCode()).contains(3)
        assertThat(body.values().getOrNull()).containsExactly("value1", "value2")
        assertThat(body.vectorsFilename()).contains("vectors.txt")
        assertThat(body.wac()).contains("262")
        assertThat(body.wacInnr()).contains("0409-00039")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            NavigationalObstructionUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .cycleDate(LocalDate.parse("2024-06-13"))
                .dataMode(NavigationalObstructionUpdateParams.DataMode.TEST)
                .obstacleId("359655")
                .obstacleType("V")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.cycleDate()).isEqualTo(LocalDate.parse("2024-06-13"))
        assertThat(body.dataMode()).isEqualTo(NavigationalObstructionUpdateParams.DataMode.TEST)
        assertThat(body.obstacleId()).isEqualTo("359655")
        assertThat(body.obstacleType()).isEqualTo("V")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
