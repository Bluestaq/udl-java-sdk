// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.orbittrack

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrbittrackCreateBulkParamsTest {

    @Test
    fun create() {
        OrbittrackCreateBulkParams.builder()
            .addBody(
                OrbittrackCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(OrbittrackCreateBulkParams.Body.DataMode.TEST)
                    .lat(19.88550102)
                    .lon(46.74596844)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                    .id("ORBIT_TRACK_ID")
                    .alt(585.71)
                    .amplification("A note regarding this spacecraft")
                    .angElev(15.2)
                    .aouData(listOf(34.3, 26.5, 1.2))
                    .aouType("ELLIPSE")
                    .callSign("Charlie")
                    .charlieLine("323751332255940400010000003635829600010200072500098205001150")
                    .chXRef("FHKX")
                    .cntnmnt(90.0)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                    .createdBy("some.user")
                    .decay(0.5868)
                    .dummy(false)
                    .feint(false)
                    .hq(false)
                    .idElset("c715a619-8695-44d2-9e7d-effd257b4843")
                    .identAmp("JOKER")
                    .idOnOrbit("32375")
                    .iff("ID Mode")
                    .installation(false)
                    .objectType(OrbittrackCreateBulkParams.Body.ObjectType.PAYLOAD)
                    .objIdent(OrbittrackCreateBulkParams.Body.ObjIdent.FRIEND)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("L2045")
                    .rdfRf(1.5273)
                    .reduced(false)
                    .reinforced(false)
                    .rptNum("123")
                    .satNo(37375)
                    .satStatus("INACTIVE")
                    .spd(15.03443)
                    .taskForce(false)
                    .addTrackSensor(
                        OrbittrackCreateBulkParams.Body.TrackSensor.builder()
                            .az(90.0)
                            .range(4023.95)
                            .minRangeLimit(20.23)
                            .missionNumber("Example Mission")
                            .sensorFovType(
                                OrbittrackCreateBulkParams.Body.TrackSensor.SensorFovType.UNKNOWN
                            )
                            .sensorName("SENSOR_NAME")
                            .sensorNumber(1234)
                            .build()
                    )
                    .trkId("3668f135-fcba-4630-a43d-e7782e11d988")
                    .vehType("SPACE")
                    .xref("XE")
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            OrbittrackCreateBulkParams.builder()
                .addBody(
                    OrbittrackCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(OrbittrackCreateBulkParams.Body.DataMode.TEST)
                        .lat(19.88550102)
                        .lon(46.74596844)
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                        .id("ORBIT_TRACK_ID")
                        .alt(585.71)
                        .amplification("A note regarding this spacecraft")
                        .angElev(15.2)
                        .aouData(listOf(34.3, 26.5, 1.2))
                        .aouType("ELLIPSE")
                        .callSign("Charlie")
                        .charlieLine("323751332255940400010000003635829600010200072500098205001150")
                        .chXRef("FHKX")
                        .cntnmnt(90.0)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .createdBy("some.user")
                        .decay(0.5868)
                        .dummy(false)
                        .feint(false)
                        .hq(false)
                        .idElset("c715a619-8695-44d2-9e7d-effd257b4843")
                        .identAmp("JOKER")
                        .idOnOrbit("32375")
                        .iff("ID Mode")
                        .installation(false)
                        .objectType(OrbittrackCreateBulkParams.Body.ObjectType.PAYLOAD)
                        .objIdent(OrbittrackCreateBulkParams.Body.ObjIdent.FRIEND)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("L2045")
                        .rdfRf(1.5273)
                        .reduced(false)
                        .reinforced(false)
                        .rptNum("123")
                        .satNo(37375)
                        .satStatus("INACTIVE")
                        .spd(15.03443)
                        .taskForce(false)
                        .addTrackSensor(
                            OrbittrackCreateBulkParams.Body.TrackSensor.builder()
                                .az(90.0)
                                .range(4023.95)
                                .minRangeLimit(20.23)
                                .missionNumber("Example Mission")
                                .sensorFovType(
                                    OrbittrackCreateBulkParams.Body.TrackSensor.SensorFovType
                                        .UNKNOWN
                                )
                                .sensorName("SENSOR_NAME")
                                .sensorNumber(1234)
                                .build()
                        )
                        .trkId("3668f135-fcba-4630-a43d-e7782e11d988")
                        .vehType("SPACE")
                        .xref("XE")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                OrbittrackCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(OrbittrackCreateBulkParams.Body.DataMode.TEST)
                    .lat(19.88550102)
                    .lon(46.74596844)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                    .id("ORBIT_TRACK_ID")
                    .alt(585.71)
                    .amplification("A note regarding this spacecraft")
                    .angElev(15.2)
                    .aouData(listOf(34.3, 26.5, 1.2))
                    .aouType("ELLIPSE")
                    .callSign("Charlie")
                    .charlieLine("323751332255940400010000003635829600010200072500098205001150")
                    .chXRef("FHKX")
                    .cntnmnt(90.0)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                    .createdBy("some.user")
                    .decay(0.5868)
                    .dummy(false)
                    .feint(false)
                    .hq(false)
                    .idElset("c715a619-8695-44d2-9e7d-effd257b4843")
                    .identAmp("JOKER")
                    .idOnOrbit("32375")
                    .iff("ID Mode")
                    .installation(false)
                    .objectType(OrbittrackCreateBulkParams.Body.ObjectType.PAYLOAD)
                    .objIdent(OrbittrackCreateBulkParams.Body.ObjIdent.FRIEND)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("L2045")
                    .rdfRf(1.5273)
                    .reduced(false)
                    .reinforced(false)
                    .rptNum("123")
                    .satNo(37375)
                    .satStatus("INACTIVE")
                    .spd(15.03443)
                    .taskForce(false)
                    .addTrackSensor(
                        OrbittrackCreateBulkParams.Body.TrackSensor.builder()
                            .az(90.0)
                            .range(4023.95)
                            .minRangeLimit(20.23)
                            .missionNumber("Example Mission")
                            .sensorFovType(
                                OrbittrackCreateBulkParams.Body.TrackSensor.SensorFovType.UNKNOWN
                            )
                            .sensorName("SENSOR_NAME")
                            .sensorNumber(1234)
                            .build()
                    )
                    .trkId("3668f135-fcba-4630-a43d-e7782e11d988")
                    .vehType("SPACE")
                    .xref("XE")
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OrbittrackCreateBulkParams.builder()
                .addBody(
                    OrbittrackCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(OrbittrackCreateBulkParams.Body.DataMode.TEST)
                        .lat(19.88550102)
                        .lon(46.74596844)
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                OrbittrackCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(OrbittrackCreateBulkParams.Body.DataMode.TEST)
                    .lat(19.88550102)
                    .lon(46.74596844)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                    .build()
            )
    }
}
