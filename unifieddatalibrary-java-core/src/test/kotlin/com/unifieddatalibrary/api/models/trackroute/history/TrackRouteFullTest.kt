// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.trackroute.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.trackroute.history.TrackRouteFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TrackRouteFullTest {

    @Test
    fun create() {
      val trackRouteFull = TrackRouteFull.builder()
          .classificationMarking("U")
          .dataMode(TrackRouteFull.DataMode.TEST)
          .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .source("Bluestaq")
          .type("AIR REFUELING")
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .addAltitudeBlock(TrackRouteFull.AltitudeBlock.builder()
              .altitudeSequenceId("A1")
              .lowerAltitude(27000.1)
              .upperAltitude(27200.5)
              .build())
          .apnSetting("1-3-1")
          .apxBeaconCode("5/1")
          .artccMessage("OAKLAND CTR/GUAM CERAP")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .creatingOrg("HQPAC")
          .direction("NE")
          .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .externalId("GDSSMH121004232315303094")
          .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .locationTrackId("POACHR")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .addPoc(TrackRouteFull.Poc.builder()
              .office("A34")
              .phone("8675309")
              .pocName("Fred Smith")
              .pocOrg("HQAF")
              .pocSequenceId(1)
              .pocTypeName("Originator")
              .rank("Capt")
              .remark("POC remark.")
              .username("fgsmith")
              .build())
          .priFreq(357.5)
          .receiverTankerChCode("31/094")
          .regionCode("5")
          .regionName("North America")
          .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
          .addRoutePoint(TrackRouteFull.RoutePoint.builder()
              .altCountryCode("IZ")
              .countryCode("NL")
              .dafifPt(true)
              .magDec(7.35)
              .navaid("HTO")
              .navaidLength(100.2)
              .navaidType("VORTAC")
              .ptLat(45.23)
              .ptLon(179.1)
              .ptSequenceId(1)
              .ptTypeCode("EP")
              .ptTypeName("ENTRY POINT")
              .waypointName("KCHS")
              .build())
          .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
          .schedulerOrgUnit("612 AOC")
          .secFreq(319.7)
          .shortName("CH61")
          .sic("N")
          .sourceDl("AXE")
          .trackId("CH61A")
          .trackName("CH61 POST")
          .typeCode("V")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(trackRouteFull.classificationMarking()).isEqualTo("U")
      assertThat(trackRouteFull.dataMode()).isEqualTo(TrackRouteFull.DataMode.TEST)
      assertThat(trackRouteFull.lastUpdateDate()).isEqualTo(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
      assertThat(trackRouteFull.source()).isEqualTo("Bluestaq")
      assertThat(trackRouteFull.type()).isEqualTo("AIR REFUELING")
      assertThat(trackRouteFull.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
      assertThat(trackRouteFull.altitudeBlocks().getOrNull()).containsExactly(TrackRouteFull.AltitudeBlock.builder()
          .altitudeSequenceId("A1")
          .lowerAltitude(27000.1)
          .upperAltitude(27200.5)
          .build())
      assertThat(trackRouteFull.apnSetting()).contains("1-3-1")
      assertThat(trackRouteFull.apxBeaconCode()).contains("5/1")
      assertThat(trackRouteFull.artccMessage()).contains("OAKLAND CTR/GUAM CERAP")
      assertThat(trackRouteFull.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(trackRouteFull.createdBy()).contains("some.user")
      assertThat(trackRouteFull.creatingOrg()).contains("HQPAC")
      assertThat(trackRouteFull.direction()).contains("NE")
      assertThat(trackRouteFull.effectiveDate()).contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
      assertThat(trackRouteFull.externalId()).contains("GDSSMH121004232315303094")
      assertThat(trackRouteFull.lastUsedDate()).contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
      assertThat(trackRouteFull.locationTrackId()).contains("POACHR")
      assertThat(trackRouteFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(trackRouteFull.origNetwork()).contains("OPS1")
      assertThat(trackRouteFull.poc().getOrNull()).containsExactly(TrackRouteFull.Poc.builder()
          .office("A34")
          .phone("8675309")
          .pocName("Fred Smith")
          .pocOrg("HQAF")
          .pocSequenceId(1)
          .pocTypeName("Originator")
          .rank("Capt")
          .remark("POC remark.")
          .username("fgsmith")
          .build())
      assertThat(trackRouteFull.priFreq()).contains(357.5)
      assertThat(trackRouteFull.receiverTankerChCode()).contains("31/094")
      assertThat(trackRouteFull.regionCode()).contains("5")
      assertThat(trackRouteFull.regionName()).contains("North America")
      assertThat(trackRouteFull.reviewDate()).contains(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
      assertThat(trackRouteFull.routePoints().getOrNull()).containsExactly(TrackRouteFull.RoutePoint.builder()
          .altCountryCode("IZ")
          .countryCode("NL")
          .dafifPt(true)
          .magDec(7.35)
          .navaid("HTO")
          .navaidLength(100.2)
          .navaidType("VORTAC")
          .ptLat(45.23)
          .ptLon(179.1)
          .ptSequenceId(1)
          .ptTypeCode("EP")
          .ptTypeName("ENTRY POINT")
          .waypointName("KCHS")
          .build())
      assertThat(trackRouteFull.schedulerOrgName()).contains("97 OSS/OSOS DSN 866-5555")
      assertThat(trackRouteFull.schedulerOrgUnit()).contains("612 AOC")
      assertThat(trackRouteFull.secFreq()).contains(319.7)
      assertThat(trackRouteFull.shortName()).contains("CH61")
      assertThat(trackRouteFull.sic()).contains("N")
      assertThat(trackRouteFull.sourceDl()).contains("AXE")
      assertThat(trackRouteFull.trackId()).contains("CH61A")
      assertThat(trackRouteFull.trackName()).contains("CH61 POST")
      assertThat(trackRouteFull.typeCode()).contains("V")
      assertThat(trackRouteFull.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(trackRouteFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val trackRouteFull = TrackRouteFull.builder()
          .classificationMarking("U")
          .dataMode(TrackRouteFull.DataMode.TEST)
          .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .source("Bluestaq")
          .type("AIR REFUELING")
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .addAltitudeBlock(TrackRouteFull.AltitudeBlock.builder()
              .altitudeSequenceId("A1")
              .lowerAltitude(27000.1)
              .upperAltitude(27200.5)
              .build())
          .apnSetting("1-3-1")
          .apxBeaconCode("5/1")
          .artccMessage("OAKLAND CTR/GUAM CERAP")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .creatingOrg("HQPAC")
          .direction("NE")
          .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .externalId("GDSSMH121004232315303094")
          .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
          .locationTrackId("POACHR")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .addPoc(TrackRouteFull.Poc.builder()
              .office("A34")
              .phone("8675309")
              .pocName("Fred Smith")
              .pocOrg("HQAF")
              .pocSequenceId(1)
              .pocTypeName("Originator")
              .rank("Capt")
              .remark("POC remark.")
              .username("fgsmith")
              .build())
          .priFreq(357.5)
          .receiverTankerChCode("31/094")
          .regionCode("5")
          .regionName("North America")
          .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
          .addRoutePoint(TrackRouteFull.RoutePoint.builder()
              .altCountryCode("IZ")
              .countryCode("NL")
              .dafifPt(true)
              .magDec(7.35)
              .navaid("HTO")
              .navaidLength(100.2)
              .navaidType("VORTAC")
              .ptLat(45.23)
              .ptLon(179.1)
              .ptSequenceId(1)
              .ptTypeCode("EP")
              .ptTypeName("ENTRY POINT")
              .waypointName("KCHS")
              .build())
          .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
          .schedulerOrgUnit("612 AOC")
          .secFreq(319.7)
          .shortName("CH61")
          .sic("N")
          .sourceDl("AXE")
          .trackId("CH61A")
          .trackName("CH61 POST")
          .typeCode("V")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedTrackRouteFull = jsonMapper.readValue(jsonMapper.writeValueAsString(trackRouteFull), jacksonTypeRef<TrackRouteFull>())

      assertThat(roundtrippedTrackRouteFull).isEqualTo(trackRouteFull)
    }
}
