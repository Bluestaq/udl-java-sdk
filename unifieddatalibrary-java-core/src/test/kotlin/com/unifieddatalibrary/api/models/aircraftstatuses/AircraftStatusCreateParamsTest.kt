// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.aircraftstatuses

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftStatusCreateParamsTest {

    @Test
    fun create() {
        AircraftStatusCreateParams.builder()
            .classificationMarking("U")
            .dataMode(AircraftStatusCreateParams.DataMode.TEST)
            .idAircraft("29232269-e4c2-45c9-aa21-039a33209340")
            .source("Bluestaq")
            .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
            .additionalSys(listOf("ATOMS", "TUDL", "BLOS1"))
            .airToAirStatus(AircraftStatusCreateParams.AirToAirStatus.OPERATIONAL)
            .airToGroundStatus(AircraftStatusCreateParams.AirToGroundStatus.OPERATIONAL)
            .alphaStatusCode("A2")
            .altAircraftId("ORIG-AIRCRAFT-ID")
            .contaminationStatus("CLEAR")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .currentIcao("KCHS")
            .currentState("AVAILABLE")
            .earliestTaEndTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .etic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .flightPhase("Landing")
            .fuel(10)
            .fuelFunction("Burn")
            .fuelStatus("DELIVERED")
            .geoLoc("AJJY")
            .groundStatus("ALERT")
            .gunCapable(true)
            .gunRdsMax(550)
            .gunRdsMin(150)
            .gunRdsType("7.62 MM")
            .idAirfield("b89430e3-97d9-408c-9c89-fd3840c4b84d")
            .idPoi("0e52f081-a2e3-4b73-b822-88b882232691")
            .addInventory("AIM-9 SIDEWINDER")
            .addInventory("AIM-120 AMRAAM")
            .addInventoryMax(2)
            .addInventoryMax(2)
            .addInventoryMin(1)
            .addInventoryMin(2)
            .lastInspectionDate(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
            .lastUpdatedBy("some.user")
            .maintPoc("PSUP NIGHT SHIFT 800-555-4412")
            .maintPriority("1")
            .maintStatus("maintenance status")
            .maintStatusDriver("SCREW STUCK IN LEFT NLG TIRE")
            .maintStatusUpdate(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .missionReadiness("ABLE")
            .mxRemark("COM2 INOP")
            .nextIcao("PHNL")
            .notes("Some notes for aircraft A")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .parkLocation("B1")
            .parkLocationSystem("GDSS")
            .previousIcao("EGLL")
            .sourceDl("AXE")
            .taStartTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .troubleshootEtic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .addUnavailableSy("CMDS")
            .addUnavailableSy("AOC")
            .build()
    }

    @Test
    fun body() {
        val params =
            AircraftStatusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AircraftStatusCreateParams.DataMode.TEST)
                .idAircraft("29232269-e4c2-45c9-aa21-039a33209340")
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .additionalSys(listOf("ATOMS", "TUDL", "BLOS1"))
                .airToAirStatus(AircraftStatusCreateParams.AirToAirStatus.OPERATIONAL)
                .airToGroundStatus(AircraftStatusCreateParams.AirToGroundStatus.OPERATIONAL)
                .alphaStatusCode("A2")
                .altAircraftId("ORIG-AIRCRAFT-ID")
                .contaminationStatus("CLEAR")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentIcao("KCHS")
                .currentState("AVAILABLE")
                .earliestTaEndTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .etic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .flightPhase("Landing")
                .fuel(10)
                .fuelFunction("Burn")
                .fuelStatus("DELIVERED")
                .geoLoc("AJJY")
                .groundStatus("ALERT")
                .gunCapable(true)
                .gunRdsMax(550)
                .gunRdsMin(150)
                .gunRdsType("7.62 MM")
                .idAirfield("b89430e3-97d9-408c-9c89-fd3840c4b84d")
                .idPoi("0e52f081-a2e3-4b73-b822-88b882232691")
                .addInventory("AIM-9 SIDEWINDER")
                .addInventory("AIM-120 AMRAAM")
                .addInventoryMax(2)
                .addInventoryMax(2)
                .addInventoryMin(1)
                .addInventoryMin(2)
                .lastInspectionDate(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
                .lastUpdatedBy("some.user")
                .maintPoc("PSUP NIGHT SHIFT 800-555-4412")
                .maintPriority("1")
                .maintStatus("maintenance status")
                .maintStatusDriver("SCREW STUCK IN LEFT NLG TIRE")
                .maintStatusUpdate(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .missionReadiness("ABLE")
                .mxRemark("COM2 INOP")
                .nextIcao("PHNL")
                .notes("Some notes for aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .parkLocation("B1")
                .parkLocationSystem("GDSS")
                .previousIcao("EGLL")
                .sourceDl("AXE")
                .taStartTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .troubleshootEtic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .addUnavailableSy("CMDS")
                .addUnavailableSy("AOC")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AircraftStatusCreateParams.DataMode.TEST)
        assertThat(body.idAircraft()).isEqualTo("29232269-e4c2-45c9-aa21-039a33209340")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(body.additionalSys().getOrNull()).containsExactly("ATOMS", "TUDL", "BLOS1")
        assertThat(body.airToAirStatus())
            .contains(AircraftStatusCreateParams.AirToAirStatus.OPERATIONAL)
        assertThat(body.airToGroundStatus())
            .contains(AircraftStatusCreateParams.AirToGroundStatus.OPERATIONAL)
        assertThat(body.alphaStatusCode()).contains("A2")
        assertThat(body.altAircraftId()).contains("ORIG-AIRCRAFT-ID")
        assertThat(body.contaminationStatus()).contains("CLEAR")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.currentIcao()).contains("KCHS")
        assertThat(body.currentState()).contains("AVAILABLE")
        assertThat(body.earliestTaEndTime())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.etic()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.flightPhase()).contains("Landing")
        assertThat(body.fuel()).contains(10)
        assertThat(body.fuelFunction()).contains("Burn")
        assertThat(body.fuelStatus()).contains("DELIVERED")
        assertThat(body.geoLoc()).contains("AJJY")
        assertThat(body.groundStatus()).contains("ALERT")
        assertThat(body.gunCapable()).contains(true)
        assertThat(body.gunRdsMax()).contains(550)
        assertThat(body.gunRdsMin()).contains(150)
        assertThat(body.gunRdsType()).contains("7.62 MM")
        assertThat(body.idAirfield()).contains("b89430e3-97d9-408c-9c89-fd3840c4b84d")
        assertThat(body.idPoi()).contains("0e52f081-a2e3-4b73-b822-88b882232691")
        assertThat(body.inventory().getOrNull())
            .containsExactly("AIM-9 SIDEWINDER", "AIM-120 AMRAAM")
        assertThat(body.inventoryMax().getOrNull()).containsExactly(2, 2)
        assertThat(body.inventoryMin().getOrNull()).containsExactly(1, 2)
        assertThat(body.lastInspectionDate())
            .contains(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
        assertThat(body.lastUpdatedBy()).contains("some.user")
        assertThat(body.maintPoc()).contains("PSUP NIGHT SHIFT 800-555-4412")
        assertThat(body.maintPriority()).contains("1")
        assertThat(body.maintStatus()).contains("maintenance status")
        assertThat(body.maintStatusDriver()).contains("SCREW STUCK IN LEFT NLG TIRE")
        assertThat(body.maintStatusUpdate())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.missionReadiness()).contains("ABLE")
        assertThat(body.mxRemark()).contains("COM2 INOP")
        assertThat(body.nextIcao()).contains("PHNL")
        assertThat(body.notes()).contains("Some notes for aircraft A")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.parkLocation()).contains("B1")
        assertThat(body.parkLocationSystem()).contains("GDSS")
        assertThat(body.previousIcao()).contains("EGLL")
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.taStartTime()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.troubleshootEtic())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.unavailableSys().getOrNull()).containsExactly("CMDS", "AOC")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            AircraftStatusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AircraftStatusCreateParams.DataMode.TEST)
                .idAircraft("29232269-e4c2-45c9-aa21-039a33209340")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AircraftStatusCreateParams.DataMode.TEST)
        assertThat(body.idAircraft()).isEqualTo("29232269-e4c2-45c9-aa21-039a33209340")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
