// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.personnelrecovery

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.personnelrecovery.PersonnelRecoveryFullL
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PersonnelRecoveryFullLTest {

    @Test
    fun create() {
      val personnelRecoveryFullL = PersonnelRecoveryFullL.builder()
          .classificationMarking("U")
          .dataMode(PersonnelRecoveryFullL.DataMode.TEST)
          .msgTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
          .pickupLat(75.1234)
          .pickupLon(175.1234)
          .source("Bluestaq")
          .type("MEDICAL")
          .id("PERSONNEL_RECOVERY-ID")
          .authMethod("PASSPORT")
          .authStatus("NO STATEMENT")
          .beaconInd(false)
          .callSign("BADGER")
          .commEq1("LL PHONE")
          .commEq2("LL PHONE")
          .commEq3("LL PHONE")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .executionInfo(PersonnelRecoveryFullL.ExecutionInfo.builder()
              .egress(66.53)
              .addEgressPoint(107.23)
              .addEgressPoint(30.455)
              .escortVehicle(PersonnelRecoveryFullL.ExecutionInfo.EscortVehicle.builder()
                  .callSign("FALCO")
                  .primaryFreq(34.55)
                  .strength(5)
                  .type("C17")
                  .build())
              .ingress(35.66)
              .addInitialPoint(103.23)
              .addInitialPoint(30.445)
              .objStrategy("Description of strategy plan.")
              .recoveryVehicle(PersonnelRecoveryFullL.ExecutionInfo.RecoveryVehicle.builder()
                  .callSign("FALCO")
                  .primaryFreq(34.55)
                  .strength(5)
                  .type("C17")
                  .build())
              .build())
          .identity("NEUTRAL CIVILIAN")
          .idWeatherReport("WEATHER_REPORT-ID")
          .milClass("CIVILIAN")
          .natAlliance(1)
          .natAlliance1(0)
          .numAmbulatory(1)
          .numAmbulatoryInjured(2)
          .numNonAmbulatory(0)
          .numPersons(1)
          .objectiveAreaInfo(PersonnelRecoveryFullL.ObjectiveAreaInfo.builder()
              .addEnemyData(PersonnelRecoveryFullL.ObjectiveAreaInfo.EnemyData.builder()
                  .dirToEnemy("NORTHWEST")
                  .friendliesRemarks("Comments from friendlies.")
                  .hlzRemarks("Hot Landing Zone remarks.")
                  .hostileFireType("SMALL ARMS")
                  .build())
              .oscCallSign("STARFOX")
              .oscFreq(12.55)
              .pzDesc("Near the lake.")
              .addPzLocation(103.23)
              .addPzLocation(30.445)
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .pickupAlt(30.1234)
          .recovId("RECOV-ID")
          .rxFreq(5.5)
          .survivorMessages("UNINJURED CANT MOVE HOSTILES NEARBY")
          .survivorRadio("NO STATEMENT")
          .termInd(true)
          .textMsg("Additional message from survivor.")
          .txFreq(5.5)
          .build()

      assertThat(personnelRecoveryFullL.classificationMarking()).isEqualTo("U")
      assertThat(personnelRecoveryFullL.dataMode()).isEqualTo(PersonnelRecoveryFullL.DataMode.TEST)
      assertThat(personnelRecoveryFullL.msgTime()).isEqualTo(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
      assertThat(personnelRecoveryFullL.pickupLat()).isEqualTo(75.1234)
      assertThat(personnelRecoveryFullL.pickupLon()).isEqualTo(175.1234)
      assertThat(personnelRecoveryFullL.source()).isEqualTo("Bluestaq")
      assertThat(personnelRecoveryFullL.type()).isEqualTo("MEDICAL")
      assertThat(personnelRecoveryFullL.id()).contains("PERSONNEL_RECOVERY-ID")
      assertThat(personnelRecoveryFullL.authMethod()).contains("PASSPORT")
      assertThat(personnelRecoveryFullL.authStatus()).contains("NO STATEMENT")
      assertThat(personnelRecoveryFullL.beaconInd()).contains(false)
      assertThat(personnelRecoveryFullL.callSign()).contains("BADGER")
      assertThat(personnelRecoveryFullL.commEq1()).contains("LL PHONE")
      assertThat(personnelRecoveryFullL.commEq2()).contains("LL PHONE")
      assertThat(personnelRecoveryFullL.commEq3()).contains("LL PHONE")
      assertThat(personnelRecoveryFullL.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(personnelRecoveryFullL.createdBy()).contains("some.user")
      assertThat(personnelRecoveryFullL.executionInfo()).contains(PersonnelRecoveryFullL.ExecutionInfo.builder()
          .egress(66.53)
          .addEgressPoint(107.23)
          .addEgressPoint(30.455)
          .escortVehicle(PersonnelRecoveryFullL.ExecutionInfo.EscortVehicle.builder()
              .callSign("FALCO")
              .primaryFreq(34.55)
              .strength(5)
              .type("C17")
              .build())
          .ingress(35.66)
          .addInitialPoint(103.23)
          .addInitialPoint(30.445)
          .objStrategy("Description of strategy plan.")
          .recoveryVehicle(PersonnelRecoveryFullL.ExecutionInfo.RecoveryVehicle.builder()
              .callSign("FALCO")
              .primaryFreq(34.55)
              .strength(5)
              .type("C17")
              .build())
          .build())
      assertThat(personnelRecoveryFullL.identity()).contains("NEUTRAL CIVILIAN")
      assertThat(personnelRecoveryFullL.idWeatherReport()).contains("WEATHER_REPORT-ID")
      assertThat(personnelRecoveryFullL.milClass()).contains("CIVILIAN")
      assertThat(personnelRecoveryFullL.natAlliance()).contains(1)
      assertThat(personnelRecoveryFullL.natAlliance1()).contains(0)
      assertThat(personnelRecoveryFullL.numAmbulatory()).contains(1)
      assertThat(personnelRecoveryFullL.numAmbulatoryInjured()).contains(2)
      assertThat(personnelRecoveryFullL.numNonAmbulatory()).contains(0)
      assertThat(personnelRecoveryFullL.numPersons()).contains(1)
      assertThat(personnelRecoveryFullL.objectiveAreaInfo()).contains(PersonnelRecoveryFullL.ObjectiveAreaInfo.builder()
          .addEnemyData(PersonnelRecoveryFullL.ObjectiveAreaInfo.EnemyData.builder()
              .dirToEnemy("NORTHWEST")
              .friendliesRemarks("Comments from friendlies.")
              .hlzRemarks("Hot Landing Zone remarks.")
              .hostileFireType("SMALL ARMS")
              .build())
          .oscCallSign("STARFOX")
          .oscFreq(12.55)
          .pzDesc("Near the lake.")
          .addPzLocation(103.23)
          .addPzLocation(30.445)
          .build())
      assertThat(personnelRecoveryFullL.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(personnelRecoveryFullL.origNetwork()).contains("ORIG")
      assertThat(personnelRecoveryFullL.pickupAlt()).contains(30.1234)
      assertThat(personnelRecoveryFullL.recovId()).contains("RECOV-ID")
      assertThat(personnelRecoveryFullL.rxFreq()).contains(5.5)
      assertThat(personnelRecoveryFullL.survivorMessages()).contains("UNINJURED CANT MOVE HOSTILES NEARBY")
      assertThat(personnelRecoveryFullL.survivorRadio()).contains("NO STATEMENT")
      assertThat(personnelRecoveryFullL.termInd()).contains(true)
      assertThat(personnelRecoveryFullL.textMsg()).contains("Additional message from survivor.")
      assertThat(personnelRecoveryFullL.txFreq()).contains(5.5)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val personnelRecoveryFullL = PersonnelRecoveryFullL.builder()
          .classificationMarking("U")
          .dataMode(PersonnelRecoveryFullL.DataMode.TEST)
          .msgTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
          .pickupLat(75.1234)
          .pickupLon(175.1234)
          .source("Bluestaq")
          .type("MEDICAL")
          .id("PERSONNEL_RECOVERY-ID")
          .authMethod("PASSPORT")
          .authStatus("NO STATEMENT")
          .beaconInd(false)
          .callSign("BADGER")
          .commEq1("LL PHONE")
          .commEq2("LL PHONE")
          .commEq3("LL PHONE")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .executionInfo(PersonnelRecoveryFullL.ExecutionInfo.builder()
              .egress(66.53)
              .addEgressPoint(107.23)
              .addEgressPoint(30.455)
              .escortVehicle(PersonnelRecoveryFullL.ExecutionInfo.EscortVehicle.builder()
                  .callSign("FALCO")
                  .primaryFreq(34.55)
                  .strength(5)
                  .type("C17")
                  .build())
              .ingress(35.66)
              .addInitialPoint(103.23)
              .addInitialPoint(30.445)
              .objStrategy("Description of strategy plan.")
              .recoveryVehicle(PersonnelRecoveryFullL.ExecutionInfo.RecoveryVehicle.builder()
                  .callSign("FALCO")
                  .primaryFreq(34.55)
                  .strength(5)
                  .type("C17")
                  .build())
              .build())
          .identity("NEUTRAL CIVILIAN")
          .idWeatherReport("WEATHER_REPORT-ID")
          .milClass("CIVILIAN")
          .natAlliance(1)
          .natAlliance1(0)
          .numAmbulatory(1)
          .numAmbulatoryInjured(2)
          .numNonAmbulatory(0)
          .numPersons(1)
          .objectiveAreaInfo(PersonnelRecoveryFullL.ObjectiveAreaInfo.builder()
              .addEnemyData(PersonnelRecoveryFullL.ObjectiveAreaInfo.EnemyData.builder()
                  .dirToEnemy("NORTHWEST")
                  .friendliesRemarks("Comments from friendlies.")
                  .hlzRemarks("Hot Landing Zone remarks.")
                  .hostileFireType("SMALL ARMS")
                  .build())
              .oscCallSign("STARFOX")
              .oscFreq(12.55)
              .pzDesc("Near the lake.")
              .addPzLocation(103.23)
              .addPzLocation(30.445)
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .pickupAlt(30.1234)
          .recovId("RECOV-ID")
          .rxFreq(5.5)
          .survivorMessages("UNINJURED CANT MOVE HOSTILES NEARBY")
          .survivorRadio("NO STATEMENT")
          .termInd(true)
          .textMsg("Additional message from survivor.")
          .txFreq(5.5)
          .build()

      val roundtrippedPersonnelRecoveryFullL = jsonMapper.readValue(jsonMapper.writeValueAsString(personnelRecoveryFullL), jacksonTypeRef<PersonnelRecoveryFullL>())

      assertThat(roundtrippedPersonnelRecoveryFullL).isEqualTo(personnelRecoveryFullL)
    }
}
