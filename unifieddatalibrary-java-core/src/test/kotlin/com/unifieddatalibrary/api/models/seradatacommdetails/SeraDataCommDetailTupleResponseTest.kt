// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradatacommdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.seradatacommdetails.SeraDataCommDetailTupleResponse
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeraDataCommDetailTupleResponseTest {

    @Test
    fun create() {
      val seraDataCommDetailTupleResponse = SeraDataCommDetailTupleResponse.builder()
          .classificationMarking("U")
          .dataMode(SeraDataCommDetailTupleResponse.DataMode.TEST)
          .source("Bluestaq")
          .id("SERADATACOMMDETAILS-ID")
          .band("X")
          .bandwidth(1.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .eirp(1.23)
          .estHtsTotalCapacity(1.23)
          .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
          .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
          .gatewayDownlinkFrom(1.23)
          .gatewayDownlinkTo(1.23)
          .gatewayUplinkFrom(1.23)
          .gatewayUplinkTo(1.23)
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .htsNumUserSpotBeams(1)
          .htsUserDownlinkBandwidthPerBeam(1.23)
          .htsUserUplinkBandwidthPerBeam(1.23)
          .idComm("idComm")
          .manufacturerOrgId("manufacturerOrgId")
          .num36MhzEquivalentTransponders(1)
          .numOperationalTransponders(1)
          .numSpareTransponders(1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .payloadNotes("Sample Notes")
          .polarization("polarization")
          .solidStatePowerAmp(1.23)
          .spacecraftId("spacecraftId")
          .tradeLeaseOrgId("tradeLeaseOrgId")
          .travelingWaveTubeAmplifier(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .userDownlinkFrom(1.23)
          .userDownlinkTo(1.23)
          .userUplinkFrom(1.23)
          .userUplinkTo(1.23)
          .build()

      assertThat(seraDataCommDetailTupleResponse.classificationMarking()).isEqualTo("U")
      assertThat(seraDataCommDetailTupleResponse.dataMode()).isEqualTo(SeraDataCommDetailTupleResponse.DataMode.TEST)
      assertThat(seraDataCommDetailTupleResponse.source()).isEqualTo("Bluestaq")
      assertThat(seraDataCommDetailTupleResponse.id()).contains("SERADATACOMMDETAILS-ID")
      assertThat(seraDataCommDetailTupleResponse.band()).contains("X")
      assertThat(seraDataCommDetailTupleResponse.bandwidth()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seraDataCommDetailTupleResponse.createdBy()).contains("some.user")
      assertThat(seraDataCommDetailTupleResponse.eirp()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.estHtsTotalCapacity()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.estHtsTotalUserDownlinkBandwidthPerBeam()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.estHtsTotalUserUplinkBandwidthPerBeam()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.gatewayDownlinkFrom()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.gatewayDownlinkTo()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.gatewayUplinkFrom()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.gatewayUplinkTo()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.hostedForCompanyOrgId()).contains("hostedForCompanyOrgId")
      assertThat(seraDataCommDetailTupleResponse.htsNumUserSpotBeams()).contains(1)
      assertThat(seraDataCommDetailTupleResponse.htsUserDownlinkBandwidthPerBeam()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.htsUserUplinkBandwidthPerBeam()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.idComm()).contains("idComm")
      assertThat(seraDataCommDetailTupleResponse.manufacturerOrgId()).contains("manufacturerOrgId")
      assertThat(seraDataCommDetailTupleResponse.num36MhzEquivalentTransponders()).contains(1)
      assertThat(seraDataCommDetailTupleResponse.numOperationalTransponders()).contains(1)
      assertThat(seraDataCommDetailTupleResponse.numSpareTransponders()).contains(1)
      assertThat(seraDataCommDetailTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(seraDataCommDetailTupleResponse.origNetwork()).contains("ORIG")
      assertThat(seraDataCommDetailTupleResponse.payloadNotes()).contains("Sample Notes")
      assertThat(seraDataCommDetailTupleResponse.polarization()).contains("polarization")
      assertThat(seraDataCommDetailTupleResponse.solidStatePowerAmp()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.spacecraftId()).contains("spacecraftId")
      assertThat(seraDataCommDetailTupleResponse.tradeLeaseOrgId()).contains("tradeLeaseOrgId")
      assertThat(seraDataCommDetailTupleResponse.travelingWaveTubeAmplifier()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seraDataCommDetailTupleResponse.updatedBy()).contains("some.user")
      assertThat(seraDataCommDetailTupleResponse.userDownlinkFrom()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.userDownlinkTo()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.userUplinkFrom()).contains(1.23)
      assertThat(seraDataCommDetailTupleResponse.userUplinkTo()).contains(1.23)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val seraDataCommDetailTupleResponse = SeraDataCommDetailTupleResponse.builder()
          .classificationMarking("U")
          .dataMode(SeraDataCommDetailTupleResponse.DataMode.TEST)
          .source("Bluestaq")
          .id("SERADATACOMMDETAILS-ID")
          .band("X")
          .bandwidth(1.23)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .eirp(1.23)
          .estHtsTotalCapacity(1.23)
          .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
          .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
          .gatewayDownlinkFrom(1.23)
          .gatewayDownlinkTo(1.23)
          .gatewayUplinkFrom(1.23)
          .gatewayUplinkTo(1.23)
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .htsNumUserSpotBeams(1)
          .htsUserDownlinkBandwidthPerBeam(1.23)
          .htsUserUplinkBandwidthPerBeam(1.23)
          .idComm("idComm")
          .manufacturerOrgId("manufacturerOrgId")
          .num36MhzEquivalentTransponders(1)
          .numOperationalTransponders(1)
          .numSpareTransponders(1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .payloadNotes("Sample Notes")
          .polarization("polarization")
          .solidStatePowerAmp(1.23)
          .spacecraftId("spacecraftId")
          .tradeLeaseOrgId("tradeLeaseOrgId")
          .travelingWaveTubeAmplifier(1.23)
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .userDownlinkFrom(1.23)
          .userDownlinkTo(1.23)
          .userUplinkFrom(1.23)
          .userUplinkTo(1.23)
          .build()

      val roundtrippedSeraDataCommDetailTupleResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(seraDataCommDetailTupleResponse), jacksonTypeRef<SeraDataCommDetailTupleResponse>())

      assertThat(roundtrippedSeraDataCommDetailTupleResponse).isEqualTo(seraDataCommDetailTupleResponse)
    }
}
