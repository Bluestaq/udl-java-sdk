// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.radarobservation

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RadarobservationCreateParamsTest {

    @Test
    fun create() {
        RadarobservationCreateParams.builder()
            .classificationMarking("U")
            .dataMode(RadarobservationCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .id("RADAROBSERVATION-ID")
            .azimuth(45.23)
            .azimuthBias(45.23)
            .azimuthMeasured(true)
            .azimuthRate(1.23)
            .azimuthUnc(45.23)
            .beam(1.23)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .declination(10.23)
            .declinationMeasured(true)
            .descriptor("descriptor")
            .doppler(10.23)
            .dopplerUnc(1.23)
            .elevation(45.23)
            .elevationBias(1.23)
            .elevationMeasured(true)
            .elevationRate(1.23)
            .elevationUnc(1.23)
            .idOnOrbit("ONORBIT-ID")
            .idSensor("SENSOR-ID")
            .obPosition("FIRST")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId("ORIGSENSOR-ID")
            .orthogonalRcs(1.23)
            .orthogonalRcsUnc(10.23)
            .ra(1.23)
            .raMeasured(true)
            .range(100.23)
            .rangeAccel(10.23)
            .rangeAccelUnc(1.23)
            .rangeBias(1.23)
            .rangeMeasured(true)
            .rangeRate(1.23)
            .rangeRateMeasured(true)
            .rangeRateUnc(0.5)
            .rangeUnc(1.23)
            .rawFileUri("rawFileURI")
            .rcs(100.23)
            .rcsUnc(1.23)
            .satNo(1)
            .senReferenceFrame(RadarobservationCreateParams.SenReferenceFrame.J2000)
            .senx(45.23)
            .seny(40.23)
            .senz(35.23)
            .snr(0.5)
            .sourceDl("AXE")
            .addTag("TAG1")
            .addTag("TAG2")
            .taskId("TASK-ID")
            .timingBias(1.23)
            .trackId("TRACK-ID")
            .trackingState("INIT ACQ")
            .transactionId("TRANSACTION-ID")
            .type("RADAR")
            .uct(true)
            .x(50.23)
            .xvel(1.23)
            .y(50.23)
            .yvel(5.23)
            .z(50.23)
            .zvel(5.23)
            .build()
    }

    @Test
    fun body() {
        val params =
            RadarobservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(RadarobservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("RADAROBSERVATION-ID")
                .azimuth(45.23)
                .azimuthBias(45.23)
                .azimuthMeasured(true)
                .azimuthRate(1.23)
                .azimuthUnc(45.23)
                .beam(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .declinationMeasured(true)
                .descriptor("descriptor")
                .doppler(10.23)
                .dopplerUnc(1.23)
                .elevation(45.23)
                .elevationBias(1.23)
                .elevationMeasured(true)
                .elevationRate(1.23)
                .elevationUnc(1.23)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(1.23)
                .orthogonalRcsUnc(10.23)
                .ra(1.23)
                .raMeasured(true)
                .range(100.23)
                .rangeAccel(10.23)
                .rangeAccelUnc(1.23)
                .rangeBias(1.23)
                .rangeMeasured(true)
                .rangeRate(1.23)
                .rangeRateMeasured(true)
                .rangeRateUnc(0.5)
                .rangeUnc(1.23)
                .rawFileUri("rawFileURI")
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(1)
                .senReferenceFrame(RadarobservationCreateParams.SenReferenceFrame.J2000)
                .senx(45.23)
                .seny(40.23)
                .senz(35.23)
                .snr(0.5)
                .sourceDl("AXE")
                .addTag("TAG1")
                .addTag("TAG2")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .trackId("TRACK-ID")
                .trackingState("INIT ACQ")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(true)
                .x(50.23)
                .xvel(1.23)
                .y(50.23)
                .yvel(5.23)
                .z(50.23)
                .zvel(5.23)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(RadarobservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("RADAROBSERVATION-ID")
        assertThat(body.azimuth()).contains(45.23)
        assertThat(body.azimuthBias()).contains(45.23)
        assertThat(body.azimuthMeasured()).contains(true)
        assertThat(body.azimuthRate()).contains(1.23)
        assertThat(body.azimuthUnc()).contains(45.23)
        assertThat(body.beam()).contains(1.23)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.declination()).contains(10.23)
        assertThat(body.declinationMeasured()).contains(true)
        assertThat(body.descriptor()).contains("descriptor")
        assertThat(body.doppler()).contains(10.23)
        assertThat(body.dopplerUnc()).contains(1.23)
        assertThat(body.elevation()).contains(45.23)
        assertThat(body.elevationBias()).contains(1.23)
        assertThat(body.elevationMeasured()).contains(true)
        assertThat(body.elevationRate()).contains(1.23)
        assertThat(body.elevationUnc()).contains(1.23)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idSensor()).contains("SENSOR-ID")
        assertThat(body.obPosition()).contains("FIRST")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.orthogonalRcs()).contains(1.23)
        assertThat(body.orthogonalRcsUnc()).contains(10.23)
        assertThat(body.ra()).contains(1.23)
        assertThat(body.raMeasured()).contains(true)
        assertThat(body.range()).contains(100.23)
        assertThat(body.rangeAccel()).contains(10.23)
        assertThat(body.rangeAccelUnc()).contains(1.23)
        assertThat(body.rangeBias()).contains(1.23)
        assertThat(body.rangeMeasured()).contains(true)
        assertThat(body.rangeRate()).contains(1.23)
        assertThat(body.rangeRateMeasured()).contains(true)
        assertThat(body.rangeRateUnc()).contains(0.5)
        assertThat(body.rangeUnc()).contains(1.23)
        assertThat(body.rawFileUri()).contains("rawFileURI")
        assertThat(body.rcs()).contains(100.23)
        assertThat(body.rcsUnc()).contains(1.23)
        assertThat(body.satNo()).contains(1)
        assertThat(body.senReferenceFrame())
            .contains(RadarobservationCreateParams.SenReferenceFrame.J2000)
        assertThat(body.senx()).contains(45.23)
        assertThat(body.seny()).contains(40.23)
        assertThat(body.senz()).contains(35.23)
        assertThat(body.snr()).contains(0.5)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.timingBias()).contains(1.23)
        assertThat(body.trackId()).contains("TRACK-ID")
        assertThat(body.trackingState()).contains("INIT ACQ")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.type()).contains("RADAR")
        assertThat(body.uct()).contains(true)
        assertThat(body.x()).contains(50.23)
        assertThat(body.xvel()).contains(1.23)
        assertThat(body.y()).contains(50.23)
        assertThat(body.yvel()).contains(5.23)
        assertThat(body.z()).contains(50.23)
        assertThat(body.zvel()).contains(5.23)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            RadarobservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(RadarobservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(RadarobservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
