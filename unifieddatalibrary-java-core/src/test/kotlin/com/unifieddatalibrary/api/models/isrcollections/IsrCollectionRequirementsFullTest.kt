// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.isrcollections

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.isrcollections.IsrCollectionCriticalTimesFull
import com.unifieddatalibrary.api.models.isrcollections.IsrCollectionExploitationRequirementFull
import com.unifieddatalibrary.api.models.isrcollections.IsrCollectionPocFull
import com.unifieddatalibrary.api.models.isrcollections.IsrCollectionRequirementsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class IsrCollectionRequirementsFullTest {

    @Test
    fun create() {
      val isrCollectionRequirementsFull = IsrCollectionRequirementsFull.builder()
          .id("ISCRCOLLECTIONREQUIREMENTS")
          .country("VE")
          .cridNumbers("CRID")
          .criticalTimes(IsrCollectionCriticalTimesFull.builder()
              .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
              .build())
          .emphasized(false)
          .exploitationRequirement(IsrCollectionExploitationRequirementFull.builder()
              .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
              .amplification("AMPLIFICATION")
              .dissemination("EMAILS")
              .eei("ESSENTIAL_ELEMENTS")
              .poc(IsrCollectionPocFull.builder()
                  .id("ISRCOLLECTIONPOC-ID")
                  .callsign("CALLSIGN")
                  .chatName("CHAT_NAME")
                  .chatSystem("CHAT")
                  .email("EMAIL")
                  .name("NAME")
                  .notes("NOTES")
                  .phone("PHONE")
                  .radioFrequency(123.23)
                  .unit("UNIT")
                  .build())
              .reportingCriteria("CRITERIA")
              .build())
          .hash("HASH")
          .intelDiscipline("Sig")
          .isPrismCr(true)
          .operation("NAME")
          .priority(20.23)
          .reconSurvey("SURVEY_INFO")
          .recordId("RECORD-ID")
          .region("REGION")
          .secondary(false)
          .specialComGuidance("TEXT")
          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
          .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
          .subregion("SUBREGION")
          .supportedUnit("UNIT")
          .addTargetList("string")
          .type("COLLECTION_TYPE")
          .build()

      assertThat(isrCollectionRequirementsFull.id()).contains("ISCRCOLLECTIONREQUIREMENTS")
      assertThat(isrCollectionRequirementsFull.country()).contains("VE")
      assertThat(isrCollectionRequirementsFull.cridNumbers()).contains("CRID")
      assertThat(isrCollectionRequirementsFull.criticalTimes()).contains(IsrCollectionCriticalTimesFull.builder()
          .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
          .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
          .build())
      assertThat(isrCollectionRequirementsFull.emphasized()).contains(false)
      assertThat(isrCollectionRequirementsFull.exploitationRequirement()).contains(IsrCollectionExploitationRequirementFull.builder()
          .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
          .amplification("AMPLIFICATION")
          .dissemination("EMAILS")
          .eei("ESSENTIAL_ELEMENTS")
          .poc(IsrCollectionPocFull.builder()
              .id("ISRCOLLECTIONPOC-ID")
              .callsign("CALLSIGN")
              .chatName("CHAT_NAME")
              .chatSystem("CHAT")
              .email("EMAIL")
              .name("NAME")
              .notes("NOTES")
              .phone("PHONE")
              .radioFrequency(123.23)
              .unit("UNIT")
              .build())
          .reportingCriteria("CRITERIA")
          .build())
      assertThat(isrCollectionRequirementsFull.hash()).contains("HASH")
      assertThat(isrCollectionRequirementsFull.intelDiscipline()).contains("Sig")
      assertThat(isrCollectionRequirementsFull.isPrismCr()).contains(true)
      assertThat(isrCollectionRequirementsFull.operation()).contains("NAME")
      assertThat(isrCollectionRequirementsFull.priority()).contains(20.23)
      assertThat(isrCollectionRequirementsFull.reconSurvey()).contains("SURVEY_INFO")
      assertThat(isrCollectionRequirementsFull.recordId()).contains("RECORD-ID")
      assertThat(isrCollectionRequirementsFull.region()).contains("REGION")
      assertThat(isrCollectionRequirementsFull.secondary()).contains(false)
      assertThat(isrCollectionRequirementsFull.specialComGuidance()).contains("TEXT")
      assertThat(isrCollectionRequirementsFull.start()).contains(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
      assertThat(isrCollectionRequirementsFull.stop()).contains(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
      assertThat(isrCollectionRequirementsFull.subregion()).contains("SUBREGION")
      assertThat(isrCollectionRequirementsFull.supportedUnit()).contains("UNIT")
      assertThat(isrCollectionRequirementsFull.targetList().getOrNull()).containsExactly("string")
      assertThat(isrCollectionRequirementsFull.type()).contains("COLLECTION_TYPE")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val isrCollectionRequirementsFull = IsrCollectionRequirementsFull.builder()
          .id("ISCRCOLLECTIONREQUIREMENTS")
          .country("VE")
          .cridNumbers("CRID")
          .criticalTimes(IsrCollectionCriticalTimesFull.builder()
              .earliestImagingTime(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
              .latestImagingTime(OffsetDateTime.parse("2021-01-19T01:11:15.001Z"))
              .build())
          .emphasized(false)
          .exploitationRequirement(IsrCollectionExploitationRequirementFull.builder()
              .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
              .amplification("AMPLIFICATION")
              .dissemination("EMAILS")
              .eei("ESSENTIAL_ELEMENTS")
              .poc(IsrCollectionPocFull.builder()
                  .id("ISRCOLLECTIONPOC-ID")
                  .callsign("CALLSIGN")
                  .chatName("CHAT_NAME")
                  .chatSystem("CHAT")
                  .email("EMAIL")
                  .name("NAME")
                  .notes("NOTES")
                  .phone("PHONE")
                  .radioFrequency(123.23)
                  .unit("UNIT")
                  .build())
              .reportingCriteria("CRITERIA")
              .build())
          .hash("HASH")
          .intelDiscipline("Sig")
          .isPrismCr(true)
          .operation("NAME")
          .priority(20.23)
          .reconSurvey("SURVEY_INFO")
          .recordId("RECORD-ID")
          .region("REGION")
          .secondary(false)
          .specialComGuidance("TEXT")
          .start(OffsetDateTime.parse("2021-01-19T01:01:15.001Z"))
          .stop(OffsetDateTime.parse("2021-01-19T01:20:01.001Z"))
          .subregion("SUBREGION")
          .supportedUnit("UNIT")
          .addTargetList("string")
          .type("COLLECTION_TYPE")
          .build()

      val roundtrippedIsrCollectionRequirementsFull = jsonMapper.readValue(jsonMapper.writeValueAsString(isrCollectionRequirementsFull), jacksonTypeRef<IsrCollectionRequirementsFull>())

      assertThat(roundtrippedIsrCollectionRequirementsFull).isEqualTo(isrCollectionRequirementsFull)
    }
}
