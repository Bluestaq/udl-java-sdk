// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sarobservation

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SarObservationCreateParamsTest {

    @Test
    fun create() {
        SarObservationCreateParams.builder()
            .classificationMarking("U")
            .collectionEnd(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
            .collectionStart(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
            .dataMode(SarObservationCreateParams.DataMode.TEST)
            .sarMode("SPOTLIGHT")
            .source("Bluestaq")
            .id("SAROBSERVATION-ID")
            .agjson(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
            .andims(3)
            .area(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
            .asrid(3)
            .atext(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
            .atype("POLYGON")
            .azimuthAngle(285.4481793)
            .centerTime(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
            .collectionId("COLLECTION-ID")
            .continuousSpotAngle(45.1)
            .coordSys("ECEF")
            .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
            .createdBy("some.user")
            .detectionEnd(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
            .detectionId("DETECTION-ID")
            .detectionStart(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
            .dwellTime(79.156794)
            .externalId("EXTERNAL-ID")
            .farRange(34.1)
            .grazeAngle(45.1)
            .groundResolutionProjection(0.5)
            .idOnOrbit("36036")
            .idSensor("36036-1L")
            .incidenceAngle(45.1)
            .looksAzimuth(2)
            .looksRange(1)
            .multilookNumber(5.0)
            .nearRange(12.1)
            .obDirection("RIGHT")
            .operatingBand("L")
            .operatingFreq(2345.6)
            .orbitState("ASCENDING")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origObjectId("36036")
            .origSensorId("SMOS-1L")
            .pulseBandwidth(500.1)
            .pulseDuration(0.000011)
            .resolutionAzimuth(0.123)
            .resolutionRange(0.123)
            .rxPolarization("H")
            .satNo(36036)
            .senalt(1.1)
            .senlatEnd(45.1)
            .senlatStart(45.1)
            .senlonEnd(179.1)
            .senlonStart(179.1)
            .senvelx(1.1)
            .senvely(1.1)
            .senvelz(1.1)
            .slantRange(60.1)
            .snr(10.1)
            .sourceDl("AXE")
            .spacingAzimuth(0.123)
            .spacingRange(0.123)
            .squintAngle(1.2)
            .addSrcId("f7e01cd4-626b-441f-a423-17b160eb78ba")
            .addSrcId("223833c4-be0d-4fdb-a2e4-325a48eccced")
            .addSrcTyp("ESID")
            .addSrcTyp("GROUNDIMAGE")
            .swathLength(12.1)
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .targetposx(50.23)
            .targetposy(50.23)
            .targetposz(50.23)
            .transactionId("TRANSACTION-ID")
            .txPolarization("H")
            .build()
    }

    @Test
    fun body() {
        val params =
            SarObservationCreateParams.builder()
                .classificationMarking("U")
                .collectionEnd(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
                .collectionStart(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
                .dataMode(SarObservationCreateParams.DataMode.TEST)
                .sarMode("SPOTLIGHT")
                .source("Bluestaq")
                .id("SAROBSERVATION-ID")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .andims(3)
                .area(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .asrid(3)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("POLYGON")
                .azimuthAngle(285.4481793)
                .centerTime(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
                .collectionId("COLLECTION-ID")
                .continuousSpotAngle(45.1)
                .coordSys("ECEF")
                .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
                .createdBy("some.user")
                .detectionEnd(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
                .detectionId("DETECTION-ID")
                .detectionStart(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
                .dwellTime(79.156794)
                .externalId("EXTERNAL-ID")
                .farRange(34.1)
                .grazeAngle(45.1)
                .groundResolutionProjection(0.5)
                .idOnOrbit("36036")
                .idSensor("36036-1L")
                .incidenceAngle(45.1)
                .looksAzimuth(2)
                .looksRange(1)
                .multilookNumber(5.0)
                .nearRange(12.1)
                .obDirection("RIGHT")
                .operatingBand("L")
                .operatingFreq(2345.6)
                .orbitState("ASCENDING")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("36036")
                .origSensorId("SMOS-1L")
                .pulseBandwidth(500.1)
                .pulseDuration(0.000011)
                .resolutionAzimuth(0.123)
                .resolutionRange(0.123)
                .rxPolarization("H")
                .satNo(36036)
                .senalt(1.1)
                .senlatEnd(45.1)
                .senlatStart(45.1)
                .senlonEnd(179.1)
                .senlonStart(179.1)
                .senvelx(1.1)
                .senvely(1.1)
                .senvelz(1.1)
                .slantRange(60.1)
                .snr(10.1)
                .sourceDl("AXE")
                .spacingAzimuth(0.123)
                .spacingRange(0.123)
                .squintAngle(1.2)
                .addSrcId("f7e01cd4-626b-441f-a423-17b160eb78ba")
                .addSrcId("223833c4-be0d-4fdb-a2e4-325a48eccced")
                .addSrcTyp("ESID")
                .addSrcTyp("GROUNDIMAGE")
                .swathLength(12.1)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .targetposx(50.23)
                .targetposy(50.23)
                .targetposz(50.23)
                .transactionId("TRANSACTION-ID")
                .txPolarization("H")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.collectionEnd())
            .isEqualTo(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
        assertThat(body.collectionStart())
            .isEqualTo(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
        assertThat(body.dataMode()).isEqualTo(SarObservationCreateParams.DataMode.TEST)
        assertThat(body.sarMode()).isEqualTo("SPOTLIGHT")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("SAROBSERVATION-ID")
        assertThat(body.agjson())
            .contains(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
        assertThat(body.andims()).contains(3)
        assertThat(body.area())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(body.asrid()).contains(3)
        assertThat(body.atext())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(body.atype()).contains("POLYGON")
        assertThat(body.azimuthAngle()).contains(285.4481793)
        assertThat(body.centerTime()).contains(OffsetDateTime.parse("2023-04-22T17:36:35.100885Z"))
        assertThat(body.collectionId()).contains("COLLECTION-ID")
        assertThat(body.continuousSpotAngle()).contains(45.1)
        assertThat(body.coordSys()).contains("ECEF")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.detectionEnd())
            .contains(OffsetDateTime.parse("2023-07-08T17:35:20.772190Z"))
        assertThat(body.detectionId()).contains("DETECTION-ID")
        assertThat(body.detectionStart())
            .contains(OffsetDateTime.parse("2023-07-08T17:35:01.615396Z"))
        assertThat(body.dwellTime()).contains(79.156794)
        assertThat(body.externalId()).contains("EXTERNAL-ID")
        assertThat(body.farRange()).contains(34.1)
        assertThat(body.grazeAngle()).contains(45.1)
        assertThat(body.groundResolutionProjection()).contains(0.5)
        assertThat(body.idOnOrbit()).contains("36036")
        assertThat(body.idSensor()).contains("36036-1L")
        assertThat(body.incidenceAngle()).contains(45.1)
        assertThat(body.looksAzimuth()).contains(2)
        assertThat(body.looksRange()).contains(1)
        assertThat(body.multilookNumber()).contains(5.0)
        assertThat(body.nearRange()).contains(12.1)
        assertThat(body.obDirection()).contains("RIGHT")
        assertThat(body.operatingBand()).contains("L")
        assertThat(body.operatingFreq()).contains(2345.6)
        assertThat(body.orbitState()).contains("ASCENDING")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("36036")
        assertThat(body.origSensorId()).contains("SMOS-1L")
        assertThat(body.pulseBandwidth()).contains(500.1)
        assertThat(body.pulseDuration()).contains(0.000011)
        assertThat(body.resolutionAzimuth()).contains(0.123)
        assertThat(body.resolutionRange()).contains(0.123)
        assertThat(body.rxPolarization()).contains("H")
        assertThat(body.satNo()).contains(36036)
        assertThat(body.senalt()).contains(1.1)
        assertThat(body.senlatEnd()).contains(45.1)
        assertThat(body.senlatStart()).contains(45.1)
        assertThat(body.senlonEnd()).contains(179.1)
        assertThat(body.senlonStart()).contains(179.1)
        assertThat(body.senvelx()).contains(1.1)
        assertThat(body.senvely()).contains(1.1)
        assertThat(body.senvelz()).contains(1.1)
        assertThat(body.slantRange()).contains(60.1)
        assertThat(body.snr()).contains(10.1)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.spacingAzimuth()).contains(0.123)
        assertThat(body.spacingRange()).contains(0.123)
        assertThat(body.squintAngle()).contains(1.2)
        assertThat(body.srcIds().getOrNull())
            .containsExactly(
                "f7e01cd4-626b-441f-a423-17b160eb78ba",
                "223833c4-be0d-4fdb-a2e4-325a48eccced",
            )
        assertThat(body.srcTyps().getOrNull()).containsExactly("ESID", "GROUNDIMAGE")
        assertThat(body.swathLength()).contains(12.1)
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.targetposx()).contains(50.23)
        assertThat(body.targetposy()).contains(50.23)
        assertThat(body.targetposz()).contains(50.23)
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.txPolarization()).contains("H")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SarObservationCreateParams.builder()
                .classificationMarking("U")
                .collectionEnd(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
                .collectionStart(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
                .dataMode(SarObservationCreateParams.DataMode.TEST)
                .sarMode("SPOTLIGHT")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.collectionEnd())
            .isEqualTo(OffsetDateTime.parse("2023-04-22T17:38:10.201770Z"))
        assertThat(body.collectionStart())
            .isEqualTo(OffsetDateTime.parse("2023-04-22T17:35:00.123456Z"))
        assertThat(body.dataMode()).isEqualTo(SarObservationCreateParams.DataMode.TEST)
        assertThat(body.sarMode()).isEqualTo("SPOTLIGHT")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
