// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.isrcollections

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class IsrCollectionExploitationRequirementFullTest {

    @Test
    fun create() {
        val isrCollectionExploitationRequirementFull =
            IsrCollectionExploitationRequirementFull.builder()
                .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                .amplification("AMPLIFICATION")
                .dissemination("EMAILS")
                .eei("ESSENTIAL_ELEMENTS")
                .poc(
                    IsrCollectionPocFull.builder()
                        .id("ISRCOLLECTIONPOC-ID")
                        .callsign("CALLSIGN")
                        .chatName("CHAT_NAME")
                        .chatSystem("CHAT")
                        .email("EMAIL")
                        .name("NAME")
                        .notes("NOTES")
                        .phone("PHONE")
                        .radioFrequency(123.23)
                        .unit("UNIT")
                        .build()
                )
                .reportingCriteria("CRITERIA")
                .build()

        assertThat(isrCollectionExploitationRequirementFull.id())
            .contains("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
        assertThat(isrCollectionExploitationRequirementFull.amplification())
            .contains("AMPLIFICATION")
        assertThat(isrCollectionExploitationRequirementFull.dissemination()).contains("EMAILS")
        assertThat(isrCollectionExploitationRequirementFull.eei()).contains("ESSENTIAL_ELEMENTS")
        assertThat(isrCollectionExploitationRequirementFull.poc())
            .contains(
                IsrCollectionPocFull.builder()
                    .id("ISRCOLLECTIONPOC-ID")
                    .callsign("CALLSIGN")
                    .chatName("CHAT_NAME")
                    .chatSystem("CHAT")
                    .email("EMAIL")
                    .name("NAME")
                    .notes("NOTES")
                    .phone("PHONE")
                    .radioFrequency(123.23)
                    .unit("UNIT")
                    .build()
            )
        assertThat(isrCollectionExploitationRequirementFull.reportingCriteria())
            .contains("CRITERIA")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val isrCollectionExploitationRequirementFull =
            IsrCollectionExploitationRequirementFull.builder()
                .id("ISRCOLLECTIONEXPLOITATIONREQUIREMENT")
                .amplification("AMPLIFICATION")
                .dissemination("EMAILS")
                .eei("ESSENTIAL_ELEMENTS")
                .poc(
                    IsrCollectionPocFull.builder()
                        .id("ISRCOLLECTIONPOC-ID")
                        .callsign("CALLSIGN")
                        .chatName("CHAT_NAME")
                        .chatSystem("CHAT")
                        .email("EMAIL")
                        .name("NAME")
                        .notes("NOTES")
                        .phone("PHONE")
                        .radioFrequency(123.23)
                        .unit("UNIT")
                        .build()
                )
                .reportingCriteria("CRITERIA")
                .build()

        val roundtrippedIsrCollectionExploitationRequirementFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(isrCollectionExploitationRequirementFull),
                jacksonTypeRef<IsrCollectionExploitationRequirementFull>(),
            )

        assertThat(roundtrippedIsrCollectionExploitationRequirementFull)
            .isEqualTo(isrCollectionExploitationRequirementFull)
    }
}
