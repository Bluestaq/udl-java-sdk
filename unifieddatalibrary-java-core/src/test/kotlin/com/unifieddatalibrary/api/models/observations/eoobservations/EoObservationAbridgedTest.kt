// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.eoobservations

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EoObservationAbridgedTest {

    @Test
    fun create() {
        val eoObservationAbridged =
            EoObservationAbridged.builder()
                .classificationMarking("U")
                .dataMode(EoObservationAbridged.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("EOOBSERVATION-ID")
                .azimuth(1.1)
                .azimuthBias(1.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(1.1)
                .bgIntensity(1.1)
                .collectMethod("AUTOTRACK")
                .corrQuality(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(1.1)
                .declinationBias(1.1)
                .declinationMeasured(true)
                .declinationRate(1.1)
                .declinationUnc(1.1)
                .descriptor("PROVIDED_DATA1")
                .elevation(1.1)
                .elevationBias(1.1)
                .elevationMeasured(true)
                .elevationRate(1.1)
                .elevationUnc(1.1)
                .expDuration(1.1)
                .fovCount(1)
                .fovCountUct(2)
                .geoalt(1.1)
                .geolat(1.1)
                .geolon(1.1)
                .georange(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .idSkyImagery("SKYIMAGERY-ID")
                .intensity(1.1)
                .losUnc(1.1)
                .losx(1.1)
                .losxvel(1.1)
                .losy(1.1)
                .losyvel(1.1)
                .losz(1.1)
                .loszvel(1.1)
                .mag(1.1)
                .magNormRange(1.1)
                .magUnc(1.1)
                .netObjSig(1.1)
                .netObjSigUnc(1.1)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .penumbra(false)
                .primaryExtinction(1.1)
                .primaryExtinctionUnc(1.1)
                .ra(1.1)
                .raBias(1.1)
                .raMeasured(true)
                .range(1.1)
                .rangeBias(1.1)
                .rangeMeasured(true)
                .rangeRate(1.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(1.1)
                .rangeUnc(1.1)
                .raRate(1.1)
                .raUnc(1.1)
                .rawFileUri("Example URI")
                .referenceFrame(EoObservationAbridged.ReferenceFrame.J2000)
                .satNo(5)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(179.1)
                .senQuat(listOf(0.4492, 0.02, 0.8765, 0.2213))
                .senReferenceFrame(EoObservationAbridged.SenReferenceFrame.J2000)
                .senvelx(1.1)
                .senvely(1.1)
                .senvelz(1.1)
                .senx(1.1)
                .seny(1.1)
                .senz(1.1)
                .shutterDelay(1.1)
                .skyBkgrnd(1.1)
                .solarDecAngle(1.1)
                .solarEqPhaseAngle(1.1)
                .solarPhaseAngle(1.1)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.1)
                .trackId("TRACK-ID")
                .transactionId("TRANSACTION-ID")
                .type("OPTICAL")
                .uct(false)
                .umbra(false)
                .zeroptd(1.1)
                .build()

        assertThat(eoObservationAbridged.classificationMarking()).isEqualTo("U")
        assertThat(eoObservationAbridged.dataMode()).isEqualTo(EoObservationAbridged.DataMode.TEST)
        assertThat(eoObservationAbridged.obTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(eoObservationAbridged.source()).isEqualTo("Bluestaq")
        assertThat(eoObservationAbridged.id()).contains("EOOBSERVATION-ID")
        assertThat(eoObservationAbridged.azimuth()).contains(1.1)
        assertThat(eoObservationAbridged.azimuthBias()).contains(1.1)
        assertThat(eoObservationAbridged.azimuthMeasured()).contains(true)
        assertThat(eoObservationAbridged.azimuthRate()).contains(1.1)
        assertThat(eoObservationAbridged.azimuthUnc()).contains(1.1)
        assertThat(eoObservationAbridged.bgIntensity()).contains(1.1)
        assertThat(eoObservationAbridged.collectMethod()).contains("AUTOTRACK")
        assertThat(eoObservationAbridged.corrQuality()).contains(1.1)
        assertThat(eoObservationAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(eoObservationAbridged.createdBy()).contains("some.user")
        assertThat(eoObservationAbridged.declination()).contains(1.1)
        assertThat(eoObservationAbridged.declinationBias()).contains(1.1)
        assertThat(eoObservationAbridged.declinationMeasured()).contains(true)
        assertThat(eoObservationAbridged.declinationRate()).contains(1.1)
        assertThat(eoObservationAbridged.declinationUnc()).contains(1.1)
        assertThat(eoObservationAbridged.descriptor()).contains("PROVIDED_DATA1")
        assertThat(eoObservationAbridged.elevation()).contains(1.1)
        assertThat(eoObservationAbridged.elevationBias()).contains(1.1)
        assertThat(eoObservationAbridged.elevationMeasured()).contains(true)
        assertThat(eoObservationAbridged.elevationRate()).contains(1.1)
        assertThat(eoObservationAbridged.elevationUnc()).contains(1.1)
        assertThat(eoObservationAbridged.expDuration()).contains(1.1)
        assertThat(eoObservationAbridged.fovCount()).contains(1)
        assertThat(eoObservationAbridged.fovCountUct()).contains(2)
        assertThat(eoObservationAbridged.geoalt()).contains(1.1)
        assertThat(eoObservationAbridged.geolat()).contains(1.1)
        assertThat(eoObservationAbridged.geolon()).contains(1.1)
        assertThat(eoObservationAbridged.georange()).contains(1.1)
        assertThat(eoObservationAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(eoObservationAbridged.idSensor()).contains("SENSOR-ID")
        assertThat(eoObservationAbridged.idSkyImagery()).contains("SKYIMAGERY-ID")
        assertThat(eoObservationAbridged.intensity()).contains(1.1)
        assertThat(eoObservationAbridged.losUnc()).contains(1.1)
        assertThat(eoObservationAbridged.losx()).contains(1.1)
        assertThat(eoObservationAbridged.losxvel()).contains(1.1)
        assertThat(eoObservationAbridged.losy()).contains(1.1)
        assertThat(eoObservationAbridged.losyvel()).contains(1.1)
        assertThat(eoObservationAbridged.losz()).contains(1.1)
        assertThat(eoObservationAbridged.loszvel()).contains(1.1)
        assertThat(eoObservationAbridged.mag()).contains(1.1)
        assertThat(eoObservationAbridged.magNormRange()).contains(1.1)
        assertThat(eoObservationAbridged.magUnc()).contains(1.1)
        assertThat(eoObservationAbridged.netObjSig()).contains(1.1)
        assertThat(eoObservationAbridged.netObjSigUnc()).contains(1.1)
        assertThat(eoObservationAbridged.obPosition()).contains("FIRST")
        assertThat(eoObservationAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(eoObservationAbridged.origNetwork()).contains("OPS1")
        assertThat(eoObservationAbridged.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(eoObservationAbridged.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(eoObservationAbridged.penumbra()).contains(false)
        assertThat(eoObservationAbridged.primaryExtinction()).contains(1.1)
        assertThat(eoObservationAbridged.primaryExtinctionUnc()).contains(1.1)
        assertThat(eoObservationAbridged.ra()).contains(1.1)
        assertThat(eoObservationAbridged.raBias()).contains(1.1)
        assertThat(eoObservationAbridged.raMeasured()).contains(true)
        assertThat(eoObservationAbridged.range()).contains(1.1)
        assertThat(eoObservationAbridged.rangeBias()).contains(1.1)
        assertThat(eoObservationAbridged.rangeMeasured()).contains(true)
        assertThat(eoObservationAbridged.rangeRate()).contains(1.1)
        assertThat(eoObservationAbridged.rangeRateMeasured()).contains(true)
        assertThat(eoObservationAbridged.rangeRateUnc()).contains(1.1)
        assertThat(eoObservationAbridged.rangeUnc()).contains(1.1)
        assertThat(eoObservationAbridged.raRate()).contains(1.1)
        assertThat(eoObservationAbridged.raUnc()).contains(1.1)
        assertThat(eoObservationAbridged.rawFileUri()).contains("Example URI")
        assertThat(eoObservationAbridged.referenceFrame())
            .contains(EoObservationAbridged.ReferenceFrame.J2000)
        assertThat(eoObservationAbridged.satNo()).contains(5)
        assertThat(eoObservationAbridged.senalt()).contains(1.1)
        assertThat(eoObservationAbridged.senlat()).contains(45.1)
        assertThat(eoObservationAbridged.senlon()).contains(179.1)
        assertThat(eoObservationAbridged.senQuat().getOrNull())
            .containsExactly(0.4492, 0.02, 0.8765, 0.2213)
        assertThat(eoObservationAbridged.senReferenceFrame())
            .contains(EoObservationAbridged.SenReferenceFrame.J2000)
        assertThat(eoObservationAbridged.senvelx()).contains(1.1)
        assertThat(eoObservationAbridged.senvely()).contains(1.1)
        assertThat(eoObservationAbridged.senvelz()).contains(1.1)
        assertThat(eoObservationAbridged.senx()).contains(1.1)
        assertThat(eoObservationAbridged.seny()).contains(1.1)
        assertThat(eoObservationAbridged.senz()).contains(1.1)
        assertThat(eoObservationAbridged.shutterDelay()).contains(1.1)
        assertThat(eoObservationAbridged.skyBkgrnd()).contains(1.1)
        assertThat(eoObservationAbridged.solarDecAngle()).contains(1.1)
        assertThat(eoObservationAbridged.solarEqPhaseAngle()).contains(1.1)
        assertThat(eoObservationAbridged.solarPhaseAngle()).contains(1.1)
        assertThat(eoObservationAbridged.sourceDl()).contains("AXE")
        assertThat(eoObservationAbridged.taskId()).contains("TASK-ID")
        assertThat(eoObservationAbridged.timingBias()).contains(1.1)
        assertThat(eoObservationAbridged.trackId()).contains("TRACK-ID")
        assertThat(eoObservationAbridged.transactionId()).contains("TRANSACTION-ID")
        assertThat(eoObservationAbridged.type()).contains("OPTICAL")
        assertThat(eoObservationAbridged.uct()).contains(false)
        assertThat(eoObservationAbridged.umbra()).contains(false)
        assertThat(eoObservationAbridged.zeroptd()).contains(1.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val eoObservationAbridged =
            EoObservationAbridged.builder()
                .classificationMarking("U")
                .dataMode(EoObservationAbridged.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("EOOBSERVATION-ID")
                .azimuth(1.1)
                .azimuthBias(1.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(1.1)
                .bgIntensity(1.1)
                .collectMethod("AUTOTRACK")
                .corrQuality(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(1.1)
                .declinationBias(1.1)
                .declinationMeasured(true)
                .declinationRate(1.1)
                .declinationUnc(1.1)
                .descriptor("PROVIDED_DATA1")
                .elevation(1.1)
                .elevationBias(1.1)
                .elevationMeasured(true)
                .elevationRate(1.1)
                .elevationUnc(1.1)
                .expDuration(1.1)
                .fovCount(1)
                .fovCountUct(2)
                .geoalt(1.1)
                .geolat(1.1)
                .geolon(1.1)
                .georange(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .idSkyImagery("SKYIMAGERY-ID")
                .intensity(1.1)
                .losUnc(1.1)
                .losx(1.1)
                .losxvel(1.1)
                .losy(1.1)
                .losyvel(1.1)
                .losz(1.1)
                .loszvel(1.1)
                .mag(1.1)
                .magNormRange(1.1)
                .magUnc(1.1)
                .netObjSig(1.1)
                .netObjSigUnc(1.1)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .penumbra(false)
                .primaryExtinction(1.1)
                .primaryExtinctionUnc(1.1)
                .ra(1.1)
                .raBias(1.1)
                .raMeasured(true)
                .range(1.1)
                .rangeBias(1.1)
                .rangeMeasured(true)
                .rangeRate(1.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(1.1)
                .rangeUnc(1.1)
                .raRate(1.1)
                .raUnc(1.1)
                .rawFileUri("Example URI")
                .referenceFrame(EoObservationAbridged.ReferenceFrame.J2000)
                .satNo(5)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(179.1)
                .senQuat(listOf(0.4492, 0.02, 0.8765, 0.2213))
                .senReferenceFrame(EoObservationAbridged.SenReferenceFrame.J2000)
                .senvelx(1.1)
                .senvely(1.1)
                .senvelz(1.1)
                .senx(1.1)
                .seny(1.1)
                .senz(1.1)
                .shutterDelay(1.1)
                .skyBkgrnd(1.1)
                .solarDecAngle(1.1)
                .solarEqPhaseAngle(1.1)
                .solarPhaseAngle(1.1)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.1)
                .trackId("TRACK-ID")
                .transactionId("TRANSACTION-ID")
                .type("OPTICAL")
                .uct(false)
                .umbra(false)
                .zeroptd(1.1)
                .build()

        val roundtrippedEoObservationAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(eoObservationAbridged),
                jacksonTypeRef<EoObservationAbridged>(),
            )

        assertThat(roundtrippedEoObservationAbridged).isEqualTo(eoObservationAbridged)
    }
}
