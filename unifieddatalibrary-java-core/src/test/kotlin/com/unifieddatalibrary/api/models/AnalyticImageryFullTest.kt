// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AnalyticImageryFullTest {

    @Test
    fun create() {
        val analyticImageryFull =
            AnalyticImageryFull.builder()
                .classificationMarking("U")
                .content("CONTOUR")
                .dataMode(AnalyticImageryFull.DataMode.TEST)
                .description("Image description")
                .filename("IMAGE-NAME")
                .filesize(7654321L)
                .imageType("JPG")
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("ANALYTIC-IMAGERY-ID")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .andims(2)
                .annLims(listOf(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4)))
                .addAnnText("rec1")
                .addAnnText("rec2")
                .asrid(4326)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("POLYGON")
                .checksumValue("123")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataStart(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .dataStop(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .addFeatureAssessment(
                    AnalyticImageryFull.FeatureAssessment.builder()
                        .classificationMarking("U")
                        .dataMode(AnalyticImageryFull.FeatureAssessment.DataMode.TEST)
                        .featureTs(OffsetDateTime.parse("2024-06-22T17:53:06.123Z"))
                        .featureUoM("MHz")
                        .idAnalyticImagery("fa1509ae-c19d-432e-9542-e5d1e0f47bc3")
                        .source("Bluestaq")
                        .id("026dd511-8ba5-47d3-9909-836149f87686")
                        .agjson(
                            "{\"type\":\"Point\",\"coordinates\":[52.23486096929749 16.191937138595005]}"
                        )
                        .andims(1)
                        .annLims(listOf(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4)))
                        .addAnnText("rec1")
                        .addAnnText("rec2")
                        .asrid(4326)
                        .assessment(
                            "Vessel bigger than other small fishing boats commonly found along the coastline"
                        )
                        .atext("POINT(52.23486096929749 16.191937138595005)")
                        .atype("POINT")
                        .confidence(0.85)
                        .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
                        .createdBy("some.user")
                        .externalId("2024-06-22-17-53-05_UMBRA-05_GEC")
                        .addFeatureArray(1227.6)
                        .addFeatureArray(1575.42)
                        .featureBool(true)
                        .featureString("TRANSMITTING FREQUENCIES")
                        .addFeatureStringArray("String1")
                        .addFeatureStringArray("String2")
                        .featureValue(1227.6)
                        .heading(97.1)
                        .height(7.25)
                        .length(10.54)
                        .name("HEADING")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .sourceDl("AXE")
                        .speed(0.1)
                        .addSrcId("b008c63b-ad89-4493-80e0-77bc982bef77")
                        .addSrcId("3565a6dd-654e-4969-89e0-ee7c51ab1e1b")
                        .addSrcT(OffsetDateTime.parse("2025-02-24T16:27:18.471Z"))
                        .addSrcT(OffsetDateTime.parse("2025-02-24T16:29:31.000000Z"))
                        .addSrcTyp("SAR")
                        .addSrcTyp("AIS")
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .transactionId("c3bdef1f-5a4f-4716-bee4-7a1e0ec7d37d")
                        .type("VESSEL")
                        .width(3.74)
                        .build()
                )
                .idSensor("SENSOR-ID")
                .imageSetId("IMAGE-IDS")
                .imageSetLength(123)
                .imgHeight(123)
                .imgWidth(123)
                .addKeyword("Key1")
                .addKeyword("Key2")
                .origin("ORIGIN")
                .origNetwork("OPS1")
                .origSensorId("ORIG-SENSOR-ID")
                .addSatId("12004")
                .addSatId("12005")
                .addSatIdConf(0.98)
                .addSatIdConf(0.22)
                .sequenceId(123)
                .sourceDl("AXE")
                .addSrcId("DOA_ID")
                .addSrcId("DWELL_ID")
                .addSrcTyp("MTI")
                .addSrcTyp("POI")
                .addTag("TAG1")
                .addTag("TAG2")
                .transactionId("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
                .xUnits("pixels")
                .yUnits("pixels")
                .zUnits("pixels")
                .build()

        assertThat(analyticImageryFull.classificationMarking()).isEqualTo("U")
        assertThat(analyticImageryFull.content()).isEqualTo("CONTOUR")
        assertThat(analyticImageryFull.dataMode()).isEqualTo(AnalyticImageryFull.DataMode.TEST)
        assertThat(analyticImageryFull.description()).isEqualTo("Image description")
        assertThat(analyticImageryFull.filename()).isEqualTo("IMAGE-NAME")
        assertThat(analyticImageryFull.filesize()).isEqualTo(7654321L)
        assertThat(analyticImageryFull.imageType()).isEqualTo("JPG")
        assertThat(analyticImageryFull.msgTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(analyticImageryFull.source()).isEqualTo("Bluestaq")
        assertThat(analyticImageryFull.id()).contains("ANALYTIC-IMAGERY-ID")
        assertThat(analyticImageryFull.agjson())
            .contains(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
        assertThat(analyticImageryFull.andims()).contains(2)
        assertThat(analyticImageryFull.annLims().getOrNull())
            .containsExactly(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4))
        assertThat(analyticImageryFull.annText().getOrNull()).containsExactly("rec1", "rec2")
        assertThat(analyticImageryFull.asrid()).contains(4326)
        assertThat(analyticImageryFull.atext())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(analyticImageryFull.atype()).contains("POLYGON")
        assertThat(analyticImageryFull.checksumValue()).contains("123")
        assertThat(analyticImageryFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(analyticImageryFull.createdBy()).contains("some.user")
        assertThat(analyticImageryFull.dataStart())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(analyticImageryFull.dataStop())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(analyticImageryFull.featureAssessments().getOrNull())
            .containsExactly(
                AnalyticImageryFull.FeatureAssessment.builder()
                    .classificationMarking("U")
                    .dataMode(AnalyticImageryFull.FeatureAssessment.DataMode.TEST)
                    .featureTs(OffsetDateTime.parse("2024-06-22T17:53:06.123Z"))
                    .featureUoM("MHz")
                    .idAnalyticImagery("fa1509ae-c19d-432e-9542-e5d1e0f47bc3")
                    .source("Bluestaq")
                    .id("026dd511-8ba5-47d3-9909-836149f87686")
                    .agjson(
                        "{\"type\":\"Point\",\"coordinates\":[52.23486096929749 16.191937138595005]}"
                    )
                    .andims(1)
                    .annLims(listOf(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4)))
                    .addAnnText("rec1")
                    .addAnnText("rec2")
                    .asrid(4326)
                    .assessment(
                        "Vessel bigger than other small fishing boats commonly found along the coastline"
                    )
                    .atext("POINT(52.23486096929749 16.191937138595005)")
                    .atype("POINT")
                    .confidence(0.85)
                    .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
                    .createdBy("some.user")
                    .externalId("2024-06-22-17-53-05_UMBRA-05_GEC")
                    .addFeatureArray(1227.6)
                    .addFeatureArray(1575.42)
                    .featureBool(true)
                    .featureString("TRANSMITTING FREQUENCIES")
                    .addFeatureStringArray("String1")
                    .addFeatureStringArray("String2")
                    .featureValue(1227.6)
                    .heading(97.1)
                    .height(7.25)
                    .length(10.54)
                    .name("HEADING")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .sourceDl("AXE")
                    .speed(0.1)
                    .addSrcId("b008c63b-ad89-4493-80e0-77bc982bef77")
                    .addSrcId("3565a6dd-654e-4969-89e0-ee7c51ab1e1b")
                    .addSrcT(OffsetDateTime.parse("2025-02-24T16:27:18.471Z"))
                    .addSrcT(OffsetDateTime.parse("2025-02-24T16:29:31.000000Z"))
                    .addSrcTyp("SAR")
                    .addSrcTyp("AIS")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .transactionId("c3bdef1f-5a4f-4716-bee4-7a1e0ec7d37d")
                    .type("VESSEL")
                    .width(3.74)
                    .build()
            )
        assertThat(analyticImageryFull.idSensor()).contains("SENSOR-ID")
        assertThat(analyticImageryFull.imageSetId()).contains("IMAGE-IDS")
        assertThat(analyticImageryFull.imageSetLength()).contains(123)
        assertThat(analyticImageryFull.imgHeight()).contains(123)
        assertThat(analyticImageryFull.imgWidth()).contains(123)
        assertThat(analyticImageryFull.keywords().getOrNull()).containsExactly("Key1", "Key2")
        assertThat(analyticImageryFull.origin()).contains("ORIGIN")
        assertThat(analyticImageryFull.origNetwork()).contains("OPS1")
        assertThat(analyticImageryFull.origSensorId()).contains("ORIG-SENSOR-ID")
        assertThat(analyticImageryFull.satId().getOrNull()).containsExactly("12004", "12005")
        assertThat(analyticImageryFull.satIdConf().getOrNull()).containsExactly(0.98, 0.22)
        assertThat(analyticImageryFull.sequenceId()).contains(123)
        assertThat(analyticImageryFull.sourceDl()).contains("AXE")
        assertThat(analyticImageryFull.srcIds().getOrNull()).containsExactly("DOA_ID", "DWELL_ID")
        assertThat(analyticImageryFull.srcTyps().getOrNull()).containsExactly("MTI", "POI")
        assertThat(analyticImageryFull.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(analyticImageryFull.transactionId())
            .contains("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
        assertThat(analyticImageryFull.xUnits()).contains("pixels")
        assertThat(analyticImageryFull.yUnits()).contains("pixels")
        assertThat(analyticImageryFull.zUnits()).contains("pixels")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val analyticImageryFull =
            AnalyticImageryFull.builder()
                .classificationMarking("U")
                .content("CONTOUR")
                .dataMode(AnalyticImageryFull.DataMode.TEST)
                .description("Image description")
                .filename("IMAGE-NAME")
                .filesize(7654321L)
                .imageType("JPG")
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("ANALYTIC-IMAGERY-ID")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .andims(2)
                .annLims(listOf(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4)))
                .addAnnText("rec1")
                .addAnnText("rec2")
                .asrid(4326)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("POLYGON")
                .checksumValue("123")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataStart(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .dataStop(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .addFeatureAssessment(
                    AnalyticImageryFull.FeatureAssessment.builder()
                        .classificationMarking("U")
                        .dataMode(AnalyticImageryFull.FeatureAssessment.DataMode.TEST)
                        .featureTs(OffsetDateTime.parse("2024-06-22T17:53:06.123Z"))
                        .featureUoM("MHz")
                        .idAnalyticImagery("fa1509ae-c19d-432e-9542-e5d1e0f47bc3")
                        .source("Bluestaq")
                        .id("026dd511-8ba5-47d3-9909-836149f87686")
                        .agjson(
                            "{\"type\":\"Point\",\"coordinates\":[52.23486096929749 16.191937138595005]}"
                        )
                        .andims(1)
                        .annLims(listOf(listOf(1, 1), listOf(1, 2), listOf(1, 3), listOf(1, 4)))
                        .addAnnText("rec1")
                        .addAnnText("rec2")
                        .asrid(4326)
                        .assessment(
                            "Vessel bigger than other small fishing boats commonly found along the coastline"
                        )
                        .atext("POINT(52.23486096929749 16.191937138595005)")
                        .atype("POINT")
                        .confidence(0.85)
                        .createdAt(OffsetDateTime.parse("2023-04-22T17:51:40.854Z"))
                        .createdBy("some.user")
                        .externalId("2024-06-22-17-53-05_UMBRA-05_GEC")
                        .addFeatureArray(1227.6)
                        .addFeatureArray(1575.42)
                        .featureBool(true)
                        .featureString("TRANSMITTING FREQUENCIES")
                        .addFeatureStringArray("String1")
                        .addFeatureStringArray("String2")
                        .featureValue(1227.6)
                        .heading(97.1)
                        .height(7.25)
                        .length(10.54)
                        .name("HEADING")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .sourceDl("AXE")
                        .speed(0.1)
                        .addSrcId("b008c63b-ad89-4493-80e0-77bc982bef77")
                        .addSrcId("3565a6dd-654e-4969-89e0-ee7c51ab1e1b")
                        .addSrcT(OffsetDateTime.parse("2025-02-24T16:27:18.471Z"))
                        .addSrcT(OffsetDateTime.parse("2025-02-24T16:29:31.000000Z"))
                        .addSrcTyp("SAR")
                        .addSrcTyp("AIS")
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .transactionId("c3bdef1f-5a4f-4716-bee4-7a1e0ec7d37d")
                        .type("VESSEL")
                        .width(3.74)
                        .build()
                )
                .idSensor("SENSOR-ID")
                .imageSetId("IMAGE-IDS")
                .imageSetLength(123)
                .imgHeight(123)
                .imgWidth(123)
                .addKeyword("Key1")
                .addKeyword("Key2")
                .origin("ORIGIN")
                .origNetwork("OPS1")
                .origSensorId("ORIG-SENSOR-ID")
                .addSatId("12004")
                .addSatId("12005")
                .addSatIdConf(0.98)
                .addSatIdConf(0.22)
                .sequenceId(123)
                .sourceDl("AXE")
                .addSrcId("DOA_ID")
                .addSrcId("DWELL_ID")
                .addSrcTyp("MTI")
                .addSrcTyp("POI")
                .addTag("TAG1")
                .addTag("TAG2")
                .transactionId("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
                .xUnits("pixels")
                .yUnits("pixels")
                .zUnits("pixels")
                .build()

        val roundtrippedAnalyticImageryFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(analyticImageryFull),
                jacksonTypeRef<AnalyticImageryFull>(),
            )

        assertThat(roundtrippedAnalyticImageryFull).isEqualTo(analyticImageryFull)
    }
}
