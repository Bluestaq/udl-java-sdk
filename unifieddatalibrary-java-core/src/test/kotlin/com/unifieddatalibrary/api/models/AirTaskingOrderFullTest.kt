// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirTaskingOrderFullTest {

    @Test
    fun create() {
        val airTaskingOrderFull =
            AirTaskingOrderFull.builder()
                .beginTs(OffsetDateTime.parse("2023-10-25T12:00:00.123Z"))
                .classificationMarking("U")
                .dataMode(AirTaskingOrderFull.DataMode.TEST)
                .opExerName("DESERT WIND")
                .source("Bluestaq")
                .id("POI-ID")
                .ackReqInd("YES")
                .ackUnitInstructions("INST:45TS")
                .addAcMsnTasking(
                    AirTaskingOrderFull.AcMsnTasking.builder()
                        .countryCode("US")
                        .taskedService("A")
                        .unitDesignator("AMPHIB5DIV")
                        .addAcMsnLocSeg(
                            AirTaskingOrderFull.AcMsnTasking.AcMsnLocSeg.builder()
                                .startTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                                .airMsnPri("1A")
                                .alt(210)
                                .areaGeoRad(1000)
                                .endTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                                .msnLocName("KLSV")
                                .msnLocPtBarT("330T-PT ALFA-50NM")
                                .msnLocPtLat(35.123)
                                .msnLocPtLon(79.01)
                                .msnLocPtName("PT ALFA")
                                .build()
                        )
                        .alertStatus(30)
                        .amcMsnNum("AMC:JJXD123HA045")
                        .depLocLat(35.123)
                        .depLocLon(79.2354)
                        .depLocName("ICAO:KBIF")
                        .depLocUtm("32WDL123123")
                        .depTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                        .addIndAcTasking(
                            AirTaskingOrderFull.AcMsnTasking.IndAcTasking.builder()
                                .acftType("F35A")
                                .callSign("EAGLE47")
                                .iffSifMode1Code("111")
                                .iffSifMode2Code("20147")
                                .iffSifMode3Code("30147")
                                .addJuAddress(12345)
                                .addJuAddress(65432)
                                .link16CallSign("EE47")
                                .numAcft(2)
                                .priConfigCode("6A2W3")
                                .secConfigCode("2S2WG")
                                .tacanChan(123)
                                .build()
                        )
                        .msnCommander("MC")
                        .msnNum("D123HA")
                        .pkgId("ZZ")
                        .priMsnType("CAS")
                        .addRcvyLocLat(48.8584)
                        .addRcvyLocLat(40.7554)
                        .addRcvyLocLon(2.2945)
                        .addRcvyLocLon(-73.9866)
                        .addRcvyLocName("ARRLOC:KBIF")
                        .addRcvyLocName("ARRLOC:KDZ7")
                        .addRcvyLocUtm("ARRUTMO:32WDL123123")
                        .addRcvyLocUtm("ARRUTMO:32WDL321321")
                        .addRcvyTime(OffsetDateTime.parse("2021-10-25T16:00:00.234Z"))
                        .addRcvyTime(OffsetDateTime.parse("2021-10-26T16:00:00.234Z"))
                        .resMsnInd("N")
                        .secMsnType("SEAD")
                        .unitLocName("ICAO:KXXQ")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .endTs(OffsetDateTime.parse("2023-10-27T12:00:00.123Z"))
                .addGenText(
                    AirTaskingOrderFull.GenText.builder()
                        .text("FREE-TEXT")
                        .textInd("OPENING REMARKS")
                        .build()
                )
                .msgMonth("OCT")
                .msgOriginator("USCENTCOM")
                .msgQualifier("CHG")
                .msgSn("ATO A")
                .addNavalFltOp(
                    AirTaskingOrderFull.NavalFltOp.builder()
                        .shipName("USS WASP")
                        .fltOpStart(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .fltOpStop(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .addSchdLaunchRcvyTime(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .rawFileUri("Example URI")
                .sourceDl("AXE")
                .build()

        assertThat(airTaskingOrderFull.beginTs())
            .isEqualTo(OffsetDateTime.parse("2023-10-25T12:00:00.123Z"))
        assertThat(airTaskingOrderFull.classificationMarking()).isEqualTo("U")
        assertThat(airTaskingOrderFull.dataMode()).isEqualTo(AirTaskingOrderFull.DataMode.TEST)
        assertThat(airTaskingOrderFull.opExerName()).isEqualTo("DESERT WIND")
        assertThat(airTaskingOrderFull.source()).isEqualTo("Bluestaq")
        assertThat(airTaskingOrderFull.id()).contains("POI-ID")
        assertThat(airTaskingOrderFull.ackReqInd()).contains("YES")
        assertThat(airTaskingOrderFull.ackUnitInstructions()).contains("INST:45TS")
        assertThat(airTaskingOrderFull.acMsnTasking().getOrNull())
            .containsExactly(
                AirTaskingOrderFull.AcMsnTasking.builder()
                    .countryCode("US")
                    .taskedService("A")
                    .unitDesignator("AMPHIB5DIV")
                    .addAcMsnLocSeg(
                        AirTaskingOrderFull.AcMsnTasking.AcMsnLocSeg.builder()
                            .startTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                            .airMsnPri("1A")
                            .alt(210)
                            .areaGeoRad(1000)
                            .endTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                            .msnLocName("KLSV")
                            .msnLocPtBarT("330T-PT ALFA-50NM")
                            .msnLocPtLat(35.123)
                            .msnLocPtLon(79.01)
                            .msnLocPtName("PT ALFA")
                            .build()
                    )
                    .alertStatus(30)
                    .amcMsnNum("AMC:JJXD123HA045")
                    .depLocLat(35.123)
                    .depLocLon(79.2354)
                    .depLocName("ICAO:KBIF")
                    .depLocUtm("32WDL123123")
                    .depTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                    .addIndAcTasking(
                        AirTaskingOrderFull.AcMsnTasking.IndAcTasking.builder()
                            .acftType("F35A")
                            .callSign("EAGLE47")
                            .iffSifMode1Code("111")
                            .iffSifMode2Code("20147")
                            .iffSifMode3Code("30147")
                            .addJuAddress(12345)
                            .addJuAddress(65432)
                            .link16CallSign("EE47")
                            .numAcft(2)
                            .priConfigCode("6A2W3")
                            .secConfigCode("2S2WG")
                            .tacanChan(123)
                            .build()
                    )
                    .msnCommander("MC")
                    .msnNum("D123HA")
                    .pkgId("ZZ")
                    .priMsnType("CAS")
                    .addRcvyLocLat(48.8584)
                    .addRcvyLocLat(40.7554)
                    .addRcvyLocLon(2.2945)
                    .addRcvyLocLon(-73.9866)
                    .addRcvyLocName("ARRLOC:KBIF")
                    .addRcvyLocName("ARRLOC:KDZ7")
                    .addRcvyLocUtm("ARRUTMO:32WDL123123")
                    .addRcvyLocUtm("ARRUTMO:32WDL321321")
                    .addRcvyTime(OffsetDateTime.parse("2021-10-25T16:00:00.234Z"))
                    .addRcvyTime(OffsetDateTime.parse("2021-10-26T16:00:00.234Z"))
                    .resMsnInd("N")
                    .secMsnType("SEAD")
                    .unitLocName("ICAO:KXXQ")
                    .build()
            )
        assertThat(airTaskingOrderFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(airTaskingOrderFull.createdBy()).contains("some.user")
        assertThat(airTaskingOrderFull.endTs())
            .contains(OffsetDateTime.parse("2023-10-27T12:00:00.123Z"))
        assertThat(airTaskingOrderFull.genText().getOrNull())
            .containsExactly(
                AirTaskingOrderFull.GenText.builder()
                    .text("FREE-TEXT")
                    .textInd("OPENING REMARKS")
                    .build()
            )
        assertThat(airTaskingOrderFull.msgMonth()).contains("OCT")
        assertThat(airTaskingOrderFull.msgOriginator()).contains("USCENTCOM")
        assertThat(airTaskingOrderFull.msgQualifier()).contains("CHG")
        assertThat(airTaskingOrderFull.msgSn()).contains("ATO A")
        assertThat(airTaskingOrderFull.navalFltOps().getOrNull())
            .containsExactly(
                AirTaskingOrderFull.NavalFltOp.builder()
                    .shipName("USS WASP")
                    .fltOpStart(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                    .fltOpStop(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                    .addSchdLaunchRcvyTime(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                    .build()
            )
        assertThat(airTaskingOrderFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(airTaskingOrderFull.origNetwork()).contains("ORIG")
        assertThat(airTaskingOrderFull.rawFileUri()).contains("Example URI")
        assertThat(airTaskingOrderFull.sourceDl()).contains("AXE")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val airTaskingOrderFull =
            AirTaskingOrderFull.builder()
                .beginTs(OffsetDateTime.parse("2023-10-25T12:00:00.123Z"))
                .classificationMarking("U")
                .dataMode(AirTaskingOrderFull.DataMode.TEST)
                .opExerName("DESERT WIND")
                .source("Bluestaq")
                .id("POI-ID")
                .ackReqInd("YES")
                .ackUnitInstructions("INST:45TS")
                .addAcMsnTasking(
                    AirTaskingOrderFull.AcMsnTasking.builder()
                        .countryCode("US")
                        .taskedService("A")
                        .unitDesignator("AMPHIB5DIV")
                        .addAcMsnLocSeg(
                            AirTaskingOrderFull.AcMsnTasking.AcMsnLocSeg.builder()
                                .startTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                                .airMsnPri("1A")
                                .alt(210)
                                .areaGeoRad(1000)
                                .endTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                                .msnLocName("KLSV")
                                .msnLocPtBarT("330T-PT ALFA-50NM")
                                .msnLocPtLat(35.123)
                                .msnLocPtLon(79.01)
                                .msnLocPtName("PT ALFA")
                                .build()
                        )
                        .alertStatus(30)
                        .amcMsnNum("AMC:JJXD123HA045")
                        .depLocLat(35.123)
                        .depLocLon(79.2354)
                        .depLocName("ICAO:KBIF")
                        .depLocUtm("32WDL123123")
                        .depTime(OffsetDateTime.parse("2021-10-25T12:00:00.123Z"))
                        .addIndAcTasking(
                            AirTaskingOrderFull.AcMsnTasking.IndAcTasking.builder()
                                .acftType("F35A")
                                .callSign("EAGLE47")
                                .iffSifMode1Code("111")
                                .iffSifMode2Code("20147")
                                .iffSifMode3Code("30147")
                                .addJuAddress(12345)
                                .addJuAddress(65432)
                                .link16CallSign("EE47")
                                .numAcft(2)
                                .priConfigCode("6A2W3")
                                .secConfigCode("2S2WG")
                                .tacanChan(123)
                                .build()
                        )
                        .msnCommander("MC")
                        .msnNum("D123HA")
                        .pkgId("ZZ")
                        .priMsnType("CAS")
                        .addRcvyLocLat(48.8584)
                        .addRcvyLocLat(40.7554)
                        .addRcvyLocLon(2.2945)
                        .addRcvyLocLon(-73.9866)
                        .addRcvyLocName("ARRLOC:KBIF")
                        .addRcvyLocName("ARRLOC:KDZ7")
                        .addRcvyLocUtm("ARRUTMO:32WDL123123")
                        .addRcvyLocUtm("ARRUTMO:32WDL321321")
                        .addRcvyTime(OffsetDateTime.parse("2021-10-25T16:00:00.234Z"))
                        .addRcvyTime(OffsetDateTime.parse("2021-10-26T16:00:00.234Z"))
                        .resMsnInd("N")
                        .secMsnType("SEAD")
                        .unitLocName("ICAO:KXXQ")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .endTs(OffsetDateTime.parse("2023-10-27T12:00:00.123Z"))
                .addGenText(
                    AirTaskingOrderFull.GenText.builder()
                        .text("FREE-TEXT")
                        .textInd("OPENING REMARKS")
                        .build()
                )
                .msgMonth("OCT")
                .msgOriginator("USCENTCOM")
                .msgQualifier("CHG")
                .msgSn("ATO A")
                .addNavalFltOp(
                    AirTaskingOrderFull.NavalFltOp.builder()
                        .shipName("USS WASP")
                        .fltOpStart(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .fltOpStop(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .addSchdLaunchRcvyTime(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .rawFileUri("Example URI")
                .sourceDl("AXE")
                .build()

        val roundtrippedAirTaskingOrderFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(airTaskingOrderFull),
                jacksonTypeRef<AirTaskingOrderFull>(),
            )

        assertThat(roundtrippedAirTaskingOrderFull).isEqualTo(airTaskingOrderFull)
    }
}
