// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import com.unifieddatalibrary.api.models.SolarArrayDetailsFull
import com.unifieddatalibrary.api.models.SolarArrayFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SolarArrayFullTest {

    @Test
    fun create() {
      val solarArrayFull = SolarArrayFull.builder()
          .dataMode(SolarArrayFull.DataMode.TEST)
          .name("Solar1")
          .source("Bluestaq")
          .id("SOLARARRAY-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .addSolarArrayDetail(SolarArrayDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(SolarArrayDetailsFull.DataMode.TEST)
              .idSolarArray("SOLARARRAY-ID")
              .source("Bluestaq")
              .id("SOLARARRAYDETAILS-ID")
              .area(123.4)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .description("Example notes")
              .junctionTechnology("Triple")
              .manufacturerOrg(OrganizationFull.builder()
                  .classificationMarking("U")
                  .dataMode(OrganizationFull.DataMode.TEST)
                  .name("some.user")
                  .source("some.user")
                  .type("GOVERNMENT")
                  .id("ORGANIZATION-ID")
                  .active(false)
                  .category("Private company")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .description("Example description")
                  .externalId("EXTERNAL-ID")
                  .nationality("US")
                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                      .idOrganization("ORGANIZATION-ID")
                      .name("some.user")
                      .source("some.user")
                      .id("ORGANIZATIONDETAILS-ID")
                      .address1("123 Main Street")
                      .address2("Apt 4B")
                      .address3("Colorado Springs CO, 80903")
                      .broker("some.user")
                      .ceo("some.user")
                      .cfo("some.user")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .cto("some.user")
                      .description("Example description")
                      .ebitda(123.4)
                      .email("some_organization@organization.com")
                      .financialNotes("Example notes")
                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                      .fleetPlanNotes("Example notes")
                      .formerOrgId("FORMERORG-ID")
                      .ftes(123)
                      .geoAdminLevel1("Colorado")
                      .geoAdminLevel2("El Paso County")
                      .geoAdminLevel3("Colorado Springs")
                      .massRanking(123)
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .parentOrgId("PARENTORG-ID")
                      .postalCode("80903")
                      .profit(123.4)
                      .revenue(123.4)
                      .revenueRanking(123)
                      .riskManager("some.user")
                      .servicesNotes("Example notes")
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("some.user")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .manufacturerOrgId("MANUFACTURERORG-ID")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .span(123.4)
              .addTag("TAG1")
              .addTag("TAG2")
              .technology("Ga-As")
              .type("U Shaped")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(solarArrayFull.dataMode()).isEqualTo(SolarArrayFull.DataMode.TEST)
      assertThat(solarArrayFull.name()).isEqualTo("Solar1")
      assertThat(solarArrayFull.source()).isEqualTo("Bluestaq")
      assertThat(solarArrayFull.id()).contains("SOLARARRAY-ID")
      assertThat(solarArrayFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(solarArrayFull.createdBy()).contains("some.user")
      assertThat(solarArrayFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(solarArrayFull.origNetwork()).contains("ORIG")
      assertThat(solarArrayFull.solarArrayDetails().getOrNull()).containsExactly(SolarArrayDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(SolarArrayDetailsFull.DataMode.TEST)
          .idSolarArray("SOLARARRAY-ID")
          .source("Bluestaq")
          .id("SOLARARRAYDETAILS-ID")
          .area(123.4)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .description("Example notes")
          .junctionTechnology("Triple")
          .manufacturerOrg(OrganizationFull.builder()
              .classificationMarking("U")
              .dataMode(OrganizationFull.DataMode.TEST)
              .name("some.user")
              .source("some.user")
              .type("GOVERNMENT")
              .id("ORGANIZATION-ID")
              .active(false)
              .category("Private company")
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .description("Example description")
              .externalId("EXTERNAL-ID")
              .nationality("US")
              .addOrganizationDetail(OrganizationDetailsFull.builder()
                  .classificationMarking("U")
                  .dataMode(OrganizationDetailsFull.DataMode.TEST)
                  .idOrganization("ORGANIZATION-ID")
                  .name("some.user")
                  .source("some.user")
                  .id("ORGANIZATIONDETAILS-ID")
                  .address1("123 Main Street")
                  .address2("Apt 4B")
                  .address3("Colorado Springs CO, 80903")
                  .broker("some.user")
                  .ceo("some.user")
                  .cfo("some.user")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .cto("some.user")
                  .description("Example description")
                  .ebitda(123.4)
                  .email("some_organization@organization.com")
                  .financialNotes("Example notes")
                  .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                  .fleetPlanNotes("Example notes")
                  .formerOrgId("FORMERORG-ID")
                  .ftes(123)
                  .geoAdminLevel1("Colorado")
                  .geoAdminLevel2("El Paso County")
                  .geoAdminLevel3("Colorado Springs")
                  .massRanking(123)
                  .origin("some.user")
                  .origNetwork("OPS1")
                  .parentOrgId("PARENTORG-ID")
                  .postalCode("80903")
                  .profit(123.4)
                  .revenue(123.4)
                  .revenueRanking(123)
                  .riskManager("some.user")
                  .servicesNotes("Example notes")
                  .addTag("PROVIDER_TAG1")
                  .addTag("PROVIDER_TAG2")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .origin("some.user")
              .origNetwork("OPS1")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .manufacturerOrgId("MANUFACTURERORG-ID")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .span(123.4)
          .addTag("TAG1")
          .addTag("TAG2")
          .technology("Ga-As")
          .type("U Shaped")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build())
      assertThat(solarArrayFull.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(solarArrayFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val solarArrayFull = SolarArrayFull.builder()
          .dataMode(SolarArrayFull.DataMode.TEST)
          .name("Solar1")
          .source("Bluestaq")
          .id("SOLARARRAY-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .addSolarArrayDetail(SolarArrayDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(SolarArrayDetailsFull.DataMode.TEST)
              .idSolarArray("SOLARARRAY-ID")
              .source("Bluestaq")
              .id("SOLARARRAYDETAILS-ID")
              .area(123.4)
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .description("Example notes")
              .junctionTechnology("Triple")
              .manufacturerOrg(OrganizationFull.builder()
                  .classificationMarking("U")
                  .dataMode(OrganizationFull.DataMode.TEST)
                  .name("some.user")
                  .source("some.user")
                  .type("GOVERNMENT")
                  .id("ORGANIZATION-ID")
                  .active(false)
                  .category("Private company")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .description("Example description")
                  .externalId("EXTERNAL-ID")
                  .nationality("US")
                  .addOrganizationDetail(OrganizationDetailsFull.builder()
                      .classificationMarking("U")
                      .dataMode(OrganizationDetailsFull.DataMode.TEST)
                      .idOrganization("ORGANIZATION-ID")
                      .name("some.user")
                      .source("some.user")
                      .id("ORGANIZATIONDETAILS-ID")
                      .address1("123 Main Street")
                      .address2("Apt 4B")
                      .address3("Colorado Springs CO, 80903")
                      .broker("some.user")
                      .ceo("some.user")
                      .cfo("some.user")
                      .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .createdBy("some.user")
                      .cto("some.user")
                      .description("Example description")
                      .ebitda(123.4)
                      .email("some_organization@organization.com")
                      .financialNotes("Example notes")
                      .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                      .fleetPlanNotes("Example notes")
                      .formerOrgId("FORMERORG-ID")
                      .ftes(123)
                      .geoAdminLevel1("Colorado")
                      .geoAdminLevel2("El Paso County")
                      .geoAdminLevel3("Colorado Springs")
                      .massRanking(123)
                      .origin("some.user")
                      .origNetwork("OPS1")
                      .parentOrgId("PARENTORG-ID")
                      .postalCode("80903")
                      .profit(123.4)
                      .revenue(123.4)
                      .revenueRanking(123)
                      .riskManager("some.user")
                      .servicesNotes("Example notes")
                      .addTag("PROVIDER_TAG1")
                      .addTag("PROVIDER_TAG2")
                      .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                      .updatedBy("some.user")
                      .build())
                  .origin("some.user")
                  .origNetwork("OPS1")
                  .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .updatedBy("some.user")
                  .build())
              .manufacturerOrgId("MANUFACTURERORG-ID")
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .span(123.4)
              .addTag("TAG1")
              .addTag("TAG2")
              .technology("Ga-As")
              .type("U Shaped")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .build())
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedSolarArrayFull = jsonMapper.readValue(jsonMapper.writeValueAsString(solarArrayFull), jacksonTypeRef<SolarArrayFull>())

      assertThat(roundtrippedSolarArrayFull).isEqualTo(solarArrayFull)
    }
}
