// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.monoradar.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryQueryResponseTest {

    @Test
    fun create() {
        val historyQueryResponse =
            HistoryQueryResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryQueryResponse.DataMode.TEST)
                .msgfmt("CAT48")
                .msgts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .msgtyp("BCN")
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .id("MONORADAR-ID")
                .acp(100)
                .addr("ADDR-ID")
                .af(true)
                .aims(true)
                .alt3d(100.23)
                .artsqual("QUALITY")
                .az(100.23)
                .azdelt(44.23)
                .bcnhits(12)
                .addCartpo(1.2)
                .addCartpo(2.2)
                .cdm("CDM")
                .code7500(false)
                .code7600(false)
                .code7700(false)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .faa(true)
                .grndspd(30.23)
                .hdng(30.23)
                .idSensor("REF-SENSOR-ID")
                .m1("MISSION_CODE")
                .m1g(true)
                .m1v("M1V")
                .m2("MILITARY_ID_CODE")
                .m2g(true)
                .m2v("M2V")
                .m2xv("M2XV")
                .m3a("AIRCRAFT_ID")
                .m3ag(true)
                .m3av("M3AV")
                .m3axv("M3AXV")
                .m4("ID_FRIEND")
                .m4d1d2("STATUS")
                .m4v("M4V")
                .mah("MAH")
                .mc(100.23)
                .mcg(true)
                .mcv("MCV")
                .milemrgcy(false)
                .mrgrpt(true)
                .mscommb("MSCOMMB")
                .mti(true)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .psrrl(44.23)
                .rad("RAD")
                .rng(100.23)
                .rngdelt(44.23)
                .sac(10)
                .senalt(100.23)
                .senlat(45.23)
                .senlon(45.23)
                .sic(40)
                .spi(true)
                .ssrl(44.23)
                .addTag("TAG1")
                .addTag("TAG2")
                .tgtconf("CONFIDENCE")
                .tgtcorr("CORRELATION")
                .tgtid("TGT-ID")
                .tis(0.4)
                .trkelig("ELIGIBILITY")
                .trknum(30)
                .tti("TTI")
                .addWectc("WARNING")
                .addWectc("WARNING")
                .build()

        assertThat(historyQueryResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyQueryResponse.dataMode()).isEqualTo(HistoryQueryResponse.DataMode.TEST)
        assertThat(historyQueryResponse.msgfmt()).isEqualTo("CAT48")
        assertThat(historyQueryResponse.msgts())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(historyQueryResponse.msgtyp()).isEqualTo("BCN")
        assertThat(historyQueryResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyQueryResponse.ts())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(historyQueryResponse.id()).contains("MONORADAR-ID")
        assertThat(historyQueryResponse.acp()).contains(100)
        assertThat(historyQueryResponse.addr()).contains("ADDR-ID")
        assertThat(historyQueryResponse.af()).contains(true)
        assertThat(historyQueryResponse.aims()).contains(true)
        assertThat(historyQueryResponse.alt3d()).contains(100.23)
        assertThat(historyQueryResponse.artsqual()).contains("QUALITY")
        assertThat(historyQueryResponse.az()).contains(100.23)
        assertThat(historyQueryResponse.azdelt()).contains(44.23)
        assertThat(historyQueryResponse.bcnhits()).contains(12)
        assertThat(historyQueryResponse.cartpos().getOrNull()).containsExactly(1.2, 2.2)
        assertThat(historyQueryResponse.cdm()).contains("CDM")
        assertThat(historyQueryResponse.code7500()).contains(false)
        assertThat(historyQueryResponse.code7600()).contains(false)
        assertThat(historyQueryResponse.code7700()).contains(false)
        assertThat(historyQueryResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyQueryResponse.createdBy()).contains("some.user")
        assertThat(historyQueryResponse.faa()).contains(true)
        assertThat(historyQueryResponse.grndspd()).contains(30.23)
        assertThat(historyQueryResponse.hdng()).contains(30.23)
        assertThat(historyQueryResponse.idSensor()).contains("REF-SENSOR-ID")
        assertThat(historyQueryResponse.m1()).contains("MISSION_CODE")
        assertThat(historyQueryResponse.m1g()).contains(true)
        assertThat(historyQueryResponse.m1v()).contains("M1V")
        assertThat(historyQueryResponse.m2()).contains("MILITARY_ID_CODE")
        assertThat(historyQueryResponse.m2g()).contains(true)
        assertThat(historyQueryResponse.m2v()).contains("M2V")
        assertThat(historyQueryResponse.m2xv()).contains("M2XV")
        assertThat(historyQueryResponse.m3a()).contains("AIRCRAFT_ID")
        assertThat(historyQueryResponse.m3ag()).contains(true)
        assertThat(historyQueryResponse.m3av()).contains("M3AV")
        assertThat(historyQueryResponse.m3axv()).contains("M3AXV")
        assertThat(historyQueryResponse.m4()).contains("ID_FRIEND")
        assertThat(historyQueryResponse.m4d1d2()).contains("STATUS")
        assertThat(historyQueryResponse.m4v()).contains("M4V")
        assertThat(historyQueryResponse.mah()).contains("MAH")
        assertThat(historyQueryResponse.mc()).contains(100.23)
        assertThat(historyQueryResponse.mcg()).contains(true)
        assertThat(historyQueryResponse.mcv()).contains("MCV")
        assertThat(historyQueryResponse.milemrgcy()).contains(false)
        assertThat(historyQueryResponse.mrgrpt()).contains(true)
        assertThat(historyQueryResponse.mscommb()).contains("MSCOMMB")
        assertThat(historyQueryResponse.mti()).contains(true)
        assertThat(historyQueryResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyQueryResponse.origNetwork()).contains("OPS1")
        assertThat(historyQueryResponse.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(historyQueryResponse.psrrl()).contains(44.23)
        assertThat(historyQueryResponse.rad()).contains("RAD")
        assertThat(historyQueryResponse.rng()).contains(100.23)
        assertThat(historyQueryResponse.rngdelt()).contains(44.23)
        assertThat(historyQueryResponse.sac()).contains(10)
        assertThat(historyQueryResponse.senalt()).contains(100.23)
        assertThat(historyQueryResponse.senlat()).contains(45.23)
        assertThat(historyQueryResponse.senlon()).contains(45.23)
        assertThat(historyQueryResponse.sic()).contains(40)
        assertThat(historyQueryResponse.spi()).contains(true)
        assertThat(historyQueryResponse.ssrl()).contains(44.23)
        assertThat(historyQueryResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(historyQueryResponse.tgtconf()).contains("CONFIDENCE")
        assertThat(historyQueryResponse.tgtcorr()).contains("CORRELATION")
        assertThat(historyQueryResponse.tgtid()).contains("TGT-ID")
        assertThat(historyQueryResponse.tis()).contains(0.4)
        assertThat(historyQueryResponse.trkelig()).contains("ELIGIBILITY")
        assertThat(historyQueryResponse.trknum()).contains(30)
        assertThat(historyQueryResponse.tti()).contains("TTI")
        assertThat(historyQueryResponse.wectc().getOrNull()).containsExactly("WARNING", "WARNING")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyQueryResponse =
            HistoryQueryResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryQueryResponse.DataMode.TEST)
                .msgfmt("CAT48")
                .msgts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .msgtyp("BCN")
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .id("MONORADAR-ID")
                .acp(100)
                .addr("ADDR-ID")
                .af(true)
                .aims(true)
                .alt3d(100.23)
                .artsqual("QUALITY")
                .az(100.23)
                .azdelt(44.23)
                .bcnhits(12)
                .addCartpo(1.2)
                .addCartpo(2.2)
                .cdm("CDM")
                .code7500(false)
                .code7600(false)
                .code7700(false)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .faa(true)
                .grndspd(30.23)
                .hdng(30.23)
                .idSensor("REF-SENSOR-ID")
                .m1("MISSION_CODE")
                .m1g(true)
                .m1v("M1V")
                .m2("MILITARY_ID_CODE")
                .m2g(true)
                .m2v("M2V")
                .m2xv("M2XV")
                .m3a("AIRCRAFT_ID")
                .m3ag(true)
                .m3av("M3AV")
                .m3axv("M3AXV")
                .m4("ID_FRIEND")
                .m4d1d2("STATUS")
                .m4v("M4V")
                .mah("MAH")
                .mc(100.23)
                .mcg(true)
                .mcv("MCV")
                .milemrgcy(false)
                .mrgrpt(true)
                .mscommb("MSCOMMB")
                .mti(true)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .psrrl(44.23)
                .rad("RAD")
                .rng(100.23)
                .rngdelt(44.23)
                .sac(10)
                .senalt(100.23)
                .senlat(45.23)
                .senlon(45.23)
                .sic(40)
                .spi(true)
                .ssrl(44.23)
                .addTag("TAG1")
                .addTag("TAG2")
                .tgtconf("CONFIDENCE")
                .tgtcorr("CORRELATION")
                .tgtid("TGT-ID")
                .tis(0.4)
                .trkelig("ELIGIBILITY")
                .trknum(30)
                .tti("TTI")
                .addWectc("WARNING")
                .addWectc("WARNING")
                .build()

        val roundtrippedHistoryQueryResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyQueryResponse),
                jacksonTypeRef<HistoryQueryResponse>(),
            )

        assertThat(roundtrippedHistoryQueryResponse).isEqualTo(historyQueryResponse)
    }
}
