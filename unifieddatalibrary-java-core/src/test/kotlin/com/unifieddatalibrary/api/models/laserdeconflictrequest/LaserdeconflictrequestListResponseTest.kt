// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.laserdeconflictrequest

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaserdeconflictrequestListResponseTest {

    @Test
    fun create() {
        val laserdeconflictrequestListResponse =
            LaserdeconflictrequestListResponse.builder()
                .classificationMarking("U")
                .dataMode(LaserdeconflictrequestListResponse.DataMode.TEST)
                .endDate(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
                .addIdLaserEmitter("2346c0a0-585f-4232-af5d-93bad320fdc0")
                .addIdLaserEmitter("4446c0a0-585f-4232-af5d-93bad320fbb1")
                .numTargets(25)
                .requestId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .requestTs(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
                .source("Bluestaq")
                .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .centerlineAzimuth(20.3)
                .centerlineElevation(19.434)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .defaultCha(2.5)
                .enableDss(true)
                .addFixedPoint(
                    LaserdeconflictrequestListResponse.FixedPoint.builder()
                        .latitude(-10.18)
                        .longitude(-179.98)
                        .height(-18.13)
                        .build()
                )
                .geopotentialModel("WGS84")
                .idOnOrbit("ONORBIT-ID")
                .laserSystemName("HEL-1")
                .lengthCenterline(79.35)
                .lengthLeftRight(56.23)
                .lengthUpDown(22.6)
                .maximumHeight(440.3)
                .minimumHeight(0.5)
                .missionName("USSF LP 18-1 Test Laser")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .platformLocationName("Vandenberg")
                .platformLocationType("FIXED_POINT")
                .programId("performance_test_llh-sat")
                .propagator("GP")
                .addProtectList(1234)
                .addProtectList(5678)
                .satNo(46852)
                .sourceDl("AXE")
                .sourceEnabled(false)
                .status("REQUESTED")
                .addTag("TAG1")
                .addTag("TAG2")
                .targetEnabled(true)
                .targetType("BOX_CENTERPOINT_LINE")
                .transactionId("TRANSACTION-ID")
                .treatEarthAs("VICTIM")
                .useFieldOfRegard(true)
                .victimEnabled(true)
                .build()

        assertThat(laserdeconflictrequestListResponse.classificationMarking()).isEqualTo("U")
        assertThat(laserdeconflictrequestListResponse.dataMode())
            .isEqualTo(LaserdeconflictrequestListResponse.DataMode.TEST)
        assertThat(laserdeconflictrequestListResponse.endDate())
            .isEqualTo(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
        assertThat(laserdeconflictrequestListResponse.idLaserEmitters())
            .containsExactly(
                "2346c0a0-585f-4232-af5d-93bad320fdc0",
                "4446c0a0-585f-4232-af5d-93bad320fbb1",
            )
        assertThat(laserdeconflictrequestListResponse.numTargets()).isEqualTo(25)
        assertThat(laserdeconflictrequestListResponse.requestId())
            .isEqualTo("3856c0a0-585f-4232-af5d-93bad320fac6")
        assertThat(laserdeconflictrequestListResponse.requestTs())
            .isEqualTo(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
        assertThat(laserdeconflictrequestListResponse.source()).isEqualTo("Bluestaq")
        assertThat(laserdeconflictrequestListResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
        assertThat(laserdeconflictrequestListResponse.id())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(laserdeconflictrequestListResponse.centerlineAzimuth()).contains(20.3)
        assertThat(laserdeconflictrequestListResponse.centerlineElevation()).contains(19.434)
        assertThat(laserdeconflictrequestListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(laserdeconflictrequestListResponse.createdBy()).contains("some.user")
        assertThat(laserdeconflictrequestListResponse.defaultCha()).contains(2.5)
        assertThat(laserdeconflictrequestListResponse.enableDss()).contains(true)
        assertThat(laserdeconflictrequestListResponse.fixedPoints().getOrNull())
            .containsExactly(
                LaserdeconflictrequestListResponse.FixedPoint.builder()
                    .latitude(-10.18)
                    .longitude(-179.98)
                    .height(-18.13)
                    .build()
            )
        assertThat(laserdeconflictrequestListResponse.geopotentialModel()).contains("WGS84")
        assertThat(laserdeconflictrequestListResponse.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(laserdeconflictrequestListResponse.laserSystemName()).contains("HEL-1")
        assertThat(laserdeconflictrequestListResponse.lengthCenterline()).contains(79.35)
        assertThat(laserdeconflictrequestListResponse.lengthLeftRight()).contains(56.23)
        assertThat(laserdeconflictrequestListResponse.lengthUpDown()).contains(22.6)
        assertThat(laserdeconflictrequestListResponse.maximumHeight()).contains(440.3)
        assertThat(laserdeconflictrequestListResponse.minimumHeight()).contains(0.5)
        assertThat(laserdeconflictrequestListResponse.missionName())
            .contains("USSF LP 18-1 Test Laser")
        assertThat(laserdeconflictrequestListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(laserdeconflictrequestListResponse.origNetwork()).contains("OPS1")
        assertThat(laserdeconflictrequestListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(laserdeconflictrequestListResponse.platformLocationName()).contains("Vandenberg")
        assertThat(laserdeconflictrequestListResponse.platformLocationType())
            .contains("FIXED_POINT")
        assertThat(laserdeconflictrequestListResponse.programId())
            .contains("performance_test_llh-sat")
        assertThat(laserdeconflictrequestListResponse.propagator()).contains("GP")
        assertThat(laserdeconflictrequestListResponse.protectList().getOrNull())
            .containsExactly(1234, 5678)
        assertThat(laserdeconflictrequestListResponse.satNo()).contains(46852)
        assertThat(laserdeconflictrequestListResponse.sourceDl()).contains("AXE")
        assertThat(laserdeconflictrequestListResponse.sourceEnabled()).contains(false)
        assertThat(laserdeconflictrequestListResponse.status()).contains("REQUESTED")
        assertThat(laserdeconflictrequestListResponse.tags().getOrNull())
            .containsExactly("TAG1", "TAG2")
        assertThat(laserdeconflictrequestListResponse.targetEnabled()).contains(true)
        assertThat(laserdeconflictrequestListResponse.targetType()).contains("BOX_CENTERPOINT_LINE")
        assertThat(laserdeconflictrequestListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(laserdeconflictrequestListResponse.treatEarthAs()).contains("VICTIM")
        assertThat(laserdeconflictrequestListResponse.useFieldOfRegard()).contains(true)
        assertThat(laserdeconflictrequestListResponse.victimEnabled()).contains(true)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val laserdeconflictrequestListResponse =
            LaserdeconflictrequestListResponse.builder()
                .classificationMarking("U")
                .dataMode(LaserdeconflictrequestListResponse.DataMode.TEST)
                .endDate(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
                .addIdLaserEmitter("2346c0a0-585f-4232-af5d-93bad320fdc0")
                .addIdLaserEmitter("4446c0a0-585f-4232-af5d-93bad320fbb1")
                .numTargets(25)
                .requestId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .requestTs(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
                .source("Bluestaq")
                .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .centerlineAzimuth(20.3)
                .centerlineElevation(19.434)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .defaultCha(2.5)
                .enableDss(true)
                .addFixedPoint(
                    LaserdeconflictrequestListResponse.FixedPoint.builder()
                        .latitude(-10.18)
                        .longitude(-179.98)
                        .height(-18.13)
                        .build()
                )
                .geopotentialModel("WGS84")
                .idOnOrbit("ONORBIT-ID")
                .laserSystemName("HEL-1")
                .lengthCenterline(79.35)
                .lengthLeftRight(56.23)
                .lengthUpDown(22.6)
                .maximumHeight(440.3)
                .minimumHeight(0.5)
                .missionName("USSF LP 18-1 Test Laser")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .platformLocationName("Vandenberg")
                .platformLocationType("FIXED_POINT")
                .programId("performance_test_llh-sat")
                .propagator("GP")
                .addProtectList(1234)
                .addProtectList(5678)
                .satNo(46852)
                .sourceDl("AXE")
                .sourceEnabled(false)
                .status("REQUESTED")
                .addTag("TAG1")
                .addTag("TAG2")
                .targetEnabled(true)
                .targetType("BOX_CENTERPOINT_LINE")
                .transactionId("TRANSACTION-ID")
                .treatEarthAs("VICTIM")
                .useFieldOfRegard(true)
                .victimEnabled(true)
                .build()

        val roundtrippedLaserdeconflictrequestListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(laserdeconflictrequestListResponse),
                jacksonTypeRef<LaserdeconflictrequestListResponse>(),
            )

        assertThat(roundtrippedLaserdeconflictrequestListResponse)
            .isEqualTo(laserdeconflictrequestListResponse)
    }
}
