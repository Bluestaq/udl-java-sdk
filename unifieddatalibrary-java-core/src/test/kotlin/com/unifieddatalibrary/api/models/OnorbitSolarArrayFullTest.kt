// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitSolarArrayFullTest {

    @Test
    fun create() {
        val onorbitSolarArrayFull =
            OnorbitSolarArrayFull.builder()
                .classificationMarking("U")
                .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                .idOnOrbit("ONORBIT-ID")
                .idSolarArray("SOLARARRAY-ID")
                .source("Bluestaq")
                .id("ONORBITSOLARARRAY-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .quantity(10)
                .solarArray(
                    SolarArrayFull.builder()
                        .dataMode(SolarArrayFull.DataMode.TEST)
                        .name("Solar1")
                        .source("Bluestaq")
                        .id("SOLARARRAY-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addSolarArrayDetail(
                            SolarArrayDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                                .idSolarArray("SOLARARRAY-ID")
                                .source("Bluestaq")
                                .id("SOLARARRAYDETAILS-ID")
                                .area(123.4)
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example notes")
                                .junctionTechnology("Triple")
                                .manufacturerOrg(
                                    OrganizationFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationFull.DataMode.TEST)
                                        .name("some.user")
                                        .source("some.user")
                                        .type("GOVERNMENT")
                                        .id("ORGANIZATION-ID")
                                        .active(false)
                                        .category("Private company")
                                        .countryCode("US")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .description("Example description")
                                        .externalId("EXTERNAL-ID")
                                        .nationality("US")
                                        .addOrganizationDetail(
                                            OrganizationDetailsFull.builder()
                                                .classificationMarking("U")
                                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                                .idOrganization("ORGANIZATION-ID")
                                                .name("some.user")
                                                .source("some.user")
                                                .id("ORGANIZATIONDETAILS-ID")
                                                .address1("123 Main Street")
                                                .address2("Apt 4B")
                                                .address3("Colorado Springs CO, 80903")
                                                .broker("some.user")
                                                .ceo("some.user")
                                                .cfo("some.user")
                                                .createdAt(
                                                    OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                                )
                                                .createdBy("some.user")
                                                .cto("some.user")
                                                .description("Example description")
                                                .ebitda(123.4)
                                                .email("some_organization@organization.com")
                                                .financialNotes("Example notes")
                                                .financialYearEndDate(
                                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                                )
                                                .fleetPlanNotes("Example notes")
                                                .formerOrgId("FORMERORG-ID")
                                                .ftes(123)
                                                .geoAdminLevel1("Colorado")
                                                .geoAdminLevel2("El Paso County")
                                                .geoAdminLevel3("Colorado Springs")
                                                .massRanking(123)
                                                .origin("some.user")
                                                .origNetwork("OPS1")
                                                .parentOrgId("PARENTORG-ID")
                                                .postalCode("80903")
                                                .profit(123.4)
                                                .revenue(123.4)
                                                .revenueRanking(123)
                                                .riskManager("some.user")
                                                .servicesNotes("Example notes")
                                                .addTag("PROVIDER_TAG1")
                                                .addTag("PROVIDER_TAG2")
                                                .updatedAt(
                                                    OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                                )
                                                .updatedBy("some.user")
                                                .build()
                                        )
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .span(123.4)
                                .addTag("TAG1")
                                .addTag("TAG2")
                                .technology("Ga-As")
                                .type("U Shaped")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(onorbitSolarArrayFull.classificationMarking()).isEqualTo("U")
        assertThat(onorbitSolarArrayFull.dataMode()).isEqualTo(OnorbitSolarArrayFull.DataMode.TEST)
        assertThat(onorbitSolarArrayFull.idOnOrbit()).isEqualTo("ONORBIT-ID")
        assertThat(onorbitSolarArrayFull.idSolarArray()).isEqualTo("SOLARARRAY-ID")
        assertThat(onorbitSolarArrayFull.source()).isEqualTo("Bluestaq")
        assertThat(onorbitSolarArrayFull.id()).contains("ONORBITSOLARARRAY-ID")
        assertThat(onorbitSolarArrayFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbitSolarArrayFull.createdBy()).contains("some.user")
        assertThat(onorbitSolarArrayFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(onorbitSolarArrayFull.origNetwork()).contains("OPS1")
        assertThat(onorbitSolarArrayFull.quantity()).contains(10)
        assertThat(onorbitSolarArrayFull.solarArray())
            .contains(
                SolarArrayFull.builder()
                    .dataMode(SolarArrayFull.DataMode.TEST)
                    .name("Solar1")
                    .source("Bluestaq")
                    .id("SOLARARRAY-ID")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .addSolarArrayDetail(
                        SolarArrayDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                            .idSolarArray("SOLARARRAY-ID")
                            .source("Bluestaq")
                            .id("SOLARARRAYDETAILS-ID")
                            .area(123.4)
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .description("Example notes")
                            .junctionTechnology("Triple")
                            .manufacturerOrg(
                                OrganizationFull.builder()
                                    .classificationMarking("U")
                                    .dataMode(OrganizationFull.DataMode.TEST)
                                    .name("some.user")
                                    .source("some.user")
                                    .type("GOVERNMENT")
                                    .id("ORGANIZATION-ID")
                                    .active(false)
                                    .category("Private company")
                                    .countryCode("US")
                                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .createdBy("some.user")
                                    .description("Example description")
                                    .externalId("EXTERNAL-ID")
                                    .nationality("US")
                                    .addOrganizationDetail(
                                        OrganizationDetailsFull.builder()
                                            .classificationMarking("U")
                                            .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                            .idOrganization("ORGANIZATION-ID")
                                            .name("some.user")
                                            .source("some.user")
                                            .id("ORGANIZATIONDETAILS-ID")
                                            .address1("123 Main Street")
                                            .address2("Apt 4B")
                                            .address3("Colorado Springs CO, 80903")
                                            .broker("some.user")
                                            .ceo("some.user")
                                            .cfo("some.user")
                                            .createdAt(
                                                OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                            )
                                            .createdBy("some.user")
                                            .cto("some.user")
                                            .description("Example description")
                                            .ebitda(123.4)
                                            .email("some_organization@organization.com")
                                            .financialNotes("Example notes")
                                            .financialYearEndDate(
                                                OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                            )
                                            .fleetPlanNotes("Example notes")
                                            .formerOrgId("FORMERORG-ID")
                                            .ftes(123)
                                            .geoAdminLevel1("Colorado")
                                            .geoAdminLevel2("El Paso County")
                                            .geoAdminLevel3("Colorado Springs")
                                            .massRanking(123)
                                            .origin("some.user")
                                            .origNetwork("OPS1")
                                            .parentOrgId("PARENTORG-ID")
                                            .postalCode("80903")
                                            .profit(123.4)
                                            .revenue(123.4)
                                            .revenueRanking(123)
                                            .riskManager("some.user")
                                            .servicesNotes("Example notes")
                                            .addTag("PROVIDER_TAG1")
                                            .addTag("PROVIDER_TAG2")
                                            .updatedAt(
                                                OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                            )
                                            .updatedBy("some.user")
                                            .build()
                                    )
                                    .origin("some.user")
                                    .origNetwork("OPS1")
                                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .updatedBy("some.user")
                                    .build()
                            )
                            .manufacturerOrgId("MANUFACTURERORG-ID")
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .span(123.4)
                            .addTag("TAG1")
                            .addTag("TAG2")
                            .technology("Ga-As")
                            .type("U Shaped")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(onorbitSolarArrayFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbitSolarArrayFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val onorbitSolarArrayFull =
            OnorbitSolarArrayFull.builder()
                .classificationMarking("U")
                .dataMode(OnorbitSolarArrayFull.DataMode.TEST)
                .idOnOrbit("ONORBIT-ID")
                .idSolarArray("SOLARARRAY-ID")
                .source("Bluestaq")
                .id("ONORBITSOLARARRAY-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .quantity(10)
                .solarArray(
                    SolarArrayFull.builder()
                        .dataMode(SolarArrayFull.DataMode.TEST)
                        .name("Solar1")
                        .source("Bluestaq")
                        .id("SOLARARRAY-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addSolarArrayDetail(
                            SolarArrayDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(SolarArrayDetailsFull.DataMode.TEST)
                                .idSolarArray("SOLARARRAY-ID")
                                .source("Bluestaq")
                                .id("SOLARARRAYDETAILS-ID")
                                .area(123.4)
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example notes")
                                .junctionTechnology("Triple")
                                .manufacturerOrg(
                                    OrganizationFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationFull.DataMode.TEST)
                                        .name("some.user")
                                        .source("some.user")
                                        .type("GOVERNMENT")
                                        .id("ORGANIZATION-ID")
                                        .active(false)
                                        .category("Private company")
                                        .countryCode("US")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .description("Example description")
                                        .externalId("EXTERNAL-ID")
                                        .nationality("US")
                                        .addOrganizationDetail(
                                            OrganizationDetailsFull.builder()
                                                .classificationMarking("U")
                                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                                .idOrganization("ORGANIZATION-ID")
                                                .name("some.user")
                                                .source("some.user")
                                                .id("ORGANIZATIONDETAILS-ID")
                                                .address1("123 Main Street")
                                                .address2("Apt 4B")
                                                .address3("Colorado Springs CO, 80903")
                                                .broker("some.user")
                                                .ceo("some.user")
                                                .cfo("some.user")
                                                .createdAt(
                                                    OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                                )
                                                .createdBy("some.user")
                                                .cto("some.user")
                                                .description("Example description")
                                                .ebitda(123.4)
                                                .email("some_organization@organization.com")
                                                .financialNotes("Example notes")
                                                .financialYearEndDate(
                                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                                )
                                                .fleetPlanNotes("Example notes")
                                                .formerOrgId("FORMERORG-ID")
                                                .ftes(123)
                                                .geoAdminLevel1("Colorado")
                                                .geoAdminLevel2("El Paso County")
                                                .geoAdminLevel3("Colorado Springs")
                                                .massRanking(123)
                                                .origin("some.user")
                                                .origNetwork("OPS1")
                                                .parentOrgId("PARENTORG-ID")
                                                .postalCode("80903")
                                                .profit(123.4)
                                                .revenue(123.4)
                                                .revenueRanking(123)
                                                .riskManager("some.user")
                                                .servicesNotes("Example notes")
                                                .addTag("PROVIDER_TAG1")
                                                .addTag("PROVIDER_TAG2")
                                                .updatedAt(
                                                    OffsetDateTime.parse("2018-01-01T16:00:00.123Z")
                                                )
                                                .updatedBy("some.user")
                                                .build()
                                        )
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .span(123.4)
                                .addTag("TAG1")
                                .addTag("TAG2")
                                .technology("Ga-As")
                                .type("U Shaped")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedOnorbitSolarArrayFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(onorbitSolarArrayFull),
                jacksonTypeRef<OnorbitSolarArrayFull>(),
            )

        assertThat(roundtrippedOnorbitSolarArrayFull).isEqualTo(onorbitSolarArrayFull)
    }
}
