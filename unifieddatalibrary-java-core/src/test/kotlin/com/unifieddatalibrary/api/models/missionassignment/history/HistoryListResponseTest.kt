// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.missionassignment.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryListResponseTest {

    @Test
    fun create() {
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .mad("MAD")
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .id("MISSIONASSIGNMENT-ID")
                .c1associateddmpis(3)
                .c2air("C2AIR")
                .c2alt(3)
                .c2crs(3)
                .c2exerciseindicator("C2EXERCISE")
                .c2exercisemof("MOF")
                .c2id("C2ID")
                .c2idamplifyingdescriptor("C2IDAMP")
                .c2lnd("C2LND")
                .c2spc("C2SPC")
                .c2spd(3)
                .c2specialinterestindicator("C2SPECIAL")
                .c2sur("C2SUR")
                .c3elv(10.23)
                .c3lat(10.23)
                .c3lon(10.23)
                .c3ptl("C3PTL")
                .c3ptnum("C3PTNUM")
                .c4colon(5)
                .c4def("C4DEF")
                .c4egress(4)
                .c4mod(5)
                .c4numberofstores(3)
                .c4runin(5)
                .c4tgt("C4TGT")
                .c4timediscrete("C4TIMED")
                .c4tm(4)
                .c4typeofstores(2)
                .c5colon(5)
                .c5elevationlsbs(5)
                .c5haeadj(5)
                .c5latlsb(5)
                .c5lonlsb(5)
                .c5tgtbrng(5)
                .c5tw(5)
                .c6dspc("C6DSPC")
                .c6dspct("C6DSPCT")
                .c6fplpm("C6FPLPM")
                .c6intel(5)
                .c6laser(5)
                .c6longpm("C6LONGPM")
                .c6tnr3(5)
                .c7elang2(5.23)
                .c7in3p(3)
                .c7tnor("C7TNOR")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .env("ENV")
                .index(5)
                .lat(45.23)
                .lon(45.23)
                .orginx("ORIGIN")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .rc("RC-123")
                .rr(2)
                .sz("STRENGTH")
                .tno("TRACK_NUMBER")
                .trkId("TRK-ID")
                .twenv("THREAT_WARNING")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(historyListResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyListResponse.dataMode()).isEqualTo(HistoryListResponse.DataMode.TEST)
        assertThat(historyListResponse.mad()).isEqualTo("MAD")
        assertThat(historyListResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyListResponse.ts())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(historyListResponse.id()).contains("MISSIONASSIGNMENT-ID")
        assertThat(historyListResponse.c1associateddmpis()).contains(3)
        assertThat(historyListResponse.c2air()).contains("C2AIR")
        assertThat(historyListResponse.c2alt()).contains(3)
        assertThat(historyListResponse.c2crs()).contains(3)
        assertThat(historyListResponse.c2exerciseindicator()).contains("C2EXERCISE")
        assertThat(historyListResponse.c2exercisemof()).contains("MOF")
        assertThat(historyListResponse.c2id()).contains("C2ID")
        assertThat(historyListResponse.c2idamplifyingdescriptor()).contains("C2IDAMP")
        assertThat(historyListResponse.c2lnd()).contains("C2LND")
        assertThat(historyListResponse.c2spc()).contains("C2SPC")
        assertThat(historyListResponse.c2spd()).contains(3)
        assertThat(historyListResponse.c2specialinterestindicator()).contains("C2SPECIAL")
        assertThat(historyListResponse.c2sur()).contains("C2SUR")
        assertThat(historyListResponse.c3elv()).contains(10.23)
        assertThat(historyListResponse.c3lat()).contains(10.23)
        assertThat(historyListResponse.c3lon()).contains(10.23)
        assertThat(historyListResponse.c3ptl()).contains("C3PTL")
        assertThat(historyListResponse.c3ptnum()).contains("C3PTNUM")
        assertThat(historyListResponse.c4colon()).contains(5)
        assertThat(historyListResponse.c4def()).contains("C4DEF")
        assertThat(historyListResponse.c4egress()).contains(4)
        assertThat(historyListResponse.c4mod()).contains(5)
        assertThat(historyListResponse.c4numberofstores()).contains(3)
        assertThat(historyListResponse.c4runin()).contains(5)
        assertThat(historyListResponse.c4tgt()).contains("C4TGT")
        assertThat(historyListResponse.c4timediscrete()).contains("C4TIMED")
        assertThat(historyListResponse.c4tm()).contains(4)
        assertThat(historyListResponse.c4typeofstores()).contains(2)
        assertThat(historyListResponse.c5colon()).contains(5)
        assertThat(historyListResponse.c5elevationlsbs()).contains(5)
        assertThat(historyListResponse.c5haeadj()).contains(5)
        assertThat(historyListResponse.c5latlsb()).contains(5)
        assertThat(historyListResponse.c5lonlsb()).contains(5)
        assertThat(historyListResponse.c5tgtbrng()).contains(5)
        assertThat(historyListResponse.c5tw()).contains(5)
        assertThat(historyListResponse.c6dspc()).contains("C6DSPC")
        assertThat(historyListResponse.c6dspct()).contains("C6DSPCT")
        assertThat(historyListResponse.c6fplpm()).contains("C6FPLPM")
        assertThat(historyListResponse.c6intel()).contains(5)
        assertThat(historyListResponse.c6laser()).contains(5)
        assertThat(historyListResponse.c6longpm()).contains("C6LONGPM")
        assertThat(historyListResponse.c6tnr3()).contains(5)
        assertThat(historyListResponse.c7elang2()).contains(5.23)
        assertThat(historyListResponse.c7in3p()).contains(3)
        assertThat(historyListResponse.c7tnor()).contains("C7TNOR")
        assertThat(historyListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.createdBy()).contains("some.user")
        assertThat(historyListResponse.env()).contains("ENV")
        assertThat(historyListResponse.index()).contains(5)
        assertThat(historyListResponse.lat()).contains(45.23)
        assertThat(historyListResponse.lon()).contains(45.23)
        assertThat(historyListResponse.orginx()).contains("ORIGIN")
        assertThat(historyListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyListResponse.origNetwork()).contains("OPS1")
        assertThat(historyListResponse.rc()).contains("RC-123")
        assertThat(historyListResponse.rr()).contains(2)
        assertThat(historyListResponse.sz()).contains("STRENGTH")
        assertThat(historyListResponse.tno()).contains("TRACK_NUMBER")
        assertThat(historyListResponse.trkId()).contains("TRK-ID")
        assertThat(historyListResponse.twenv()).contains("THREAT_WARNING")
        assertThat(historyListResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .mad("MAD")
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .id("MISSIONASSIGNMENT-ID")
                .c1associateddmpis(3)
                .c2air("C2AIR")
                .c2alt(3)
                .c2crs(3)
                .c2exerciseindicator("C2EXERCISE")
                .c2exercisemof("MOF")
                .c2id("C2ID")
                .c2idamplifyingdescriptor("C2IDAMP")
                .c2lnd("C2LND")
                .c2spc("C2SPC")
                .c2spd(3)
                .c2specialinterestindicator("C2SPECIAL")
                .c2sur("C2SUR")
                .c3elv(10.23)
                .c3lat(10.23)
                .c3lon(10.23)
                .c3ptl("C3PTL")
                .c3ptnum("C3PTNUM")
                .c4colon(5)
                .c4def("C4DEF")
                .c4egress(4)
                .c4mod(5)
                .c4numberofstores(3)
                .c4runin(5)
                .c4tgt("C4TGT")
                .c4timediscrete("C4TIMED")
                .c4tm(4)
                .c4typeofstores(2)
                .c5colon(5)
                .c5elevationlsbs(5)
                .c5haeadj(5)
                .c5latlsb(5)
                .c5lonlsb(5)
                .c5tgtbrng(5)
                .c5tw(5)
                .c6dspc("C6DSPC")
                .c6dspct("C6DSPCT")
                .c6fplpm("C6FPLPM")
                .c6intel(5)
                .c6laser(5)
                .c6longpm("C6LONGPM")
                .c6tnr3(5)
                .c7elang2(5.23)
                .c7in3p(3)
                .c7tnor("C7TNOR")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .env("ENV")
                .index(5)
                .lat(45.23)
                .lon(45.23)
                .orginx("ORIGIN")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .rc("RC-123")
                .rr(2)
                .sz("STRENGTH")
                .tno("TRACK_NUMBER")
                .trkId("TRK-ID")
                .twenv("THREAT_WARNING")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedHistoryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyListResponse),
                jacksonTypeRef<HistoryListResponse>(),
            )

        assertThat(roundtrippedHistoryListResponse).isEqualTo(historyListResponse)
    }
}
