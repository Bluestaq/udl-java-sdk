// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.weatherreport.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.weatherreport.history.WeatherReportFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WeatherReportFullTest {

    @Test
    fun create() {
      val weatherReportFull = WeatherReportFull.builder()
          .classificationMarking("U")
          .dataMode(WeatherReportFull.DataMode.TEST)
          .lat(56.12)
          .lon(-156.6)
          .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .reportType("FORECAST")
          .source("Bluestaq")
          .id("WEATHER-REPORT-ID")
          .actWeather("NO STATEMENT")
          .agjson("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
          .alt(123.12)
          .andims(2L)
          .area("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .asrid(4326)
          .atext("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .atype("ST_Polygon")
          .barPress(101.2)
          .ccEvent(true)
          .addCloudCover("OVERCAST")
          .addCloudCover("BROKEN")
          .addCloudHght(1.2)
          .addCloudHght(2.2)
          .contrailHghtLower(123.123)
          .contrailHghtUpper(123.123)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .dataLevel("MANDATORY")
          .dewPoint(15.6)
          .difRad(234.5)
          .dirDev(9.1)
          .enRouteWeather("THUNDERSTORMS")
          .externalId("GDSSMB022408301601304517")
          .externalLocationId("TMDS060AD4OG03CC")
          .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
          .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .geoPotentialAlt(1000.0)
          .hshear(3.8)
          .icao("KAFF")
          .icingLowerLimit(123.123)
          .icingUpperLimit(123.123)
          .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
          .idGroundImagery("GROUND-IMAGERY-ID")
          .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
          .idSite("AIRFIELD-ID")
          .indexRefraction(1.1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .origSensorId("ORIGSENSOR-ID")
          .precipRate(3.4)
          .qnh(1234.456)
          .radVel(-0.04)
          .radVelBeam1(4.4)
          .radVelBeam2(-0.2)
          .radVelBeam3(-0.2)
          .radVelBeam4(11.4)
          .radVelBeam5(4.1)
          .rainHour(1.2)
          .rawMetar("KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015")
          .rawTaf("KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=")
          .refRad(56.7)
          .relHumidity(34.456)
          .senalt(1.23)
          .senlat(12.456)
          .senlon(123.456)
          .soilMoisture(3.5)
          .soilTemp(22.4)
          .solarRad(1234.456)
          .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
          .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
          .addSrcTyp("SENSOR")
          .addSrcTyp("WEATHERDATA")
          .surroundingWeather("NO STATEMENT")
          .temperature(23.45)
          .visibility(1234.456)
          .vshear(3.8)
          .weatherAmp("NO STATEMENT")
          .weatherDesc("NO STATEMENT")
          .weatherId("WEATHER-ID")
          .weatherInt("NO STATEMENT")
          .windChill(15.6)
          .addWindCov(1.1)
          .addWindCov(2.2)
          .windDir(75.1234)
          .windDirAvg(57.1)
          .windDirPeak(78.4)
          .windDirPeak10(44.5)
          .windGust(10.23)
          .windGust10(13.2)
          .windSpd(1.23)
          .windSpdAvg(12.1)
          .windVar(false)
          .build()

      assertThat(weatherReportFull.classificationMarking()).isEqualTo("U")
      assertThat(weatherReportFull.dataMode()).isEqualTo(WeatherReportFull.DataMode.TEST)
      assertThat(weatherReportFull.lat()).isEqualTo(56.12)
      assertThat(weatherReportFull.lon()).isEqualTo(-156.6)
      assertThat(weatherReportFull.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
      assertThat(weatherReportFull.reportType()).isEqualTo("FORECAST")
      assertThat(weatherReportFull.source()).isEqualTo("Bluestaq")
      assertThat(weatherReportFull.id()).contains("WEATHER-REPORT-ID")
      assertThat(weatherReportFull.actWeather()).contains("NO STATEMENT")
      assertThat(weatherReportFull.agjson()).contains("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
      assertThat(weatherReportFull.alt()).contains(123.12)
      assertThat(weatherReportFull.andims()).contains(2L)
      assertThat(weatherReportFull.area()).contains("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
      assertThat(weatherReportFull.asrid()).contains(4326)
      assertThat(weatherReportFull.atext()).contains("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
      assertThat(weatherReportFull.atype()).contains("ST_Polygon")
      assertThat(weatherReportFull.barPress()).contains(101.2)
      assertThat(weatherReportFull.ccEvent()).contains(true)
      assertThat(weatherReportFull.cloudCover().getOrNull()).containsExactly("OVERCAST", "BROKEN")
      assertThat(weatherReportFull.cloudHght().getOrNull()).containsExactly(1.2, 2.2)
      assertThat(weatherReportFull.contrailHghtLower()).contains(123.123)
      assertThat(weatherReportFull.contrailHghtUpper()).contains(123.123)
      assertThat(weatherReportFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(weatherReportFull.createdBy()).contains("some.user")
      assertThat(weatherReportFull.dataLevel()).contains("MANDATORY")
      assertThat(weatherReportFull.dewPoint()).contains(15.6)
      assertThat(weatherReportFull.difRad()).contains(234.5)
      assertThat(weatherReportFull.dirDev()).contains(9.1)
      assertThat(weatherReportFull.enRouteWeather()).contains("THUNDERSTORMS")
      assertThat(weatherReportFull.externalId()).contains("GDSSMB022408301601304517")
      assertThat(weatherReportFull.externalLocationId()).contains("TMDS060AD4OG03CC")
      assertThat(weatherReportFull.forecastEndTime()).contains(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
      assertThat(weatherReportFull.forecastStartTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(weatherReportFull.geoPotentialAlt()).contains(1000.0)
      assertThat(weatherReportFull.hshear()).contains(3.8)
      assertThat(weatherReportFull.icao()).contains("KAFF")
      assertThat(weatherReportFull.icingLowerLimit()).contains(123.123)
      assertThat(weatherReportFull.icingUpperLimit()).contains(123.123)
      assertThat(weatherReportFull.idAirfield()).contains("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
      assertThat(weatherReportFull.idGroundImagery()).contains("GROUND-IMAGERY-ID")
      assertThat(weatherReportFull.idSensor()).contains("0129f577-e04c-441e-65ca-0a04a750bed9")
      assertThat(weatherReportFull.idSite()).contains("AIRFIELD-ID")
      assertThat(weatherReportFull.indexRefraction()).contains(1.1)
      assertThat(weatherReportFull.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(weatherReportFull.origNetwork()).contains("ORIG")
      assertThat(weatherReportFull.origSensorId()).contains("ORIGSENSOR-ID")
      assertThat(weatherReportFull.precipRate()).contains(3.4)
      assertThat(weatherReportFull.qnh()).contains(1234.456)
      assertThat(weatherReportFull.radVel()).contains(-0.04)
      assertThat(weatherReportFull.radVelBeam1()).contains(4.4)
      assertThat(weatherReportFull.radVelBeam2()).contains(-0.2)
      assertThat(weatherReportFull.radVelBeam3()).contains(-0.2)
      assertThat(weatherReportFull.radVelBeam4()).contains(11.4)
      assertThat(weatherReportFull.radVelBeam5()).contains(4.1)
      assertThat(weatherReportFull.rainHour()).contains(1.2)
      assertThat(weatherReportFull.rawMetar()).contains("KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015")
      assertThat(weatherReportFull.rawTaf()).contains("KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=")
      assertThat(weatherReportFull.refRad()).contains(56.7)
      assertThat(weatherReportFull.relHumidity()).contains(34.456)
      assertThat(weatherReportFull.senalt()).contains(1.23)
      assertThat(weatherReportFull.senlat()).contains(12.456)
      assertThat(weatherReportFull.senlon()).contains(123.456)
      assertThat(weatherReportFull.soilMoisture()).contains(3.5)
      assertThat(weatherReportFull.soilTemp()).contains(22.4)
      assertThat(weatherReportFull.solarRad()).contains(1234.456)
      assertThat(weatherReportFull.srcIds().getOrNull()).containsExactly("e609a90d-4059-4043-9f1a-fd7b49a3e1d0", "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
      assertThat(weatherReportFull.srcTyps().getOrNull()).containsExactly("SENSOR", "WEATHERDATA")
      assertThat(weatherReportFull.surroundingWeather()).contains("NO STATEMENT")
      assertThat(weatherReportFull.temperature()).contains(23.45)
      assertThat(weatherReportFull.visibility()).contains(1234.456)
      assertThat(weatherReportFull.vshear()).contains(3.8)
      assertThat(weatherReportFull.weatherAmp()).contains("NO STATEMENT")
      assertThat(weatherReportFull.weatherDesc()).contains("NO STATEMENT")
      assertThat(weatherReportFull.weatherId()).contains("WEATHER-ID")
      assertThat(weatherReportFull.weatherInt()).contains("NO STATEMENT")
      assertThat(weatherReportFull.windChill()).contains(15.6)
      assertThat(weatherReportFull.windCov().getOrNull()).containsExactly(1.1, 2.2)
      assertThat(weatherReportFull.windDir()).contains(75.1234)
      assertThat(weatherReportFull.windDirAvg()).contains(57.1)
      assertThat(weatherReportFull.windDirPeak()).contains(78.4)
      assertThat(weatherReportFull.windDirPeak10()).contains(44.5)
      assertThat(weatherReportFull.windGust()).contains(10.23)
      assertThat(weatherReportFull.windGust10()).contains(13.2)
      assertThat(weatherReportFull.windSpd()).contains(1.23)
      assertThat(weatherReportFull.windSpdAvg()).contains(12.1)
      assertThat(weatherReportFull.windVar()).contains(false)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val weatherReportFull = WeatherReportFull.builder()
          .classificationMarking("U")
          .dataMode(WeatherReportFull.DataMode.TEST)
          .lat(56.12)
          .lon(-156.6)
          .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
          .reportType("FORECAST")
          .source("Bluestaq")
          .id("WEATHER-REPORT-ID")
          .actWeather("NO STATEMENT")
          .agjson("{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }")
          .alt(123.12)
          .andims(2L)
          .area("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .asrid(4326)
          .atext("POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))")
          .atype("ST_Polygon")
          .barPress(101.2)
          .ccEvent(true)
          .addCloudCover("OVERCAST")
          .addCloudCover("BROKEN")
          .addCloudHght(1.2)
          .addCloudHght(2.2)
          .contrailHghtLower(123.123)
          .contrailHghtUpper(123.123)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .dataLevel("MANDATORY")
          .dewPoint(15.6)
          .difRad(234.5)
          .dirDev(9.1)
          .enRouteWeather("THUNDERSTORMS")
          .externalId("GDSSMB022408301601304517")
          .externalLocationId("TMDS060AD4OG03CC")
          .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
          .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .geoPotentialAlt(1000.0)
          .hshear(3.8)
          .icao("KAFF")
          .icingLowerLimit(123.123)
          .icingUpperLimit(123.123)
          .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
          .idGroundImagery("GROUND-IMAGERY-ID")
          .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
          .idSite("AIRFIELD-ID")
          .indexRefraction(1.1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .origSensorId("ORIGSENSOR-ID")
          .precipRate(3.4)
          .qnh(1234.456)
          .radVel(-0.04)
          .radVelBeam1(4.4)
          .radVelBeam2(-0.2)
          .radVelBeam3(-0.2)
          .radVelBeam4(11.4)
          .radVelBeam5(4.1)
          .rainHour(1.2)
          .rawMetar("KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015")
          .rawTaf("KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=")
          .refRad(56.7)
          .relHumidity(34.456)
          .senalt(1.23)
          .senlat(12.456)
          .senlon(123.456)
          .soilMoisture(3.5)
          .soilTemp(22.4)
          .solarRad(1234.456)
          .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
          .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
          .addSrcTyp("SENSOR")
          .addSrcTyp("WEATHERDATA")
          .surroundingWeather("NO STATEMENT")
          .temperature(23.45)
          .visibility(1234.456)
          .vshear(3.8)
          .weatherAmp("NO STATEMENT")
          .weatherDesc("NO STATEMENT")
          .weatherId("WEATHER-ID")
          .weatherInt("NO STATEMENT")
          .windChill(15.6)
          .addWindCov(1.1)
          .addWindCov(2.2)
          .windDir(75.1234)
          .windDirAvg(57.1)
          .windDirPeak(78.4)
          .windDirPeak10(44.5)
          .windGust(10.23)
          .windGust10(13.2)
          .windSpd(1.23)
          .windSpdAvg(12.1)
          .windVar(false)
          .build()

      val roundtrippedWeatherReportFull = jsonMapper.readValue(jsonMapper.writeValueAsString(weatherReportFull), jacksonTypeRef<WeatherReportFull>())

      assertThat(roundtrippedWeatherReportFull).isEqualTo(weatherReportFull)
    }
}
