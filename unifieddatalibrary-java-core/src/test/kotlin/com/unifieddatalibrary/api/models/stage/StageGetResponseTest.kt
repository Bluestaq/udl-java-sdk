// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.stage

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.Engine
import com.unifieddatalibrary.api.models.EngineDetailsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StageGetResponseTest {

    @Test
    fun create() {
        val stageGetResponse =
            StageGetResponse.builder()
                .classificationMarking("U")
                .dataMode(StageGetResponse.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("STAGE-ID")
                .avionicsNotes("Sample Notes")
                .burnTime(256.3)
                .controlThruster1("controlThruster1")
                .controlThruster2("controlThruster2")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .diameter(3.95)
                .engine(
                    Engine.builder()
                        .classificationMarking("U")
                        .dataMode(Engine.DataMode.TEST)
                        .name("ENGINE_VARIANT1")
                        .source("Bluestaq")
                        .id("ENGINE-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .addEngineDetail(
                            EngineDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(EngineDetailsFull.DataMode.TEST)
                                .idEngine("ENGINE-ID")
                                .source("Bluestaq")
                                .id("ENGINEDETAILS-ID")
                                .burnTime(1.1)
                                .chamberPressure(1.1)
                                .characteristicType("Electric")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cycleType("Pressure Fed")
                                .family("ENGINE_TYPE1")
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .maxFirings(5)
                                .notes("Example notes")
                                .nozzleExpansionRatio(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .oxidizer("Liquid Oxygen")
                                .propellant("Liquid")
                                .seaLevelThrust(1.1)
                                .specificImpulse(1.1)
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .vacuumThrust(1.1)
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .length(25.13)
                .mainEngineThrustSeaLevel(733.4)
                .mainEngineThrustVacuum(733.4)
                .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                .mass(9956.1)
                .notes("Sample Notes")
                .numBurns(1)
                .numControlThruster1(1)
                .numControlThruster2(1)
                .numEngines(1)
                .numStageElements(2)
                .numVernier(3)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPhotoUrl("photoURL")
                .restartable(true)
                .reusable(true)
                .stageNumber(2)
                .addTag("TAG1")
                .addTag("TAG2")
                .thrustSeaLevel(733.4)
                .thrustVacuum(733.4)
                .type("Electrostatic Ion")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .vernier("vernier")
                .vernierBurnTime(1.1)
                .vernierNumBurns(4)
                .vernierThrustSeaLevel(4.1)
                .vernierThrustVacuum(3.2)
                .build()

        assertThat(stageGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(stageGetResponse.dataMode()).isEqualTo(StageGetResponse.DataMode.TEST)
        assertThat(stageGetResponse.idEngine()).isEqualTo("ENGINE-ID")
        assertThat(stageGetResponse.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(stageGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(stageGetResponse.id()).contains("STAGE-ID")
        assertThat(stageGetResponse.avionicsNotes()).contains("Sample Notes")
        assertThat(stageGetResponse.burnTime()).contains(256.3)
        assertThat(stageGetResponse.controlThruster1()).contains("controlThruster1")
        assertThat(stageGetResponse.controlThruster2()).contains("controlThruster2")
        assertThat(stageGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(stageGetResponse.createdBy()).contains("some.user")
        assertThat(stageGetResponse.diameter()).contains(3.95)
        assertThat(stageGetResponse.engine())
            .contains(
                Engine.builder()
                    .classificationMarking("U")
                    .dataMode(Engine.DataMode.TEST)
                    .name("ENGINE_VARIANT1")
                    .source("Bluestaq")
                    .id("ENGINE-ID")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addEngineDetail(
                        EngineDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(EngineDetailsFull.DataMode.TEST)
                            .idEngine("ENGINE-ID")
                            .source("Bluestaq")
                            .id("ENGINEDETAILS-ID")
                            .burnTime(1.1)
                            .chamberPressure(1.1)
                            .characteristicType("Electric")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cycleType("Pressure Fed")
                            .family("ENGINE_TYPE1")
                            .manufacturerOrgId("MANUFACTURERORG-ID")
                            .maxFirings(5)
                            .notes("Example notes")
                            .nozzleExpansionRatio(1.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .oxidizer("Liquid Oxygen")
                            .propellant("Liquid")
                            .seaLevelThrust(1.1)
                            .specificImpulse(1.1)
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .vacuumThrust(1.1)
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(stageGetResponse.length()).contains(25.13)
        assertThat(stageGetResponse.mainEngineThrustSeaLevel()).contains(733.4)
        assertThat(stageGetResponse.mainEngineThrustVacuum()).contains(733.4)
        assertThat(stageGetResponse.manufacturerOrgId())
            .contains("5feed5d7-d131-57e5-a3fd-acc173bca736")
        assertThat(stageGetResponse.mass()).contains(9956.1)
        assertThat(stageGetResponse.notes()).contains("Sample Notes")
        assertThat(stageGetResponse.numBurns()).contains(1)
        assertThat(stageGetResponse.numControlThruster1()).contains(1)
        assertThat(stageGetResponse.numControlThruster2()).contains(1)
        assertThat(stageGetResponse.numEngines()).contains(1)
        assertThat(stageGetResponse.numStageElements()).contains(2)
        assertThat(stageGetResponse.numVernier()).contains(3)
        assertThat(stageGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(stageGetResponse.origNetwork()).contains("OPS1")
        assertThat(stageGetResponse.photoUrls().getOrNull()).containsExactly("photoURL")
        assertThat(stageGetResponse.restartable()).contains(true)
        assertThat(stageGetResponse.reusable()).contains(true)
        assertThat(stageGetResponse.stageNumber()).contains(2)
        assertThat(stageGetResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(stageGetResponse.thrustSeaLevel()).contains(733.4)
        assertThat(stageGetResponse.thrustVacuum()).contains(733.4)
        assertThat(stageGetResponse.type()).contains("Electrostatic Ion")
        assertThat(stageGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(stageGetResponse.updatedBy()).contains("some.user")
        assertThat(stageGetResponse.vernier()).contains("vernier")
        assertThat(stageGetResponse.vernierBurnTime()).contains(1.1)
        assertThat(stageGetResponse.vernierNumBurns()).contains(4)
        assertThat(stageGetResponse.vernierThrustSeaLevel()).contains(4.1)
        assertThat(stageGetResponse.vernierThrustVacuum()).contains(3.2)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val stageGetResponse =
            StageGetResponse.builder()
                .classificationMarking("U")
                .dataMode(StageGetResponse.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("STAGE-ID")
                .avionicsNotes("Sample Notes")
                .burnTime(256.3)
                .controlThruster1("controlThruster1")
                .controlThruster2("controlThruster2")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .diameter(3.95)
                .engine(
                    Engine.builder()
                        .classificationMarking("U")
                        .dataMode(Engine.DataMode.TEST)
                        .name("ENGINE_VARIANT1")
                        .source("Bluestaq")
                        .id("ENGINE-ID")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .addEngineDetail(
                            EngineDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(EngineDetailsFull.DataMode.TEST)
                                .idEngine("ENGINE-ID")
                                .source("Bluestaq")
                                .id("ENGINEDETAILS-ID")
                                .burnTime(1.1)
                                .chamberPressure(1.1)
                                .characteristicType("Electric")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cycleType("Pressure Fed")
                                .family("ENGINE_TYPE1")
                                .manufacturerOrgId("MANUFACTURERORG-ID")
                                .maxFirings(5)
                                .notes("Example notes")
                                .nozzleExpansionRatio(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .oxidizer("Liquid Oxygen")
                                .propellant("Liquid")
                                .seaLevelThrust(1.1)
                                .specificImpulse(1.1)
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .vacuumThrust(1.1)
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .length(25.13)
                .mainEngineThrustSeaLevel(733.4)
                .mainEngineThrustVacuum(733.4)
                .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                .mass(9956.1)
                .notes("Sample Notes")
                .numBurns(1)
                .numControlThruster1(1)
                .numControlThruster2(1)
                .numEngines(1)
                .numStageElements(2)
                .numVernier(3)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPhotoUrl("photoURL")
                .restartable(true)
                .reusable(true)
                .stageNumber(2)
                .addTag("TAG1")
                .addTag("TAG2")
                .thrustSeaLevel(733.4)
                .thrustVacuum(733.4)
                .type("Electrostatic Ion")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .vernier("vernier")
                .vernierBurnTime(1.1)
                .vernierNumBurns(4)
                .vernierThrustSeaLevel(4.1)
                .vernierThrustVacuum(3.2)
                .build()

        val roundtrippedStageGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(stageGetResponse),
                jacksonTypeRef<StageGetResponse>(),
            )

        assertThat(roundtrippedStageGetResponse).isEqualTo(stageGetResponse)
    }
}
