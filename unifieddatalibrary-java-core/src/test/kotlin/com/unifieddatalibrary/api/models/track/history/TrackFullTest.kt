// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.track.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TrackFullTest {

    @Test
    fun create() {
        val trackFull =
            TrackFull.builder()
                .classificationMarking("U")
                .dataMode(TrackFull.DataMode.TEST)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-06-07T14:17:39.653043Z"))
                .id("TRACK-ID")
                .alt(2024.15)
                .asset("asset")
                .assetNat("US")
                .attitude(listOf(10.1, 0.1, 1.1))
                .attitudeRate(listOf(0.0003, 1e-7, 0.00003))
                .callSign("callSign")
                .cntct("Contact Info")
                .contextKeys(listOf("MsnID_DescLabel", "msnVer", "serVer", "velTs", "accelTs"))
                .contextValues(
                    listOf(
                        "MissionID Descriptive Label text",
                        "1",
                        "001.9b",
                        "2024-06-07T14:17:39.234Z",
                        "2024-06-07T14:17:39.123Z",
                    )
                )
                .course(215.2)
                .cov(listOf(1.1, 2.2, 3.3))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ecefAcc(listOf(-0.0265, -0.2764, -0.1773))
                .ecefPos(listOf(-1273011.47, -48108810.77, 3979360.49))
                .ecefVel(listOf(25.635, -1.097, 57.373))
                .eNuAcc(listOf(0.0003, 0.014, 0.0003))
                .eNuGroundVel(listOf(1.23, 2.34, 3.45))
                .eNuPos(listOf(1.23, 2.34, 3.45))
                .eNuVel(listOf(1.23, 2.34, 3.45))
                .env("LAND")
                .envConf(1.23)
                .errEllp(listOf(1.23, 2.34, 3.45))
                .hdng(215.7)
                .identAmp("ZOMBIE")
                .identCred(0)
                .identRel(0)
                .jSeries("J12.5")
                .lat(38.8353)
                .lcAcc(listOf(1.23, 2.34, 3.45))
                .lco(listOf(1.23, 2.34, 3.45))
                .lcPos(listOf(1.23, 2.34, 3.45))
                .lcs(listOf(1.23, 2.34, 3.45))
                .lcVel(listOf(1.23, 2.34, 3.45))
                .lon(-104.8216)
                .m1(11)
                .m1v(1)
                .m2(1234)
                .m2v(1)
                .m3a(2636)
                .m3av(1)
                .modType("MASINT")
                .msgTs(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .msnId("msnId")
                .multiSource(true)
                .objAct("HOLDING")
                .objDescription("Object description text.")
                .objId("objId")
                .objIdent("FRIEND")
                .objNat("NATO")
                .objPlat("COMBAT_VEHICLE")
                .objSpec("LIGHT_TANK")
                .objType("WATERCRAFT")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .sen("sen")
                .senQual("senQual")
                .sourceDl("AXE")
                .spd(62.9921)
                .addSrcId("f7c70cc8-f9b7-4467-b4ad-3904e360e842")
                .addSrcId("1da3fab000014e3133709830937387405")
                .addSrcTyp("MTI")
                .addSrcTyp("POI")
                .strength(14)
                .addTag("TAG1")
                .addTag("TAG2")
                .trkConf(0.67)
                .trkId("trkId")
                .trkItmId("38f3a71f-4bba-4d58-9765-c1b93212aff1")
                .trkNum("trkNum")
                .trkPtType("MEASURED")
                .trkQual(0)
                .trkStat("INITIATING")
                .vertUnc(4.56)
                .wanderAng(1.23)
                .build()

        assertThat(trackFull.classificationMarking()).isEqualTo("U")
        assertThat(trackFull.dataMode()).isEqualTo(TrackFull.DataMode.TEST)
        assertThat(trackFull.source()).isEqualTo("Bluestaq")
        assertThat(trackFull.ts()).isEqualTo(OffsetDateTime.parse("2021-06-07T14:17:39.653043Z"))
        assertThat(trackFull.id()).contains("TRACK-ID")
        assertThat(trackFull.alt()).contains(2024.15)
        assertThat(trackFull.asset()).contains("asset")
        assertThat(trackFull.assetNat()).contains("US")
        assertThat(trackFull.attitude().getOrNull()).containsExactly(10.1, 0.1, 1.1)
        assertThat(trackFull.attitudeRate().getOrNull()).containsExactly(0.0003, 1e-7, 0.00003)
        assertThat(trackFull.callSign()).contains("callSign")
        assertThat(trackFull.cntct()).contains("Contact Info")
        assertThat(trackFull.contextKeys().getOrNull())
            .containsExactly("MsnID_DescLabel", "msnVer", "serVer", "velTs", "accelTs")
        assertThat(trackFull.contextValues().getOrNull())
            .containsExactly(
                "MissionID Descriptive Label text",
                "1",
                "001.9b",
                "2024-06-07T14:17:39.234Z",
                "2024-06-07T14:17:39.123Z",
            )
        assertThat(trackFull.course()).contains(215.2)
        assertThat(trackFull.cov().getOrNull()).containsExactly(1.1, 2.2, 3.3)
        assertThat(trackFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(trackFull.createdBy()).contains("some.user")
        assertThat(trackFull.ecefAcc().getOrNull()).containsExactly(-0.0265, -0.2764, -0.1773)
        assertThat(trackFull.ecefPos().getOrNull())
            .containsExactly(-1273011.47, -48108810.77, 3979360.49)
        assertThat(trackFull.ecefVel().getOrNull()).containsExactly(25.635, -1.097, 57.373)
        assertThat(trackFull.eNuAcc().getOrNull()).containsExactly(0.0003, 0.014, 0.0003)
        assertThat(trackFull.eNuGroundVel().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.eNuPos().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.eNuVel().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.env()).contains("LAND")
        assertThat(trackFull.envConf()).contains(1.23)
        assertThat(trackFull.errEllp().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.hdng()).contains(215.7)
        assertThat(trackFull.identAmp()).contains("ZOMBIE")
        assertThat(trackFull.identCred()).contains(0)
        assertThat(trackFull.identRel()).contains(0)
        assertThat(trackFull.jSeries()).contains("J12.5")
        assertThat(trackFull.lat()).contains(38.8353)
        assertThat(trackFull.lcAcc().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.lco().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.lcPos().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.lcs().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.lcVel().getOrNull()).containsExactly(1.23, 2.34, 3.45)
        assertThat(trackFull.lon()).contains(-104.8216)
        assertThat(trackFull.m1()).contains(11)
        assertThat(trackFull.m1v()).contains(1)
        assertThat(trackFull.m2()).contains(1234)
        assertThat(trackFull.m2v()).contains(1)
        assertThat(trackFull.m3a()).contains(2636)
        assertThat(trackFull.m3av()).contains(1)
        assertThat(trackFull.modType()).contains("MASINT")
        assertThat(trackFull.msgTs()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(trackFull.msnId()).contains("msnId")
        assertThat(trackFull.multiSource()).contains(true)
        assertThat(trackFull.objAct()).contains("HOLDING")
        assertThat(trackFull.objDescription()).contains("Object description text.")
        assertThat(trackFull.objId()).contains("objId")
        assertThat(trackFull.objIdent()).contains("FRIEND")
        assertThat(trackFull.objNat()).contains("NATO")
        assertThat(trackFull.objPlat()).contains("COMBAT_VEHICLE")
        assertThat(trackFull.objSpec()).contains("LIGHT_TANK")
        assertThat(trackFull.objType()).contains("WATERCRAFT")
        assertThat(trackFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(trackFull.origNetwork()).contains("OPS1")
        assertThat(trackFull.sen()).contains("sen")
        assertThat(trackFull.senQual()).contains("senQual")
        assertThat(trackFull.sourceDl()).contains("AXE")
        assertThat(trackFull.spd()).contains(62.9921)
        assertThat(trackFull.srcIds().getOrNull())
            .containsExactly(
                "f7c70cc8-f9b7-4467-b4ad-3904e360e842",
                "1da3fab000014e3133709830937387405",
            )
        assertThat(trackFull.srcTyps().getOrNull()).containsExactly("MTI", "POI")
        assertThat(trackFull.strength()).contains(14)
        assertThat(trackFull.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(trackFull.trkConf()).contains(0.67)
        assertThat(trackFull.trkId()).contains("trkId")
        assertThat(trackFull.trkItmId()).contains("38f3a71f-4bba-4d58-9765-c1b93212aff1")
        assertThat(trackFull.trkNum()).contains("trkNum")
        assertThat(trackFull.trkPtType()).contains("MEASURED")
        assertThat(trackFull.trkQual()).contains(0)
        assertThat(trackFull.trkStat()).contains("INITIATING")
        assertThat(trackFull.vertUnc()).contains(4.56)
        assertThat(trackFull.wanderAng()).contains(1.23)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val trackFull =
            TrackFull.builder()
                .classificationMarking("U")
                .dataMode(TrackFull.DataMode.TEST)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-06-07T14:17:39.653043Z"))
                .id("TRACK-ID")
                .alt(2024.15)
                .asset("asset")
                .assetNat("US")
                .attitude(listOf(10.1, 0.1, 1.1))
                .attitudeRate(listOf(0.0003, 1e-7, 0.00003))
                .callSign("callSign")
                .cntct("Contact Info")
                .contextKeys(listOf("MsnID_DescLabel", "msnVer", "serVer", "velTs", "accelTs"))
                .contextValues(
                    listOf(
                        "MissionID Descriptive Label text",
                        "1",
                        "001.9b",
                        "2024-06-07T14:17:39.234Z",
                        "2024-06-07T14:17:39.123Z",
                    )
                )
                .course(215.2)
                .cov(listOf(1.1, 2.2, 3.3))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ecefAcc(listOf(-0.0265, -0.2764, -0.1773))
                .ecefPos(listOf(-1273011.47, -48108810.77, 3979360.49))
                .ecefVel(listOf(25.635, -1.097, 57.373))
                .eNuAcc(listOf(0.0003, 0.014, 0.0003))
                .eNuGroundVel(listOf(1.23, 2.34, 3.45))
                .eNuPos(listOf(1.23, 2.34, 3.45))
                .eNuVel(listOf(1.23, 2.34, 3.45))
                .env("LAND")
                .envConf(1.23)
                .errEllp(listOf(1.23, 2.34, 3.45))
                .hdng(215.7)
                .identAmp("ZOMBIE")
                .identCred(0)
                .identRel(0)
                .jSeries("J12.5")
                .lat(38.8353)
                .lcAcc(listOf(1.23, 2.34, 3.45))
                .lco(listOf(1.23, 2.34, 3.45))
                .lcPos(listOf(1.23, 2.34, 3.45))
                .lcs(listOf(1.23, 2.34, 3.45))
                .lcVel(listOf(1.23, 2.34, 3.45))
                .lon(-104.8216)
                .m1(11)
                .m1v(1)
                .m2(1234)
                .m2v(1)
                .m3a(2636)
                .m3av(1)
                .modType("MASINT")
                .msgTs(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .msnId("msnId")
                .multiSource(true)
                .objAct("HOLDING")
                .objDescription("Object description text.")
                .objId("objId")
                .objIdent("FRIEND")
                .objNat("NATO")
                .objPlat("COMBAT_VEHICLE")
                .objSpec("LIGHT_TANK")
                .objType("WATERCRAFT")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .sen("sen")
                .senQual("senQual")
                .sourceDl("AXE")
                .spd(62.9921)
                .addSrcId("f7c70cc8-f9b7-4467-b4ad-3904e360e842")
                .addSrcId("1da3fab000014e3133709830937387405")
                .addSrcTyp("MTI")
                .addSrcTyp("POI")
                .strength(14)
                .addTag("TAG1")
                .addTag("TAG2")
                .trkConf(0.67)
                .trkId("trkId")
                .trkItmId("38f3a71f-4bba-4d58-9765-c1b93212aff1")
                .trkNum("trkNum")
                .trkPtType("MEASURED")
                .trkQual(0)
                .trkStat("INITIATING")
                .vertUnc(4.56)
                .wanderAng(1.23)
                .build()

        val roundtrippedTrackFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(trackFull),
                jacksonTypeRef<TrackFull>(),
            )

        assertThat(roundtrippedTrackFull).isEqualTo(trackFull)
    }
}
