// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.onorbitevent

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbiteventListResponseTest {

    @Test
    fun create() {
        val onorbiteventListResponse =
            OnorbiteventListResponse.builder()
                .classificationMarking("U")
                .dataMode(OnorbiteventListResponse.DataMode.TEST)
                .eventTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("ONORBITEVENT-ID")
                .achievedFlightPhase("Phase 2")
                .ageAtEvent(5.23)
                .capabilityLoss(0.5)
                .capabilityLossNotes("Example notes")
                .capacityLoss(0.5)
                .consequentialEquipmentFailure("Example Equipment")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                .declassificationString("DECLASS_STRING")
                .derivedFrom("DERIVED_SOURCE")
                .description("Example notes")
                .equipmentAtFault("Example Equipment")
                .equipmentCausingLossNotes("Example notes")
                .equipmentPartAtFault("Example Equipment")
                .equipmentTypeAtFault("Example Equipment")
                .eventResult("Example results")
                .eventTimeNotes("Notes on validity")
                .eventType("Type1")
                .geoPosition(45.23)
                .idOnOrbit("ONORBIT-ID")
                .inclined(false)
                .injured(1)
                .insuranceCarriedNotes("Insurance notes")
                .insuranceLoss(0.5)
                .insuranceLossNotes("Insurance notes")
                .killed(23)
                .lesseeOrgId("LESSEEORG-ID")
                .lifeLost(0.5)
                .netAmount(10000.23)
                .objectStatus("Status1")
                .occurrenceFlightPhase("Phase 2")
                .officialLossDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .operatedOnBehalfOfOrgId("OPERATEDONBEHALFOFORG-ID")
                .operatorOrgId("OPERATORORG-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .ownerOrgId("OWNERORG-ID")
                .planeNumber("PL_1")
                .planeSlot("example_slot")
                .positionStatus("Stable")
                .remarks("Example remarks")
                .satellitePosition("Example description")
                .satNo(1)
                .stageAtFault("Phase 2")
                .thirdPartyInsuranceLoss(10000.23)
                .underlyingCause("CAUSE_EXAMPLE")
                .untilTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .build()

        assertThat(onorbiteventListResponse.classificationMarking()).isEqualTo("U")
        assertThat(onorbiteventListResponse.dataMode())
            .isEqualTo(OnorbiteventListResponse.DataMode.TEST)
        assertThat(onorbiteventListResponse.eventTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbiteventListResponse.source()).isEqualTo("Bluestaq")
        assertThat(onorbiteventListResponse.id()).contains("ONORBITEVENT-ID")
        assertThat(onorbiteventListResponse.achievedFlightPhase()).contains("Phase 2")
        assertThat(onorbiteventListResponse.ageAtEvent()).contains(5.23)
        assertThat(onorbiteventListResponse.capabilityLoss()).contains(0.5)
        assertThat(onorbiteventListResponse.capabilityLossNotes()).contains("Example notes")
        assertThat(onorbiteventListResponse.capacityLoss()).contains(0.5)
        assertThat(onorbiteventListResponse.consequentialEquipmentFailure())
            .contains("Example Equipment")
        assertThat(onorbiteventListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbiteventListResponse.createdBy()).contains("some.user")
        assertThat(onorbiteventListResponse.declassificationDate())
            .contains(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
        assertThat(onorbiteventListResponse.declassificationString()).contains("DECLASS_STRING")
        assertThat(onorbiteventListResponse.derivedFrom()).contains("DERIVED_SOURCE")
        assertThat(onorbiteventListResponse.description()).contains("Example notes")
        assertThat(onorbiteventListResponse.equipmentAtFault()).contains("Example Equipment")
        assertThat(onorbiteventListResponse.equipmentCausingLossNotes()).contains("Example notes")
        assertThat(onorbiteventListResponse.equipmentPartAtFault()).contains("Example Equipment")
        assertThat(onorbiteventListResponse.equipmentTypeAtFault()).contains("Example Equipment")
        assertThat(onorbiteventListResponse.eventResult()).contains("Example results")
        assertThat(onorbiteventListResponse.eventTimeNotes()).contains("Notes on validity")
        assertThat(onorbiteventListResponse.eventType()).contains("Type1")
        assertThat(onorbiteventListResponse.geoPosition()).contains(45.23)
        assertThat(onorbiteventListResponse.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(onorbiteventListResponse.inclined()).contains(false)
        assertThat(onorbiteventListResponse.injured()).contains(1)
        assertThat(onorbiteventListResponse.insuranceCarriedNotes()).contains("Insurance notes")
        assertThat(onorbiteventListResponse.insuranceLoss()).contains(0.5)
        assertThat(onorbiteventListResponse.insuranceLossNotes()).contains("Insurance notes")
        assertThat(onorbiteventListResponse.killed()).contains(23)
        assertThat(onorbiteventListResponse.lesseeOrgId()).contains("LESSEEORG-ID")
        assertThat(onorbiteventListResponse.lifeLost()).contains(0.5)
        assertThat(onorbiteventListResponse.netAmount()).contains(10000.23)
        assertThat(onorbiteventListResponse.objectStatus()).contains("Status1")
        assertThat(onorbiteventListResponse.occurrenceFlightPhase()).contains("Phase 2")
        assertThat(onorbiteventListResponse.officialLossDate())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(onorbiteventListResponse.operatedOnBehalfOfOrgId())
            .contains("OPERATEDONBEHALFOFORG-ID")
        assertThat(onorbiteventListResponse.operatorOrgId()).contains("OPERATORORG-ID")
        assertThat(onorbiteventListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(onorbiteventListResponse.origNetwork()).contains("OPS1")
        assertThat(onorbiteventListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(onorbiteventListResponse.ownerOrgId()).contains("OWNERORG-ID")
        assertThat(onorbiteventListResponse.planeNumber()).contains("PL_1")
        assertThat(onorbiteventListResponse.planeSlot()).contains("example_slot")
        assertThat(onorbiteventListResponse.positionStatus()).contains("Stable")
        assertThat(onorbiteventListResponse.remarks()).contains("Example remarks")
        assertThat(onorbiteventListResponse.satellitePosition()).contains("Example description")
        assertThat(onorbiteventListResponse.satNo()).contains(1)
        assertThat(onorbiteventListResponse.stageAtFault()).contains("Phase 2")
        assertThat(onorbiteventListResponse.thirdPartyInsuranceLoss()).contains(10000.23)
        assertThat(onorbiteventListResponse.underlyingCause()).contains("CAUSE_EXAMPLE")
        assertThat(onorbiteventListResponse.untilTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val onorbiteventListResponse =
            OnorbiteventListResponse.builder()
                .classificationMarking("U")
                .dataMode(OnorbiteventListResponse.DataMode.TEST)
                .eventTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("ONORBITEVENT-ID")
                .achievedFlightPhase("Phase 2")
                .ageAtEvent(5.23)
                .capabilityLoss(0.5)
                .capabilityLossNotes("Example notes")
                .capacityLoss(0.5)
                .consequentialEquipmentFailure("Example Equipment")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                .declassificationString("DECLASS_STRING")
                .derivedFrom("DERIVED_SOURCE")
                .description("Example notes")
                .equipmentAtFault("Example Equipment")
                .equipmentCausingLossNotes("Example notes")
                .equipmentPartAtFault("Example Equipment")
                .equipmentTypeAtFault("Example Equipment")
                .eventResult("Example results")
                .eventTimeNotes("Notes on validity")
                .eventType("Type1")
                .geoPosition(45.23)
                .idOnOrbit("ONORBIT-ID")
                .inclined(false)
                .injured(1)
                .insuranceCarriedNotes("Insurance notes")
                .insuranceLoss(0.5)
                .insuranceLossNotes("Insurance notes")
                .killed(23)
                .lesseeOrgId("LESSEEORG-ID")
                .lifeLost(0.5)
                .netAmount(10000.23)
                .objectStatus("Status1")
                .occurrenceFlightPhase("Phase 2")
                .officialLossDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .operatedOnBehalfOfOrgId("OPERATEDONBEHALFOFORG-ID")
                .operatorOrgId("OPERATORORG-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .ownerOrgId("OWNERORG-ID")
                .planeNumber("PL_1")
                .planeSlot("example_slot")
                .positionStatus("Stable")
                .remarks("Example remarks")
                .satellitePosition("Example description")
                .satNo(1)
                .stageAtFault("Phase 2")
                .thirdPartyInsuranceLoss(10000.23)
                .underlyingCause("CAUSE_EXAMPLE")
                .untilTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .build()

        val roundtrippedOnorbiteventListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(onorbiteventListResponse),
                jacksonTypeRef<OnorbiteventListResponse>(),
            )

        assertThat(roundtrippedOnorbiteventListResponse).isEqualTo(onorbiteventListResponse)
    }
}
