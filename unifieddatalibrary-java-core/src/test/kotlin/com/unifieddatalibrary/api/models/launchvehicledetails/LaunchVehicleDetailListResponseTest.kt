// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.launchvehicledetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaunchVehicleDetailListResponseTest {

    @Test
    fun create() {
        val launchVehicleDetailListResponse =
            LaunchVehicleDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailListResponse.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("LAUNCHVEHICLEDETAILS-ID")
                .attitudeAccuracy(10.23)
                .category("Example-category")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deploymentRotationRate(10.23)
                .diameter(10.23)
                .estLaunchPrice(10.23)
                .estLaunchPriceTypical(10.23)
                .fairingExternalDiameter(10.23)
                .fairingInternalDiameter(10.23)
                .fairingLength(10.23)
                .fairingMass(10.23)
                .fairingMaterial("Example-fairing-material")
                .fairingName("Example-fairing-name")
                .fairingNotes("Example notes")
                .family("Example-family")
                .geoPayloadMass(10.23)
                .gtoInj3SigAccuracyApogeeMargin(10.23)
                .gtoInj3SigAccuracyApogeeTarget(10.23)
                .gtoInj3SigAccuracyInclinationMargin(10.23)
                .gtoInj3SigAccuracyInclinationTarget(10.23)
                .gtoInj3SigAccuracyPerigeeMargin(10.23)
                .gtoInj3SigAccuracyPerigeeTarget(10.23)
                .gtoPayloadMass(10.23)
                .launchMass(10.23)
                .launchPrefix("AX011")
                .length(10.23)
                .leoPayloadMass(10.23)
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .maxAccelLoad(10.23)
                .maxAcousticLevel(10.23)
                .maxAcousticLevelRange(10.23)
                .maxFairingPressureChange(10.23)
                .maxFlightShockForce(10.23)
                .maxFlightShockFreq(10.23)
                .maxPayloadFreqLat(10.23)
                .maxPayloadFreqLon(10.23)
                .minorVariant("Example-minor-variant")
                .notes("Example notes")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .oxidizer("Bromine")
                .payloadNotes("Example notes")
                .payloadSeparationRate(10.23)
                .propellant("Nitrogen")
                .soundPressureLevel(10.23)
                .sourceUrl("Example URL")
                .ssoPayloadMass(10.23)
                .variant("Example-variant")
                .build()

        assertThat(launchVehicleDetailListResponse.classificationMarking()).isEqualTo("U")
        assertThat(launchVehicleDetailListResponse.dataMode())
            .isEqualTo(LaunchVehicleDetailListResponse.DataMode.TEST)
        assertThat(launchVehicleDetailListResponse.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(launchVehicleDetailListResponse.source()).isEqualTo("Bluestaq")
        assertThat(launchVehicleDetailListResponse.id()).contains("LAUNCHVEHICLEDETAILS-ID")
        assertThat(launchVehicleDetailListResponse.attitudeAccuracy()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.category()).contains("Example-category")
        assertThat(launchVehicleDetailListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchVehicleDetailListResponse.createdBy()).contains("some.user")
        assertThat(launchVehicleDetailListResponse.deploymentRotationRate()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.diameter()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.estLaunchPrice()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.estLaunchPriceTypical()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.fairingExternalDiameter()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.fairingInternalDiameter()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.fairingLength()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.fairingMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.fairingMaterial())
            .contains("Example-fairing-material")
        assertThat(launchVehicleDetailListResponse.fairingName()).contains("Example-fairing-name")
        assertThat(launchVehicleDetailListResponse.fairingNotes()).contains("Example notes")
        assertThat(launchVehicleDetailListResponse.family()).contains("Example-family")
        assertThat(launchVehicleDetailListResponse.geoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyApogeeMargin()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyApogeeTarget()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyInclinationMargin())
            .contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyInclinationTarget())
            .contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyPerigeeMargin())
            .contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoInj3SigAccuracyPerigeeTarget())
            .contains(10.23)
        assertThat(launchVehicleDetailListResponse.gtoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.launchMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.launchPrefix()).contains("AX011")
        assertThat(launchVehicleDetailListResponse.length()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.leoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.manufacturerOrgId())
            .contains("MANUFACTURERORG-ID")
        assertThat(launchVehicleDetailListResponse.maxAccelLoad()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxAcousticLevel()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxAcousticLevelRange()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxFairingPressureChange()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxFlightShockForce()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxFlightShockFreq()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxPayloadFreqLat()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.maxPayloadFreqLon()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.minorVariant()).contains("Example-minor-variant")
        assertThat(launchVehicleDetailListResponse.notes()).contains("Example notes")
        assertThat(launchVehicleDetailListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(launchVehicleDetailListResponse.origNetwork()).contains("ORIG")
        assertThat(launchVehicleDetailListResponse.oxidizer()).contains("Bromine")
        assertThat(launchVehicleDetailListResponse.payloadNotes()).contains("Example notes")
        assertThat(launchVehicleDetailListResponse.payloadSeparationRate()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.propellant()).contains("Nitrogen")
        assertThat(launchVehicleDetailListResponse.soundPressureLevel()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.sourceUrl()).contains("Example URL")
        assertThat(launchVehicleDetailListResponse.ssoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailListResponse.variant()).contains("Example-variant")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val launchVehicleDetailListResponse =
            LaunchVehicleDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailListResponse.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("LAUNCHVEHICLEDETAILS-ID")
                .attitudeAccuracy(10.23)
                .category("Example-category")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deploymentRotationRate(10.23)
                .diameter(10.23)
                .estLaunchPrice(10.23)
                .estLaunchPriceTypical(10.23)
                .fairingExternalDiameter(10.23)
                .fairingInternalDiameter(10.23)
                .fairingLength(10.23)
                .fairingMass(10.23)
                .fairingMaterial("Example-fairing-material")
                .fairingName("Example-fairing-name")
                .fairingNotes("Example notes")
                .family("Example-family")
                .geoPayloadMass(10.23)
                .gtoInj3SigAccuracyApogeeMargin(10.23)
                .gtoInj3SigAccuracyApogeeTarget(10.23)
                .gtoInj3SigAccuracyInclinationMargin(10.23)
                .gtoInj3SigAccuracyInclinationTarget(10.23)
                .gtoInj3SigAccuracyPerigeeMargin(10.23)
                .gtoInj3SigAccuracyPerigeeTarget(10.23)
                .gtoPayloadMass(10.23)
                .launchMass(10.23)
                .launchPrefix("AX011")
                .length(10.23)
                .leoPayloadMass(10.23)
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .maxAccelLoad(10.23)
                .maxAcousticLevel(10.23)
                .maxAcousticLevelRange(10.23)
                .maxFairingPressureChange(10.23)
                .maxFlightShockForce(10.23)
                .maxFlightShockFreq(10.23)
                .maxPayloadFreqLat(10.23)
                .maxPayloadFreqLon(10.23)
                .minorVariant("Example-minor-variant")
                .notes("Example notes")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .oxidizer("Bromine")
                .payloadNotes("Example notes")
                .payloadSeparationRate(10.23)
                .propellant("Nitrogen")
                .soundPressureLevel(10.23)
                .sourceUrl("Example URL")
                .ssoPayloadMass(10.23)
                .variant("Example-variant")
                .build()

        val roundtrippedLaunchVehicleDetailListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(launchVehicleDetailListResponse),
                jacksonTypeRef<LaunchVehicleDetailListResponse>(),
            )

        assertThat(roundtrippedLaunchVehicleDetailListResponse)
            .isEqualTo(launchVehicleDetailListResponse)
    }
}
