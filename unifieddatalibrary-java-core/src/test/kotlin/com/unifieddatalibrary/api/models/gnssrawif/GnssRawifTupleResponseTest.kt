// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.gnssrawif

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class GnssRawifTupleResponseTest {

    @Test
    fun create() {
        val gnssRawifTupleResponse =
            GnssRawifTupleResponse.builder()
                .addCenterFreq(1227.6)
                .addCenterFreq(1575.4)
                .classificationMarking("U")
                .dataMode(GnssRawifTupleResponse.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2022-04-09T18:12:28.919768Z"))
                .fileName("somefile.hdf5")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2022-04-09T18:11:28.919768Z"))
                .id("GNSSRawIF-ID")
                .bitDepth(8)
                .boresight(listOf(0.0, 1.0, 0.0))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataRate(0.205)
                .addDiffCodeBia(0.0271)
                .addDiffCodeBia(0.0016)
                .endAlt(525.626)
                .endLat(38.922)
                .endLon(-104.67)
                .esId("60f7a241-b7be-48d8-acf3-786670af53f9")
                .eventId("2f2205c9-7bc2-4e1a-8416-2f80cc71f64b")
                .fileSize(3168895L)
                .idOnOrbit("32375")
                .addIfFreq(4.09)
                .addIfFreq(5.87)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("L2045")
                .addPostFourier("NONE")
                .addPostFourier("NONE")
                .quat(listOf(0.0, -0.2734104, 0.1562345, 0.9491246))
                .receiver("GPS1")
                .addSampleRate(8000)
                .addSampleRate(9000)
                .sampleType("COMPLEX")
                .satNo(32375)
                .sequenceId(1)
                .setId("2b0b1b1a-a3c0-4267-894a-0c40cb84a5af")
                .setLength(7)
                .addSrcId("GNSSSET_ID")
                .addSrcTyp("GNSSSET")
                .startAlt(525.664)
                .startIndex(2)
                .startLat(38.834)
                .startLon(-104.821)
                .addTag("TAG1")
                .addTag("TAG2")
                .build()

        assertThat(gnssRawifTupleResponse.centerFreq()).containsExactly(1227.6, 1575.4)
        assertThat(gnssRawifTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(gnssRawifTupleResponse.dataMode())
            .isEqualTo(GnssRawifTupleResponse.DataMode.TEST)
        assertThat(gnssRawifTupleResponse.endTime())
            .isEqualTo(OffsetDateTime.parse("2022-04-09T18:12:28.919768Z"))
        assertThat(gnssRawifTupleResponse.fileName()).isEqualTo("somefile.hdf5")
        assertThat(gnssRawifTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(gnssRawifTupleResponse.startTime())
            .isEqualTo(OffsetDateTime.parse("2022-04-09T18:11:28.919768Z"))
        assertThat(gnssRawifTupleResponse.id()).contains("GNSSRawIF-ID")
        assertThat(gnssRawifTupleResponse.bitDepth()).contains(8)
        assertThat(gnssRawifTupleResponse.boresight().getOrNull()).containsExactly(0.0, 1.0, 0.0)
        assertThat(gnssRawifTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(gnssRawifTupleResponse.createdBy()).contains("some.user")
        assertThat(gnssRawifTupleResponse.dataRate()).contains(0.205)
        assertThat(gnssRawifTupleResponse.diffCodeBias().getOrNull())
            .containsExactly(0.0271, 0.0016)
        assertThat(gnssRawifTupleResponse.endAlt()).contains(525.626)
        assertThat(gnssRawifTupleResponse.endLat()).contains(38.922)
        assertThat(gnssRawifTupleResponse.endLon()).contains(-104.67)
        assertThat(gnssRawifTupleResponse.esId()).contains("60f7a241-b7be-48d8-acf3-786670af53f9")
        assertThat(gnssRawifTupleResponse.eventId())
            .contains("2f2205c9-7bc2-4e1a-8416-2f80cc71f64b")
        assertThat(gnssRawifTupleResponse.fileSize()).contains(3168895L)
        assertThat(gnssRawifTupleResponse.idOnOrbit()).contains("32375")
        assertThat(gnssRawifTupleResponse.ifFreq().getOrNull()).containsExactly(4.09, 5.87)
        assertThat(gnssRawifTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(gnssRawifTupleResponse.origNetwork()).contains("ORIG")
        assertThat(gnssRawifTupleResponse.origObjectId()).contains("L2045")
        assertThat(gnssRawifTupleResponse.postFourier().getOrNull()).containsExactly("NONE", "NONE")
        assertThat(gnssRawifTupleResponse.quat().getOrNull())
            .containsExactly(0.0, -0.2734104, 0.1562345, 0.9491246)
        assertThat(gnssRawifTupleResponse.receiver()).contains("GPS1")
        assertThat(gnssRawifTupleResponse.sampleRate().getOrNull()).containsExactly(8000, 9000)
        assertThat(gnssRawifTupleResponse.sampleType()).contains("COMPLEX")
        assertThat(gnssRawifTupleResponse.satNo()).contains(32375)
        assertThat(gnssRawifTupleResponse.sequenceId()).contains(1)
        assertThat(gnssRawifTupleResponse.setId()).contains("2b0b1b1a-a3c0-4267-894a-0c40cb84a5af")
        assertThat(gnssRawifTupleResponse.setLength()).contains(7)
        assertThat(gnssRawifTupleResponse.srcIds().getOrNull()).containsExactly("GNSSSET_ID")
        assertThat(gnssRawifTupleResponse.srcTyps().getOrNull()).containsExactly("GNSSSET")
        assertThat(gnssRawifTupleResponse.startAlt()).contains(525.664)
        assertThat(gnssRawifTupleResponse.startIndex()).contains(2)
        assertThat(gnssRawifTupleResponse.startLat()).contains(38.834)
        assertThat(gnssRawifTupleResponse.startLon()).contains(-104.821)
        assertThat(gnssRawifTupleResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val gnssRawifTupleResponse =
            GnssRawifTupleResponse.builder()
                .addCenterFreq(1227.6)
                .addCenterFreq(1575.4)
                .classificationMarking("U")
                .dataMode(GnssRawifTupleResponse.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2022-04-09T18:12:28.919768Z"))
                .fileName("somefile.hdf5")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2022-04-09T18:11:28.919768Z"))
                .id("GNSSRawIF-ID")
                .bitDepth(8)
                .boresight(listOf(0.0, 1.0, 0.0))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataRate(0.205)
                .addDiffCodeBia(0.0271)
                .addDiffCodeBia(0.0016)
                .endAlt(525.626)
                .endLat(38.922)
                .endLon(-104.67)
                .esId("60f7a241-b7be-48d8-acf3-786670af53f9")
                .eventId("2f2205c9-7bc2-4e1a-8416-2f80cc71f64b")
                .fileSize(3168895L)
                .idOnOrbit("32375")
                .addIfFreq(4.09)
                .addIfFreq(5.87)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("L2045")
                .addPostFourier("NONE")
                .addPostFourier("NONE")
                .quat(listOf(0.0, -0.2734104, 0.1562345, 0.9491246))
                .receiver("GPS1")
                .addSampleRate(8000)
                .addSampleRate(9000)
                .sampleType("COMPLEX")
                .satNo(32375)
                .sequenceId(1)
                .setId("2b0b1b1a-a3c0-4267-894a-0c40cb84a5af")
                .setLength(7)
                .addSrcId("GNSSSET_ID")
                .addSrcTyp("GNSSSET")
                .startAlt(525.664)
                .startIndex(2)
                .startLat(38.834)
                .startLon(-104.821)
                .addTag("TAG1")
                .addTag("TAG2")
                .build()

        val roundtrippedGnssRawifTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(gnssRawifTupleResponse),
                jacksonTypeRef<GnssRawifTupleResponse>(),
            )

        assertThat(roundtrippedGnssRawifTupleResponse).isEqualTo(gnssRawifTupleResponse)
    }
}
