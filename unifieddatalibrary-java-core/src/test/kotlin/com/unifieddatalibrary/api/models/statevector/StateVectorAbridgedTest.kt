// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.statevector

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StateVectorAbridgedTest {

    @Test
    fun create() {
        val stateVectorAbridged =
            StateVectorAbridged.builder()
                .classificationMarking("U")
                .dataMode(StateVectorAbridged.DataMode.TEST)
                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .actualOdSpan(3.5)
                .algorithm("SAMPLE_ALGORITHM")
                .alt1ReferenceFrame("TEME")
                .alt2ReferenceFrame("EFG/TDR")
                .area(5.065)
                .bDot(1.23)
                .cmOffset(1.23)
                .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                .covMethod("CALCULATED")
                .covReferenceFrame(StateVectorAbridged.CovReferenceFrame.J2000)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("descriptor")
                .dragArea(4.739)
                .dragCoeff(0.0224391269775)
                .dragModel("JAC70")
                .edr(1.23)
                .addEqCov(1.1)
                .addEqCov(2.2)
                .errorControl(1.23)
                .fixedStep(true)
                .geopotentialModel("EGM-96")
                .iau1980Terms(4)
                .idOnOrbit("ONORBIT-ID")
                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                .idStateVector("STATEVECTOR-ID")
                .integratorMode("integratorMode")
                .inTrackThrust(true)
                .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .lunarSolar(true)
                .mass(164.5)
                .obsAvailable(376)
                .obsUsed(374)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .partials("ANALYTIC")
                .pedigree("CONJUNCTION")
                .polarMotionX(1.23)
                .polarMotionY(1.23)
                .posUnc(0.333399744452)
                .recOdSpan(3.5)
                .referenceFrame(StateVectorAbridged.ReferenceFrame.J2000)
                .residualsAcc(99.5)
                .revNo(7205)
                .rms(0.991)
                .satNo(12)
                .addSigmaPosUvw(1.23)
                .addSigmaPosUvw(4.56)
                .addSigmaVelUvw(1.23)
                .addSigmaVelUvw(4.56)
                .solarFluxApAvg(1.23)
                .solarFluxF10(1.23)
                .solarFluxF10Avg(1.23)
                .solarRadPress(true)
                .solarRadPressCoeff(0.0244394)
                .solidEarthTides(true)
                .sourceDl("AXE")
                .srpArea(4.311)
                .stepMode("AUTO")
                .stepSize(1.23)
                .stepSizeSelection("AUTO")
                .taiUtc(1.23)
                .thrustAccel(1.23)
                .tracksAvail(163)
                .tracksUsed(163)
                .transactionId("transactionId")
                .uct(true)
                .ut1Rate(1.23)
                .ut1Utc(1.23)
                .velUnc(0.000004)
                .xaccel(-2.12621392)
                .xpos(-1118.577381)
                .xposAlt1(-1145.688502)
                .xposAlt2(-1456.915926)
                .xvel(-4.25242784)
                .xvelAlt1(-4.270832252)
                .xvelAlt2(-1.219814294)
                .yaccel(2.645553717)
                .ypos(3026.231084)
                .yposAlt1(3020.729572)
                .yposAlt2(-2883.540406)
                .yvel(5.291107434)
                .yvelAlt1(5.27074276)
                .yvelAlt2(-6.602080212)
                .zaccel(-1.06310696)
                .zpos(6167.831808)
                .zposAlt1(6165.55187)
                .zposAlt2(6165.55187)
                .zvel(-3.356493869)
                .zvelAlt1(-3.365155181)
                .zvelAlt2(-3.365155181)
                .build()

        assertThat(stateVectorAbridged.classificationMarking()).isEqualTo("U")
        assertThat(stateVectorAbridged.dataMode()).isEqualTo(StateVectorAbridged.DataMode.TEST)
        assertThat(stateVectorAbridged.epoch())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(stateVectorAbridged.source()).isEqualTo("Bluestaq")
        assertThat(stateVectorAbridged.actualOdSpan()).contains(3.5)
        assertThat(stateVectorAbridged.algorithm()).contains("SAMPLE_ALGORITHM")
        assertThat(stateVectorAbridged.alt1ReferenceFrame()).contains("TEME")
        assertThat(stateVectorAbridged.alt2ReferenceFrame()).contains("EFG/TDR")
        assertThat(stateVectorAbridged.area()).contains(5.065)
        assertThat(stateVectorAbridged.bDot()).contains(1.23)
        assertThat(stateVectorAbridged.cmOffset()).contains(1.23)
        assertThat(stateVectorAbridged.cov().getOrNull())
            .containsExactly(1.1, 2.4, 3.8, 4.2, 5.5, 6.0)
        assertThat(stateVectorAbridged.covMethod()).contains("CALCULATED")
        assertThat(stateVectorAbridged.covReferenceFrame())
            .contains(StateVectorAbridged.CovReferenceFrame.J2000)
        assertThat(stateVectorAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(stateVectorAbridged.createdBy()).contains("some.user")
        assertThat(stateVectorAbridged.descriptor()).contains("descriptor")
        assertThat(stateVectorAbridged.dragArea()).contains(4.739)
        assertThat(stateVectorAbridged.dragCoeff()).contains(0.0224391269775)
        assertThat(stateVectorAbridged.dragModel()).contains("JAC70")
        assertThat(stateVectorAbridged.edr()).contains(1.23)
        assertThat(stateVectorAbridged.eqCov().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(stateVectorAbridged.errorControl()).contains(1.23)
        assertThat(stateVectorAbridged.fixedStep()).contains(true)
        assertThat(stateVectorAbridged.geopotentialModel()).contains("EGM-96")
        assertThat(stateVectorAbridged.iau1980Terms()).contains(4)
        assertThat(stateVectorAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(stateVectorAbridged.idOrbitDetermination())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(stateVectorAbridged.idStateVector()).contains("STATEVECTOR-ID")
        assertThat(stateVectorAbridged.integratorMode()).contains("integratorMode")
        assertThat(stateVectorAbridged.inTrackThrust()).contains(true)
        assertThat(stateVectorAbridged.lastObEnd())
            .contains(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
        assertThat(stateVectorAbridged.lastObStart())
            .contains(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
        assertThat(stateVectorAbridged.leapSecondTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(stateVectorAbridged.lunarSolar()).contains(true)
        assertThat(stateVectorAbridged.mass()).contains(164.5)
        assertThat(stateVectorAbridged.obsAvailable()).contains(376)
        assertThat(stateVectorAbridged.obsUsed()).contains(374)
        assertThat(stateVectorAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(stateVectorAbridged.origNetwork()).contains("ORIG")
        assertThat(stateVectorAbridged.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(stateVectorAbridged.partials()).contains("ANALYTIC")
        assertThat(stateVectorAbridged.pedigree()).contains("CONJUNCTION")
        assertThat(stateVectorAbridged.polarMotionX()).contains(1.23)
        assertThat(stateVectorAbridged.polarMotionY()).contains(1.23)
        assertThat(stateVectorAbridged.posUnc()).contains(0.333399744452)
        assertThat(stateVectorAbridged.recOdSpan()).contains(3.5)
        assertThat(stateVectorAbridged.referenceFrame())
            .contains(StateVectorAbridged.ReferenceFrame.J2000)
        assertThat(stateVectorAbridged.residualsAcc()).contains(99.5)
        assertThat(stateVectorAbridged.revNo()).contains(7205)
        assertThat(stateVectorAbridged.rms()).contains(0.991)
        assertThat(stateVectorAbridged.satNo()).contains(12)
        assertThat(stateVectorAbridged.sigmaPosUvw().getOrNull()).containsExactly(1.23, 4.56)
        assertThat(stateVectorAbridged.sigmaVelUvw().getOrNull()).containsExactly(1.23, 4.56)
        assertThat(stateVectorAbridged.solarFluxApAvg()).contains(1.23)
        assertThat(stateVectorAbridged.solarFluxF10()).contains(1.23)
        assertThat(stateVectorAbridged.solarFluxF10Avg()).contains(1.23)
        assertThat(stateVectorAbridged.solarRadPress()).contains(true)
        assertThat(stateVectorAbridged.solarRadPressCoeff()).contains(0.0244394)
        assertThat(stateVectorAbridged.solidEarthTides()).contains(true)
        assertThat(stateVectorAbridged.sourceDl()).contains("AXE")
        assertThat(stateVectorAbridged.srpArea()).contains(4.311)
        assertThat(stateVectorAbridged.stepMode()).contains("AUTO")
        assertThat(stateVectorAbridged.stepSize()).contains(1.23)
        assertThat(stateVectorAbridged.stepSizeSelection()).contains("AUTO")
        assertThat(stateVectorAbridged.taiUtc()).contains(1.23)
        assertThat(stateVectorAbridged.thrustAccel()).contains(1.23)
        assertThat(stateVectorAbridged.tracksAvail()).contains(163)
        assertThat(stateVectorAbridged.tracksUsed()).contains(163)
        assertThat(stateVectorAbridged.transactionId()).contains("transactionId")
        assertThat(stateVectorAbridged.uct()).contains(true)
        assertThat(stateVectorAbridged.ut1Rate()).contains(1.23)
        assertThat(stateVectorAbridged.ut1Utc()).contains(1.23)
        assertThat(stateVectorAbridged.velUnc()).contains(0.000004)
        assertThat(stateVectorAbridged.xaccel()).contains(-2.12621392)
        assertThat(stateVectorAbridged.xpos()).contains(-1118.577381)
        assertThat(stateVectorAbridged.xposAlt1()).contains(-1145.688502)
        assertThat(stateVectorAbridged.xposAlt2()).contains(-1456.915926)
        assertThat(stateVectorAbridged.xvel()).contains(-4.25242784)
        assertThat(stateVectorAbridged.xvelAlt1()).contains(-4.270832252)
        assertThat(stateVectorAbridged.xvelAlt2()).contains(-1.219814294)
        assertThat(stateVectorAbridged.yaccel()).contains(2.645553717)
        assertThat(stateVectorAbridged.ypos()).contains(3026.231084)
        assertThat(stateVectorAbridged.yposAlt1()).contains(3020.729572)
        assertThat(stateVectorAbridged.yposAlt2()).contains(-2883.540406)
        assertThat(stateVectorAbridged.yvel()).contains(5.291107434)
        assertThat(stateVectorAbridged.yvelAlt1()).contains(5.27074276)
        assertThat(stateVectorAbridged.yvelAlt2()).contains(-6.602080212)
        assertThat(stateVectorAbridged.zaccel()).contains(-1.06310696)
        assertThat(stateVectorAbridged.zpos()).contains(6167.831808)
        assertThat(stateVectorAbridged.zposAlt1()).contains(6165.55187)
        assertThat(stateVectorAbridged.zposAlt2()).contains(6165.55187)
        assertThat(stateVectorAbridged.zvel()).contains(-3.356493869)
        assertThat(stateVectorAbridged.zvelAlt1()).contains(-3.365155181)
        assertThat(stateVectorAbridged.zvelAlt2()).contains(-3.365155181)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val stateVectorAbridged =
            StateVectorAbridged.builder()
                .classificationMarking("U")
                .dataMode(StateVectorAbridged.DataMode.TEST)
                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .actualOdSpan(3.5)
                .algorithm("SAMPLE_ALGORITHM")
                .alt1ReferenceFrame("TEME")
                .alt2ReferenceFrame("EFG/TDR")
                .area(5.065)
                .bDot(1.23)
                .cmOffset(1.23)
                .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                .covMethod("CALCULATED")
                .covReferenceFrame(StateVectorAbridged.CovReferenceFrame.J2000)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .descriptor("descriptor")
                .dragArea(4.739)
                .dragCoeff(0.0224391269775)
                .dragModel("JAC70")
                .edr(1.23)
                .addEqCov(1.1)
                .addEqCov(2.2)
                .errorControl(1.23)
                .fixedStep(true)
                .geopotentialModel("EGM-96")
                .iau1980Terms(4)
                .idOnOrbit("ONORBIT-ID")
                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                .idStateVector("STATEVECTOR-ID")
                .integratorMode("integratorMode")
                .inTrackThrust(true)
                .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .lunarSolar(true)
                .mass(164.5)
                .obsAvailable(376)
                .obsUsed(374)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .partials("ANALYTIC")
                .pedigree("CONJUNCTION")
                .polarMotionX(1.23)
                .polarMotionY(1.23)
                .posUnc(0.333399744452)
                .recOdSpan(3.5)
                .referenceFrame(StateVectorAbridged.ReferenceFrame.J2000)
                .residualsAcc(99.5)
                .revNo(7205)
                .rms(0.991)
                .satNo(12)
                .addSigmaPosUvw(1.23)
                .addSigmaPosUvw(4.56)
                .addSigmaVelUvw(1.23)
                .addSigmaVelUvw(4.56)
                .solarFluxApAvg(1.23)
                .solarFluxF10(1.23)
                .solarFluxF10Avg(1.23)
                .solarRadPress(true)
                .solarRadPressCoeff(0.0244394)
                .solidEarthTides(true)
                .sourceDl("AXE")
                .srpArea(4.311)
                .stepMode("AUTO")
                .stepSize(1.23)
                .stepSizeSelection("AUTO")
                .taiUtc(1.23)
                .thrustAccel(1.23)
                .tracksAvail(163)
                .tracksUsed(163)
                .transactionId("transactionId")
                .uct(true)
                .ut1Rate(1.23)
                .ut1Utc(1.23)
                .velUnc(0.000004)
                .xaccel(-2.12621392)
                .xpos(-1118.577381)
                .xposAlt1(-1145.688502)
                .xposAlt2(-1456.915926)
                .xvel(-4.25242784)
                .xvelAlt1(-4.270832252)
                .xvelAlt2(-1.219814294)
                .yaccel(2.645553717)
                .ypos(3026.231084)
                .yposAlt1(3020.729572)
                .yposAlt2(-2883.540406)
                .yvel(5.291107434)
                .yvelAlt1(5.27074276)
                .yvelAlt2(-6.602080212)
                .zaccel(-1.06310696)
                .zpos(6167.831808)
                .zposAlt1(6165.55187)
                .zposAlt2(6165.55187)
                .zvel(-3.356493869)
                .zvelAlt1(-3.365155181)
                .zvelAlt2(-3.365155181)
                .build()

        val roundtrippedStateVectorAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(stateVectorAbridged),
                jacksonTypeRef<StateVectorAbridged>(),
            )

        assertThat(roundtrippedStateVectorAbridged).isEqualTo(stateVectorAbridged)
    }
}
