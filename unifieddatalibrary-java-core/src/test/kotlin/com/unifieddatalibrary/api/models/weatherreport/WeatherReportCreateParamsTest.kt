// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.weatherreport

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WeatherReportCreateParamsTest {

    @Test
    fun create() {
        WeatherReportCreateParams.builder()
            .classificationMarking("U")
            .dataMode(WeatherReportCreateParams.DataMode.TEST)
            .lat(56.12)
            .lon(-156.6)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .reportType("FORECAST")
            .source("Bluestaq")
            .id("WEATHER-REPORT-ID")
            .actWeather("NO STATEMENT")
            .agjson(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
            .alt(123.12)
            .andims(2L)
            .area(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
            .asrid(4326)
            .atext(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
            .atype("ST_Polygon")
            .barPress(101.2)
            .ccEvent(true)
            .addCloudCover("OVERCAST")
            .addCloudCover("BROKEN")
            .addCloudHght(1.2)
            .addCloudHght(2.2)
            .contrailHghtLower(123.123)
            .contrailHghtUpper(123.123)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .dataLevel("MANDATORY")
            .dewPoint(15.6)
            .difRad(234.5)
            .dirDev(9.1)
            .enRouteWeather("THUNDERSTORMS")
            .externalId("GDSSMB022408301601304517")
            .externalLocationId("TMDS060AD4OG03CC")
            .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
            .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
            .geoPotentialAlt(1000.0)
            .hshear(3.8)
            .icao("KAFF")
            .icingLowerLimit(123.123)
            .icingUpperLimit(123.123)
            .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
            .idGroundImagery("GROUND-IMAGERY-ID")
            .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
            .idSite("AIRFIELD-ID")
            .indexRefraction(1.1)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origSensorId("ORIGSENSOR-ID")
            .precipRate(3.4)
            .qnh(1234.456)
            .radVel(-0.04)
            .radVelBeam1(4.4)
            .radVelBeam2(-0.2)
            .radVelBeam3(-0.2)
            .radVelBeam4(11.4)
            .radVelBeam5(4.1)
            .rainHour(1.2)
            .rawMetar(
                "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
            )
            .rawTaf(
                "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
            )
            .refRad(56.7)
            .relHumidity(34.456)
            .senalt(1.23)
            .senlat(12.456)
            .senlon(123.456)
            .soilMoisture(3.5)
            .soilTemp(22.4)
            .solarRad(1234.456)
            .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
            .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
            .addSrcTyp("SENSOR")
            .addSrcTyp("WEATHERDATA")
            .surroundingWeather("NO STATEMENT")
            .temperature(23.45)
            .visibility(1234.456)
            .vshear(3.8)
            .weatherAmp("NO STATEMENT")
            .weatherDesc("NO STATEMENT")
            .weatherId("WEATHER-ID")
            .weatherInt("NO STATEMENT")
            .windChill(15.6)
            .addWindCov(1.1)
            .addWindCov(2.2)
            .windDir(75.1234)
            .windDirAvg(57.1)
            .windDirPeak(78.4)
            .windDirPeak10(44.5)
            .windGust(10.23)
            .windGust10(13.2)
            .windSpd(1.23)
            .windSpdAvg(12.1)
            .windVar(false)
            .build()
    }

    @Test
    fun body() {
        val params =
            WeatherReportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(WeatherReportCreateParams.DataMode.TEST)
                .lat(56.12)
                .lon(-156.6)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .reportType("FORECAST")
                .source("Bluestaq")
                .id("WEATHER-REPORT-ID")
                .actWeather("NO STATEMENT")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .alt(123.12)
                .andims(2L)
                .area(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .asrid(4326)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("ST_Polygon")
                .barPress(101.2)
                .ccEvent(true)
                .addCloudCover("OVERCAST")
                .addCloudCover("BROKEN")
                .addCloudHght(1.2)
                .addCloudHght(2.2)
                .contrailHghtLower(123.123)
                .contrailHghtUpper(123.123)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataLevel("MANDATORY")
                .dewPoint(15.6)
                .difRad(234.5)
                .dirDev(9.1)
                .enRouteWeather("THUNDERSTORMS")
                .externalId("GDSSMB022408301601304517")
                .externalLocationId("TMDS060AD4OG03CC")
                .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
                .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .geoPotentialAlt(1000.0)
                .hshear(3.8)
                .icao("KAFF")
                .icingLowerLimit(123.123)
                .icingUpperLimit(123.123)
                .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
                .idGroundImagery("GROUND-IMAGERY-ID")
                .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                .idSite("AIRFIELD-ID")
                .indexRefraction(1.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .precipRate(3.4)
                .qnh(1234.456)
                .radVel(-0.04)
                .radVelBeam1(4.4)
                .radVelBeam2(-0.2)
                .radVelBeam3(-0.2)
                .radVelBeam4(11.4)
                .radVelBeam5(4.1)
                .rainHour(1.2)
                .rawMetar(
                    "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
                )
                .rawTaf(
                    "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
                )
                .refRad(56.7)
                .relHumidity(34.456)
                .senalt(1.23)
                .senlat(12.456)
                .senlon(123.456)
                .soilMoisture(3.5)
                .soilTemp(22.4)
                .solarRad(1234.456)
                .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
                .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
                .addSrcTyp("SENSOR")
                .addSrcTyp("WEATHERDATA")
                .surroundingWeather("NO STATEMENT")
                .temperature(23.45)
                .visibility(1234.456)
                .vshear(3.8)
                .weatherAmp("NO STATEMENT")
                .weatherDesc("NO STATEMENT")
                .weatherId("WEATHER-ID")
                .weatherInt("NO STATEMENT")
                .windChill(15.6)
                .addWindCov(1.1)
                .addWindCov(2.2)
                .windDir(75.1234)
                .windDirAvg(57.1)
                .windDirPeak(78.4)
                .windDirPeak10(44.5)
                .windGust(10.23)
                .windGust10(13.2)
                .windSpd(1.23)
                .windSpdAvg(12.1)
                .windVar(false)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(WeatherReportCreateParams.DataMode.TEST)
        assertThat(body.lat()).isEqualTo(56.12)
        assertThat(body.lon()).isEqualTo(-156.6)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.reportType()).isEqualTo("FORECAST")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("WEATHER-REPORT-ID")
        assertThat(body.actWeather()).contains("NO STATEMENT")
        assertThat(body.agjson())
            .contains(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
        assertThat(body.alt()).contains(123.12)
        assertThat(body.andims()).contains(2L)
        assertThat(body.area())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(body.asrid()).contains(4326)
        assertThat(body.atext())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(body.atype()).contains("ST_Polygon")
        assertThat(body.barPress()).contains(101.2)
        assertThat(body.ccEvent()).contains(true)
        assertThat(body.cloudCover().getOrNull()).containsExactly("OVERCAST", "BROKEN")
        assertThat(body.cloudHght().getOrNull()).containsExactly(1.2, 2.2)
        assertThat(body.contrailHghtLower()).contains(123.123)
        assertThat(body.contrailHghtUpper()).contains(123.123)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.dataLevel()).contains("MANDATORY")
        assertThat(body.dewPoint()).contains(15.6)
        assertThat(body.difRad()).contains(234.5)
        assertThat(body.dirDev()).contains(9.1)
        assertThat(body.enRouteWeather()).contains("THUNDERSTORMS")
        assertThat(body.externalId()).contains("GDSSMB022408301601304517")
        assertThat(body.externalLocationId()).contains("TMDS060AD4OG03CC")
        assertThat(body.forecastEndTime())
            .contains(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
        assertThat(body.forecastStartTime())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
        assertThat(body.geoPotentialAlt()).contains(1000.0)
        assertThat(body.hshear()).contains(3.8)
        assertThat(body.icao()).contains("KAFF")
        assertThat(body.icingLowerLimit()).contains(123.123)
        assertThat(body.icingUpperLimit()).contains(123.123)
        assertThat(body.idAirfield()).contains("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
        assertThat(body.idGroundImagery()).contains("GROUND-IMAGERY-ID")
        assertThat(body.idSensor()).contains("0129f577-e04c-441e-65ca-0a04a750bed9")
        assertThat(body.idSite()).contains("AIRFIELD-ID")
        assertThat(body.indexRefraction()).contains(1.1)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.precipRate()).contains(3.4)
        assertThat(body.qnh()).contains(1234.456)
        assertThat(body.radVel()).contains(-0.04)
        assertThat(body.radVelBeam1()).contains(4.4)
        assertThat(body.radVelBeam2()).contains(-0.2)
        assertThat(body.radVelBeam3()).contains(-0.2)
        assertThat(body.radVelBeam4()).contains(11.4)
        assertThat(body.radVelBeam5()).contains(4.1)
        assertThat(body.rainHour()).contains(1.2)
        assertThat(body.rawMetar())
            .contains(
                "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
            )
        assertThat(body.rawTaf())
            .contains(
                "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
            )
        assertThat(body.refRad()).contains(56.7)
        assertThat(body.relHumidity()).contains(34.456)
        assertThat(body.senalt()).contains(1.23)
        assertThat(body.senlat()).contains(12.456)
        assertThat(body.senlon()).contains(123.456)
        assertThat(body.soilMoisture()).contains(3.5)
        assertThat(body.soilTemp()).contains(22.4)
        assertThat(body.solarRad()).contains(1234.456)
        assertThat(body.srcIds().getOrNull())
            .containsExactly(
                "e609a90d-4059-4043-9f1a-fd7b49a3e1d0",
                "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52",
            )
        assertThat(body.srcTyps().getOrNull()).containsExactly("SENSOR", "WEATHERDATA")
        assertThat(body.surroundingWeather()).contains("NO STATEMENT")
        assertThat(body.temperature()).contains(23.45)
        assertThat(body.visibility()).contains(1234.456)
        assertThat(body.vshear()).contains(3.8)
        assertThat(body.weatherAmp()).contains("NO STATEMENT")
        assertThat(body.weatherDesc()).contains("NO STATEMENT")
        assertThat(body.weatherId()).contains("WEATHER-ID")
        assertThat(body.weatherInt()).contains("NO STATEMENT")
        assertThat(body.windChill()).contains(15.6)
        assertThat(body.windCov().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(body.windDir()).contains(75.1234)
        assertThat(body.windDirAvg()).contains(57.1)
        assertThat(body.windDirPeak()).contains(78.4)
        assertThat(body.windDirPeak10()).contains(44.5)
        assertThat(body.windGust()).contains(10.23)
        assertThat(body.windGust10()).contains(13.2)
        assertThat(body.windSpd()).contains(1.23)
        assertThat(body.windSpdAvg()).contains(12.1)
        assertThat(body.windVar()).contains(false)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            WeatherReportCreateParams.builder()
                .classificationMarking("U")
                .dataMode(WeatherReportCreateParams.DataMode.TEST)
                .lat(56.12)
                .lon(-156.6)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .reportType("FORECAST")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(WeatherReportCreateParams.DataMode.TEST)
        assertThat(body.lat()).isEqualTo(56.12)
        assertThat(body.lon()).isEqualTo(-156.6)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.reportType()).isEqualTo("FORECAST")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
