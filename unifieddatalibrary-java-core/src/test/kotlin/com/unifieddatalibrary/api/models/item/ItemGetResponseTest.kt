// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.item

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ItemGetResponseTest {

    @Test
    fun create() {
        val itemGetResponse =
            ItemGetResponse.builder()
                .classificationMarking("U")
                .dataMode(ItemGetResponse.DataMode.TEST)
                .scanCode("12345ABCD")
                .source("Bluestaq")
                .type("CARGO")
                .id("22f1f6da-a568-655a-ea37-76d013d04853")
                .addAccSysKey("System key1")
                .addAccSysKey("System key2")
                .accSysNotes("Accepting System Notes")
                .accSystem("Accepting System")
                .addAccSysValue("System value1")
                .addAccSysValue("System value2")
                .airdrop(true)
                .altDataFormat("Alt Data Format")
                .cargoType("PALLET")
                .centerlineOffset(3.1)
                .cg(112.014)
                .commodityCode("2304116")
                .commoditySys("STCC")
                .container(true)
                .createdAt(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
                .createdBy("some.user")
                .departure("CHS")
                .destination("RMS")
                .dvCode("DV-2")
                .fs(412.1)
                .addHazCode(1.1)
                .addHazCode(1.2)
                .height(1.1)
                .idAirLoadPlan("1038c389-d38e-270f-51cc-6a12e905abe8")
                .addItemContain("2UJ8843K")
                .addItemContain("745YV1T65")
                .addKey("key1")
                .addKey("key2")
                .lastArrDate(LocalDate.parse("2023-03-13"))
                .length(1.1)
                .moment(4000.1)
                .name("Product Name")
                .netExpWt(51.437)
                .notes("Example notes")
                .numPalletPos(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .productCode("530500234")
                .productSys("NSN")
                .receivingBranch("Air Force")
                .receivingUnit("50 SBN")
                .scGenTool("bID")
                .sourceDl("AXE")
                .tcn("M1358232245912XXX")
                .uln("T01ME01")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addValue("value1")
                .addValue("value2")
                .volume(7.8902)
                .weight(5443.335)
                .weightTs(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
                .width(1.1)
                .build()

        assertThat(itemGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(itemGetResponse.dataMode()).isEqualTo(ItemGetResponse.DataMode.TEST)
        assertThat(itemGetResponse.scanCode()).isEqualTo("12345ABCD")
        assertThat(itemGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(itemGetResponse.type()).isEqualTo("CARGO")
        assertThat(itemGetResponse.id()).contains("22f1f6da-a568-655a-ea37-76d013d04853")
        assertThat(itemGetResponse.accSysKeys().getOrNull())
            .containsExactly("System key1", "System key2")
        assertThat(itemGetResponse.accSysNotes()).contains("Accepting System Notes")
        assertThat(itemGetResponse.accSystem()).contains("Accepting System")
        assertThat(itemGetResponse.accSysValues().getOrNull())
            .containsExactly("System value1", "System value2")
        assertThat(itemGetResponse.airdrop()).contains(true)
        assertThat(itemGetResponse.altDataFormat()).contains("Alt Data Format")
        assertThat(itemGetResponse.cargoType()).contains("PALLET")
        assertThat(itemGetResponse.centerlineOffset()).contains(3.1)
        assertThat(itemGetResponse.cg()).contains(112.014)
        assertThat(itemGetResponse.commodityCode()).contains("2304116")
        assertThat(itemGetResponse.commoditySys()).contains("STCC")
        assertThat(itemGetResponse.container()).contains(true)
        assertThat(itemGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
        assertThat(itemGetResponse.createdBy()).contains("some.user")
        assertThat(itemGetResponse.departure()).contains("CHS")
        assertThat(itemGetResponse.destination()).contains("RMS")
        assertThat(itemGetResponse.dvCode()).contains("DV-2")
        assertThat(itemGetResponse.fs()).contains(412.1)
        assertThat(itemGetResponse.hazCodes().getOrNull()).containsExactly(1.1, 1.2)
        assertThat(itemGetResponse.height()).contains(1.1)
        assertThat(itemGetResponse.idAirLoadPlan()).contains("1038c389-d38e-270f-51cc-6a12e905abe8")
        assertThat(itemGetResponse.itemContains().getOrNull())
            .containsExactly("2UJ8843K", "745YV1T65")
        assertThat(itemGetResponse.keys().getOrNull()).containsExactly("key1", "key2")
        assertThat(itemGetResponse.lastArrDate()).contains(LocalDate.parse("2023-03-13"))
        assertThat(itemGetResponse.length()).contains(1.1)
        assertThat(itemGetResponse.moment()).contains(4000.1)
        assertThat(itemGetResponse.name()).contains("Product Name")
        assertThat(itemGetResponse.netExpWt()).contains(51.437)
        assertThat(itemGetResponse.notes()).contains("Example notes")
        assertThat(itemGetResponse.numPalletPos()).contains(2)
        assertThat(itemGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(itemGetResponse.origNetwork()).contains("OPS1")
        assertThat(itemGetResponse.productCode()).contains("530500234")
        assertThat(itemGetResponse.productSys()).contains("NSN")
        assertThat(itemGetResponse.receivingBranch()).contains("Air Force")
        assertThat(itemGetResponse.receivingUnit()).contains("50 SBN")
        assertThat(itemGetResponse.scGenTool()).contains("bID")
        assertThat(itemGetResponse.sourceDl()).contains("AXE")
        assertThat(itemGetResponse.tcn()).contains("M1358232245912XXX")
        assertThat(itemGetResponse.uln()).contains("T01ME01")
        assertThat(itemGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(itemGetResponse.updatedBy()).contains("some.user")
        assertThat(itemGetResponse.values().getOrNull()).containsExactly("value1", "value2")
        assertThat(itemGetResponse.volume()).contains(7.8902)
        assertThat(itemGetResponse.weight()).contains(5443.335)
        assertThat(itemGetResponse.weightTs())
            .contains(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
        assertThat(itemGetResponse.width()).contains(1.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val itemGetResponse =
            ItemGetResponse.builder()
                .classificationMarking("U")
                .dataMode(ItemGetResponse.DataMode.TEST)
                .scanCode("12345ABCD")
                .source("Bluestaq")
                .type("CARGO")
                .id("22f1f6da-a568-655a-ea37-76d013d04853")
                .addAccSysKey("System key1")
                .addAccSysKey("System key2")
                .accSysNotes("Accepting System Notes")
                .accSystem("Accepting System")
                .addAccSysValue("System value1")
                .addAccSysValue("System value2")
                .airdrop(true)
                .altDataFormat("Alt Data Format")
                .cargoType("PALLET")
                .centerlineOffset(3.1)
                .cg(112.014)
                .commodityCode("2304116")
                .commoditySys("STCC")
                .container(true)
                .createdAt(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
                .createdBy("some.user")
                .departure("CHS")
                .destination("RMS")
                .dvCode("DV-2")
                .fs(412.1)
                .addHazCode(1.1)
                .addHazCode(1.2)
                .height(1.1)
                .idAirLoadPlan("1038c389-d38e-270f-51cc-6a12e905abe8")
                .addItemContain("2UJ8843K")
                .addItemContain("745YV1T65")
                .addKey("key1")
                .addKey("key2")
                .lastArrDate(LocalDate.parse("2023-03-13"))
                .length(1.1)
                .moment(4000.1)
                .name("Product Name")
                .netExpWt(51.437)
                .notes("Example notes")
                .numPalletPos(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .productCode("530500234")
                .productSys("NSN")
                .receivingBranch("Air Force")
                .receivingUnit("50 SBN")
                .scGenTool("bID")
                .sourceDl("AXE")
                .tcn("M1358232245912XXX")
                .uln("T01ME01")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addValue("value1")
                .addValue("value2")
                .volume(7.8902)
                .weight(5443.335)
                .weightTs(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
                .width(1.1)
                .build()

        val roundtrippedItemGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(itemGetResponse),
                jacksonTypeRef<ItemGetResponse>(),
            )

        assertThat(roundtrippedItemGetResponse).isEqualTo(itemGetResponse)
    }
}
