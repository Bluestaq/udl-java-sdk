// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OperatingunitFullTest {

    @Test
    fun create() {
        val operatingunitFull =
            OperatingunitFull.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitFull.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altOperatingUnitId("32100000000021")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .countryCode("IQ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deployStatus("ND")
                .description("Description of unit")
                .divCat("5")
                .echelon("SHIP")
                .echelonTier("68")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .flagFlown("IZ")
                .fleetId("A")
                .force("NV")
                .forceName("FORCE-NAME")
                .fpa("EOB")
                .functRole("MIL")
                .geoidalMslSep(12.34)
                .idContact("CONTACT-ID")
                .ident("FRIEND")
                .idLocation("LOCATION-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .idOrganization("ORGANIZATION-ID")
                .lat(45.23)
                .location(
                    LocationFull.builder()
                        .classificationMarking("U")
                        .dataMode(LocationFull.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .locName("LOCATION_NAME")
                .locReason("GR")
                .lon(179.1)
                .masterUnit(true)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("W6")
                .msnPrimarySpecialty("QK")
                .addOperatingUnitRemark(
                    OperatingUnitRemarkFull.builder()
                        .classificationMarking("U")
                        .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                        .idOperatingUnit("OperatingUnit-ID")
                        .source("some.user")
                        .text("This is a remark")
                        .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                        .altRmkId("123456ABC")
                        .code("M")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .name("Remark name")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .type("Restriction")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .operStatus("OPR")
                .organization(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .stylizedUnit(true)
                .symCode("SOGPU----------")
                .unitIdentifier("AZXAZ12345")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        assertThat(operatingunitFull.classificationMarking()).isEqualTo("U")
        assertThat(operatingunitFull.dataMode()).isEqualTo(OperatingunitFull.DataMode.TEST)
        assertThat(operatingunitFull.name()).isEqualTo("SOME_NAME")
        assertThat(operatingunitFull.source()).isEqualTo("some.user")
        assertThat(operatingunitFull.airDefArea()).contains("AL006")
        assertThat(operatingunitFull.allegiance()).contains("OTHR")
        assertThat(operatingunitFull.altAllegiance()).contains("HL")
        assertThat(operatingunitFull.altCountryCode()).contains("IZ")
        assertThat(operatingunitFull.altOperatingUnitId()).contains("32100000000021")
        assertThat(operatingunitFull.classRating()).contains("1")
        assertThat(operatingunitFull.condition()).contains("RDY")
        assertThat(operatingunitFull.conditionAvail()).contains("A")
        assertThat(operatingunitFull.coord()).contains("340000000N0430000000E")
        assertThat(operatingunitFull.coordDatum()).contains("WGS")
        assertThat(operatingunitFull.coordDerivAcc()).contains(12.345)
        assertThat(operatingunitFull.countryCode()).contains("IQ")
        assertThat(operatingunitFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(operatingunitFull.createdBy()).contains("some.user")
        assertThat(operatingunitFull.deployStatus()).contains("ND")
        assertThat(operatingunitFull.description()).contains("Description of unit")
        assertThat(operatingunitFull.divCat()).contains("5")
        assertThat(operatingunitFull.echelon()).contains("SHIP")
        assertThat(operatingunitFull.echelonTier()).contains("68")
        assertThat(operatingunitFull.elevMsl()).contains(123.45)
        assertThat(operatingunitFull.elevMslConfLvl()).contains(50)
        assertThat(operatingunitFull.elevMslDerivAcc()).contains(12.34)
        assertThat(operatingunitFull.eval()).contains(7)
        assertThat(operatingunitFull.flagFlown()).contains("IZ")
        assertThat(operatingunitFull.fleetId()).contains("A")
        assertThat(operatingunitFull.force()).contains("NV")
        assertThat(operatingunitFull.forceName()).contains("FORCE-NAME")
        assertThat(operatingunitFull.fpa()).contains("EOB")
        assertThat(operatingunitFull.functRole()).contains("MIL")
        assertThat(operatingunitFull.geoidalMslSep()).contains(12.34)
        assertThat(operatingunitFull.idContact()).contains("CONTACT-ID")
        assertThat(operatingunitFull.ident()).contains("FRIEND")
        assertThat(operatingunitFull.idLocation()).contains("LOCATION-ID")
        assertThat(operatingunitFull.idOperatingUnit()).contains("OPERATINGUNIT-ID")
        assertThat(operatingunitFull.idOrganization()).contains("ORGANIZATION-ID")
        assertThat(operatingunitFull.lat()).contains(45.23)
        assertThat(operatingunitFull.location())
            .contains(
                LocationFull.builder()
                    .classificationMarking("U")
                    .dataMode(LocationFull.DataMode.TEST)
                    .name("Example location")
                    .source("Bluestaq")
                    .altitude(10.23)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idLocation("LOCATION-ID")
                    .lat(45.23)
                    .lon(179.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(operatingunitFull.locName()).contains("LOCATION_NAME")
        assertThat(operatingunitFull.locReason()).contains("GR")
        assertThat(operatingunitFull.lon()).contains(179.1)
        assertThat(operatingunitFull.masterUnit()).contains(true)
        assertThat(operatingunitFull.milGrid()).contains("4QFJ12345678")
        assertThat(operatingunitFull.milGridSys()).contains("UTM")
        assertThat(operatingunitFull.msnPrimary()).contains("W6")
        assertThat(operatingunitFull.msnPrimarySpecialty()).contains("QK")
        assertThat(operatingunitFull.operatingUnitRemarks().getOrNull())
            .containsExactly(
                OperatingUnitRemarkFull.builder()
                    .classificationMarking("U")
                    .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                    .idOperatingUnit("OperatingUnit-ID")
                    .source("some.user")
                    .text("This is a remark")
                    .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                    .altRmkId("123456ABC")
                    .code("M")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .name("Remark name")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .type("Restriction")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(operatingunitFull.operStatus()).contains("OPR")
        assertThat(operatingunitFull.organization())
            .contains(
                OrganizationFull.builder()
                    .classificationMarking("U")
                    .dataMode(OrganizationFull.DataMode.TEST)
                    .name("some.user")
                    .source("some.user")
                    .type("GOVERNMENT")
                    .id("ORGANIZATION-ID")
                    .active(false)
                    .category("Private company")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("Example description")
                    .externalId("EXTERNAL-ID")
                    .nationality("US")
                    .addOrganizationDetail(
                        OrganizationDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationDetailsFull.DataMode.TEST)
                            .idOrganization("ORGANIZATION-ID")
                            .name("some.user")
                            .source("some.user")
                            .id("ORGANIZATIONDETAILS-ID")
                            .address1("123 Main Street")
                            .address2("Apt 4B")
                            .address3("Colorado Springs CO, 80903")
                            .broker("some.user")
                            .ceo("some.user")
                            .cfo("some.user")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cto("some.user")
                            .description("Example description")
                            .ebitda(123.4)
                            .email("some_organization@organization.com")
                            .financialNotes("Example notes")
                            .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .fleetPlanNotes("Example notes")
                            .formerOrgId("FORMERORG-ID")
                            .ftes(123)
                            .geoAdminLevel1("Colorado")
                            .geoAdminLevel2("El Paso County")
                            .geoAdminLevel3("Colorado Springs")
                            .massRanking(123)
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .parentOrgId("PARENTORG-ID")
                            .postalCode("80903")
                            .profit(123.4)
                            .revenue(123.4)
                            .revenueRanking(123)
                            .riskManager("some.user")
                            .servicesNotes("Example notes")
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .origin("some.user")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(operatingunitFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(operatingunitFull.polSubdiv()).contains("IZ07")
        assertThat(operatingunitFull.recStatus()).contains("A")
        assertThat(operatingunitFull.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(operatingunitFull.resProd()).contains("RT")
        assertThat(operatingunitFull.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(operatingunitFull.stylizedUnit()).contains(true)
        assertThat(operatingunitFull.symCode()).contains("SOGPU----------")
        assertThat(operatingunitFull.unitIdentifier()).contains("AZXAZ12345")
        assertThat(operatingunitFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(operatingunitFull.updatedBy()).contains("some.user")
        assertThat(operatingunitFull.utm()).contains("19P4390691376966")
        assertThat(operatingunitFull.wac()).contains("0427")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val operatingunitFull =
            OperatingunitFull.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitFull.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altOperatingUnitId("32100000000021")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .countryCode("IQ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deployStatus("ND")
                .description("Description of unit")
                .divCat("5")
                .echelon("SHIP")
                .echelonTier("68")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .flagFlown("IZ")
                .fleetId("A")
                .force("NV")
                .forceName("FORCE-NAME")
                .fpa("EOB")
                .functRole("MIL")
                .geoidalMslSep(12.34)
                .idContact("CONTACT-ID")
                .ident("FRIEND")
                .idLocation("LOCATION-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .idOrganization("ORGANIZATION-ID")
                .lat(45.23)
                .location(
                    LocationFull.builder()
                        .classificationMarking("U")
                        .dataMode(LocationFull.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .locName("LOCATION_NAME")
                .locReason("GR")
                .lon(179.1)
                .masterUnit(true)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("W6")
                .msnPrimarySpecialty("QK")
                .addOperatingUnitRemark(
                    OperatingUnitRemarkFull.builder()
                        .classificationMarking("U")
                        .dataMode(OperatingUnitRemarkFull.DataMode.TEST)
                        .idOperatingUnit("OperatingUnit-ID")
                        .source("some.user")
                        .text("This is a remark")
                        .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                        .altRmkId("123456ABC")
                        .code("M")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .name("Remark name")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .type("Restriction")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .operStatus("OPR")
                .organization(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .stylizedUnit(true)
                .symCode("SOGPU----------")
                .unitIdentifier("AZXAZ12345")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val roundtrippedOperatingunitFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(operatingunitFull),
                jacksonTypeRef<OperatingunitFull>(),
            )

        assertThat(roundtrippedOperatingunitFull).isEqualTo(operatingunitFull)
    }
}
