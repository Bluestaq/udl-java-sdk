// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.flightplan

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class FlightPlanAbridgedTest {

    @Test
    fun create() {
        val flightPlanAbridged =
            FlightPlanAbridged.builder()
                .arrAirfield("KCHS")
                .classificationMarking("U")
                .dataMode(FlightPlanAbridged.DataMode.TEST)
                .depAirfield("KSLV")
                .genTs(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("c44b0a80-9fef-63d9-6267-79037fb93e4c")
                .aircraftMds("KC-130 HERCULES")
                .addAirRefuelEvent(
                    FlightPlanAbridged.AirRefuelEvent.builder()
                        .arDegrade(3.1)
                        .arExchangedFuel(1500.1)
                        .arNum(2)
                        .divertFuel(143000.1)
                        .exitFuel(160000.1)
                        .build()
                )
                .amcMissionId("AJM7939B1123")
                .appLandingFuel(3000.1)
                .arrAlternate1("EDDS")
                .arrAlternate1Fuel(6000.1)
                .arrAlternate2("EDDM")
                .arrAlternate2Fuel(6000.1)
                .arrIceFuel(1000.1)
                .arrRunway("05L")
                .atcAddresses(listOf("EYCBZMFO", "EUCHZMFP", "ETARYXYX", "EDUUZVZI"))
                .avgTempDev(16.1)
                .burnedFuel(145000.1)
                .callSign("HKY629")
                .cargoRemark("Expecting 55,000 lbs. If different, call us.")
                .climbFuel(7000.1)
                .climbTime("00:13")
                .contingencyFuel(3000.1)
                .countryCodes(listOf("US", "CA", "UK"))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .depAlternate("LFPO")
                .depressFuel(20000.1)
                .depRunway("05L")
                .dragIndex(16.9)
                .earlyDescentFuel(500.1)
                .enduranceTime("08:45")
                .enrouteFuel(155000.1)
                .enrouteTime("06:30")
                .equipment("SDFGHIRTUWXYZ/H")
                .estDepTime(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .etopsAirfields(listOf("KHSV", "KISP", "KBG", "LTBS"))
                .etopsAltAirfields(listOf("KHSV", "KISP", "KBG", "LTBS"))
                .etopsRating("85 MINUTES")
                .etopsValWindow("LPLA: 0317Z-0722Z")
                .externalId("AFMAPP20322347140001")
                .addFlightPlanMessage(
                    FlightPlanAbridged.FlightPlanMessage.builder()
                        .msgText("Message text")
                        .routePath("PRIMARY")
                        .severity("SEVERE")
                        .wpNum("20")
                        .build()
                )
                .addFlightPlanPointGroup(
                    FlightPlanAbridged.FlightPlanPointGroup.builder()
                        .avgFuelFlow(19693.1)
                        .etopsAvgWindFactor(10.1)
                        .etopsDistance(684.1)
                        .etopsReqFuel(4412.1)
                        .etopsTempDev(9.1)
                        .etopsTime("01:23")
                        .addFlightPlanPoint(
                            FlightPlanAbridged.FlightPlanPointGroup.FlightPlanPoint.builder()
                                .fppEta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                                .fppLat(45.23)
                                .fppLon(179.1)
                                .fppReqFuel(4250.1)
                                .pointName("CRUISE ALTITUDE ETP")
                                .build()
                        )
                        .fromTakeoffTime("07:29")
                        .fsafAvgWindFactor(10.1)
                        .fsafDistance(684.1)
                        .fsafReqFuel(50380.1)
                        .fsafTempDev(9.1)
                        .fsafTime("01:23")
                        .fuelCalcAlt(100.1)
                        .fuelCalcSpd(365.1)
                        .lsafAvgWindFactor(13.1)
                        .lsafDistance(684.1)
                        .lsafName("LPPD")
                        .lsafReqFuel(50787.1)
                        .lsafTempDev(9.1)
                        .lsafTime("01:23")
                        .plannedFuel(190319.1)
                        .pointGroupName("ETOPS_CF_POINT_1")
                        .worstFuelCase("DEPRESSURIZED ENGINE OUT ETP")
                        .build()
                )
                .addFlightPlanWaypoint(
                    FlightPlanAbridged.FlightPlanWaypoint.builder()
                        .type("COMMENT")
                        .waypointName("KCHS")
                        .aaTacanChannel("31/94")
                        .airDistance(321.1)
                        .airway("W15")
                        .alt(27000.1)
                        .arId("AR202")
                        .arpt("ARIP")
                        .ata(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                        .avgCalAirspeed(200.1)
                        .avgDriftAng(-3.2)
                        .avgGroundSpeed(300.1)
                        .avgTrueAirspeed(210.1)
                        .avgWindDir(165.5)
                        .avgWindSpeed(14.4)
                        .dayLowAlt(1500.1)
                        .eta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                        .exchangedFuel(-30400.1)
                        .fuelFlow(17654.1)
                        .iceCat("MODERATE")
                        .lat(45.23)
                        .legAlternate("KCHS")
                        .legDragIndex(1.2)
                        .legFuelDegrade(10.1)
                        .legMach(0.74)
                        .legMsnIndex(65.0)
                        .legWindFac(-32.1)
                        .lon(179.1)
                        .magCourse(338.1)
                        .magHeading(212.1)
                        .magVar(-13.2)
                        .navaid("HTO")
                        .nightLowAlt(2300.1)
                        .nvgLowAlt(2450.1)
                        .pointWindDir(165.5)
                        .pointWindSpeed(14.4)
                        .priFreq(357.5)
                        .secFreq(357.5)
                        .tacanChannel("83X")
                        .tempDev(12.1)
                        .thunderCat("MODERATE")
                        .totalAirDistance(3251.1)
                        .totalFlownDistance(688.1)
                        .totalRemDistance(1288.1)
                        .totalRemFuel(30453.1)
                        .totalTime("08:45")
                        .totalTimeRem("01:43")
                        .totalUsedFuel(70431.1)
                        .totalWeight(207123.1)
                        .trueCourse(328.1)
                        .turbCat("EXTREME")
                        .vorFreq(113.6)
                        .waypointNum(20)
                        .zoneDistance(212.1)
                        .zoneFuel(1120.1)
                        .zoneTime(36.1)
                        .build()
                )
                .flightRules("l")
                .flightType("MILITARY")
                .fuelDegrade(10.3)
                .gpsRaim("Failed by FAA SAPT 184022AUG2022")
                .holdDownFuel(500.1)
                .holdFuel(6000.1)
                .holdTime("01:00")
                .idAircraft("4f4a67c6-40fd-11ee-be56-0242ac120002")
                .idArrAirfield("363080c2-40fd-11ee-be56-0242ac120002")
                .idDepAirfield("2a9020f6-40fd-11ee-be56-0242ac120002")
                .identExtraFuel(5000.1)
                .idSortie("9d60c1b1-10b1-b2a7-e403-84c5d7eeb170")
                .initialCruiseSpeed("N0305")
                .initialFlightLevel("F270")
                .landingFuel(19000.1)
                .legNum(100)
                .minDivertFuel(25000.1)
                .msnIndex(44.1)
                .notes("STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED")
                .numAircraft(1)
                .opConditionFuel(5000.1)
                .opWeight(251830.5)
                .origin("THIRD_PARTY_DATASOURCE")
                .originator("ETARYXYX")
                .origNetwork("ORIG")
                .plannerRemark("Flight plan is good for 2 days before airspace closes over the UK.")
                .rampFuel(180000.1)
                .remAlternate1Fuel(18000.1)
                .remAlternate2Fuel(18000.1)
                .reserveFuel(10000.1)
                .routeString(
                    "RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT\nGORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177\nESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT"
                )
                .sid("RENV3B")
                .sourceDl("AXE")
                .star("ADANA")
                .status("APPROVED")
                .tailNumber("77187")
                .takeoffFuel(178500.1)
                .taxiFuel(1500.1)
                .thunderAvoidFuel(1000.1)
                .tocFuel(160000.1)
                .tocIceFuel(1000.1)
                .todFuel(32000.1)
                .todIceFuel(2000.1)
                .unidentExtraFuel(5000.1)
                .unusableFuel(2300.1)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wakeTurbCat("MEDIUM")
                .windFac1(-1.1)
                .windFac2(10.1)
                .windFacAvg(5.1)
                .wxValidEnd(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .wxValidStart(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .build()

        assertThat(flightPlanAbridged.arrAirfield()).isEqualTo("KCHS")
        assertThat(flightPlanAbridged.classificationMarking()).isEqualTo("U")
        assertThat(flightPlanAbridged.dataMode()).isEqualTo(FlightPlanAbridged.DataMode.TEST)
        assertThat(flightPlanAbridged.depAirfield()).isEqualTo("KSLV")
        assertThat(flightPlanAbridged.genTs())
            .isEqualTo(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
        assertThat(flightPlanAbridged.source()).isEqualTo("Bluestaq")
        assertThat(flightPlanAbridged.id()).contains("c44b0a80-9fef-63d9-6267-79037fb93e4c")
        assertThat(flightPlanAbridged.aircraftMds()).contains("KC-130 HERCULES")
        assertThat(flightPlanAbridged.airRefuelEvents().getOrNull())
            .containsExactly(
                FlightPlanAbridged.AirRefuelEvent.builder()
                    .arDegrade(3.1)
                    .arExchangedFuel(1500.1)
                    .arNum(2)
                    .divertFuel(143000.1)
                    .exitFuel(160000.1)
                    .build()
            )
        assertThat(flightPlanAbridged.amcMissionId()).contains("AJM7939B1123")
        assertThat(flightPlanAbridged.appLandingFuel()).contains(3000.1)
        assertThat(flightPlanAbridged.arrAlternate1()).contains("EDDS")
        assertThat(flightPlanAbridged.arrAlternate1Fuel()).contains(6000.1)
        assertThat(flightPlanAbridged.arrAlternate2()).contains("EDDM")
        assertThat(flightPlanAbridged.arrAlternate2Fuel()).contains(6000.1)
        assertThat(flightPlanAbridged.arrIceFuel()).contains(1000.1)
        assertThat(flightPlanAbridged.arrRunway()).contains("05L")
        assertThat(flightPlanAbridged.atcAddresses().getOrNull())
            .containsExactly("EYCBZMFO", "EUCHZMFP", "ETARYXYX", "EDUUZVZI")
        assertThat(flightPlanAbridged.avgTempDev()).contains(16.1)
        assertThat(flightPlanAbridged.burnedFuel()).contains(145000.1)
        assertThat(flightPlanAbridged.callSign()).contains("HKY629")
        assertThat(flightPlanAbridged.cargoRemark())
            .contains("Expecting 55,000 lbs. If different, call us.")
        assertThat(flightPlanAbridged.climbFuel()).contains(7000.1)
        assertThat(flightPlanAbridged.climbTime()).contains("00:13")
        assertThat(flightPlanAbridged.contingencyFuel()).contains(3000.1)
        assertThat(flightPlanAbridged.countryCodes().getOrNull()).containsExactly("US", "CA", "UK")
        assertThat(flightPlanAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(flightPlanAbridged.createdBy()).contains("some.user")
        assertThat(flightPlanAbridged.depAlternate()).contains("LFPO")
        assertThat(flightPlanAbridged.depressFuel()).contains(20000.1)
        assertThat(flightPlanAbridged.depRunway()).contains("05L")
        assertThat(flightPlanAbridged.dragIndex()).contains(16.9)
        assertThat(flightPlanAbridged.earlyDescentFuel()).contains(500.1)
        assertThat(flightPlanAbridged.enduranceTime()).contains("08:45")
        assertThat(flightPlanAbridged.enrouteFuel()).contains(155000.1)
        assertThat(flightPlanAbridged.enrouteTime()).contains("06:30")
        assertThat(flightPlanAbridged.equipment()).contains("SDFGHIRTUWXYZ/H")
        assertThat(flightPlanAbridged.estDepTime())
            .contains(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
        assertThat(flightPlanAbridged.etopsAirfields().getOrNull())
            .containsExactly("KHSV", "KISP", "KBG", "LTBS")
        assertThat(flightPlanAbridged.etopsAltAirfields().getOrNull())
            .containsExactly("KHSV", "KISP", "KBG", "LTBS")
        assertThat(flightPlanAbridged.etopsRating()).contains("85 MINUTES")
        assertThat(flightPlanAbridged.etopsValWindow()).contains("LPLA: 0317Z-0722Z")
        assertThat(flightPlanAbridged.externalId()).contains("AFMAPP20322347140001")
        assertThat(flightPlanAbridged.flightPlanMessages().getOrNull())
            .containsExactly(
                FlightPlanAbridged.FlightPlanMessage.builder()
                    .msgText("Message text")
                    .routePath("PRIMARY")
                    .severity("SEVERE")
                    .wpNum("20")
                    .build()
            )
        assertThat(flightPlanAbridged.flightPlanPointGroups().getOrNull())
            .containsExactly(
                FlightPlanAbridged.FlightPlanPointGroup.builder()
                    .avgFuelFlow(19693.1)
                    .etopsAvgWindFactor(10.1)
                    .etopsDistance(684.1)
                    .etopsReqFuel(4412.1)
                    .etopsTempDev(9.1)
                    .etopsTime("01:23")
                    .addFlightPlanPoint(
                        FlightPlanAbridged.FlightPlanPointGroup.FlightPlanPoint.builder()
                            .fppEta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                            .fppLat(45.23)
                            .fppLon(179.1)
                            .fppReqFuel(4250.1)
                            .pointName("CRUISE ALTITUDE ETP")
                            .build()
                    )
                    .fromTakeoffTime("07:29")
                    .fsafAvgWindFactor(10.1)
                    .fsafDistance(684.1)
                    .fsafReqFuel(50380.1)
                    .fsafTempDev(9.1)
                    .fsafTime("01:23")
                    .fuelCalcAlt(100.1)
                    .fuelCalcSpd(365.1)
                    .lsafAvgWindFactor(13.1)
                    .lsafDistance(684.1)
                    .lsafName("LPPD")
                    .lsafReqFuel(50787.1)
                    .lsafTempDev(9.1)
                    .lsafTime("01:23")
                    .plannedFuel(190319.1)
                    .pointGroupName("ETOPS_CF_POINT_1")
                    .worstFuelCase("DEPRESSURIZED ENGINE OUT ETP")
                    .build()
            )
        assertThat(flightPlanAbridged.flightPlanWaypoints().getOrNull())
            .containsExactly(
                FlightPlanAbridged.FlightPlanWaypoint.builder()
                    .type("COMMENT")
                    .waypointName("KCHS")
                    .aaTacanChannel("31/94")
                    .airDistance(321.1)
                    .airway("W15")
                    .alt(27000.1)
                    .arId("AR202")
                    .arpt("ARIP")
                    .ata(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                    .avgCalAirspeed(200.1)
                    .avgDriftAng(-3.2)
                    .avgGroundSpeed(300.1)
                    .avgTrueAirspeed(210.1)
                    .avgWindDir(165.5)
                    .avgWindSpeed(14.4)
                    .dayLowAlt(1500.1)
                    .eta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                    .exchangedFuel(-30400.1)
                    .fuelFlow(17654.1)
                    .iceCat("MODERATE")
                    .lat(45.23)
                    .legAlternate("KCHS")
                    .legDragIndex(1.2)
                    .legFuelDegrade(10.1)
                    .legMach(0.74)
                    .legMsnIndex(65.0)
                    .legWindFac(-32.1)
                    .lon(179.1)
                    .magCourse(338.1)
                    .magHeading(212.1)
                    .magVar(-13.2)
                    .navaid("HTO")
                    .nightLowAlt(2300.1)
                    .nvgLowAlt(2450.1)
                    .pointWindDir(165.5)
                    .pointWindSpeed(14.4)
                    .priFreq(357.5)
                    .secFreq(357.5)
                    .tacanChannel("83X")
                    .tempDev(12.1)
                    .thunderCat("MODERATE")
                    .totalAirDistance(3251.1)
                    .totalFlownDistance(688.1)
                    .totalRemDistance(1288.1)
                    .totalRemFuel(30453.1)
                    .totalTime("08:45")
                    .totalTimeRem("01:43")
                    .totalUsedFuel(70431.1)
                    .totalWeight(207123.1)
                    .trueCourse(328.1)
                    .turbCat("EXTREME")
                    .vorFreq(113.6)
                    .waypointNum(20)
                    .zoneDistance(212.1)
                    .zoneFuel(1120.1)
                    .zoneTime(36.1)
                    .build()
            )
        assertThat(flightPlanAbridged.flightRules()).contains("l")
        assertThat(flightPlanAbridged.flightType()).contains("MILITARY")
        assertThat(flightPlanAbridged.fuelDegrade()).contains(10.3)
        assertThat(flightPlanAbridged.gpsRaim()).contains("Failed by FAA SAPT 184022AUG2022")
        assertThat(flightPlanAbridged.holdDownFuel()).contains(500.1)
        assertThat(flightPlanAbridged.holdFuel()).contains(6000.1)
        assertThat(flightPlanAbridged.holdTime()).contains("01:00")
        assertThat(flightPlanAbridged.idAircraft()).contains("4f4a67c6-40fd-11ee-be56-0242ac120002")
        assertThat(flightPlanAbridged.idArrAirfield())
            .contains("363080c2-40fd-11ee-be56-0242ac120002")
        assertThat(flightPlanAbridged.idDepAirfield())
            .contains("2a9020f6-40fd-11ee-be56-0242ac120002")
        assertThat(flightPlanAbridged.identExtraFuel()).contains(5000.1)
        assertThat(flightPlanAbridged.idSortie()).contains("9d60c1b1-10b1-b2a7-e403-84c5d7eeb170")
        assertThat(flightPlanAbridged.initialCruiseSpeed()).contains("N0305")
        assertThat(flightPlanAbridged.initialFlightLevel()).contains("F270")
        assertThat(flightPlanAbridged.landingFuel()).contains(19000.1)
        assertThat(flightPlanAbridged.legNum()).contains(100)
        assertThat(flightPlanAbridged.minDivertFuel()).contains(25000.1)
        assertThat(flightPlanAbridged.msnIndex()).contains(44.1)
        assertThat(flightPlanAbridged.notes())
            .contains("STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED")
        assertThat(flightPlanAbridged.numAircraft()).contains(1)
        assertThat(flightPlanAbridged.opConditionFuel()).contains(5000.1)
        assertThat(flightPlanAbridged.opWeight()).contains(251830.5)
        assertThat(flightPlanAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(flightPlanAbridged.originator()).contains("ETARYXYX")
        assertThat(flightPlanAbridged.origNetwork()).contains("ORIG")
        assertThat(flightPlanAbridged.plannerRemark())
            .contains("Flight plan is good for 2 days before airspace closes over the UK.")
        assertThat(flightPlanAbridged.rampFuel()).contains(180000.1)
        assertThat(flightPlanAbridged.remAlternate1Fuel()).contains(18000.1)
        assertThat(flightPlanAbridged.remAlternate2Fuel()).contains(18000.1)
        assertThat(flightPlanAbridged.reserveFuel()).contains(10000.1)
        assertThat(flightPlanAbridged.routeString())
            .contains(
                "RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT\nGORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177\nESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT"
            )
        assertThat(flightPlanAbridged.sid()).contains("RENV3B")
        assertThat(flightPlanAbridged.sourceDl()).contains("AXE")
        assertThat(flightPlanAbridged.star()).contains("ADANA")
        assertThat(flightPlanAbridged.status()).contains("APPROVED")
        assertThat(flightPlanAbridged.tailNumber()).contains("77187")
        assertThat(flightPlanAbridged.takeoffFuel()).contains(178500.1)
        assertThat(flightPlanAbridged.taxiFuel()).contains(1500.1)
        assertThat(flightPlanAbridged.thunderAvoidFuel()).contains(1000.1)
        assertThat(flightPlanAbridged.tocFuel()).contains(160000.1)
        assertThat(flightPlanAbridged.tocIceFuel()).contains(1000.1)
        assertThat(flightPlanAbridged.todFuel()).contains(32000.1)
        assertThat(flightPlanAbridged.todIceFuel()).contains(2000.1)
        assertThat(flightPlanAbridged.unidentExtraFuel()).contains(5000.1)
        assertThat(flightPlanAbridged.unusableFuel()).contains(2300.1)
        assertThat(flightPlanAbridged.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(flightPlanAbridged.updatedBy()).contains("some.user")
        assertThat(flightPlanAbridged.wakeTurbCat()).contains("MEDIUM")
        assertThat(flightPlanAbridged.windFac1()).contains(-1.1)
        assertThat(flightPlanAbridged.windFac2()).contains(10.1)
        assertThat(flightPlanAbridged.windFacAvg()).contains(5.1)
        assertThat(flightPlanAbridged.wxValidEnd())
            .contains(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
        assertThat(flightPlanAbridged.wxValidStart())
            .contains(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val flightPlanAbridged =
            FlightPlanAbridged.builder()
                .arrAirfield("KCHS")
                .classificationMarking("U")
                .dataMode(FlightPlanAbridged.DataMode.TEST)
                .depAirfield("KSLV")
                .genTs(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("c44b0a80-9fef-63d9-6267-79037fb93e4c")
                .aircraftMds("KC-130 HERCULES")
                .addAirRefuelEvent(
                    FlightPlanAbridged.AirRefuelEvent.builder()
                        .arDegrade(3.1)
                        .arExchangedFuel(1500.1)
                        .arNum(2)
                        .divertFuel(143000.1)
                        .exitFuel(160000.1)
                        .build()
                )
                .amcMissionId("AJM7939B1123")
                .appLandingFuel(3000.1)
                .arrAlternate1("EDDS")
                .arrAlternate1Fuel(6000.1)
                .arrAlternate2("EDDM")
                .arrAlternate2Fuel(6000.1)
                .arrIceFuel(1000.1)
                .arrRunway("05L")
                .atcAddresses(listOf("EYCBZMFO", "EUCHZMFP", "ETARYXYX", "EDUUZVZI"))
                .avgTempDev(16.1)
                .burnedFuel(145000.1)
                .callSign("HKY629")
                .cargoRemark("Expecting 55,000 lbs. If different, call us.")
                .climbFuel(7000.1)
                .climbTime("00:13")
                .contingencyFuel(3000.1)
                .countryCodes(listOf("US", "CA", "UK"))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .depAlternate("LFPO")
                .depressFuel(20000.1)
                .depRunway("05L")
                .dragIndex(16.9)
                .earlyDescentFuel(500.1)
                .enduranceTime("08:45")
                .enrouteFuel(155000.1)
                .enrouteTime("06:30")
                .equipment("SDFGHIRTUWXYZ/H")
                .estDepTime(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .etopsAirfields(listOf("KHSV", "KISP", "KBG", "LTBS"))
                .etopsAltAirfields(listOf("KHSV", "KISP", "KBG", "LTBS"))
                .etopsRating("85 MINUTES")
                .etopsValWindow("LPLA: 0317Z-0722Z")
                .externalId("AFMAPP20322347140001")
                .addFlightPlanMessage(
                    FlightPlanAbridged.FlightPlanMessage.builder()
                        .msgText("Message text")
                        .routePath("PRIMARY")
                        .severity("SEVERE")
                        .wpNum("20")
                        .build()
                )
                .addFlightPlanPointGroup(
                    FlightPlanAbridged.FlightPlanPointGroup.builder()
                        .avgFuelFlow(19693.1)
                        .etopsAvgWindFactor(10.1)
                        .etopsDistance(684.1)
                        .etopsReqFuel(4412.1)
                        .etopsTempDev(9.1)
                        .etopsTime("01:23")
                        .addFlightPlanPoint(
                            FlightPlanAbridged.FlightPlanPointGroup.FlightPlanPoint.builder()
                                .fppEta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                                .fppLat(45.23)
                                .fppLon(179.1)
                                .fppReqFuel(4250.1)
                                .pointName("CRUISE ALTITUDE ETP")
                                .build()
                        )
                        .fromTakeoffTime("07:29")
                        .fsafAvgWindFactor(10.1)
                        .fsafDistance(684.1)
                        .fsafReqFuel(50380.1)
                        .fsafTempDev(9.1)
                        .fsafTime("01:23")
                        .fuelCalcAlt(100.1)
                        .fuelCalcSpd(365.1)
                        .lsafAvgWindFactor(13.1)
                        .lsafDistance(684.1)
                        .lsafName("LPPD")
                        .lsafReqFuel(50787.1)
                        .lsafTempDev(9.1)
                        .lsafTime("01:23")
                        .plannedFuel(190319.1)
                        .pointGroupName("ETOPS_CF_POINT_1")
                        .worstFuelCase("DEPRESSURIZED ENGINE OUT ETP")
                        .build()
                )
                .addFlightPlanWaypoint(
                    FlightPlanAbridged.FlightPlanWaypoint.builder()
                        .type("COMMENT")
                        .waypointName("KCHS")
                        .aaTacanChannel("31/94")
                        .airDistance(321.1)
                        .airway("W15")
                        .alt(27000.1)
                        .arId("AR202")
                        .arpt("ARIP")
                        .ata(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                        .avgCalAirspeed(200.1)
                        .avgDriftAng(-3.2)
                        .avgGroundSpeed(300.1)
                        .avgTrueAirspeed(210.1)
                        .avgWindDir(165.5)
                        .avgWindSpeed(14.4)
                        .dayLowAlt(1500.1)
                        .eta(OffsetDateTime.parse("2023-09-09T01:00:00.123Z"))
                        .exchangedFuel(-30400.1)
                        .fuelFlow(17654.1)
                        .iceCat("MODERATE")
                        .lat(45.23)
                        .legAlternate("KCHS")
                        .legDragIndex(1.2)
                        .legFuelDegrade(10.1)
                        .legMach(0.74)
                        .legMsnIndex(65.0)
                        .legWindFac(-32.1)
                        .lon(179.1)
                        .magCourse(338.1)
                        .magHeading(212.1)
                        .magVar(-13.2)
                        .navaid("HTO")
                        .nightLowAlt(2300.1)
                        .nvgLowAlt(2450.1)
                        .pointWindDir(165.5)
                        .pointWindSpeed(14.4)
                        .priFreq(357.5)
                        .secFreq(357.5)
                        .tacanChannel("83X")
                        .tempDev(12.1)
                        .thunderCat("MODERATE")
                        .totalAirDistance(3251.1)
                        .totalFlownDistance(688.1)
                        .totalRemDistance(1288.1)
                        .totalRemFuel(30453.1)
                        .totalTime("08:45")
                        .totalTimeRem("01:43")
                        .totalUsedFuel(70431.1)
                        .totalWeight(207123.1)
                        .trueCourse(328.1)
                        .turbCat("EXTREME")
                        .vorFreq(113.6)
                        .waypointNum(20)
                        .zoneDistance(212.1)
                        .zoneFuel(1120.1)
                        .zoneTime(36.1)
                        .build()
                )
                .flightRules("l")
                .flightType("MILITARY")
                .fuelDegrade(10.3)
                .gpsRaim("Failed by FAA SAPT 184022AUG2022")
                .holdDownFuel(500.1)
                .holdFuel(6000.1)
                .holdTime("01:00")
                .idAircraft("4f4a67c6-40fd-11ee-be56-0242ac120002")
                .idArrAirfield("363080c2-40fd-11ee-be56-0242ac120002")
                .idDepAirfield("2a9020f6-40fd-11ee-be56-0242ac120002")
                .identExtraFuel(5000.1)
                .idSortie("9d60c1b1-10b1-b2a7-e403-84c5d7eeb170")
                .initialCruiseSpeed("N0305")
                .initialFlightLevel("F270")
                .landingFuel(19000.1)
                .legNum(100)
                .minDivertFuel(25000.1)
                .msnIndex(44.1)
                .notes("STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED")
                .numAircraft(1)
                .opConditionFuel(5000.1)
                .opWeight(251830.5)
                .origin("THIRD_PARTY_DATASOURCE")
                .originator("ETARYXYX")
                .origNetwork("ORIG")
                .plannerRemark("Flight plan is good for 2 days before airspace closes over the UK.")
                .rampFuel(180000.1)
                .remAlternate1Fuel(18000.1)
                .remAlternate2Fuel(18000.1)
                .reserveFuel(10000.1)
                .routeString(
                    "RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT\nGORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177\nESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT"
                )
                .sid("RENV3B")
                .sourceDl("AXE")
                .star("ADANA")
                .status("APPROVED")
                .tailNumber("77187")
                .takeoffFuel(178500.1)
                .taxiFuel(1500.1)
                .thunderAvoidFuel(1000.1)
                .tocFuel(160000.1)
                .tocIceFuel(1000.1)
                .todFuel(32000.1)
                .todIceFuel(2000.1)
                .unidentExtraFuel(5000.1)
                .unusableFuel(2300.1)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wakeTurbCat("MEDIUM")
                .windFac1(-1.1)
                .windFac2(10.1)
                .windFacAvg(5.1)
                .wxValidEnd(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .wxValidStart(OffsetDateTime.parse("2023-05-01T01:01:01.123Z"))
                .build()

        val roundtrippedFlightPlanAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(flightPlanAbridged),
                jacksonTypeRef<FlightPlanAbridged>(),
            )

        assertThat(roundtrippedFlightPlanAbridged).isEqualTo(flightPlanAbridged)
    }
}
