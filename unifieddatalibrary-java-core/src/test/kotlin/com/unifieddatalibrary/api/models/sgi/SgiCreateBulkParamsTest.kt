// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sgi

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SgiCreateBulkParamsTest {

    @Test
    fun create() {
        SgiCreateBulkParams.builder()
            .addBody(
                SgiCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(SgiCreateBulkParams.Body.DataMode.TEST)
                    .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .id("SGI-ID")
                    .analyzerAttenuation(5.1)
                    .ap(1.23)
                    .apDuration(3)
                    .coeffDegree(listOf(1, 2, 3))
                    .coeffOrder(listOf(1, 2, 3))
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .ctce(listOf(1.23, 342.3, 1.32))
                    .ctci(listOf(1.23, 342.3, 1.32))
                    .dst(1.23)
                    .dtc(1.23)
                    .e10(1.23)
                    .e54(1.23)
                    .f10(1.23)
                    .f10High(187.5)
                    .f10Low(185.5)
                    .f54(1.23)
                    .f81(1.23)
                    .frequencies(listOf(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875))
                    .gamma(25)
                    .idSensor("57c96c97-e076-48af-a068-73ee2cb37e65")
                    .kIndex(1)
                    .kp(4.66)
                    .kpDuration(3)
                    .m10(1.23)
                    .m54(1.23)
                    .mode(1)
                    .normFactor(2.12679e-7)
                    .observedBaseline(listOf(15, 32, 25, 134, 0, 6, 19, 8))
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origSensorId("ORIGSENSOR-ID")
                    .powers(listOf(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1))
                    .precedence(SgiCreateBulkParams.Body.Precedence.R)
                    .rawFileUri("rawFileURI")
                    .rbDuration(24)
                    .rbIndex(1.02947164506)
                    .rbRegionCode(2)
                    .s10(1.23)
                    .s54(1.23)
                    .state(SgiCreateBulkParams.Body.State.I)
                    .stationName("Boulder")
                    .stce(listOf(1.23, 342.3, 1.32))
                    .stci(listOf(1.23, 342.3, 1.32))
                    .sunspotNum(151.1)
                    .sunspotNumHigh(152.1)
                    .sunspotNumLow(150.1)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .transactionId("TRANSACTION-ID")
                    .type("JBH09")
                    .y10(1.23)
                    .y54(1.23)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            SgiCreateBulkParams.builder()
                .addBody(
                    SgiCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(SgiCreateBulkParams.Body.DataMode.TEST)
                        .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .source("Bluestaq")
                        .id("SGI-ID")
                        .analyzerAttenuation(5.1)
                        .ap(1.23)
                        .apDuration(3)
                        .coeffDegree(listOf(1, 2, 3))
                        .coeffOrder(listOf(1, 2, 3))
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .ctce(listOf(1.23, 342.3, 1.32))
                        .ctci(listOf(1.23, 342.3, 1.32))
                        .dst(1.23)
                        .dtc(1.23)
                        .e10(1.23)
                        .e54(1.23)
                        .f10(1.23)
                        .f10High(187.5)
                        .f10Low(185.5)
                        .f54(1.23)
                        .f81(1.23)
                        .frequencies(
                            listOf(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875)
                        )
                        .gamma(25)
                        .idSensor("57c96c97-e076-48af-a068-73ee2cb37e65")
                        .kIndex(1)
                        .kp(4.66)
                        .kpDuration(3)
                        .m10(1.23)
                        .m54(1.23)
                        .mode(1)
                        .normFactor(2.12679e-7)
                        .observedBaseline(listOf(15, 32, 25, 134, 0, 6, 19, 8))
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origSensorId("ORIGSENSOR-ID")
                        .powers(listOf(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1))
                        .precedence(SgiCreateBulkParams.Body.Precedence.R)
                        .rawFileUri("rawFileURI")
                        .rbDuration(24)
                        .rbIndex(1.02947164506)
                        .rbRegionCode(2)
                        .s10(1.23)
                        .s54(1.23)
                        .state(SgiCreateBulkParams.Body.State.I)
                        .stationName("Boulder")
                        .stce(listOf(1.23, 342.3, 1.32))
                        .stci(listOf(1.23, 342.3, 1.32))
                        .sunspotNum(151.1)
                        .sunspotNumHigh(152.1)
                        .sunspotNumLow(150.1)
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .transactionId("TRANSACTION-ID")
                        .type("JBH09")
                        .y10(1.23)
                        .y54(1.23)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                SgiCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(SgiCreateBulkParams.Body.DataMode.TEST)
                    .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .id("SGI-ID")
                    .analyzerAttenuation(5.1)
                    .ap(1.23)
                    .apDuration(3)
                    .coeffDegree(listOf(1, 2, 3))
                    .coeffOrder(listOf(1, 2, 3))
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .ctce(listOf(1.23, 342.3, 1.32))
                    .ctci(listOf(1.23, 342.3, 1.32))
                    .dst(1.23)
                    .dtc(1.23)
                    .e10(1.23)
                    .e54(1.23)
                    .f10(1.23)
                    .f10High(187.5)
                    .f10Low(185.5)
                    .f54(1.23)
                    .f81(1.23)
                    .frequencies(listOf(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875))
                    .gamma(25)
                    .idSensor("57c96c97-e076-48af-a068-73ee2cb37e65")
                    .kIndex(1)
                    .kp(4.66)
                    .kpDuration(3)
                    .m10(1.23)
                    .m54(1.23)
                    .mode(1)
                    .normFactor(2.12679e-7)
                    .observedBaseline(listOf(15, 32, 25, 134, 0, 6, 19, 8))
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origSensorId("ORIGSENSOR-ID")
                    .powers(listOf(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1))
                    .precedence(SgiCreateBulkParams.Body.Precedence.R)
                    .rawFileUri("rawFileURI")
                    .rbDuration(24)
                    .rbIndex(1.02947164506)
                    .rbRegionCode(2)
                    .s10(1.23)
                    .s54(1.23)
                    .state(SgiCreateBulkParams.Body.State.I)
                    .stationName("Boulder")
                    .stce(listOf(1.23, 342.3, 1.32))
                    .stci(listOf(1.23, 342.3, 1.32))
                    .sunspotNum(151.1)
                    .sunspotNumHigh(152.1)
                    .sunspotNumLow(150.1)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .transactionId("TRANSACTION-ID")
                    .type("JBH09")
                    .y10(1.23)
                    .y54(1.23)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SgiCreateBulkParams.builder()
                .addBody(
                    SgiCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(SgiCreateBulkParams.Body.DataMode.TEST)
                        .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .source("Bluestaq")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                SgiCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(SgiCreateBulkParams.Body.DataMode.TEST)
                    .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .build()
            )
    }
}
