// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.passiveradarobservation

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PassiveRadarObservationListResponseTest {

    @Test
    fun create() {
        val passiveRadarObservationListResponse =
            PassiveRadarObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(PassiveRadarObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                .source("Bluestaq")
                .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                .accel(1.23)
                .accelUnc(0.1)
                .alt(478.056378)
                .azimuth(134.5)
                .azimuthBias(0.123)
                .azimuthRate(0.5)
                .azimuthUnc(0.5)
                .bistaticRange(754.8212)
                .bistaticRangeAccel(1.23)
                .bistaticRangeAccelUnc(0.1)
                .bistaticRangeBias(2.34)
                .bistaticRangeRate(-0.30222)
                .bistaticRangeRateUnc(0.123)
                .bistaticRangeUnc(5.1)
                .coning(60.1)
                .coningUnc(0.5)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .delay(0.00505820232809312)
                .delayBias(0.00000123)
                .delayUnc(0.0000031)
                .descriptor("Descriptor")
                .doppler(-101.781641000597)
                .dopplerUnc(0.2)
                .elevation(76.1)
                .elevationBias(0.123)
                .elevationRate(0.5)
                .elevationUnc(0.5)
                .extObservationId("26892")
                .idOnOrbit("40699")
                .idRfEmitter("RED_CLIFFS_3ABCRN")
                .idSensor("OCULUSA")
                .idSensorRefReceiver("OculusRef1")
                .lat(-35.1181763996856)
                .lon(139.613567052763)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(10.23)
                .orthogonalRcsUnc(1.23)
                .ra(1.23)
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(40699)
                .snr(17.292053)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .tof(0.00592856674135648)
                .tofBias(0.00000123)
                .tofUnc(0.0000031)
                .trackId("12212")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(false)
                .xvel(1.23)
                .yvel(3.21)
                .zvel(3.12)
                .build()

        assertThat(passiveRadarObservationListResponse.classificationMarking()).isEqualTo("U")
        assertThat(passiveRadarObservationListResponse.dataMode())
            .isEqualTo(PassiveRadarObservationListResponse.DataMode.TEST)
        assertThat(passiveRadarObservationListResponse.obTime())
            .isEqualTo(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
        assertThat(passiveRadarObservationListResponse.source()).isEqualTo("Bluestaq")
        assertThat(passiveRadarObservationListResponse.id())
            .contains("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
        assertThat(passiveRadarObservationListResponse.accel()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.accelUnc()).contains(0.1)
        assertThat(passiveRadarObservationListResponse.alt()).contains(478.056378)
        assertThat(passiveRadarObservationListResponse.azimuth()).contains(134.5)
        assertThat(passiveRadarObservationListResponse.azimuthBias()).contains(0.123)
        assertThat(passiveRadarObservationListResponse.azimuthRate()).contains(0.5)
        assertThat(passiveRadarObservationListResponse.azimuthUnc()).contains(0.5)
        assertThat(passiveRadarObservationListResponse.bistaticRange()).contains(754.8212)
        assertThat(passiveRadarObservationListResponse.bistaticRangeAccel()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.bistaticRangeAccelUnc()).contains(0.1)
        assertThat(passiveRadarObservationListResponse.bistaticRangeBias()).contains(2.34)
        assertThat(passiveRadarObservationListResponse.bistaticRangeRate()).contains(-0.30222)
        assertThat(passiveRadarObservationListResponse.bistaticRangeRateUnc()).contains(0.123)
        assertThat(passiveRadarObservationListResponse.bistaticRangeUnc()).contains(5.1)
        assertThat(passiveRadarObservationListResponse.coning()).contains(60.1)
        assertThat(passiveRadarObservationListResponse.coningUnc()).contains(0.5)
        assertThat(passiveRadarObservationListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(passiveRadarObservationListResponse.createdBy()).contains("some.user")
        assertThat(passiveRadarObservationListResponse.declination()).contains(10.23)
        assertThat(passiveRadarObservationListResponse.delay()).contains(0.00505820232809312)
        assertThat(passiveRadarObservationListResponse.delayBias()).contains(0.00000123)
        assertThat(passiveRadarObservationListResponse.delayUnc()).contains(0.0000031)
        assertThat(passiveRadarObservationListResponse.descriptor()).contains("Descriptor")
        assertThat(passiveRadarObservationListResponse.doppler()).contains(-101.781641000597)
        assertThat(passiveRadarObservationListResponse.dopplerUnc()).contains(0.2)
        assertThat(passiveRadarObservationListResponse.elevation()).contains(76.1)
        assertThat(passiveRadarObservationListResponse.elevationBias()).contains(0.123)
        assertThat(passiveRadarObservationListResponse.elevationRate()).contains(0.5)
        assertThat(passiveRadarObservationListResponse.elevationUnc()).contains(0.5)
        assertThat(passiveRadarObservationListResponse.extObservationId()).contains("26892")
        assertThat(passiveRadarObservationListResponse.idOnOrbit()).contains("40699")
        assertThat(passiveRadarObservationListResponse.idRfEmitter()).contains("RED_CLIFFS_3ABCRN")
        assertThat(passiveRadarObservationListResponse.idSensor()).contains("OCULUSA")
        assertThat(passiveRadarObservationListResponse.idSensorRefReceiver()).contains("OculusRef1")
        assertThat(passiveRadarObservationListResponse.lat()).contains(-35.1181763996856)
        assertThat(passiveRadarObservationListResponse.lon()).contains(139.613567052763)
        assertThat(passiveRadarObservationListResponse.obPosition()).contains("FIRST")
        assertThat(passiveRadarObservationListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(passiveRadarObservationListResponse.origNetwork()).contains("ORIG")
        assertThat(passiveRadarObservationListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(passiveRadarObservationListResponse.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(passiveRadarObservationListResponse.orthogonalRcs()).contains(10.23)
        assertThat(passiveRadarObservationListResponse.orthogonalRcsUnc()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.ra()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.rcs()).contains(100.23)
        assertThat(passiveRadarObservationListResponse.rcsUnc()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.satNo()).contains(40699)
        assertThat(passiveRadarObservationListResponse.snr()).contains(17.292053)
        assertThat(passiveRadarObservationListResponse.sourceDl()).contains("AXE")
        assertThat(passiveRadarObservationListResponse.taskId()).contains("TASK-ID")
        assertThat(passiveRadarObservationListResponse.timingBias()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.tof()).contains(0.00592856674135648)
        assertThat(passiveRadarObservationListResponse.tofBias()).contains(0.00000123)
        assertThat(passiveRadarObservationListResponse.tofUnc()).contains(0.0000031)
        assertThat(passiveRadarObservationListResponse.trackId()).contains("12212")
        assertThat(passiveRadarObservationListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(passiveRadarObservationListResponse.type()).contains("RADAR")
        assertThat(passiveRadarObservationListResponse.uct()).contains(false)
        assertThat(passiveRadarObservationListResponse.xvel()).contains(1.23)
        assertThat(passiveRadarObservationListResponse.yvel()).contains(3.21)
        assertThat(passiveRadarObservationListResponse.zvel()).contains(3.12)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val passiveRadarObservationListResponse =
            PassiveRadarObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(PassiveRadarObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-01-24T23:35:26.518152Z"))
                .source("Bluestaq")
                .id("bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0")
                .accel(1.23)
                .accelUnc(0.1)
                .alt(478.056378)
                .azimuth(134.5)
                .azimuthBias(0.123)
                .azimuthRate(0.5)
                .azimuthUnc(0.5)
                .bistaticRange(754.8212)
                .bistaticRangeAccel(1.23)
                .bistaticRangeAccelUnc(0.1)
                .bistaticRangeBias(2.34)
                .bistaticRangeRate(-0.30222)
                .bistaticRangeRateUnc(0.123)
                .bistaticRangeUnc(5.1)
                .coning(60.1)
                .coningUnc(0.5)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(10.23)
                .delay(0.00505820232809312)
                .delayBias(0.00000123)
                .delayUnc(0.0000031)
                .descriptor("Descriptor")
                .doppler(-101.781641000597)
                .dopplerUnc(0.2)
                .elevation(76.1)
                .elevationBias(0.123)
                .elevationRate(0.5)
                .elevationUnc(0.5)
                .extObservationId("26892")
                .idOnOrbit("40699")
                .idRfEmitter("RED_CLIFFS_3ABCRN")
                .idSensor("OCULUSA")
                .idSensorRefReceiver("OculusRef1")
                .lat(-35.1181763996856)
                .lon(139.613567052763)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .orthogonalRcs(10.23)
                .orthogonalRcsUnc(1.23)
                .ra(1.23)
                .rcs(100.23)
                .rcsUnc(1.23)
                .satNo(40699)
                .snr(17.292053)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .timingBias(1.23)
                .tof(0.00592856674135648)
                .tofBias(0.00000123)
                .tofUnc(0.0000031)
                .trackId("12212")
                .transactionId("TRANSACTION-ID")
                .type("RADAR")
                .uct(false)
                .xvel(1.23)
                .yvel(3.21)
                .zvel(3.12)
                .build()

        val roundtrippedPassiveRadarObservationListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(passiveRadarObservationListResponse),
                jacksonTypeRef<PassiveRadarObservationListResponse>(),
            )

        assertThat(roundtrippedPassiveRadarObservationListResponse)
            .isEqualTo(passiveRadarObservationListResponse)
    }
}
