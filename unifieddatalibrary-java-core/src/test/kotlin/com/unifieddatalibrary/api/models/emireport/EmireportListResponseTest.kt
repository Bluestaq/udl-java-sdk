// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.emireport

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EmireportListResponseTest {

    @Test
    fun create() {
        val emireportListResponse =
            EmireportListResponse.builder()
                .classificationMarking("U")
                .dataMode(EmireportListResponse.DataMode.TEST)
                .isr(true)
                .reportId("REPORT-ID")
                .reportTime(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
                .reportType("SATCOM")
                .requestAssist(true)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .actionsTaken("verified connections, cables and antenna pointing angles")
                .affActivity("UPLINK")
                .alt(1750.0)
                .aor("NORTHCOM")
                .band("SHF")
                .beamPattern("MAIN LOBE")
                .channel("10C-10CU")
                .chanPirate(false)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Interference on channel")
                .dneImpact(
                    "Text description of the duration, nature and extent (DNE) of the impact."
                )
                .emiType("BARRAGE")
                .endTime(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
                .frequency(1575.42)
                .geoLocErrEllp(listOf(1300.0, 700.0, 35.0))
                .gpsEncrypted(false)
                .gpsFreq("L1")
                .highAffectedFrequency(1725.0)
                .idOnOrbit("25724")
                .intercept(false)
                .interceptLang("ENGLISH")
                .interceptType("VOICE")
                .intSrcAmplitude(0.275)
                .intSrcBandwidth(30.0)
                .intSrcCentFreq(485.7)
                .intSrcEncrypted(false)
                .intSrcModulation("FSK")
                .isrCollectionImpact(false)
                .killBox("7F9SW")
                .lat(38.7375)
                .link("SPOT-21")
                .lon(-104.7889)
                .milGrid("4QFJ12345678")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("25724")
                .persistence("CONTINUOUS")
                .platform("CVN-78")
                .rcvrDemod("FSK")
                .rcvrGain(23.7)
                .rcvrLocation("FORT CARSON GARAGE")
                .rcvrType("OMNI")
                .respService("ARMY")
                .satcomPriority("HIGH")
                .satDownlinkFrequency(47432.5)
                .satDownlinkPolarization("V")
                .satName("MILSTAR DFS-3")
                .satNo(25724)
                .satTransponderId("36097-8433-10C")
                .satUplinkFrequency(44532.1)
                .satUplinkPolarization("H")
                .sourceDl("AXE")
                .status("INITIAL")
                .supportedIsrRole("IMAGERY")
                .system("RADIO")
                .transactionId("TRANSACTION-ID")
                .victimAltCountry("US")
                .victimCountryCode("US")
                .victimFuncImpacts("C2")
                .victimPocMail("bob@jammer.com")
                .victimPocName("Robert Smith")
                .victimPocPhone("7198675309")
                .victimPocUnit("4th Engineering Battalion")
                .victimReaction("TROUBLESHOOT")
                .build()

        assertThat(emireportListResponse.classificationMarking()).isEqualTo("U")
        assertThat(emireportListResponse.dataMode()).isEqualTo(EmireportListResponse.DataMode.TEST)
        assertThat(emireportListResponse.isr()).isEqualTo(true)
        assertThat(emireportListResponse.reportId()).isEqualTo("REPORT-ID")
        assertThat(emireportListResponse.reportTime())
            .isEqualTo(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
        assertThat(emireportListResponse.reportType()).isEqualTo("SATCOM")
        assertThat(emireportListResponse.requestAssist()).isEqualTo(true)
        assertThat(emireportListResponse.source()).isEqualTo("Bluestaq")
        assertThat(emireportListResponse.startTime())
            .isEqualTo(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
        assertThat(emireportListResponse.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(emireportListResponse.actionsTaken())
            .contains("verified connections, cables and antenna pointing angles")
        assertThat(emireportListResponse.affActivity()).contains("UPLINK")
        assertThat(emireportListResponse.alt()).contains(1750.0)
        assertThat(emireportListResponse.aor()).contains("NORTHCOM")
        assertThat(emireportListResponse.band()).contains("SHF")
        assertThat(emireportListResponse.beamPattern()).contains("MAIN LOBE")
        assertThat(emireportListResponse.channel()).contains("10C-10CU")
        assertThat(emireportListResponse.chanPirate()).contains(false)
        assertThat(emireportListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(emireportListResponse.createdBy()).contains("some.user")
        assertThat(emireportListResponse.description()).contains("Interference on channel")
        assertThat(emireportListResponse.dneImpact())
            .contains("Text description of the duration, nature and extent (DNE) of the impact.")
        assertThat(emireportListResponse.emiType()).contains("BARRAGE")
        assertThat(emireportListResponse.endTime())
            .contains(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
        assertThat(emireportListResponse.frequency()).contains(1575.42)
        assertThat(emireportListResponse.geoLocErrEllp().getOrNull())
            .containsExactly(1300.0, 700.0, 35.0)
        assertThat(emireportListResponse.gpsEncrypted()).contains(false)
        assertThat(emireportListResponse.gpsFreq()).contains("L1")
        assertThat(emireportListResponse.highAffectedFrequency()).contains(1725.0)
        assertThat(emireportListResponse.idOnOrbit()).contains("25724")
        assertThat(emireportListResponse.intercept()).contains(false)
        assertThat(emireportListResponse.interceptLang()).contains("ENGLISH")
        assertThat(emireportListResponse.interceptType()).contains("VOICE")
        assertThat(emireportListResponse.intSrcAmplitude()).contains(0.275)
        assertThat(emireportListResponse.intSrcBandwidth()).contains(30.0)
        assertThat(emireportListResponse.intSrcCentFreq()).contains(485.7)
        assertThat(emireportListResponse.intSrcEncrypted()).contains(false)
        assertThat(emireportListResponse.intSrcModulation()).contains("FSK")
        assertThat(emireportListResponse.isrCollectionImpact()).contains(false)
        assertThat(emireportListResponse.killBox()).contains("7F9SW")
        assertThat(emireportListResponse.lat()).contains(38.7375)
        assertThat(emireportListResponse.link()).contains("SPOT-21")
        assertThat(emireportListResponse.lon()).contains(-104.7889)
        assertThat(emireportListResponse.milGrid()).contains("4QFJ12345678")
        assertThat(emireportListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(emireportListResponse.origNetwork()).contains("OPS1")
        assertThat(emireportListResponse.origObjectId()).contains("25724")
        assertThat(emireportListResponse.persistence()).contains("CONTINUOUS")
        assertThat(emireportListResponse.platform()).contains("CVN-78")
        assertThat(emireportListResponse.rcvrDemod()).contains("FSK")
        assertThat(emireportListResponse.rcvrGain()).contains(23.7)
        assertThat(emireportListResponse.rcvrLocation()).contains("FORT CARSON GARAGE")
        assertThat(emireportListResponse.rcvrType()).contains("OMNI")
        assertThat(emireportListResponse.respService()).contains("ARMY")
        assertThat(emireportListResponse.satcomPriority()).contains("HIGH")
        assertThat(emireportListResponse.satDownlinkFrequency()).contains(47432.5)
        assertThat(emireportListResponse.satDownlinkPolarization()).contains("V")
        assertThat(emireportListResponse.satName()).contains("MILSTAR DFS-3")
        assertThat(emireportListResponse.satNo()).contains(25724)
        assertThat(emireportListResponse.satTransponderId()).contains("36097-8433-10C")
        assertThat(emireportListResponse.satUplinkFrequency()).contains(44532.1)
        assertThat(emireportListResponse.satUplinkPolarization()).contains("H")
        assertThat(emireportListResponse.sourceDl()).contains("AXE")
        assertThat(emireportListResponse.status()).contains("INITIAL")
        assertThat(emireportListResponse.supportedIsrRole()).contains("IMAGERY")
        assertThat(emireportListResponse.system()).contains("RADIO")
        assertThat(emireportListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(emireportListResponse.victimAltCountry()).contains("US")
        assertThat(emireportListResponse.victimCountryCode()).contains("US")
        assertThat(emireportListResponse.victimFuncImpacts()).contains("C2")
        assertThat(emireportListResponse.victimPocMail()).contains("bob@jammer.com")
        assertThat(emireportListResponse.victimPocName()).contains("Robert Smith")
        assertThat(emireportListResponse.victimPocPhone()).contains("7198675309")
        assertThat(emireportListResponse.victimPocUnit()).contains("4th Engineering Battalion")
        assertThat(emireportListResponse.victimReaction()).contains("TROUBLESHOOT")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val emireportListResponse =
            EmireportListResponse.builder()
                .classificationMarking("U")
                .dataMode(EmireportListResponse.DataMode.TEST)
                .isr(true)
                .reportId("REPORT-ID")
                .reportTime(OffsetDateTime.parse("2025-01-07T21:47:40.438Z"))
                .reportType("SATCOM")
                .requestAssist(true)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2025-01-07T20:16:03.989Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .actionsTaken("verified connections, cables and antenna pointing angles")
                .affActivity("UPLINK")
                .alt(1750.0)
                .aor("NORTHCOM")
                .band("SHF")
                .beamPattern("MAIN LOBE")
                .channel("10C-10CU")
                .chanPirate(false)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Interference on channel")
                .dneImpact(
                    "Text description of the duration, nature and extent (DNE) of the impact."
                )
                .emiType("BARRAGE")
                .endTime(OffsetDateTime.parse("2025-01-07T21:30:51.672Z"))
                .frequency(1575.42)
                .geoLocErrEllp(listOf(1300.0, 700.0, 35.0))
                .gpsEncrypted(false)
                .gpsFreq("L1")
                .highAffectedFrequency(1725.0)
                .idOnOrbit("25724")
                .intercept(false)
                .interceptLang("ENGLISH")
                .interceptType("VOICE")
                .intSrcAmplitude(0.275)
                .intSrcBandwidth(30.0)
                .intSrcCentFreq(485.7)
                .intSrcEncrypted(false)
                .intSrcModulation("FSK")
                .isrCollectionImpact(false)
                .killBox("7F9SW")
                .lat(38.7375)
                .link("SPOT-21")
                .lon(-104.7889)
                .milGrid("4QFJ12345678")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("25724")
                .persistence("CONTINUOUS")
                .platform("CVN-78")
                .rcvrDemod("FSK")
                .rcvrGain(23.7)
                .rcvrLocation("FORT CARSON GARAGE")
                .rcvrType("OMNI")
                .respService("ARMY")
                .satcomPriority("HIGH")
                .satDownlinkFrequency(47432.5)
                .satDownlinkPolarization("V")
                .satName("MILSTAR DFS-3")
                .satNo(25724)
                .satTransponderId("36097-8433-10C")
                .satUplinkFrequency(44532.1)
                .satUplinkPolarization("H")
                .sourceDl("AXE")
                .status("INITIAL")
                .supportedIsrRole("IMAGERY")
                .system("RADIO")
                .transactionId("TRANSACTION-ID")
                .victimAltCountry("US")
                .victimCountryCode("US")
                .victimFuncImpacts("C2")
                .victimPocMail("bob@jammer.com")
                .victimPocName("Robert Smith")
                .victimPocPhone("7198675309")
                .victimPocUnit("4th Engineering Battalion")
                .victimReaction("TROUBLESHOOT")
                .build()

        val roundtrippedEmireportListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(emireportListResponse),
                jacksonTypeRef<EmireportListResponse>(),
            )

        assertThat(roundtrippedEmireportListResponse).isEqualTo(emireportListResponse)
    }
}
