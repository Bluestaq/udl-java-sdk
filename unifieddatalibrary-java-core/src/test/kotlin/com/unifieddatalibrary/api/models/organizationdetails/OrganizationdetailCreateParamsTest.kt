// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.organizationdetails

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrganizationdetailCreateParamsTest {

    @Test
    fun create() {
        OrganizationdetailCreateParams.builder()
            .classificationMarking("U")
            .dataMode(OrganizationdetailCreateParams.DataMode.TEST)
            .idOrganization("ORGANIZATION-ID")
            .name("some.user")
            .source("some.user")
            .id("ORGANIZATIONDETAILS-ID")
            .address1("123 Main Street")
            .address2("Apt 4B")
            .address3("Colorado Springs CO, 80903")
            .broker("some.user")
            .ceo("some.user")
            .cfo("some.user")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .cto("some.user")
            .description("Example description")
            .ebitda(123.4)
            .email("some_organization@organization.com")
            .financialNotes("Example notes")
            .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .fleetPlanNotes("Example notes")
            .formerOrgId("FORMERORG-ID")
            .ftes(123)
            .geoAdminLevel1("Colorado")
            .geoAdminLevel2("El Paso County")
            .geoAdminLevel3("Colorado Springs")
            .massRanking(123)
            .origin("some.user")
            .origNetwork("OPS1")
            .parentOrgId("PARENTORG-ID")
            .postalCode("80903")
            .profit(123.4)
            .revenue(123.4)
            .revenueRanking(123)
            .riskManager("some.user")
            .servicesNotes("Example notes")
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .build()
    }

    @Test
    fun body() {
        val params =
            OrganizationdetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OrganizationdetailCreateParams.DataMode.TEST)
                .idOrganization("ORGANIZATION-ID")
                .name("some.user")
                .source("some.user")
                .id("ORGANIZATIONDETAILS-ID")
                .address1("123 Main Street")
                .address2("Apt 4B")
                .address3("Colorado Springs CO, 80903")
                .broker("some.user")
                .ceo("some.user")
                .cfo("some.user")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cto("some.user")
                .description("Example description")
                .ebitda(123.4)
                .email("some_organization@organization.com")
                .financialNotes("Example notes")
                .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .fleetPlanNotes("Example notes")
                .formerOrgId("FORMERORG-ID")
                .ftes(123)
                .geoAdminLevel1("Colorado")
                .geoAdminLevel2("El Paso County")
                .geoAdminLevel3("Colorado Springs")
                .massRanking(123)
                .origin("some.user")
                .origNetwork("OPS1")
                .parentOrgId("PARENTORG-ID")
                .postalCode("80903")
                .profit(123.4)
                .revenue(123.4)
                .revenueRanking(123)
                .riskManager("some.user")
                .servicesNotes("Example notes")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OrganizationdetailCreateParams.DataMode.TEST)
        assertThat(body.idOrganization()).isEqualTo("ORGANIZATION-ID")
        assertThat(body.name()).isEqualTo("some.user")
        assertThat(body.source()).isEqualTo("some.user")
        assertThat(body.id()).contains("ORGANIZATIONDETAILS-ID")
        assertThat(body.address1()).contains("123 Main Street")
        assertThat(body.address2()).contains("Apt 4B")
        assertThat(body.address3()).contains("Colorado Springs CO, 80903")
        assertThat(body.broker()).contains("some.user")
        assertThat(body.ceo()).contains("some.user")
        assertThat(body.cfo()).contains("some.user")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.cto()).contains("some.user")
        assertThat(body.description()).contains("Example description")
        assertThat(body.ebitda()).contains(123.4)
        assertThat(body.email()).contains("some_organization@organization.com")
        assertThat(body.financialNotes()).contains("Example notes")
        assertThat(body.financialYearEndDate())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.fleetPlanNotes()).contains("Example notes")
        assertThat(body.formerOrgId()).contains("FORMERORG-ID")
        assertThat(body.ftes()).contains(123)
        assertThat(body.geoAdminLevel1()).contains("Colorado")
        assertThat(body.geoAdminLevel2()).contains("El Paso County")
        assertThat(body.geoAdminLevel3()).contains("Colorado Springs")
        assertThat(body.massRanking()).contains(123)
        assertThat(body.origin()).contains("some.user")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.parentOrgId()).contains("PARENTORG-ID")
        assertThat(body.postalCode()).contains("80903")
        assertThat(body.profit()).contains(123.4)
        assertThat(body.revenue()).contains(123.4)
        assertThat(body.revenueRanking()).contains(123)
        assertThat(body.riskManager()).contains("some.user")
        assertThat(body.servicesNotes()).contains("Example notes")
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OrganizationdetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OrganizationdetailCreateParams.DataMode.TEST)
                .idOrganization("ORGANIZATION-ID")
                .name("some.user")
                .source("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OrganizationdetailCreateParams.DataMode.TEST)
        assertThat(body.idOrganization()).isEqualTo("ORGANIZATION-ID")
        assertThat(body.name()).isEqualTo("some.user")
        assertThat(body.source()).isEqualTo("some.user")
    }
}
