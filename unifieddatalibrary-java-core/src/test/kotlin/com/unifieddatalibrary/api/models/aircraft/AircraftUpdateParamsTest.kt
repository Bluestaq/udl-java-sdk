// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.aircraft

import com.unifieddatalibrary.api.models.aircraft.AircraftUpdateParams
import com.unifieddatalibrary.api.models.entities.EntityIngest
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftUpdateParamsTest {

    @Test
    fun create() {
      AircraftUpdateParams.builder()
          .pathId("id")
          .aircraftMds("E-2C HAWKEYE")
          .classificationMarking("U")
          .dataMode(AircraftUpdateParams.DataMode.TEST)
          .source("Bluestaq")
          .bodyId("0167f577-e06c-358e-85aa-0a07a730bdd0")
          .category("M")
          .command("HQACC")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cruiseSpeed(915.0)
          .dtd("005")
          .entity(EntityIngest.builder()
              .classificationMarking("U")
              .dataMode(EntityIngest.DataMode.TEST)
              .name("Example name")
              .source("Bluestaq")
              .type(EntityIngest.Type.ONORBIT)
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .idEntity("ENTITY-ID")
              .idLocation("LOCATION-ID")
              .idOnOrbit("ONORBIT-ID")
              .idOperatingUnit("OPERATINGUNIT-ID")
              .location(LocationIngest.builder()
                  .classificationMarking("U")
                  .dataMode(LocationIngest.DataMode.TEST)
                  .name("Example location")
                  .source("Bluestaq")
                  .altitude(10.23)
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .idLocation("LOCATION-ID")
                  .lat(45.23)
                  .lon(179.1)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .build())
              .onOrbit(EntityIngest.OnOrbit.builder()
                  .classificationMarking("U")
                  .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                  .satNo(1)
                  .source("Bluestaq")
                  .altName("Alternate Name")
                  .category(EntityIngest.OnOrbit.Category.LUNAR)
                  .commonName("Example common name")
                  .constellation("Big Dipper")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .idOnOrbit("ONORBIT-ID")
                  .intlDes("2021123ABC")
                  .launchDate(LocalDate.parse("2018-01-01"))
                  .launchSiteId("LAUNCHSITE-ID")
                  .lifetimeYears(10)
                  .missionNumber("Expedition 1")
                  .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .ownerType(EntityIngest.OwnerType.COMMERCIAL)
              .taskable(false)
              .addUrl("URL1")
              .addUrl("URL2")
              .build())
          .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
          .maxSpeed(2655.1)
          .minReqRunwayFt(3000)
          .minReqRunwayM(1000)
          .nominalTaTime(500)
          .notes("Notes for this aircraft")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .owner("437AW")
          .serialNumber("7007187")
          .sourceDl("AXE")
          .tailNumber("N702JG")
          .build()
    }

    @Test
    fun pathParams() {
      val params = AircraftUpdateParams.builder()
          .pathId("id")
          .aircraftMds("E-2C HAWKEYE")
          .classificationMarking("U")
          .dataMode(AircraftUpdateParams.DataMode.TEST)
          .source("Bluestaq")
          .build()

      assertThat(params._pathParam(0)).isEqualTo("id")
      // out-of-bound path param
      assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
      val params = AircraftUpdateParams.builder()
          .pathId("id")
          .aircraftMds("E-2C HAWKEYE")
          .classificationMarking("U")
          .dataMode(AircraftUpdateParams.DataMode.TEST)
          .source("Bluestaq")
          .bodyId("0167f577-e06c-358e-85aa-0a07a730bdd0")
          .category("M")
          .command("HQACC")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cruiseSpeed(915.0)
          .dtd("005")
          .entity(EntityIngest.builder()
              .classificationMarking("U")
              .dataMode(EntityIngest.DataMode.TEST)
              .name("Example name")
              .source("Bluestaq")
              .type(EntityIngest.Type.ONORBIT)
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .idEntity("ENTITY-ID")
              .idLocation("LOCATION-ID")
              .idOnOrbit("ONORBIT-ID")
              .idOperatingUnit("OPERATINGUNIT-ID")
              .location(LocationIngest.builder()
                  .classificationMarking("U")
                  .dataMode(LocationIngest.DataMode.TEST)
                  .name("Example location")
                  .source("Bluestaq")
                  .altitude(10.23)
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .idLocation("LOCATION-ID")
                  .lat(45.23)
                  .lon(179.1)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .build())
              .onOrbit(EntityIngest.OnOrbit.builder()
                  .classificationMarking("U")
                  .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                  .satNo(1)
                  .source("Bluestaq")
                  .altName("Alternate Name")
                  .category(EntityIngest.OnOrbit.Category.LUNAR)
                  .commonName("Example common name")
                  .constellation("Big Dipper")
                  .countryCode("US")
                  .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .createdBy("some.user")
                  .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                  .idOnOrbit("ONORBIT-ID")
                  .intlDes("2021123ABC")
                  .launchDate(LocalDate.parse("2018-01-01"))
                  .launchSiteId("LAUNCHSITE-ID")
                  .lifetimeYears(10)
                  .missionNumber("Expedition 1")
                  .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                  .origin("THIRD_PARTY_DATASOURCE")
                  .origNetwork("OPS1")
                  .build())
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .ownerType(EntityIngest.OwnerType.COMMERCIAL)
              .taskable(false)
              .addUrl("URL1")
              .addUrl("URL2")
              .build())
          .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
          .maxSpeed(2655.1)
          .minReqRunwayFt(3000)
          .minReqRunwayM(1000)
          .nominalTaTime(500)
          .notes("Notes for this aircraft")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .owner("437AW")
          .serialNumber("7007187")
          .sourceDl("AXE")
          .tailNumber("N702JG")
          .build()

      val body = params._body()

      assertThat(body.aircraftMds()).isEqualTo("E-2C HAWKEYE")
      assertThat(body.classificationMarking()).isEqualTo("U")
      assertThat(body.dataMode()).isEqualTo(AircraftUpdateParams.DataMode.TEST)
      assertThat(body.source()).isEqualTo("Bluestaq")
      assertThat(body.bodyId()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
      assertThat(body.category()).contains("M")
      assertThat(body.command()).contains("HQACC")
      assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(body.createdBy()).contains("some.user")
      assertThat(body.cruiseSpeed()).contains(915.0)
      assertThat(body.dtd()).contains("005")
      assertThat(body.entity()).contains(EntityIngest.builder()
          .classificationMarking("U")
          .dataMode(EntityIngest.DataMode.TEST)
          .name("Example name")
          .source("Bluestaq")
          .type(EntityIngest.Type.ONORBIT)
          .countryCode("US")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .idEntity("ENTITY-ID")
          .idLocation("LOCATION-ID")
          .idOnOrbit("ONORBIT-ID")
          .idOperatingUnit("OPERATINGUNIT-ID")
          .location(LocationIngest.builder()
              .classificationMarking("U")
              .dataMode(LocationIngest.DataMode.TEST)
              .name("Example location")
              .source("Bluestaq")
              .altitude(10.23)
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .idLocation("LOCATION-ID")
              .lat(45.23)
              .lon(179.1)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .build())
          .onOrbit(EntityIngest.OnOrbit.builder()
              .classificationMarking("U")
              .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
              .satNo(1)
              .source("Bluestaq")
              .altName("Alternate Name")
              .category(EntityIngest.OnOrbit.Category.LUNAR)
              .commonName("Example common name")
              .constellation("Big Dipper")
              .countryCode("US")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .idOnOrbit("ONORBIT-ID")
              .intlDes("2021123ABC")
              .launchDate(LocalDate.parse("2018-01-01"))
              .launchSiteId("LAUNCHSITE-ID")
              .lifetimeYears(10)
              .missionNumber("Expedition 1")
              .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("OPS1")
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .ownerType(EntityIngest.OwnerType.COMMERCIAL)
          .taskable(false)
          .addUrl("URL1")
          .addUrl("URL2")
          .build())
      assertThat(body.idEntity()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
      assertThat(body.maxSpeed()).contains(2655.1)
      assertThat(body.minReqRunwayFt()).contains(3000)
      assertThat(body.minReqRunwayM()).contains(1000)
      assertThat(body.nominalTaTime()).contains(500)
      assertThat(body.notes()).contains("Notes for this aircraft")
      assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(body.origNetwork()).contains("OPS1")
      assertThat(body.owner()).contains("437AW")
      assertThat(body.serialNumber()).contains("7007187")
      assertThat(body.sourceDl()).contains("AXE")
      assertThat(body.tailNumber()).contains("N702JG")
    }

    @Test
    fun bodyWithoutOptionalFields() {
      val params = AircraftUpdateParams.builder()
          .pathId("id")
          .aircraftMds("E-2C HAWKEYE")
          .classificationMarking("U")
          .dataMode(AircraftUpdateParams.DataMode.TEST)
          .source("Bluestaq")
          .build()

      val body = params._body()

      assertThat(body.aircraftMds()).isEqualTo("E-2C HAWKEYE")
      assertThat(body.classificationMarking()).isEqualTo("U")
      assertThat(body.dataMode()).isEqualTo(AircraftUpdateParams.DataMode.TEST)
      assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
