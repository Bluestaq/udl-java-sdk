// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.entities

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.LocationAbridged
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EntityAbridgedTest {

    @Test
    fun create() {
        val entityAbridged =
            EntityAbridged.builder()
                .classificationMarking("U")
                .dataMode(EntityAbridged.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .type(EntityAbridged.Type.ONORBIT)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idEntity("ENTITY-ID")
                .idLocation("LOCATION-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .location(
                    LocationAbridged.builder()
                        .classificationMarking("U")
                        .dataMode(LocationAbridged.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .onOrbit(
                    EntityAbridged.OnOrbit.builder()
                        .classificationMarking("U")
                        .dataMode(EntityAbridged.OnOrbit.DataMode.TEST)
                        .satNo(1)
                        .source("Bluestaq")
                        .altName("Alternate Name")
                        .category(EntityAbridged.OnOrbit.Category.LUNAR)
                        .commonName("Example common name")
                        .constellation("Big Dipper")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .idOnOrbit("ONORBIT-ID")
                        .intlDes("2021123ABC")
                        .launchDate(LocalDate.parse("2018-01-01"))
                        .launchSiteId("LAUNCHSITE-ID")
                        .lifetimeYears(10)
                        .missionNumber("Expedition 1")
                        .objectType(EntityAbridged.OnOrbit.ObjectType.PAYLOAD)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerType(EntityAbridged.OwnerType.COMMERCIAL)
                .taskable(false)
                .build()

        assertThat(entityAbridged.classificationMarking()).isEqualTo("U")
        assertThat(entityAbridged.dataMode()).isEqualTo(EntityAbridged.DataMode.TEST)
        assertThat(entityAbridged.name()).isEqualTo("Example name")
        assertThat(entityAbridged.source()).isEqualTo("Bluestaq")
        assertThat(entityAbridged.type()).isEqualTo(EntityAbridged.Type.ONORBIT)
        assertThat(entityAbridged.countryCode()).contains("US")
        assertThat(entityAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(entityAbridged.createdBy()).contains("some.user")
        assertThat(entityAbridged.idEntity()).contains("ENTITY-ID")
        assertThat(entityAbridged.idLocation()).contains("LOCATION-ID")
        assertThat(entityAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(entityAbridged.idOperatingUnit()).contains("OPERATINGUNIT-ID")
        assertThat(entityAbridged.location())
            .contains(
                LocationAbridged.builder()
                    .classificationMarking("U")
                    .dataMode(LocationAbridged.DataMode.TEST)
                    .name("Example location")
                    .source("Bluestaq")
                    .altitude(10.23)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idLocation("LOCATION-ID")
                    .lat(45.23)
                    .lon(179.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .build()
            )
        assertThat(entityAbridged.onOrbit())
            .contains(
                EntityAbridged.OnOrbit.builder()
                    .classificationMarking("U")
                    .dataMode(EntityAbridged.OnOrbit.DataMode.TEST)
                    .satNo(1)
                    .source("Bluestaq")
                    .altName("Alternate Name")
                    .category(EntityAbridged.OnOrbit.Category.LUNAR)
                    .commonName("Example common name")
                    .constellation("Big Dipper")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .idOnOrbit("ONORBIT-ID")
                    .intlDes("2021123ABC")
                    .launchDate(LocalDate.parse("2018-01-01"))
                    .launchSiteId("LAUNCHSITE-ID")
                    .lifetimeYears(10)
                    .missionNumber("Expedition 1")
                    .objectType(EntityAbridged.OnOrbit.ObjectType.PAYLOAD)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .build()
            )
        assertThat(entityAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(entityAbridged.origNetwork()).contains("OPS1")
        assertThat(entityAbridged.ownerType()).contains(EntityAbridged.OwnerType.COMMERCIAL)
        assertThat(entityAbridged.taskable()).contains(false)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val entityAbridged =
            EntityAbridged.builder()
                .classificationMarking("U")
                .dataMode(EntityAbridged.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .type(EntityAbridged.Type.ONORBIT)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .idEntity("ENTITY-ID")
                .idLocation("LOCATION-ID")
                .idOnOrbit("ONORBIT-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .location(
                    LocationAbridged.builder()
                        .classificationMarking("U")
                        .dataMode(LocationAbridged.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .onOrbit(
                    EntityAbridged.OnOrbit.builder()
                        .classificationMarking("U")
                        .dataMode(EntityAbridged.OnOrbit.DataMode.TEST)
                        .satNo(1)
                        .source("Bluestaq")
                        .altName("Alternate Name")
                        .category(EntityAbridged.OnOrbit.Category.LUNAR)
                        .commonName("Example common name")
                        .constellation("Big Dipper")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .idOnOrbit("ONORBIT-ID")
                        .intlDes("2021123ABC")
                        .launchDate(LocalDate.parse("2018-01-01"))
                        .launchSiteId("LAUNCHSITE-ID")
                        .lifetimeYears(10)
                        .missionNumber("Expedition 1")
                        .objectType(EntityAbridged.OnOrbit.ObjectType.PAYLOAD)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerType(EntityAbridged.OwnerType.COMMERCIAL)
                .taskable(false)
                .build()

        val roundtrippedEntityAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(entityAbridged),
                jacksonTypeRef<EntityAbridged>(),
            )

        assertThat(roundtrippedEntityAbridged).isEqualTo(entityAbridged)
    }
}
