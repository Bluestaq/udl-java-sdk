// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sitestatus

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SiteStatusTupleResponseTest {

    @Test
    fun create() {
        val siteStatusTupleResponse =
            SiteStatusTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(SiteStatusTupleResponse.DataMode.TEST)
                .idSite("41e3e554-9790-40b9-bd7b-f30d864dcad8")
                .source("Bluestaq")
                .id("SITESTATUS-ID")
                .cat(SiteStatusTupleResponse.Cat.COLD)
                .coldInventory(1)
                .commImpairment("commImpairment")
                .cpcon(SiteStatusTupleResponse.Cpcon._4)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .eoc(SiteStatusTupleResponse.Eoc.WARM)
                .fpcon(SiteStatusTupleResponse.Fpcon.BRAVO)
                .hotInventory(1)
                .hpcon(SiteStatusTupleResponse.Hpcon.CHARLIE)
                .instStatus(SiteStatusTupleResponse.InstStatus.PMC)
                .link(listOf("ATDL", "IJMS", "LINK-1"))
                .linkStatus(listOf("AVAILABLE", "DEGRADED", "NOT AVAILABLE"))
                .missile(listOf("GMD", "HARPOON", "JAVELIN"))
                .missileInventory(listOf(5, 10, 100))
                .mobileAltId("MOBILEALT-ID")
                .opsCapability("Fully Operational")
                .opsImpairment("opsImpairment")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .pes(true)
                .poiid("d4a91864-6140-4b8d-67cd-45421c75f696")
                .radarStatus(listOf("OPERATIONAL", "OFF", "NON-OPERATIONAL"))
                .radarSystem(listOf("ILLUMINATING", "MODE-4", "MODE-3"))
                .radiateMode("Active")
                .reportTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .samMode("Initialization")
                .siteType("ADOC")
                .timeFunction("Activation")
                .trackId("PCM4923-1656174732-4-1-257")
                .trackRefL16("TrkNm")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .weatherMessage("Heavy rain")
                .build()

        assertThat(siteStatusTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(siteStatusTupleResponse.dataMode())
            .isEqualTo(SiteStatusTupleResponse.DataMode.TEST)
        assertThat(siteStatusTupleResponse.idSite())
            .isEqualTo("41e3e554-9790-40b9-bd7b-f30d864dcad8")
        assertThat(siteStatusTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(siteStatusTupleResponse.id()).contains("SITESTATUS-ID")
        assertThat(siteStatusTupleResponse.cat()).contains(SiteStatusTupleResponse.Cat.COLD)
        assertThat(siteStatusTupleResponse.coldInventory()).contains(1)
        assertThat(siteStatusTupleResponse.commImpairment()).contains("commImpairment")
        assertThat(siteStatusTupleResponse.cpcon()).contains(SiteStatusTupleResponse.Cpcon._4)
        assertThat(siteStatusTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(siteStatusTupleResponse.createdBy()).contains("some.user")
        assertThat(siteStatusTupleResponse.eoc()).contains(SiteStatusTupleResponse.Eoc.WARM)
        assertThat(siteStatusTupleResponse.fpcon()).contains(SiteStatusTupleResponse.Fpcon.BRAVO)
        assertThat(siteStatusTupleResponse.hotInventory()).contains(1)
        assertThat(siteStatusTupleResponse.hpcon()).contains(SiteStatusTupleResponse.Hpcon.CHARLIE)
        assertThat(siteStatusTupleResponse.instStatus())
            .contains(SiteStatusTupleResponse.InstStatus.PMC)
        assertThat(siteStatusTupleResponse.link().getOrNull())
            .containsExactly("ATDL", "IJMS", "LINK-1")
        assertThat(siteStatusTupleResponse.linkStatus().getOrNull())
            .containsExactly("AVAILABLE", "DEGRADED", "NOT AVAILABLE")
        assertThat(siteStatusTupleResponse.missile().getOrNull())
            .containsExactly("GMD", "HARPOON", "JAVELIN")
        assertThat(siteStatusTupleResponse.missileInventory().getOrNull())
            .containsExactly(5, 10, 100)
        assertThat(siteStatusTupleResponse.mobileAltId()).contains("MOBILEALT-ID")
        assertThat(siteStatusTupleResponse.opsCapability()).contains("Fully Operational")
        assertThat(siteStatusTupleResponse.opsImpairment()).contains("opsImpairment")
        assertThat(siteStatusTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(siteStatusTupleResponse.origNetwork()).contains("OPS1")
        assertThat(siteStatusTupleResponse.pes()).contains(true)
        assertThat(siteStatusTupleResponse.poiid()).contains("d4a91864-6140-4b8d-67cd-45421c75f696")
        assertThat(siteStatusTupleResponse.radarStatus().getOrNull())
            .containsExactly("OPERATIONAL", "OFF", "NON-OPERATIONAL")
        assertThat(siteStatusTupleResponse.radarSystem().getOrNull())
            .containsExactly("ILLUMINATING", "MODE-4", "MODE-3")
        assertThat(siteStatusTupleResponse.radiateMode()).contains("Active")
        assertThat(siteStatusTupleResponse.reportTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(siteStatusTupleResponse.samMode()).contains("Initialization")
        assertThat(siteStatusTupleResponse.siteType()).contains("ADOC")
        assertThat(siteStatusTupleResponse.timeFunction()).contains("Activation")
        assertThat(siteStatusTupleResponse.trackId()).contains("PCM4923-1656174732-4-1-257")
        assertThat(siteStatusTupleResponse.trackRefL16()).contains("TrkNm")
        assertThat(siteStatusTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(siteStatusTupleResponse.updatedBy()).contains("some.user")
        assertThat(siteStatusTupleResponse.weatherMessage()).contains("Heavy rain")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val siteStatusTupleResponse =
            SiteStatusTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(SiteStatusTupleResponse.DataMode.TEST)
                .idSite("41e3e554-9790-40b9-bd7b-f30d864dcad8")
                .source("Bluestaq")
                .id("SITESTATUS-ID")
                .cat(SiteStatusTupleResponse.Cat.COLD)
                .coldInventory(1)
                .commImpairment("commImpairment")
                .cpcon(SiteStatusTupleResponse.Cpcon._4)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .eoc(SiteStatusTupleResponse.Eoc.WARM)
                .fpcon(SiteStatusTupleResponse.Fpcon.BRAVO)
                .hotInventory(1)
                .hpcon(SiteStatusTupleResponse.Hpcon.CHARLIE)
                .instStatus(SiteStatusTupleResponse.InstStatus.PMC)
                .link(listOf("ATDL", "IJMS", "LINK-1"))
                .linkStatus(listOf("AVAILABLE", "DEGRADED", "NOT AVAILABLE"))
                .missile(listOf("GMD", "HARPOON", "JAVELIN"))
                .missileInventory(listOf(5, 10, 100))
                .mobileAltId("MOBILEALT-ID")
                .opsCapability("Fully Operational")
                .opsImpairment("opsImpairment")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .pes(true)
                .poiid("d4a91864-6140-4b8d-67cd-45421c75f696")
                .radarStatus(listOf("OPERATIONAL", "OFF", "NON-OPERATIONAL"))
                .radarSystem(listOf("ILLUMINATING", "MODE-4", "MODE-3"))
                .radiateMode("Active")
                .reportTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .samMode("Initialization")
                .siteType("ADOC")
                .timeFunction("Activation")
                .trackId("PCM4923-1656174732-4-1-257")
                .trackRefL16("TrkNm")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .weatherMessage("Heavy rain")
                .build()

        val roundtrippedSiteStatusTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(siteStatusTupleResponse),
                jacksonTypeRef<SiteStatusTupleResponse>(),
            )

        assertThat(roundtrippedSiteStatusTupleResponse).isEqualTo(siteStatusTupleResponse)
    }
}
