// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.effectresponses

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.effectresponses.EffectResponseActionsListFull
import com.unifieddatalibrary.api.models.effectresponses.EffectResponseMetricsFull
import com.unifieddatalibrary.api.models.effectresponses.EffectResponseRetrieveResponse
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EffectResponseRetrieveResponseTest {

    @Test
    fun create() {
      val effectResponseRetrieveResponse = EffectResponseRetrieveResponse.builder()
          .classificationMarking("U")
          .dataMode(EffectResponseRetrieveResponse.DataMode.TEST)
          .source("Bluestaq")
          .type("COA")
          .id("EFFECTRESPONSE-ID")
          .addActionsList(EffectResponseActionsListFull.builder()
              .actionActorSrcId("ACTIONACTORSRC-ID")
              .actionActorSrcType("AIRCRAFT")
              .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .actionId("ACTION-ID")
              .addActionMetric(EffectResponseMetricsFull.builder()
                  .domainValue(10.1)
                  .metricType("GoalAchievement")
                  .provenance("Example metric")
                  .relativeValue(10.1)
                  .build())
              .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .actorInterceptAlt(1.1)
              .actorInterceptLat(45.1)
              .actorInterceptLon(180.1)
              .effector("SENSOR1")
              .summary("Example summary")
              .targetSrcId("TARGETSRC-ID")
              .targetSrcType("POI")
              .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .weaponInterceptAlt(1.1)
              .weaponInterceptLat(45.1)
              .weaponInterceptLon(180.1)
              .build())
          .actorSrcId("RC-ID")
          .actorSrcType("AIRCRAFT")
          .addCoaMetric(EffectResponseMetricsFull.builder()
              .domainValue(10.1)
              .metricType("GoalAchievement")
              .provenance("Example metric")
              .relativeValue(10.1)
              .build())
          .collateralDamageEst(0.5)
          .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .addExternalAction("ACTION1")
          .addExternalAction("ACTION2")
          .externalRequestId("EXTERNALREQUEST-ID")
          .idEffectRequest("EFFECTREQUEST-ID")
          .munitionId("MUNITION-ID")
          .munitionType("Dummy")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .probabilityOfKill(0.7)
          .redTargetSrcId("REDTARGETSRC-ID")
          .redTargetSrcType("POI")
          .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .shotsRequired(10)
          .build()

      assertThat(effectResponseRetrieveResponse.classificationMarking()).isEqualTo("U")
      assertThat(effectResponseRetrieveResponse.dataMode()).isEqualTo(EffectResponseRetrieveResponse.DataMode.TEST)
      assertThat(effectResponseRetrieveResponse.source()).isEqualTo("Bluestaq")
      assertThat(effectResponseRetrieveResponse.type()).isEqualTo("COA")
      assertThat(effectResponseRetrieveResponse.id()).contains("EFFECTRESPONSE-ID")
      assertThat(effectResponseRetrieveResponse.actionsList().getOrNull()).containsExactly(EffectResponseActionsListFull.builder()
          .actionActorSrcId("ACTIONACTORSRC-ID")
          .actionActorSrcType("AIRCRAFT")
          .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .actionId("ACTION-ID")
          .addActionMetric(EffectResponseMetricsFull.builder()
              .domainValue(10.1)
              .metricType("GoalAchievement")
              .provenance("Example metric")
              .relativeValue(10.1)
              .build())
          .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .actorInterceptAlt(1.1)
          .actorInterceptLat(45.1)
          .actorInterceptLon(180.1)
          .effector("SENSOR1")
          .summary("Example summary")
          .targetSrcId("TARGETSRC-ID")
          .targetSrcType("POI")
          .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .weaponInterceptAlt(1.1)
          .weaponInterceptLat(45.1)
          .weaponInterceptLon(180.1)
          .build())
      assertThat(effectResponseRetrieveResponse.actorSrcId()).contains("RC-ID")
      assertThat(effectResponseRetrieveResponse.actorSrcType()).contains("AIRCRAFT")
      assertThat(effectResponseRetrieveResponse.coaMetrics().getOrNull()).containsExactly(EffectResponseMetricsFull.builder()
          .domainValue(10.1)
          .metricType("GoalAchievement")
          .provenance("Example metric")
          .relativeValue(10.1)
          .build())
      assertThat(effectResponseRetrieveResponse.collateralDamageEst()).contains(0.5)
      assertThat(effectResponseRetrieveResponse.createdAt()).contains(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
      assertThat(effectResponseRetrieveResponse.createdBy()).contains("some.user")
      assertThat(effectResponseRetrieveResponse.decisionDeadline()).contains(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
      assertThat(effectResponseRetrieveResponse.externalActions().getOrNull()).containsExactly("ACTION1", "ACTION2")
      assertThat(effectResponseRetrieveResponse.externalRequestId()).contains("EXTERNALREQUEST-ID")
      assertThat(effectResponseRetrieveResponse.idEffectRequest()).contains("EFFECTREQUEST-ID")
      assertThat(effectResponseRetrieveResponse.munitionId()).contains("MUNITION-ID")
      assertThat(effectResponseRetrieveResponse.munitionType()).contains("Dummy")
      assertThat(effectResponseRetrieveResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(effectResponseRetrieveResponse.origNetwork()).contains("ORIG")
      assertThat(effectResponseRetrieveResponse.probabilityOfKill()).contains(0.7)
      assertThat(effectResponseRetrieveResponse.redTargetSrcId()).contains("REDTARGETSRC-ID")
      assertThat(effectResponseRetrieveResponse.redTargetSrcType()).contains("POI")
      assertThat(effectResponseRetrieveResponse.redTimeToOverhead()).contains(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
      assertThat(effectResponseRetrieveResponse.shotsRequired()).contains(10)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val effectResponseRetrieveResponse = EffectResponseRetrieveResponse.builder()
          .classificationMarking("U")
          .dataMode(EffectResponseRetrieveResponse.DataMode.TEST)
          .source("Bluestaq")
          .type("COA")
          .id("EFFECTRESPONSE-ID")
          .addActionsList(EffectResponseActionsListFull.builder()
              .actionActorSrcId("ACTIONACTORSRC-ID")
              .actionActorSrcType("AIRCRAFT")
              .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .actionId("ACTION-ID")
              .addActionMetric(EffectResponseMetricsFull.builder()
                  .domainValue(10.1)
                  .metricType("GoalAchievement")
                  .provenance("Example metric")
                  .relativeValue(10.1)
                  .build())
              .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .actorInterceptAlt(1.1)
              .actorInterceptLat(45.1)
              .actorInterceptLon(180.1)
              .effector("SENSOR1")
              .summary("Example summary")
              .targetSrcId("TARGETSRC-ID")
              .targetSrcType("POI")
              .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
              .weaponInterceptAlt(1.1)
              .weaponInterceptLat(45.1)
              .weaponInterceptLon(180.1)
              .build())
          .actorSrcId("RC-ID")
          .actorSrcType("AIRCRAFT")
          .addCoaMetric(EffectResponseMetricsFull.builder()
              .domainValue(10.1)
              .metricType("GoalAchievement")
              .provenance("Example metric")
              .relativeValue(10.1)
              .build())
          .collateralDamageEst(0.5)
          .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .addExternalAction("ACTION1")
          .addExternalAction("ACTION2")
          .externalRequestId("EXTERNALREQUEST-ID")
          .idEffectRequest("EFFECTREQUEST-ID")
          .munitionId("MUNITION-ID")
          .munitionType("Dummy")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .probabilityOfKill(0.7)
          .redTargetSrcId("REDTARGETSRC-ID")
          .redTargetSrcType("POI")
          .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
          .shotsRequired(10)
          .build()

      val roundtrippedEffectResponseRetrieveResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(effectResponseRetrieveResponse), jacksonTypeRef<EffectResponseRetrieveResponse>())

      assertThat(roundtrippedEffectResponseRetrieveResponse).isEqualTo(effectResponseRetrieveResponse)
    }
}
