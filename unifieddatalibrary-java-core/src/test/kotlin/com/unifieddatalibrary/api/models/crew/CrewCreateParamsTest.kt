// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.crew

import com.unifieddatalibrary.api.models.crew.CrewCreateParams
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CrewCreateParamsTest {

    @Test
    fun create() {
      CrewCreateParams.builder()
          .classificationMarking("U")
          .dataMode(CrewCreateParams.DataMode.TEST)
          .origCrewId("JHJDHjhuu929o92")
          .source("Bluestaq")
          .id("bdad6945-c9e4-b829-f7be-1ad075541921")
          .adjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .adjReturnTimeApprover("Smith")
          .aircraftMds("C017A")
          .alertedTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .alertType("ALPHA")
          .armsCrewUnit("00016ALSQ")
          .addAssignedQualCode("AL")
          .addAssignedQualCode("CS")
          .commanderId("763a1c1e8d2f3c16af825a11e3f1f579")
          .commanderLast4Ssn("1234")
          .commanderName("John Doe")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .crewHome(false)
          .addCrewMember(CrewCreateParams.CrewMember.builder()
              .alerted(true)
              .allSortie(true)
              .approved(true)
              .attached(true)
              .branch("Air Force")
              .civilian(false)
              .commander(false)
              .crewPosition("EP A")
              .dodId("0123456789")
              .dutyPosition("IP")
              .dutyStatus("AGR")
              .emailed(true)
              .extraTime(true)
              .firstName("Freddie")
              .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .fltCurrencyExpId("SS05AM")
              .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .flySquadron("141ARS")
              .funded(true)
              .gender("F")
              .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .gndCurrencyExpId("AH03YM")
              .grounded(true)
              .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .last4Ssn("1234")
              .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .lastName("Smith")
              .loanedTo("Thunderbirds")
              .lodging("Peterson SFB")
              .memberActualAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
              .memberAdjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberAdjReturnTimeApprover("Smith")
              .memberId("12345678abc")
              .memberInitStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberLastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberLegalAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
              .memberPostRestOffset("+05:00")
              .memberPostRestTime(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
              .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberRemarks("Crew member remark")
              .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberSchedAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
              .memberSource("ACTIVE")
              .memberStageName("Falcon Squadron")
              .memberTransportReq(true)
              .memberType("AIRCREW")
              .middleInitial("G")
              .notified(true)
              .phoneNumber("+14155552671")
              .physAvCode("D")
              .physAvStatus("OVERDUE")
              .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .rank("Capt")
              .remarkCode("ABE33")
              .rmsMds("C017A")
              .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
              .squadron("21AS")
              .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .username("fgsmith")
              .wing("60AMW")
              .build())
          .crewName("falcon")
          .crewRms("ARMS")
          .crewRole("DEADHEAD")
          .crewSource("ACTIVE")
          .crewSquadron("21AS")
          .crewType("AIRLAND")
          .crewUnit("00016ALSQ")
          .crewWing("60AMW")
          .currentIcao("KCOS")
          .fdpEligType("A")
          .fdpType("A")
          .femaleEnlistedQty(2)
          .femaleOfficerQty(1)
          .fltAuthNum("KT001")
          .idSiteCurrent("b677cf3b-d44d-450e-8b8f-d23f997f8778")
          .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
          .initStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .lastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .legalAlertTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .legalBravoTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .linkedTask(false)
          .maleEnlistedQty(3)
          .maleOfficerQty(1)
          .missionAlias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
          .missionId("AJM123456123")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .personnelType("AIRCREW")
          .pickupTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .postRestApplied(false)
          .postRestEnd(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
          .postRestOffset("+05:00")
          .preRestApplied(false)
          .preRestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .addReqQualCode("AL")
          .addReqQualCode("CS")
          .returnTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .sourceDl("AXE")
          .stage1Qual("1AXXX")
          .stage2Qual("2AXXX")
          .stage3Qual("3AXXX")
          .stageName("Falcon Squadron")
          .stageTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .status("APPROVED")
          .transportReq(true)
          .tripKit("TK-1234")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()
    }

    @Test
    fun body() {
      val params = CrewCreateParams.builder()
          .classificationMarking("U")
          .dataMode(CrewCreateParams.DataMode.TEST)
          .origCrewId("JHJDHjhuu929o92")
          .source("Bluestaq")
          .id("bdad6945-c9e4-b829-f7be-1ad075541921")
          .adjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .adjReturnTimeApprover("Smith")
          .aircraftMds("C017A")
          .alertedTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .alertType("ALPHA")
          .armsCrewUnit("00016ALSQ")
          .addAssignedQualCode("AL")
          .addAssignedQualCode("CS")
          .commanderId("763a1c1e8d2f3c16af825a11e3f1f579")
          .commanderLast4Ssn("1234")
          .commanderName("John Doe")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .crewHome(false)
          .addCrewMember(CrewCreateParams.CrewMember.builder()
              .alerted(true)
              .allSortie(true)
              .approved(true)
              .attached(true)
              .branch("Air Force")
              .civilian(false)
              .commander(false)
              .crewPosition("EP A")
              .dodId("0123456789")
              .dutyPosition("IP")
              .dutyStatus("AGR")
              .emailed(true)
              .extraTime(true)
              .firstName("Freddie")
              .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .fltCurrencyExpId("SS05AM")
              .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .flySquadron("141ARS")
              .funded(true)
              .gender("F")
              .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .gndCurrencyExpId("AH03YM")
              .grounded(true)
              .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .last4Ssn("1234")
              .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .lastName("Smith")
              .loanedTo("Thunderbirds")
              .lodging("Peterson SFB")
              .memberActualAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
              .memberAdjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberAdjReturnTimeApprover("Smith")
              .memberId("12345678abc")
              .memberInitStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberLastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberLegalAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
              .memberPostRestOffset("+05:00")
              .memberPostRestTime(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
              .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberRemarks("Crew member remark")
              .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .memberSchedAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
              .memberSource("ACTIVE")
              .memberStageName("Falcon Squadron")
              .memberTransportReq(true)
              .memberType("AIRCREW")
              .middleInitial("G")
              .notified(true)
              .phoneNumber("+14155552671")
              .physAvCode("D")
              .physAvStatus("OVERDUE")
              .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .rank("Capt")
              .remarkCode("ABE33")
              .rmsMds("C017A")
              .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
              .squadron("21AS")
              .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .username("fgsmith")
              .wing("60AMW")
              .build())
          .crewName("falcon")
          .crewRms("ARMS")
          .crewRole("DEADHEAD")
          .crewSource("ACTIVE")
          .crewSquadron("21AS")
          .crewType("AIRLAND")
          .crewUnit("00016ALSQ")
          .crewWing("60AMW")
          .currentIcao("KCOS")
          .fdpEligType("A")
          .fdpType("A")
          .femaleEnlistedQty(2)
          .femaleOfficerQty(1)
          .fltAuthNum("KT001")
          .idSiteCurrent("b677cf3b-d44d-450e-8b8f-d23f997f8778")
          .idSortie("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
          .initStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .lastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .legalAlertTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .legalBravoTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .linkedTask(false)
          .maleEnlistedQty(3)
          .maleOfficerQty(1)
          .missionAlias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
          .missionId("AJM123456123")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .personnelType("AIRCREW")
          .pickupTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .postRestApplied(false)
          .postRestEnd(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
          .postRestOffset("+05:00")
          .preRestApplied(false)
          .preRestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .addReqQualCode("AL")
          .addReqQualCode("CS")
          .returnTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .sourceDl("AXE")
          .stage1Qual("1AXXX")
          .stage2Qual("2AXXX")
          .stage3Qual("3AXXX")
          .stageName("Falcon Squadron")
          .stageTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .status("APPROVED")
          .transportReq(true)
          .tripKit("TK-1234")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val body = params._body()

      assertThat(body.classificationMarking()).isEqualTo("U")
      assertThat(body.dataMode()).isEqualTo(CrewCreateParams.DataMode.TEST)
      assertThat(body.origCrewId()).isEqualTo("JHJDHjhuu929o92")
      assertThat(body.source()).isEqualTo("Bluestaq")
      assertThat(body.id()).contains("bdad6945-c9e4-b829-f7be-1ad075541921")
      assertThat(body.adjReturnTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.adjReturnTimeApprover()).contains("Smith")
      assertThat(body.aircraftMds()).contains("C017A")
      assertThat(body.alertedTime()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.alertType()).contains("ALPHA")
      assertThat(body.armsCrewUnit()).contains("00016ALSQ")
      assertThat(body.assignedQualCode().getOrNull()).containsExactly("AL", "CS")
      assertThat(body.commanderId()).contains("763a1c1e8d2f3c16af825a11e3f1f579")
      assertThat(body.commanderLast4Ssn()).contains("1234")
      assertThat(body.commanderName()).contains("John Doe")
      assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.createdBy()).contains("some.user")
      assertThat(body.crewHome()).contains(false)
      assertThat(body.crewMembers().getOrNull()).containsExactly(CrewCreateParams.CrewMember.builder()
          .alerted(true)
          .allSortie(true)
          .approved(true)
          .attached(true)
          .branch("Air Force")
          .civilian(false)
          .commander(false)
          .crewPosition("EP A")
          .dodId("0123456789")
          .dutyPosition("IP")
          .dutyStatus("AGR")
          .emailed(true)
          .extraTime(true)
          .firstName("Freddie")
          .fltCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .fltCurrencyExpId("SS05AM")
          .fltRecDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .fltRecDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .flySquadron("141ARS")
          .funded(true)
          .gender("F")
          .gndCurrencyExp(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .gndCurrencyExpId("AH03YM")
          .grounded(true)
          .guestStart(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .guestStop(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .last4Ssn("1234")
          .lastFltDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .lastName("Smith")
          .loanedTo("Thunderbirds")
          .lodging("Peterson SFB")
          .memberActualAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
          .memberAdjReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberAdjReturnTimeApprover("Smith")
          .memberId("12345678abc")
          .memberInitStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberLastAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberLegalAlertTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberPickupTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
          .memberPostRestOffset("+05:00")
          .memberPostRestTime(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
          .memberPreRestTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberRemarks("Crew member remark")
          .memberReturnTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .memberSchedAlertTime(OffsetDateTime.parse("2024-02-26T09:15:00.123Z"))
          .memberSource("ACTIVE")
          .memberStageName("Falcon Squadron")
          .memberTransportReq(true)
          .memberType("AIRCREW")
          .middleInitial("G")
          .notified(true)
          .phoneNumber("+14155552671")
          .physAvCode("D")
          .physAvStatus("OVERDUE")
          .physDue(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .rank("Capt")
          .remarkCode("ABE33")
          .rmsMds("C017A")
          .showTime(OffsetDateTime.parse("2024-02-26T10:15:00.123Z"))
          .squadron("21AS")
          .trainingDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .username("fgsmith")
          .wing("60AMW")
          .build())
      assertThat(body.crewName()).contains("falcon")
      assertThat(body.crewRms()).contains("ARMS")
      assertThat(body.crewRole()).contains("DEADHEAD")
      assertThat(body.crewSource()).contains("ACTIVE")
      assertThat(body.crewSquadron()).contains("21AS")
      assertThat(body.crewType()).contains("AIRLAND")
      assertThat(body.crewUnit()).contains("00016ALSQ")
      assertThat(body.crewWing()).contains("60AMW")
      assertThat(body.currentIcao()).contains("KCOS")
      assertThat(body.fdpEligType()).contains("A")
      assertThat(body.fdpType()).contains("A")
      assertThat(body.femaleEnlistedQty()).contains(2)
      assertThat(body.femaleOfficerQty()).contains(1)
      assertThat(body.fltAuthNum()).contains("KT001")
      assertThat(body.idSiteCurrent()).contains("b677cf3b-d44d-450e-8b8f-d23f997f8778")
      assertThat(body.idSortie()).contains("4ef3d1e8-ab08-ab70-498f-edc479734e5c")
      assertThat(body.initStartTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.lastAlertTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.legalAlertTime()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.legalBravoTime()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.linkedTask()).contains(false)
      assertThat(body.maleEnlistedQty()).contains(3)
      assertThat(body.maleOfficerQty()).contains(1)
      assertThat(body.missionAlias()).contains("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
      assertThat(body.missionId()).contains("AJM123456123")
      assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(body.origNetwork()).contains("OPS1")
      assertThat(body.personnelType()).contains("AIRCREW")
      assertThat(body.pickupTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.postRestApplied()).contains(false)
      assertThat(body.postRestEnd()).contains(OffsetDateTime.parse("2024-01-02T16:00:00.123Z"))
      assertThat(body.postRestOffset()).contains("+05:00")
      assertThat(body.preRestApplied()).contains(false)
      assertThat(body.preRestStart()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.reqQualCode().getOrNull()).containsExactly("AL", "CS")
      assertThat(body.returnTime()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.sourceDl()).contains("AXE")
      assertThat(body.stage1Qual()).contains("1AXXX")
      assertThat(body.stage2Qual()).contains("2AXXX")
      assertThat(body.stage3Qual()).contains("3AXXX")
      assertThat(body.stageName()).contains("Falcon Squadron")
      assertThat(body.stageTime()).contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(body.status()).contains("APPROVED")
      assertThat(body.transportReq()).contains(true)
      assertThat(body.tripKit()).contains("TK-1234")
      assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(body.updatedBy()).contains("some.user")
    }

    @Test
    fun bodyWithoutOptionalFields() {
      val params = CrewCreateParams.builder()
          .classificationMarking("U")
          .dataMode(CrewCreateParams.DataMode.TEST)
          .origCrewId("JHJDHjhuu929o92")
          .source("Bluestaq")
          .build()

      val body = params._body()

      assertThat(body.classificationMarking()).isEqualTo("U")
      assertThat(body.dataMode()).isEqualTo(CrewCreateParams.DataMode.TEST)
      assertThat(body.origCrewId()).isEqualTo("JHJDHjhuu929o92")
      assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
