// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrganizationFullTest {

    @Test
    fun create() {
        val organizationFull =
            OrganizationFull.builder()
                .classificationMarking("U")
                .dataMode(OrganizationFull.DataMode.TEST)
                .name("some.user")
                .source("some.user")
                .type("GOVERNMENT")
                .id("ORGANIZATION-ID")
                .active(false)
                .category("Private company")
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Example description")
                .externalId("EXTERNAL-ID")
                .nationality("US")
                .addOrganizationDetail(
                    OrganizationDetailsFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                        .idOrganization("ORGANIZATION-ID")
                        .name("some.user")
                        .source("some.user")
                        .id("ORGANIZATIONDETAILS-ID")
                        .address1("123 Main Street")
                        .address2("Apt 4B")
                        .address3("Colorado Springs CO, 80903")
                        .broker("some.user")
                        .ceo("some.user")
                        .cfo("some.user")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .cto("some.user")
                        .description("Example description")
                        .ebitda(123.4)
                        .email("some_organization@organization.com")
                        .financialNotes("Example notes")
                        .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                        .fleetPlanNotes("Example notes")
                        .formerOrgId("FORMERORG-ID")
                        .ftes(123)
                        .geoAdminLevel1("Colorado")
                        .geoAdminLevel2("El Paso County")
                        .geoAdminLevel3("Colorado Springs")
                        .massRanking(123)
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .parentOrgId("PARENTORG-ID")
                        .postalCode("80903")
                        .profit(123.4)
                        .revenue(123.4)
                        .revenueRanking(123)
                        .riskManager("some.user")
                        .servicesNotes("Example notes")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("some.user")
                .origNetwork("OPS1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(organizationFull.classificationMarking()).isEqualTo("U")
        assertThat(organizationFull.dataMode()).isEqualTo(OrganizationFull.DataMode.TEST)
        assertThat(organizationFull.name()).isEqualTo("some.user")
        assertThat(organizationFull.source()).isEqualTo("some.user")
        assertThat(organizationFull.type()).isEqualTo("GOVERNMENT")
        assertThat(organizationFull.id()).contains("ORGANIZATION-ID")
        assertThat(organizationFull.active()).contains(false)
        assertThat(organizationFull.category()).contains("Private company")
        assertThat(organizationFull.countryCode()).contains("US")
        assertThat(organizationFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(organizationFull.createdBy()).contains("some.user")
        assertThat(organizationFull.description()).contains("Example description")
        assertThat(organizationFull.externalId()).contains("EXTERNAL-ID")
        assertThat(organizationFull.nationality()).contains("US")
        assertThat(organizationFull.organizationDetails().getOrNull())
            .containsExactly(
                OrganizationDetailsFull.builder()
                    .classificationMarking("U")
                    .dataMode(OrganizationDetailsFull.DataMode.TEST)
                    .idOrganization("ORGANIZATION-ID")
                    .name("some.user")
                    .source("some.user")
                    .id("ORGANIZATIONDETAILS-ID")
                    .address1("123 Main Street")
                    .address2("Apt 4B")
                    .address3("Colorado Springs CO, 80903")
                    .broker("some.user")
                    .ceo("some.user")
                    .cfo("some.user")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .cto("some.user")
                    .description("Example description")
                    .ebitda(123.4)
                    .email("some_organization@organization.com")
                    .financialNotes("Example notes")
                    .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                    .fleetPlanNotes("Example notes")
                    .formerOrgId("FORMERORG-ID")
                    .ftes(123)
                    .geoAdminLevel1("Colorado")
                    .geoAdminLevel2("El Paso County")
                    .geoAdminLevel3("Colorado Springs")
                    .massRanking(123)
                    .origin("some.user")
                    .origNetwork("OPS1")
                    .parentOrgId("PARENTORG-ID")
                    .postalCode("80903")
                    .profit(123.4)
                    .revenue(123.4)
                    .revenueRanking(123)
                    .riskManager("some.user")
                    .servicesNotes("Example notes")
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(organizationFull.origin()).contains("some.user")
        assertThat(organizationFull.origNetwork()).contains("OPS1")
        assertThat(organizationFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(organizationFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val organizationFull =
            OrganizationFull.builder()
                .classificationMarking("U")
                .dataMode(OrganizationFull.DataMode.TEST)
                .name("some.user")
                .source("some.user")
                .type("GOVERNMENT")
                .id("ORGANIZATION-ID")
                .active(false)
                .category("Private company")
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Example description")
                .externalId("EXTERNAL-ID")
                .nationality("US")
                .addOrganizationDetail(
                    OrganizationDetailsFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                        .idOrganization("ORGANIZATION-ID")
                        .name("some.user")
                        .source("some.user")
                        .id("ORGANIZATIONDETAILS-ID")
                        .address1("123 Main Street")
                        .address2("Apt 4B")
                        .address3("Colorado Springs CO, 80903")
                        .broker("some.user")
                        .ceo("some.user")
                        .cfo("some.user")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .cto("some.user")
                        .description("Example description")
                        .ebitda(123.4)
                        .email("some_organization@organization.com")
                        .financialNotes("Example notes")
                        .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                        .fleetPlanNotes("Example notes")
                        .formerOrgId("FORMERORG-ID")
                        .ftes(123)
                        .geoAdminLevel1("Colorado")
                        .geoAdminLevel2("El Paso County")
                        .geoAdminLevel3("Colorado Springs")
                        .massRanking(123)
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .parentOrgId("PARENTORG-ID")
                        .postalCode("80903")
                        .profit(123.4)
                        .revenue(123.4)
                        .revenueRanking(123)
                        .riskManager("some.user")
                        .servicesNotes("Example notes")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .origin("some.user")
                .origNetwork("OPS1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedOrganizationFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(organizationFull),
                jacksonTypeRef<OrganizationFull>(),
            )

        assertThat(roundtrippedOrganizationFull).isEqualTo(organizationFull)
    }
}
