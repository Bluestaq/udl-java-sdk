// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.trackroute

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TrackRouteIngestTest {

    @Test
    fun create() {
        val trackRouteIngest =
            TrackRouteIngest.builder()
                .classificationMarking("U")
                .dataMode(TrackRouteIngest.DataMode.TEST)
                .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .source("Bluestaq")
                .type("AIR REFUELING")
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAltitudeBlock(
                    AltitudeBlocksIngest.builder()
                        .altitudeSequenceId("A1")
                        .lowerAltitude(27000.1)
                        .upperAltitude(27200.5)
                        .build()
                )
                .apnSetting("1-3-1")
                .apxBeaconCode("5/1")
                .artccMessage("OAKLAND CTR/GUAM CERAP")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .creatingOrg("HQPAC")
                .direction("NE")
                .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .externalId("GDSSMH121004232315303094")
                .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .locationTrackId("POACHR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPoc(
                    PointOfContactIngest.builder()
                        .office("A34")
                        .phone("8675309")
                        .pocName("Fred Smith")
                        .pocOrg("HQAF")
                        .pocSequenceId(1)
                        .pocTypeName("Originator")
                        .rank("Capt")
                        .remark("POC remark.")
                        .username("fgsmith")
                        .build()
                )
                .priFreq(357.5)
                .receiverTankerChCode("31/094")
                .regionCode("5")
                .regionName("North America")
                .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
                .addRoutePoint(
                    RoutePointsIngest.builder()
                        .altCountryCode("IZ")
                        .countryCode("NL")
                        .dafifPt(true)
                        .magDec(7.35)
                        .navaid("HTO")
                        .navaidLength(100.2)
                        .navaidType("VORTAC")
                        .ptLat(45.23)
                        .ptLon(179.1)
                        .ptSequenceId(1)
                        .ptTypeCode("EP")
                        .ptTypeName("ENTRY POINT")
                        .waypointName("KCHS")
                        .build()
                )
                .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
                .schedulerOrgUnit("612 AOC")
                .secFreq(319.7)
                .shortName("CH61")
                .sic("N")
                .sourceDl("AXE")
                .trackId("CH61A")
                .trackName("CH61 POST")
                .typeCode("V")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(trackRouteIngest.classificationMarking()).isEqualTo("U")
        assertThat(trackRouteIngest.dataMode()).isEqualTo(TrackRouteIngest.DataMode.TEST)
        assertThat(trackRouteIngest.lastUpdateDate())
            .isEqualTo(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(trackRouteIngest.source()).isEqualTo("Bluestaq")
        assertThat(trackRouteIngest.type()).isEqualTo("AIR REFUELING")
        assertThat(trackRouteIngest.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(trackRouteIngest.altitudeBlocks().getOrNull())
            .containsExactly(
                AltitudeBlocksIngest.builder()
                    .altitudeSequenceId("A1")
                    .lowerAltitude(27000.1)
                    .upperAltitude(27200.5)
                    .build()
            )
        assertThat(trackRouteIngest.apnSetting()).contains("1-3-1")
        assertThat(trackRouteIngest.apxBeaconCode()).contains("5/1")
        assertThat(trackRouteIngest.artccMessage()).contains("OAKLAND CTR/GUAM CERAP")
        assertThat(trackRouteIngest.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(trackRouteIngest.createdBy()).contains("some.user")
        assertThat(trackRouteIngest.creatingOrg()).contains("HQPAC")
        assertThat(trackRouteIngest.direction()).contains("NE")
        assertThat(trackRouteIngest.effectiveDate())
            .contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(trackRouteIngest.externalId()).contains("GDSSMH121004232315303094")
        assertThat(trackRouteIngest.lastUsedDate())
            .contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(trackRouteIngest.locationTrackId()).contains("POACHR")
        assertThat(trackRouteIngest.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(trackRouteIngest.origNetwork()).contains("OPS1")
        assertThat(trackRouteIngest.poc().getOrNull())
            .containsExactly(
                PointOfContactIngest.builder()
                    .office("A34")
                    .phone("8675309")
                    .pocName("Fred Smith")
                    .pocOrg("HQAF")
                    .pocSequenceId(1)
                    .pocTypeName("Originator")
                    .rank("Capt")
                    .remark("POC remark.")
                    .username("fgsmith")
                    .build()
            )
        assertThat(trackRouteIngest.priFreq()).contains(357.5)
        assertThat(trackRouteIngest.receiverTankerChCode()).contains("31/094")
        assertThat(trackRouteIngest.regionCode()).contains("5")
        assertThat(trackRouteIngest.regionName()).contains("North America")
        assertThat(trackRouteIngest.reviewDate())
            .contains(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
        assertThat(trackRouteIngest.routePoints().getOrNull())
            .containsExactly(
                RoutePointsIngest.builder()
                    .altCountryCode("IZ")
                    .countryCode("NL")
                    .dafifPt(true)
                    .magDec(7.35)
                    .navaid("HTO")
                    .navaidLength(100.2)
                    .navaidType("VORTAC")
                    .ptLat(45.23)
                    .ptLon(179.1)
                    .ptSequenceId(1)
                    .ptTypeCode("EP")
                    .ptTypeName("ENTRY POINT")
                    .waypointName("KCHS")
                    .build()
            )
        assertThat(trackRouteIngest.schedulerOrgName()).contains("97 OSS/OSOS DSN 866-5555")
        assertThat(trackRouteIngest.schedulerOrgUnit()).contains("612 AOC")
        assertThat(trackRouteIngest.secFreq()).contains(319.7)
        assertThat(trackRouteIngest.shortName()).contains("CH61")
        assertThat(trackRouteIngest.sic()).contains("N")
        assertThat(trackRouteIngest.sourceDl()).contains("AXE")
        assertThat(trackRouteIngest.trackId()).contains("CH61A")
        assertThat(trackRouteIngest.trackName()).contains("CH61 POST")
        assertThat(trackRouteIngest.typeCode()).contains("V")
        assertThat(trackRouteIngest.updatedAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(trackRouteIngest.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val trackRouteIngest =
            TrackRouteIngest.builder()
                .classificationMarking("U")
                .dataMode(TrackRouteIngest.DataMode.TEST)
                .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .source("Bluestaq")
                .type("AIR REFUELING")
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAltitudeBlock(
                    AltitudeBlocksIngest.builder()
                        .altitudeSequenceId("A1")
                        .lowerAltitude(27000.1)
                        .upperAltitude(27200.5)
                        .build()
                )
                .apnSetting("1-3-1")
                .apxBeaconCode("5/1")
                .artccMessage("OAKLAND CTR/GUAM CERAP")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .creatingOrg("HQPAC")
                .direction("NE")
                .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .externalId("GDSSMH121004232315303094")
                .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .locationTrackId("POACHR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPoc(
                    PointOfContactIngest.builder()
                        .office("A34")
                        .phone("8675309")
                        .pocName("Fred Smith")
                        .pocOrg("HQAF")
                        .pocSequenceId(1)
                        .pocTypeName("Originator")
                        .rank("Capt")
                        .remark("POC remark.")
                        .username("fgsmith")
                        .build()
                )
                .priFreq(357.5)
                .receiverTankerChCode("31/094")
                .regionCode("5")
                .regionName("North America")
                .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
                .addRoutePoint(
                    RoutePointsIngest.builder()
                        .altCountryCode("IZ")
                        .countryCode("NL")
                        .dafifPt(true)
                        .magDec(7.35)
                        .navaid("HTO")
                        .navaidLength(100.2)
                        .navaidType("VORTAC")
                        .ptLat(45.23)
                        .ptLon(179.1)
                        .ptSequenceId(1)
                        .ptTypeCode("EP")
                        .ptTypeName("ENTRY POINT")
                        .waypointName("KCHS")
                        .build()
                )
                .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
                .schedulerOrgUnit("612 AOC")
                .secFreq(319.7)
                .shortName("CH61")
                .sic("N")
                .sourceDl("AXE")
                .trackId("CH61A")
                .trackName("CH61 POST")
                .typeCode("V")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedTrackRouteIngest =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(trackRouteIngest),
                jacksonTypeRef<TrackRouteIngest>(),
            )

        assertThat(roundtrippedTrackRouteIngest).isEqualTo(trackRouteIngest)
    }
}
