// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.ephemerissets

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EphemerisSetAbridgedTest {

    @Test
    fun create() {
        val ephemerisSetAbridged =
            EphemerisSetAbridged.builder()
                .category("ANALYST")
                .classificationMarking("U")
                .dataMode(EphemerisSetAbridged.DataMode.TEST)
                .numPoints(1)
                .pointEndTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .pointStartTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("LAUNCH")
                .id("EPHEMERISSET-ID")
                .bDot(1.1)
                .centBody("Earth")
                .comments("Example notes")
                .covReferenceFrame(EphemerisSetAbridged.CovReferenceFrame.J2000)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Example notes")
                .descriptor("Example descriptor")
                .dragModel("JAC70")
                .edr(1.1)
                .filename("Example file name")
                .geopotentialModel("GEM-T3")
                .hasAccel(false)
                .hasCov(false)
                .hasMnvr(false)
                .addIdManeuver("EXAMPLE_ID1")
                .addIdManeuver("EXAMPLE_ID2")
                .idOnOrbit("ONORBIT-ID")
                .idStateVector("STATEVECTOR-ID")
                .integrator("COWELL")
                .interpolation("LINEAR")
                .interpolationDegree(5)
                .lunarSolar(false)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .pedigree("PROPAGATED")
                .referenceFrame(EphemerisSetAbridged.ReferenceFrame.J2000)
                .satNo(2)
                .solidEarthTides(false)
                .stepSize(1L)
                .transactionId("TRANSACTION-ID")
                .usableEndTime(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
                .usableStartTime(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
                .build()

        assertThat(ephemerisSetAbridged.category()).isEqualTo("ANALYST")
        assertThat(ephemerisSetAbridged.classificationMarking()).isEqualTo("U")
        assertThat(ephemerisSetAbridged.dataMode()).isEqualTo(EphemerisSetAbridged.DataMode.TEST)
        assertThat(ephemerisSetAbridged.numPoints()).isEqualTo(1)
        assertThat(ephemerisSetAbridged.pointEndTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(ephemerisSetAbridged.pointStartTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(ephemerisSetAbridged.source()).isEqualTo("Bluestaq")
        assertThat(ephemerisSetAbridged.type()).isEqualTo("LAUNCH")
        assertThat(ephemerisSetAbridged.id()).contains("EPHEMERISSET-ID")
        assertThat(ephemerisSetAbridged.bDot()).contains(1.1)
        assertThat(ephemerisSetAbridged.centBody()).contains("Earth")
        assertThat(ephemerisSetAbridged.comments()).contains("Example notes")
        assertThat(ephemerisSetAbridged.covReferenceFrame())
            .contains(EphemerisSetAbridged.CovReferenceFrame.J2000)
        assertThat(ephemerisSetAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(ephemerisSetAbridged.createdBy()).contains("some.user")
        assertThat(ephemerisSetAbridged.description()).contains("Example notes")
        assertThat(ephemerisSetAbridged.descriptor()).contains("Example descriptor")
        assertThat(ephemerisSetAbridged.dragModel()).contains("JAC70")
        assertThat(ephemerisSetAbridged.edr()).contains(1.1)
        assertThat(ephemerisSetAbridged.filename()).contains("Example file name")
        assertThat(ephemerisSetAbridged.geopotentialModel()).contains("GEM-T3")
        assertThat(ephemerisSetAbridged.hasAccel()).contains(false)
        assertThat(ephemerisSetAbridged.hasCov()).contains(false)
        assertThat(ephemerisSetAbridged.hasMnvr()).contains(false)
        assertThat(ephemerisSetAbridged.idManeuvers().getOrNull())
            .containsExactly("EXAMPLE_ID1", "EXAMPLE_ID2")
        assertThat(ephemerisSetAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(ephemerisSetAbridged.idStateVector()).contains("STATEVECTOR-ID")
        assertThat(ephemerisSetAbridged.integrator()).contains("COWELL")
        assertThat(ephemerisSetAbridged.interpolation()).contains("LINEAR")
        assertThat(ephemerisSetAbridged.interpolationDegree()).contains(5)
        assertThat(ephemerisSetAbridged.lunarSolar()).contains(false)
        assertThat(ephemerisSetAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(ephemerisSetAbridged.origNetwork()).contains("OPS1")
        assertThat(ephemerisSetAbridged.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(ephemerisSetAbridged.pedigree()).contains("PROPAGATED")
        assertThat(ephemerisSetAbridged.referenceFrame())
            .contains(EphemerisSetAbridged.ReferenceFrame.J2000)
        assertThat(ephemerisSetAbridged.satNo()).contains(2)
        assertThat(ephemerisSetAbridged.solidEarthTides()).contains(false)
        assertThat(ephemerisSetAbridged.stepSize()).contains(1L)
        assertThat(ephemerisSetAbridged.transactionId()).contains("TRANSACTION-ID")
        assertThat(ephemerisSetAbridged.usableEndTime())
            .contains(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
        assertThat(ephemerisSetAbridged.usableStartTime())
            .contains(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val ephemerisSetAbridged =
            EphemerisSetAbridged.builder()
                .category("ANALYST")
                .classificationMarking("U")
                .dataMode(EphemerisSetAbridged.DataMode.TEST)
                .numPoints(1)
                .pointEndTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .pointStartTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .type("LAUNCH")
                .id("EPHEMERISSET-ID")
                .bDot(1.1)
                .centBody("Earth")
                .comments("Example notes")
                .covReferenceFrame(EphemerisSetAbridged.CovReferenceFrame.J2000)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Example notes")
                .descriptor("Example descriptor")
                .dragModel("JAC70")
                .edr(1.1)
                .filename("Example file name")
                .geopotentialModel("GEM-T3")
                .hasAccel(false)
                .hasCov(false)
                .hasMnvr(false)
                .addIdManeuver("EXAMPLE_ID1")
                .addIdManeuver("EXAMPLE_ID2")
                .idOnOrbit("ONORBIT-ID")
                .idStateVector("STATEVECTOR-ID")
                .integrator("COWELL")
                .interpolation("LINEAR")
                .interpolationDegree(5)
                .lunarSolar(false)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .pedigree("PROPAGATED")
                .referenceFrame(EphemerisSetAbridged.ReferenceFrame.J2000)
                .satNo(2)
                .solidEarthTides(false)
                .stepSize(1L)
                .transactionId("TRANSACTION-ID")
                .usableEndTime(OffsetDateTime.parse("2018-01-01T20:50:00.123456Z"))
                .usableStartTime(OffsetDateTime.parse("2018-01-01T16:10:00.123456Z"))
                .build()

        val roundtrippedEphemerisSetAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(ephemerisSetAbridged),
                jacksonTypeRef<EphemerisSetAbridged>(),
            )

        assertThat(roundtrippedEphemerisSetAbridged).isEqualTo(ephemerisSetAbridged)
    }
}
