// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.poi

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class PoiUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        PoiUnvalidatedPublishParams.builder()
            .addBody(
                PoiUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PoiUnvalidatedPublishParams.Body.DataMode.TEST)
                    .name("POI_NAME")
                    .poiid("POI-ID")
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .id("POI-ID")
                    .activity("TRAINING")
                    .agjson(
                        "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                    )
                    .alt(5.23)
                    .andims(3)
                    .area(
                        "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                    )
                    .asrid(3)
                    .asset("PLATFORM_NAME")
                    .atext(
                        "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                    )
                    .atype("Type1")
                    .az(45.23)
                    .beNumber("0427RT1030")
                    .ce(10.23)
                    .cntct("Contact Info")
                    .conf(0.5)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .desc("Description of the object")
                    .el(45.23)
                    .elle(listOf(125.5, 85.1, 125.75))
                    .env("SURFACE")
                    .addGroup("GROUP1")
                    .addGroup("GROUP2")
                    .how("h-g-i-g-o")
                    .ident("FRIEND")
                    .addIdWeatherReport("WEATHER-EVENT-ID1")
                    .addIdWeatherReport("WEATHER-EVENT-ID2")
                    .lat(45.23)
                    .le(10.23)
                    .lon(45.23)
                    .msnid("MSN-ID")
                    .orientation(45.23)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .plat("COMBAT_VEHICLE")
                    .pps("BDA")
                    .pri(2)
                    .sourceDl("AXE")
                    .spec("LIGHT_TANK")
                    .addSrcId("ID1")
                    .addSrcId("ID2")
                    .addSrcTyp("TYPE1")
                    .addSrcTyp("TYPE2")
                    .stale(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .start(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .transactionId("TRANSACTION-ID")
                    .trkid("TRK-ID")
                    .type("a-h-G")
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            PoiUnvalidatedPublishParams.builder()
                .addBody(
                    PoiUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(PoiUnvalidatedPublishParams.Body.DataMode.TEST)
                        .name("POI_NAME")
                        .poiid("POI-ID")
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                        .id("POI-ID")
                        .activity("TRAINING")
                        .agjson(
                            "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                        )
                        .alt(5.23)
                        .andims(3)
                        .area(
                            "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                        )
                        .asrid(3)
                        .asset("PLATFORM_NAME")
                        .atext(
                            "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                        )
                        .atype("Type1")
                        .az(45.23)
                        .beNumber("0427RT1030")
                        .ce(10.23)
                        .cntct("Contact Info")
                        .conf(0.5)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .desc("Description of the object")
                        .el(45.23)
                        .elle(listOf(125.5, 85.1, 125.75))
                        .env("SURFACE")
                        .addGroup("GROUP1")
                        .addGroup("GROUP2")
                        .how("h-g-i-g-o")
                        .ident("FRIEND")
                        .addIdWeatherReport("WEATHER-EVENT-ID1")
                        .addIdWeatherReport("WEATHER-EVENT-ID2")
                        .lat(45.23)
                        .le(10.23)
                        .lon(45.23)
                        .msnid("MSN-ID")
                        .orientation(45.23)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .plat("COMBAT_VEHICLE")
                        .pps("BDA")
                        .pri(2)
                        .sourceDl("AXE")
                        .spec("LIGHT_TANK")
                        .addSrcId("ID1")
                        .addSrcId("ID2")
                        .addSrcTyp("TYPE1")
                        .addSrcTyp("TYPE2")
                        .stale(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                        .start(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .transactionId("TRANSACTION-ID")
                        .trkid("TRK-ID")
                        .type("a-h-G")
                        .addUrl("URL1")
                        .addUrl("URL2")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                PoiUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PoiUnvalidatedPublishParams.Body.DataMode.TEST)
                    .name("POI_NAME")
                    .poiid("POI-ID")
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .id("POI-ID")
                    .activity("TRAINING")
                    .agjson(
                        "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                    )
                    .alt(5.23)
                    .andims(3)
                    .area(
                        "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                    )
                    .asrid(3)
                    .asset("PLATFORM_NAME")
                    .atext(
                        "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                    )
                    .atype("Type1")
                    .az(45.23)
                    .beNumber("0427RT1030")
                    .ce(10.23)
                    .cntct("Contact Info")
                    .conf(0.5)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .desc("Description of the object")
                    .el(45.23)
                    .elle(listOf(125.5, 85.1, 125.75))
                    .env("SURFACE")
                    .addGroup("GROUP1")
                    .addGroup("GROUP2")
                    .how("h-g-i-g-o")
                    .ident("FRIEND")
                    .addIdWeatherReport("WEATHER-EVENT-ID1")
                    .addIdWeatherReport("WEATHER-EVENT-ID2")
                    .lat(45.23)
                    .le(10.23)
                    .lon(45.23)
                    .msnid("MSN-ID")
                    .orientation(45.23)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .plat("COMBAT_VEHICLE")
                    .pps("BDA")
                    .pri(2)
                    .sourceDl("AXE")
                    .spec("LIGHT_TANK")
                    .addSrcId("ID1")
                    .addSrcId("ID2")
                    .addSrcTyp("TYPE1")
                    .addSrcTyp("TYPE2")
                    .stale(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .start(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .transactionId("TRANSACTION-ID")
                    .trkid("TRK-ID")
                    .type("a-h-G")
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            PoiUnvalidatedPublishParams.builder()
                .addBody(
                    PoiUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(PoiUnvalidatedPublishParams.Body.DataMode.TEST)
                        .name("POI_NAME")
                        .poiid("POI-ID")
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                PoiUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(PoiUnvalidatedPublishParams.Body.DataMode.TEST)
                    .name("POI_NAME")
                    .poiid("POI-ID")
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2020-01-01T16:00:00.123456Z"))
                    .build()
            )
    }
}
