// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.hazard

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HazardTupleResponseTest {

    @Test
    fun create() {
        val hazardTupleResponse =
            HazardTupleResponse.builder()
                .addAlarm("Alarm1")
                .addAlarm("Alarm2")
                .addAlarmValue(2.7)
                .addAlarmValue(2.9)
                .classificationMarking("U")
                .dataMode(HazardTupleResponse.DataMode.TEST)
                .detectTime(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
                .detectType("Chemical")
                .source("Bluestaq")
                .id("HAZARD-ID")
                .a(238)
                .activity(120.1)
                .bottleId("6264")
                .casRn("64-17-5")
                .channel("Skin")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctrnTime(1.077)
                .density(18900.2)
                .dep(1.084)
                .depCtrn(86.1)
                .dose(1.12)
                .doseRate(1.0000001865)
                .duration(14400)
                .gBar(2.5)
                .harmful(false)
                .hBar(3.1)
                .idPoi("POI-ID")
                .idTrack("TRACK-ID")
                .massFrac(0.029)
                .matCat(3)
                .matClass("Nerve Agent")
                .matName("VX")
                .matType("21")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .ppm(27129)
                .radCtrn(1.31)
                .addReading("Rad1")
                .addReading("Rad2")
                .addReadingUnit("Gray")
                .addReadingUnit("Gray")
                .addReadingValue(107.2)
                .addReadingValue(124.1)
                .z(92)
                .build()

        assertThat(hazardTupleResponse.alarms()).containsExactly("Alarm1", "Alarm2")
        assertThat(hazardTupleResponse.alarmValues()).containsExactly(2.7, 2.9)
        assertThat(hazardTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(hazardTupleResponse.dataMode()).isEqualTo(HazardTupleResponse.DataMode.TEST)
        assertThat(hazardTupleResponse.detectTime())
            .isEqualTo(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
        assertThat(hazardTupleResponse.detectType()).isEqualTo("Chemical")
        assertThat(hazardTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(hazardTupleResponse.id()).contains("HAZARD-ID")
        assertThat(hazardTupleResponse.a()).contains(238)
        assertThat(hazardTupleResponse.activity()).contains(120.1)
        assertThat(hazardTupleResponse.bottleId()).contains("6264")
        assertThat(hazardTupleResponse.casRn()).contains("64-17-5")
        assertThat(hazardTupleResponse.channel()).contains("Skin")
        assertThat(hazardTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(hazardTupleResponse.createdBy()).contains("some.user")
        assertThat(hazardTupleResponse.ctrnTime()).contains(1.077)
        assertThat(hazardTupleResponse.density()).contains(18900.2)
        assertThat(hazardTupleResponse.dep()).contains(1.084)
        assertThat(hazardTupleResponse.depCtrn()).contains(86.1)
        assertThat(hazardTupleResponse.dose()).contains(1.12)
        assertThat(hazardTupleResponse.doseRate()).contains(1.0000001865)
        assertThat(hazardTupleResponse.duration()).contains(14400)
        assertThat(hazardTupleResponse.gBar()).contains(2.5)
        assertThat(hazardTupleResponse.harmful()).contains(false)
        assertThat(hazardTupleResponse.hBar()).contains(3.1)
        assertThat(hazardTupleResponse.idPoi()).contains("POI-ID")
        assertThat(hazardTupleResponse.idTrack()).contains("TRACK-ID")
        assertThat(hazardTupleResponse.massFrac()).contains(0.029)
        assertThat(hazardTupleResponse.matCat()).contains(3)
        assertThat(hazardTupleResponse.matClass()).contains("Nerve Agent")
        assertThat(hazardTupleResponse.matName()).contains("VX")
        assertThat(hazardTupleResponse.matType()).contains("21")
        assertThat(hazardTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(hazardTupleResponse.origNetwork()).contains("ORIG")
        assertThat(hazardTupleResponse.ppm()).contains(27129)
        assertThat(hazardTupleResponse.radCtrn()).contains(1.31)
        assertThat(hazardTupleResponse.readings().getOrNull()).containsExactly("Rad1", "Rad2")
        assertThat(hazardTupleResponse.readingUnits().getOrNull()).containsExactly("Gray", "Gray")
        assertThat(hazardTupleResponse.readingValues().getOrNull()).containsExactly(107.2, 124.1)
        assertThat(hazardTupleResponse.z()).contains(92)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val hazardTupleResponse =
            HazardTupleResponse.builder()
                .addAlarm("Alarm1")
                .addAlarm("Alarm2")
                .addAlarmValue(2.7)
                .addAlarmValue(2.9)
                .classificationMarking("U")
                .dataMode(HazardTupleResponse.DataMode.TEST)
                .detectTime(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
                .detectType("Chemical")
                .source("Bluestaq")
                .id("HAZARD-ID")
                .a(238)
                .activity(120.1)
                .bottleId("6264")
                .casRn("64-17-5")
                .channel("Skin")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctrnTime(1.077)
                .density(18900.2)
                .dep(1.084)
                .depCtrn(86.1)
                .dose(1.12)
                .doseRate(1.0000001865)
                .duration(14400)
                .gBar(2.5)
                .harmful(false)
                .hBar(3.1)
                .idPoi("POI-ID")
                .idTrack("TRACK-ID")
                .massFrac(0.029)
                .matCat(3)
                .matClass("Nerve Agent")
                .matName("VX")
                .matType("21")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .ppm(27129)
                .radCtrn(1.31)
                .addReading("Rad1")
                .addReading("Rad2")
                .addReadingUnit("Gray")
                .addReadingUnit("Gray")
                .addReadingValue(107.2)
                .addReadingValue(124.1)
                .z(92)
                .build()

        val roundtrippedHazardTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(hazardTupleResponse),
                jacksonTypeRef<HazardTupleResponse>(),
            )

        assertThat(roundtrippedHazardTupleResponse).isEqualTo(hazardTupleResponse)
    }
}
