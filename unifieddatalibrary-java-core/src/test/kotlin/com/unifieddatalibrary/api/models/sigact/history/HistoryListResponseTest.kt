// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sigact.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.RelatedDocumentFull
import com.unifieddatalibrary.api.models.SofDataSourceRefFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryListResponseTest {

    @Test
    fun create() {
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .reportDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("SIGACT-ID")
                .accuracy(13)
                .addActor("US")
                .addActor("CAN")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .andims(3L)
                .area(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .asrid(3)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("Type1")
                .avgTone(8.23)
                .cameoBaseCode("Example_cameoBaseCode")
                .cameoCode("CAMEO_CODE")
                .cameoRootCode("Example_cameoRootCode")
                .checksumValue("120EA8A25E5D487BF68B5F7096440019")
                .city("Austin")
                .civAbd(423)
                .civDet(234)
                .civKia(2)
                .civWound(123)
                .clarity(1)
                .coalAbd(123)
                .coalDet(123)
                .coalKia(123)
                .coalWound(123)
                .complexAttack(false)
                .confidence(13)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .district("district 12")
                .documentFilename("Example_documentFilename")
                .documentSource("Example_documentSource")
                .enemyAbd(123)
                .enemyDet(123)
                .enemyKia(123)
                .eventDescription("Example_Description")
                .eventEnd(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
                .eventStart(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
                .eventType("Military")
                .filesize(0L)
                .friendlyAbd(123)
                .friendlyDet(123)
                .friendlyKia(123)
                .friendlyWound(123)
                .goldstein(9.32)
                .hasAttachment(true)
                .hostNatAbd(123)
                .hostNatDet(123)
                .hostNatKia(123)
                .hostNatWound(123)
                .idNumber("NUMBER-ID")
                .lat(45.31)
                .lon(90.23)
                .milgrid("4QFJ12345678")
                .notes("Example_Notes")
                .numArticles(8)
                .numMentions(8)
                .numSources(8)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .province("Province_Example")
                .addRelatedDoc(
                    RelatedDocumentFull.builder()
                        .addDataSourceRef(
                            SofDataSourceRefFull.builder()
                                .dataSourceId("dataSourceId")
                                .endPosition("endPosition")
                                .paragraphNumber("paragraphNumber")
                                .sentenceNumber("sentenceNumber")
                                .startPosition("startPosition")
                                .build()
                        )
                        .documentId("documentId")
                        .build()
                )
                .repUnit("Unit_1")
                .repUnitActivity("Example_Activity")
                .repUnitType("Example_repUnitType")
                .sideAAbd(123)
                .sideADet(123)
                .sideAkia(123)
                .sideAWound(123)
                .sideBAbd(123)
                .sideBDet(123)
                .sideBkia(123)
                .sideBWound(123)
                .sourceLanguage("eng")
                .sourceUrl("Example_URL")
                .summary("Example_Summary")
                .target("US")
                .theater("Kabul")
                .typeOfAttack("IED Explosion")
                .build()

        assertThat(historyListResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyListResponse.dataMode()).isEqualTo(HistoryListResponse.DataMode.TEST)
        assertThat(historyListResponse.reportDate())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyListResponse.id()).contains("SIGACT-ID")
        assertThat(historyListResponse.accuracy()).contains(13)
        assertThat(historyListResponse.actors().getOrNull()).containsExactly("US", "CAN")
        assertThat(historyListResponse.agjson())
            .contains(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
        assertThat(historyListResponse.andims()).contains(3L)
        assertThat(historyListResponse.area())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(historyListResponse.asrid()).contains(3)
        assertThat(historyListResponse.atext())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(historyListResponse.atype()).contains("Type1")
        assertThat(historyListResponse.avgTone()).contains(8.23)
        assertThat(historyListResponse.cameoBaseCode()).contains("Example_cameoBaseCode")
        assertThat(historyListResponse.cameoCode()).contains("CAMEO_CODE")
        assertThat(historyListResponse.cameoRootCode()).contains("Example_cameoRootCode")
        assertThat(historyListResponse.checksumValue()).contains("120EA8A25E5D487BF68B5F7096440019")
        assertThat(historyListResponse.city()).contains("Austin")
        assertThat(historyListResponse.civAbd()).contains(423)
        assertThat(historyListResponse.civDet()).contains(234)
        assertThat(historyListResponse.civKia()).contains(2)
        assertThat(historyListResponse.civWound()).contains(123)
        assertThat(historyListResponse.clarity()).contains(1)
        assertThat(historyListResponse.coalAbd()).contains(123)
        assertThat(historyListResponse.coalDet()).contains(123)
        assertThat(historyListResponse.coalKia()).contains(123)
        assertThat(historyListResponse.coalWound()).contains(123)
        assertThat(historyListResponse.complexAttack()).contains(false)
        assertThat(historyListResponse.confidence()).contains(13)
        assertThat(historyListResponse.countryCode()).contains("US")
        assertThat(historyListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.createdBy()).contains("some.user")
        assertThat(historyListResponse.district()).contains("district 12")
        assertThat(historyListResponse.documentFilename()).contains("Example_documentFilename")
        assertThat(historyListResponse.documentSource()).contains("Example_documentSource")
        assertThat(historyListResponse.enemyAbd()).contains(123)
        assertThat(historyListResponse.enemyDet()).contains(123)
        assertThat(historyListResponse.enemyKia()).contains(123)
        assertThat(historyListResponse.eventDescription()).contains("Example_Description")
        assertThat(historyListResponse.eventEnd())
            .contains(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
        assertThat(historyListResponse.eventStart())
            .contains(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
        assertThat(historyListResponse.eventType()).contains("Military")
        assertThat(historyListResponse.filesize()).contains(0L)
        assertThat(historyListResponse.friendlyAbd()).contains(123)
        assertThat(historyListResponse.friendlyDet()).contains(123)
        assertThat(historyListResponse.friendlyKia()).contains(123)
        assertThat(historyListResponse.friendlyWound()).contains(123)
        assertThat(historyListResponse.goldstein()).contains(9.32)
        assertThat(historyListResponse.hasAttachment()).contains(true)
        assertThat(historyListResponse.hostNatAbd()).contains(123)
        assertThat(historyListResponse.hostNatDet()).contains(123)
        assertThat(historyListResponse.hostNatKia()).contains(123)
        assertThat(historyListResponse.hostNatWound()).contains(123)
        assertThat(historyListResponse.idNumber()).contains("NUMBER-ID")
        assertThat(historyListResponse.lat()).contains(45.31)
        assertThat(historyListResponse.lon()).contains(90.23)
        assertThat(historyListResponse.milgrid()).contains("4QFJ12345678")
        assertThat(historyListResponse.notes()).contains("Example_Notes")
        assertThat(historyListResponse.numArticles()).contains(8)
        assertThat(historyListResponse.numMentions()).contains(8)
        assertThat(historyListResponse.numSources()).contains(8)
        assertThat(historyListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyListResponse.origNetwork()).contains("ORIG")
        assertThat(historyListResponse.province()).contains("Province_Example")
        assertThat(historyListResponse.relatedDocs().getOrNull())
            .containsExactly(
                RelatedDocumentFull.builder()
                    .addDataSourceRef(
                        SofDataSourceRefFull.builder()
                            .dataSourceId("dataSourceId")
                            .endPosition("endPosition")
                            .paragraphNumber("paragraphNumber")
                            .sentenceNumber("sentenceNumber")
                            .startPosition("startPosition")
                            .build()
                    )
                    .documentId("documentId")
                    .build()
            )
        assertThat(historyListResponse.repUnit()).contains("Unit_1")
        assertThat(historyListResponse.repUnitActivity()).contains("Example_Activity")
        assertThat(historyListResponse.repUnitType()).contains("Example_repUnitType")
        assertThat(historyListResponse.sideAAbd()).contains(123)
        assertThat(historyListResponse.sideADet()).contains(123)
        assertThat(historyListResponse.sideAkia()).contains(123)
        assertThat(historyListResponse.sideAWound()).contains(123)
        assertThat(historyListResponse.sideBAbd()).contains(123)
        assertThat(historyListResponse.sideBDet()).contains(123)
        assertThat(historyListResponse.sideBkia()).contains(123)
        assertThat(historyListResponse.sideBWound()).contains(123)
        assertThat(historyListResponse.sourceLanguage()).contains("eng")
        assertThat(historyListResponse.sourceUrl()).contains("Example_URL")
        assertThat(historyListResponse.summary()).contains("Example_Summary")
        assertThat(historyListResponse.target()).contains("US")
        assertThat(historyListResponse.theater()).contains("Kabul")
        assertThat(historyListResponse.typeOfAttack()).contains("IED Explosion")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .reportDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("SIGACT-ID")
                .accuracy(13)
                .addActor("US")
                .addActor("CAN")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .andims(3L)
                .area(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .asrid(3)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("Type1")
                .avgTone(8.23)
                .cameoBaseCode("Example_cameoBaseCode")
                .cameoCode("CAMEO_CODE")
                .cameoRootCode("Example_cameoRootCode")
                .checksumValue("120EA8A25E5D487BF68B5F7096440019")
                .city("Austin")
                .civAbd(423)
                .civDet(234)
                .civKia(2)
                .civWound(123)
                .clarity(1)
                .coalAbd(123)
                .coalDet(123)
                .coalKia(123)
                .coalWound(123)
                .complexAttack(false)
                .confidence(13)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .district("district 12")
                .documentFilename("Example_documentFilename")
                .documentSource("Example_documentSource")
                .enemyAbd(123)
                .enemyDet(123)
                .enemyKia(123)
                .eventDescription("Example_Description")
                .eventEnd(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
                .eventStart(OffsetDateTime.parse("2021-01-01T01:02:03.123Z"))
                .eventType("Military")
                .filesize(0L)
                .friendlyAbd(123)
                .friendlyDet(123)
                .friendlyKia(123)
                .friendlyWound(123)
                .goldstein(9.32)
                .hasAttachment(true)
                .hostNatAbd(123)
                .hostNatDet(123)
                .hostNatKia(123)
                .hostNatWound(123)
                .idNumber("NUMBER-ID")
                .lat(45.31)
                .lon(90.23)
                .milgrid("4QFJ12345678")
                .notes("Example_Notes")
                .numArticles(8)
                .numMentions(8)
                .numSources(8)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .province("Province_Example")
                .addRelatedDoc(
                    RelatedDocumentFull.builder()
                        .addDataSourceRef(
                            SofDataSourceRefFull.builder()
                                .dataSourceId("dataSourceId")
                                .endPosition("endPosition")
                                .paragraphNumber("paragraphNumber")
                                .sentenceNumber("sentenceNumber")
                                .startPosition("startPosition")
                                .build()
                        )
                        .documentId("documentId")
                        .build()
                )
                .repUnit("Unit_1")
                .repUnitActivity("Example_Activity")
                .repUnitType("Example_repUnitType")
                .sideAAbd(123)
                .sideADet(123)
                .sideAkia(123)
                .sideAWound(123)
                .sideBAbd(123)
                .sideBDet(123)
                .sideBkia(123)
                .sideBWound(123)
                .sourceLanguage("eng")
                .sourceUrl("Example_URL")
                .summary("Example_Summary")
                .target("US")
                .theater("Kabul")
                .typeOfAttack("IED Explosion")
                .build()

        val roundtrippedHistoryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyListResponse),
                jacksonTypeRef<HistoryListResponse>(),
            )

        assertThat(roundtrippedHistoryListResponse).isEqualTo(historyListResponse)
    }
}
