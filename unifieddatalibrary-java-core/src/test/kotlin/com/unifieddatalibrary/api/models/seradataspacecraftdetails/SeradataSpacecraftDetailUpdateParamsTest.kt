// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradataspacecraftdetails

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeradataSpacecraftDetailUpdateParamsTest {

    @Test
    fun create() {
        SeradataSpacecraftDetailUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
            .name("name")
            .source("Bluestaq")
            .bodyId("SERADATASPACECRAFTDETAILS-ID")
            .additionalMissionsGroups("additionalMissionsGroups")
            .altitude(36036.6330576414)
            .annualInsuredDepreciationFactor(1.23)
            .annualInsuredDepreciationFactorEstimated(true)
            .apogee(1.23)
            .busId("BUS-ID")
            .capabilityLost(1.23)
            .capacityLost(1.23)
            .catalogNumber(1)
            .collisionRiskCm(1.43)
            .collisionRiskMm(1.33)
            .combinedCostEstimated(true)
            .combinedNewCost(1.23)
            .commercialLaunch(true)
            .constellation("GPS")
            .costEstimated(true)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .cubesatDispenserType("cubesatDispenserType")
            .currentAge(5.898630136986301)
            .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .description("description")
            .designLife(231)
            .dryMass(1.23)
            .expectedLife(231)
            .geoPosition(-8.23)
            .idOnOrbit("503")
            .inclination(1.23)
            .insuranceLossesTotal(0.393)
            .insuranceNotes("Sample Notes")
            .insurancePremiumAtLaunch(1.23)
            .insurancePremiumAtLaunchEstimated(true)
            .insuredAtLaunch(true)
            .insuredValueAtLaunch(1.23)
            .insuredValueLaunchEstimated(true)
            .intlNumber("number")
            .lat(1.23)
            .launchArranger("launchArranger")
            .launchArrangerCountry("USA")
            .launchCharacteristic("Expendable")
            .launchCost(1.23)
            .launchCostEstimated(true)
            .launchCountry("USA")
            .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .launchDateRemarks("launchDateRemarks")
            .launchId("11573")
            .launchMass(1.23)
            .launchNotes("Sample Notes")
            .launchNumber("FN040")
            .launchProvider("launchProvider")
            .launchProviderCountry("USA")
            .launchProviderFlightNumber("launchProviderFlightNumber")
            .launchSiteId("28")
            .launchSiteName("launchSiteName")
            .launchType("Future")
            .launchVehicleId("123")
            .leased(true)
            .lifeLost(1.23)
            .lon(1.23)
            .massCategory("2500 - 3500kg  - Large Satellite")
            .nameAtLaunch("nameAtLaunch")
            .newCost(1.23)
            .notes("Sample Notes")
            .numHumans(1)
            .operator("operator")
            .operatorCountry("USA")
            .orbitCategory("GEO")
            .orbitSubCategory("Geostationary")
            .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .owner("owner")
            .ownerCountry("USA")
            .perigee(1.23)
            .period(1.23)
            .primaryMissionGroup("primaryMissionGroup")
            .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
            .programName("programName")
            .quantity(1)
            .reusableFlights("reusableFlights")
            .reusedHullName("reusedHullName")
            .sector("Commercial")
            .serialNumber("serialNumber")
            .stabilizer("3-Axis")
            .status("Inactive - Retired")
            .totalClaims(1)
            .totalFatalities(1)
            .totalInjuries(1)
            .totalPayloadPower(1.23)
            .youtubeLaunchLink("youtubeLaunchLink")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            SeradataSpacecraftDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
                .name("name")
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            SeradataSpacecraftDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
                .name("name")
                .source("Bluestaq")
                .bodyId("SERADATASPACECRAFTDETAILS-ID")
                .additionalMissionsGroups("additionalMissionsGroups")
                .altitude(36036.6330576414)
                .annualInsuredDepreciationFactor(1.23)
                .annualInsuredDepreciationFactorEstimated(true)
                .apogee(1.23)
                .busId("BUS-ID")
                .capabilityLost(1.23)
                .capacityLost(1.23)
                .catalogNumber(1)
                .collisionRiskCm(1.43)
                .collisionRiskMm(1.33)
                .combinedCostEstimated(true)
                .combinedNewCost(1.23)
                .commercialLaunch(true)
                .constellation("GPS")
                .costEstimated(true)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cubesatDispenserType("cubesatDispenserType")
                .currentAge(5.898630136986301)
                .dateOfObservation(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .description("description")
                .designLife(231)
                .dryMass(1.23)
                .expectedLife(231)
                .geoPosition(-8.23)
                .idOnOrbit("503")
                .inclination(1.23)
                .insuranceLossesTotal(0.393)
                .insuranceNotes("Sample Notes")
                .insurancePremiumAtLaunch(1.23)
                .insurancePremiumAtLaunchEstimated(true)
                .insuredAtLaunch(true)
                .insuredValueAtLaunch(1.23)
                .insuredValueLaunchEstimated(true)
                .intlNumber("number")
                .lat(1.23)
                .launchArranger("launchArranger")
                .launchArrangerCountry("USA")
                .launchCharacteristic("Expendable")
                .launchCost(1.23)
                .launchCostEstimated(true)
                .launchCountry("USA")
                .launchDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .launchDateRemarks("launchDateRemarks")
                .launchId("11573")
                .launchMass(1.23)
                .launchNotes("Sample Notes")
                .launchNumber("FN040")
                .launchProvider("launchProvider")
                .launchProviderCountry("USA")
                .launchProviderFlightNumber("launchProviderFlightNumber")
                .launchSiteId("28")
                .launchSiteName("launchSiteName")
                .launchType("Future")
                .launchVehicleId("123")
                .leased(true)
                .lifeLost(1.23)
                .lon(1.23)
                .massCategory("2500 - 3500kg  - Large Satellite")
                .nameAtLaunch("nameAtLaunch")
                .newCost(1.23)
                .notes("Sample Notes")
                .numHumans(1)
                .operator("operator")
                .operatorCountry("USA")
                .orbitCategory("GEO")
                .orbitSubCategory("Geostationary")
                .orderDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .owner("owner")
                .ownerCountry("USA")
                .perigee(1.23)
                .period(1.23)
                .primaryMissionGroup("primaryMissionGroup")
                .primeManufacturerOrgId("05c43360-382e-4aa2-b875-ed28945ff2e5")
                .programName("programName")
                .quantity(1)
                .reusableFlights("reusableFlights")
                .reusedHullName("reusedHullName")
                .sector("Commercial")
                .serialNumber("serialNumber")
                .stabilizer("3-Axis")
                .status("Inactive - Retired")
                .totalClaims(1)
                .totalFatalities(1)
                .totalInjuries(1)
                .totalPayloadPower(1.23)
                .youtubeLaunchLink("youtubeLaunchLink")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("name")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("SERADATASPACECRAFTDETAILS-ID")
        assertThat(body.additionalMissionsGroups()).contains("additionalMissionsGroups")
        assertThat(body.altitude()).contains(36036.6330576414)
        assertThat(body.annualInsuredDepreciationFactor()).contains(1.23)
        assertThat(body.annualInsuredDepreciationFactorEstimated()).contains(true)
        assertThat(body.apogee()).contains(1.23)
        assertThat(body.busId()).contains("BUS-ID")
        assertThat(body.capabilityLost()).contains(1.23)
        assertThat(body.capacityLost()).contains(1.23)
        assertThat(body.catalogNumber()).contains(1)
        assertThat(body.collisionRiskCm()).contains(1.43)
        assertThat(body.collisionRiskMm()).contains(1.33)
        assertThat(body.combinedCostEstimated()).contains(true)
        assertThat(body.combinedNewCost()).contains(1.23)
        assertThat(body.commercialLaunch()).contains(true)
        assertThat(body.constellation()).contains("GPS")
        assertThat(body.costEstimated()).contains(true)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.cubesatDispenserType()).contains("cubesatDispenserType")
        assertThat(body.currentAge()).contains(5.898630136986301)
        assertThat(body.dateOfObservation())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.description()).contains("description")
        assertThat(body.designLife()).contains(231)
        assertThat(body.dryMass()).contains(1.23)
        assertThat(body.expectedLife()).contains(231)
        assertThat(body.geoPosition()).contains(-8.23)
        assertThat(body.idOnOrbit()).contains("503")
        assertThat(body.inclination()).contains(1.23)
        assertThat(body.insuranceLossesTotal()).contains(0.393)
        assertThat(body.insuranceNotes()).contains("Sample Notes")
        assertThat(body.insurancePremiumAtLaunch()).contains(1.23)
        assertThat(body.insurancePremiumAtLaunchEstimated()).contains(true)
        assertThat(body.insuredAtLaunch()).contains(true)
        assertThat(body.insuredValueAtLaunch()).contains(1.23)
        assertThat(body.insuredValueLaunchEstimated()).contains(true)
        assertThat(body.intlNumber()).contains("number")
        assertThat(body.lat()).contains(1.23)
        assertThat(body.launchArranger()).contains("launchArranger")
        assertThat(body.launchArrangerCountry()).contains("USA")
        assertThat(body.launchCharacteristic()).contains("Expendable")
        assertThat(body.launchCost()).contains(1.23)
        assertThat(body.launchCostEstimated()).contains(true)
        assertThat(body.launchCountry()).contains("USA")
        assertThat(body.launchDate()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.launchDateRemarks()).contains("launchDateRemarks")
        assertThat(body.launchId()).contains("11573")
        assertThat(body.launchMass()).contains(1.23)
        assertThat(body.launchNotes()).contains("Sample Notes")
        assertThat(body.launchNumber()).contains("FN040")
        assertThat(body.launchProvider()).contains("launchProvider")
        assertThat(body.launchProviderCountry()).contains("USA")
        assertThat(body.launchProviderFlightNumber()).contains("launchProviderFlightNumber")
        assertThat(body.launchSiteId()).contains("28")
        assertThat(body.launchSiteName()).contains("launchSiteName")
        assertThat(body.launchType()).contains("Future")
        assertThat(body.launchVehicleId()).contains("123")
        assertThat(body.leased()).contains(true)
        assertThat(body.lifeLost()).contains(1.23)
        assertThat(body.lon()).contains(1.23)
        assertThat(body.massCategory()).contains("2500 - 3500kg  - Large Satellite")
        assertThat(body.nameAtLaunch()).contains("nameAtLaunch")
        assertThat(body.newCost()).contains(1.23)
        assertThat(body.notes()).contains("Sample Notes")
        assertThat(body.numHumans()).contains(1)
        assertThat(body.operator()).contains("operator")
        assertThat(body.operatorCountry()).contains("USA")
        assertThat(body.orbitCategory()).contains("GEO")
        assertThat(body.orbitSubCategory()).contains("Geostationary")
        assertThat(body.orderDate()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.owner()).contains("owner")
        assertThat(body.ownerCountry()).contains("USA")
        assertThat(body.perigee()).contains(1.23)
        assertThat(body.period()).contains(1.23)
        assertThat(body.primaryMissionGroup()).contains("primaryMissionGroup")
        assertThat(body.primeManufacturerOrgId()).contains("05c43360-382e-4aa2-b875-ed28945ff2e5")
        assertThat(body.programName()).contains("programName")
        assertThat(body.quantity()).contains(1)
        assertThat(body.reusableFlights()).contains("reusableFlights")
        assertThat(body.reusedHullName()).contains("reusedHullName")
        assertThat(body.sector()).contains("Commercial")
        assertThat(body.serialNumber()).contains("serialNumber")
        assertThat(body.stabilizer()).contains("3-Axis")
        assertThat(body.status()).contains("Inactive - Retired")
        assertThat(body.totalClaims()).contains(1)
        assertThat(body.totalFatalities()).contains(1)
        assertThat(body.totalInjuries()).contains(1)
        assertThat(body.totalPayloadPower()).contains(1.23)
        assertThat(body.youtubeLaunchLink()).contains("youtubeLaunchLink")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SeradataSpacecraftDetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
                .name("name")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SeradataSpacecraftDetailUpdateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("name")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
