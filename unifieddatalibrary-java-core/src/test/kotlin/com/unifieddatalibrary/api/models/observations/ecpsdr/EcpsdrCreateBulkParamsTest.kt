// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.ecpsdr

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EcpsdrCreateBulkParamsTest {

    @Test
    fun create() {
        EcpsdrCreateBulkParams.builder()
            .addBody(
                EcpsdrCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EcpsdrCreateBulkParams.Body.DataMode.TEST)
                    .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .type("STANDARD")
                    .id("ECPSDR-ID")
                    .asl5VCurrMon(12)
                    .cdsPlateVMon(12)
                    .cdsRefVMon(12)
                    .cdsThreshold(12)
                    .cdsThrottle(12)
                    .checksum(12)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .dosBias(12)
                    .dsl5VCurrMon(12)
                    .esdTrigCountH(12)
                    .esdTrigCountL(12)
                    .hiLetL(2)
                    .hiLetM(2)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .lowLetL(2)
                    .lowLetM(2)
                    .medLet1L(2)
                    .medLet1M(2)
                    .medLet2L(2)
                    .medLet2M(2)
                    .medLet3L(2)
                    .medLet3M(2)
                    .medLet4L(2)
                    .medLet4M(2)
                    .mpTemp(12)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .pd1SigLev(12)
                    .pd2SigLev(12)
                    .psTempMon(12)
                    .retransmit(true)
                    .satNo(101)
                    .senMode("TEST")
                    .surfDosChargeH(12)
                    .surfDosChargeL(12)
                    .surfDosH(12)
                    .surfDosL(12)
                    .surfDosM(12)
                    .surfDosStat(2)
                    .transientData(listOf(1, 2, 3))
                    .vRef(12)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            EcpsdrCreateBulkParams.builder()
                .addBody(
                    EcpsdrCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(EcpsdrCreateBulkParams.Body.DataMode.TEST)
                        .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .source("Bluestaq")
                        .type("STANDARD")
                        .id("ECPSDR-ID")
                        .asl5VCurrMon(12)
                        .cdsPlateVMon(12)
                        .cdsRefVMon(12)
                        .cdsThreshold(12)
                        .cdsThrottle(12)
                        .checksum(12)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .dosBias(12)
                        .dsl5VCurrMon(12)
                        .esdTrigCountH(12)
                        .esdTrigCountL(12)
                        .hiLetL(2)
                        .hiLetM(2)
                        .idOnOrbit("ONORBIT-ID")
                        .idSensor("SENSOR-ID")
                        .lowLetL(2)
                        .lowLetM(2)
                        .medLet1L(2)
                        .medLet1M(2)
                        .medLet2L(2)
                        .medLet2M(2)
                        .medLet3L(2)
                        .medLet3M(2)
                        .medLet4L(2)
                        .medLet4M(2)
                        .mpTemp(12)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("ORIGOBJECT-ID")
                        .origSensorId("ORIGSENSOR-ID")
                        .pd1SigLev(12)
                        .pd2SigLev(12)
                        .psTempMon(12)
                        .retransmit(true)
                        .satNo(101)
                        .senMode("TEST")
                        .surfDosChargeH(12)
                        .surfDosChargeL(12)
                        .surfDosH(12)
                        .surfDosL(12)
                        .surfDosM(12)
                        .surfDosStat(2)
                        .transientData(listOf(1, 2, 3))
                        .vRef(12)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                EcpsdrCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EcpsdrCreateBulkParams.Body.DataMode.TEST)
                    .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .type("STANDARD")
                    .id("ECPSDR-ID")
                    .asl5VCurrMon(12)
                    .cdsPlateVMon(12)
                    .cdsRefVMon(12)
                    .cdsThreshold(12)
                    .cdsThrottle(12)
                    .checksum(12)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .dosBias(12)
                    .dsl5VCurrMon(12)
                    .esdTrigCountH(12)
                    .esdTrigCountL(12)
                    .hiLetL(2)
                    .hiLetM(2)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .lowLetL(2)
                    .lowLetM(2)
                    .medLet1L(2)
                    .medLet1M(2)
                    .medLet2L(2)
                    .medLet2M(2)
                    .medLet3L(2)
                    .medLet3M(2)
                    .medLet4L(2)
                    .medLet4M(2)
                    .mpTemp(12)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .pd1SigLev(12)
                    .pd2SigLev(12)
                    .psTempMon(12)
                    .retransmit(true)
                    .satNo(101)
                    .senMode("TEST")
                    .surfDosChargeH(12)
                    .surfDosChargeL(12)
                    .surfDosH(12)
                    .surfDosL(12)
                    .surfDosM(12)
                    .surfDosStat(2)
                    .transientData(listOf(1, 2, 3))
                    .vRef(12)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EcpsdrCreateBulkParams.builder()
                .addBody(
                    EcpsdrCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(EcpsdrCreateBulkParams.Body.DataMode.TEST)
                        .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .source("Bluestaq")
                        .type("STANDARD")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                EcpsdrCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EcpsdrCreateBulkParams.Body.DataMode.TEST)
                    .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .type("STANDARD")
                    .build()
            )
    }
}
