// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.stage

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StageUpdateParamsTest {

    @Test
    fun create() {
        StageUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(StageUpdateParams.DataMode.TEST)
            .idEngine("ENGINE-ID")
            .idLaunchVehicle("LAUNCHVEHICLE-ID")
            .source("Bluestaq")
            .bodyId("STAGE-ID")
            .avionicsNotes("Sample Notes")
            .burnTime(256.3)
            .controlThruster1("controlThruster1")
            .controlThruster2("controlThruster2")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .diameter(3.95)
            .length(25.13)
            .mainEngineThrustSeaLevel(733.4)
            .mainEngineThrustVacuum(733.4)
            .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
            .mass(9956.1)
            .notes("Sample Notes")
            .numBurns(1)
            .numControlThruster1(1)
            .numControlThruster2(1)
            .numEngines(1)
            .numStageElements(2)
            .numVernier(3)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .addPhotoUrl("photoURL")
            .restartable(true)
            .reusable(true)
            .stageNumber(2)
            .addTag("TAG1")
            .addTag("TAG2")
            .thrustSeaLevel(733.4)
            .thrustVacuum(733.4)
            .type("Electrostatic Ion")
            .vernier("vernier")
            .vernierBurnTime(1.1)
            .vernierNumBurns(4)
            .vernierThrustSeaLevel(4.1)
            .vernierThrustVacuum(3.2)
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            StageUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(StageUpdateParams.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            StageUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(StageUpdateParams.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .bodyId("STAGE-ID")
                .avionicsNotes("Sample Notes")
                .burnTime(256.3)
                .controlThruster1("controlThruster1")
                .controlThruster2("controlThruster2")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .diameter(3.95)
                .length(25.13)
                .mainEngineThrustSeaLevel(733.4)
                .mainEngineThrustVacuum(733.4)
                .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                .mass(9956.1)
                .notes("Sample Notes")
                .numBurns(1)
                .numControlThruster1(1)
                .numControlThruster2(1)
                .numEngines(1)
                .numStageElements(2)
                .numVernier(3)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPhotoUrl("photoURL")
                .restartable(true)
                .reusable(true)
                .stageNumber(2)
                .addTag("TAG1")
                .addTag("TAG2")
                .thrustSeaLevel(733.4)
                .thrustVacuum(733.4)
                .type("Electrostatic Ion")
                .vernier("vernier")
                .vernierBurnTime(1.1)
                .vernierNumBurns(4)
                .vernierThrustSeaLevel(4.1)
                .vernierThrustVacuum(3.2)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(StageUpdateParams.DataMode.TEST)
        assertThat(body.idEngine()).isEqualTo("ENGINE-ID")
        assertThat(body.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("STAGE-ID")
        assertThat(body.avionicsNotes()).contains("Sample Notes")
        assertThat(body.burnTime()).contains(256.3)
        assertThat(body.controlThruster1()).contains("controlThruster1")
        assertThat(body.controlThruster2()).contains("controlThruster2")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.diameter()).contains(3.95)
        assertThat(body.length()).contains(25.13)
        assertThat(body.mainEngineThrustSeaLevel()).contains(733.4)
        assertThat(body.mainEngineThrustVacuum()).contains(733.4)
        assertThat(body.manufacturerOrgId()).contains("5feed5d7-d131-57e5-a3fd-acc173bca736")
        assertThat(body.mass()).contains(9956.1)
        assertThat(body.notes()).contains("Sample Notes")
        assertThat(body.numBurns()).contains(1)
        assertThat(body.numControlThruster1()).contains(1)
        assertThat(body.numControlThruster2()).contains(1)
        assertThat(body.numEngines()).contains(1)
        assertThat(body.numStageElements()).contains(2)
        assertThat(body.numVernier()).contains(3)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.photoUrls().getOrNull()).containsExactly("photoURL")
        assertThat(body.restartable()).contains(true)
        assertThat(body.reusable()).contains(true)
        assertThat(body.stageNumber()).contains(2)
        assertThat(body.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(body.thrustSeaLevel()).contains(733.4)
        assertThat(body.thrustVacuum()).contains(733.4)
        assertThat(body.type()).contains("Electrostatic Ion")
        assertThat(body.vernier()).contains("vernier")
        assertThat(body.vernierBurnTime()).contains(1.1)
        assertThat(body.vernierNumBurns()).contains(4)
        assertThat(body.vernierThrustSeaLevel()).contains(4.1)
        assertThat(body.vernierThrustVacuum()).contains(3.2)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            StageUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(StageUpdateParams.DataMode.TEST)
                .idEngine("ENGINE-ID")
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(StageUpdateParams.DataMode.TEST)
        assertThat(body.idEngine()).isEqualTo("ENGINE-ID")
        assertThat(body.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
