// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirfieldstatusFullTest {

    @Test
    fun create() {
        val airfieldstatusFull =
            AirfieldstatusFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldstatusFull.DataMode.TEST)
                .idAirfield("3136498f-2969-3535-1432-e984b2e2e686")
                .source("Bluestaq")
                .id("be831d39-1822-da9f-7ace-6cc5643397dc")
                .altAirfieldId("AIRFIELD-ID")
                .approvedBy("John Smith")
                .approvedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .arffCat("FAA-A")
                .cargoMog(8)
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .fleetServiceMog(4)
                .fuelMog(9)
                .fuelQtys(listOf(263083.6, 286674.9, 18143.69))
                .fuelTypes(listOf("JP-8", "Jet A", "AVGAS"))
                .gseTime(10)
                .medCap("Large Field Hospital")
                .message("Status message about the airfield.")
                .mheQtys(listOf(1, 3, 1))
                .mheTypes(listOf("30k", "AT", "60k"))
                .mxMog(3)
                .narrowParkingMog(5)
                .narrowWorkingMog(4)
                .numCog(2)
                .operatingMog(4)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .passengerServiceMog(5)
                .priFreq(123.45)
                .priRwyNum("35R")
                .reviewedBy("Jane Doe")
                .reviewedDate(OffsetDateTime.parse("2024-01-01T00:00:00.123Z"))
                .rwyCondReading(23)
                .rwyFrictionFactor(10)
                .addRwyMarking("Aiming Point")
                .addRwyMarking("Threshold")
                .slotTypesReq(listOf("PARKING", "WORKING", "LANDING"))
                .sourceDl("AXE")
                .surveyDate(OffsetDateTime.parse("2023-01-01T12:00:00.123Z"))
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wideParkingMog(7)
                .wideWorkingMog(3)
                .build()

        assertThat(airfieldstatusFull.classificationMarking()).isEqualTo("U")
        assertThat(airfieldstatusFull.dataMode()).isEqualTo(AirfieldstatusFull.DataMode.TEST)
        assertThat(airfieldstatusFull.idAirfield())
            .isEqualTo("3136498f-2969-3535-1432-e984b2e2e686")
        assertThat(airfieldstatusFull.source()).isEqualTo("Bluestaq")
        assertThat(airfieldstatusFull.id()).contains("be831d39-1822-da9f-7ace-6cc5643397dc")
        assertThat(airfieldstatusFull.altAirfieldId()).contains("AIRFIELD-ID")
        assertThat(airfieldstatusFull.approvedBy()).contains("John Smith")
        assertThat(airfieldstatusFull.approvedDate())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
        assertThat(airfieldstatusFull.arffCat()).contains("FAA-A")
        assertThat(airfieldstatusFull.cargoMog()).contains(8)
        assertThat(airfieldstatusFull.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(airfieldstatusFull.createdBy()).contains("some.user")
        assertThat(airfieldstatusFull.fleetServiceMog()).contains(4)
        assertThat(airfieldstatusFull.fuelMog()).contains(9)
        assertThat(airfieldstatusFull.fuelQtys().getOrNull())
            .containsExactly(263083.6, 286674.9, 18143.69)
        assertThat(airfieldstatusFull.fuelTypes().getOrNull())
            .containsExactly("JP-8", "Jet A", "AVGAS")
        assertThat(airfieldstatusFull.gseTime()).contains(10)
        assertThat(airfieldstatusFull.medCap()).contains("Large Field Hospital")
        assertThat(airfieldstatusFull.message()).contains("Status message about the airfield.")
        assertThat(airfieldstatusFull.mheQtys().getOrNull()).containsExactly(1, 3, 1)
        assertThat(airfieldstatusFull.mheTypes().getOrNull()).containsExactly("30k", "AT", "60k")
        assertThat(airfieldstatusFull.mxMog()).contains(3)
        assertThat(airfieldstatusFull.narrowParkingMog()).contains(5)
        assertThat(airfieldstatusFull.narrowWorkingMog()).contains(4)
        assertThat(airfieldstatusFull.numCog()).contains(2)
        assertThat(airfieldstatusFull.operatingMog()).contains(4)
        assertThat(airfieldstatusFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(airfieldstatusFull.origNetwork()).contains("OPS1")
        assertThat(airfieldstatusFull.passengerServiceMog()).contains(5)
        assertThat(airfieldstatusFull.priFreq()).contains(123.45)
        assertThat(airfieldstatusFull.priRwyNum()).contains("35R")
        assertThat(airfieldstatusFull.reviewedBy()).contains("Jane Doe")
        assertThat(airfieldstatusFull.reviewedDate())
            .contains(OffsetDateTime.parse("2024-01-01T00:00:00.123Z"))
        assertThat(airfieldstatusFull.rwyCondReading()).contains(23)
        assertThat(airfieldstatusFull.rwyFrictionFactor()).contains(10)
        assertThat(airfieldstatusFull.rwyMarkings().getOrNull())
            .containsExactly("Aiming Point", "Threshold")
        assertThat(airfieldstatusFull.slotTypesReq().getOrNull())
            .containsExactly("PARKING", "WORKING", "LANDING")
        assertThat(airfieldstatusFull.sourceDl()).contains("AXE")
        assertThat(airfieldstatusFull.surveyDate())
            .contains(OffsetDateTime.parse("2023-01-01T12:00:00.123Z"))
        assertThat(airfieldstatusFull.updatedAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(airfieldstatusFull.updatedBy()).contains("some.user")
        assertThat(airfieldstatusFull.wideParkingMog()).contains(7)
        assertThat(airfieldstatusFull.wideWorkingMog()).contains(3)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val airfieldstatusFull =
            AirfieldstatusFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldstatusFull.DataMode.TEST)
                .idAirfield("3136498f-2969-3535-1432-e984b2e2e686")
                .source("Bluestaq")
                .id("be831d39-1822-da9f-7ace-6cc5643397dc")
                .altAirfieldId("AIRFIELD-ID")
                .approvedBy("John Smith")
                .approvedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .arffCat("FAA-A")
                .cargoMog(8)
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .fleetServiceMog(4)
                .fuelMog(9)
                .fuelQtys(listOf(263083.6, 286674.9, 18143.69))
                .fuelTypes(listOf("JP-8", "Jet A", "AVGAS"))
                .gseTime(10)
                .medCap("Large Field Hospital")
                .message("Status message about the airfield.")
                .mheQtys(listOf(1, 3, 1))
                .mheTypes(listOf("30k", "AT", "60k"))
                .mxMog(3)
                .narrowParkingMog(5)
                .narrowWorkingMog(4)
                .numCog(2)
                .operatingMog(4)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .passengerServiceMog(5)
                .priFreq(123.45)
                .priRwyNum("35R")
                .reviewedBy("Jane Doe")
                .reviewedDate(OffsetDateTime.parse("2024-01-01T00:00:00.123Z"))
                .rwyCondReading(23)
                .rwyFrictionFactor(10)
                .addRwyMarking("Aiming Point")
                .addRwyMarking("Threshold")
                .slotTypesReq(listOf("PARKING", "WORKING", "LANDING"))
                .sourceDl("AXE")
                .surveyDate(OffsetDateTime.parse("2023-01-01T12:00:00.123Z"))
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wideParkingMog(7)
                .wideWorkingMog(3)
                .build()

        val roundtrippedAirfieldstatusFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(airfieldstatusFull),
                jacksonTypeRef<AirfieldstatusFull>(),
            )

        assertThat(roundtrippedAirfieldstatusFull).isEqualTo(airfieldstatusFull)
    }
}
