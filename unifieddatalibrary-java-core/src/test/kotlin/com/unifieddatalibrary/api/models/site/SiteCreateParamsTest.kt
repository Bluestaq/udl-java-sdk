// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.site

import com.unifieddatalibrary.api.models.entities.EntityIngest
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SiteCreateParamsTest {

    @Test
    fun create() {
        SiteCreateParams.builder()
            .classificationMarking("U")
            .dataMode(SiteCreateParams.DataMode.TEST)
            .name("Site Name")
            .source("Bluestaq")
            .id("SITE-ID")
            .activity("OCC")
            .airDefArea("AL006")
            .allegiance("OTHR")
            .altAllegiance("HL")
            .beNumber("0427RT1030")
            .catCode("20345")
            .catText("Radar Facility, General")
            .classRating("1")
            .condition("RDY")
            .conditionAvail("A")
            .coord("340000000N0430000000E")
            .coordDatum("WGS")
            .coordDerivAcc(12.345)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .elevMsl(123.45)
            .elevMslConfLvl(50)
            .elevMslDerivAcc(12.34)
            .entity(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
            .eval(7)
            .faa("FAA1")
            .fpa("EOB")
            .functPrimary("JG")
            .geoArea("E2")
            .geoidalMslSep(12.34)
            .grade(5)
            .iata("AAA")
            .icao("ICA1")
            .ident("FRIEND")
            .idEntity("ENTITY-ID")
            .idParentSite("ID-Parent-Site")
            .lzUsage("AF")
            .maxRunwayLength(1000)
            .milGrid("4QFJ12345678")
            .milGridSys("UTM")
            .msnPrimary("AA")
            .msnPrimarySpec("AB")
            .notes("Example Notes")
            .nucCap("A")
            .operStatus("OPR")
            .origin("THIRD_PARTY_DATASOURCE")
            .origLzId("ORIG-LZ-ID")
            .origNetwork("ORIG")
            .origSiteId("ORIG-SITE-ID")
            .osuffix("BB002")
            .pin("25200")
            .polSubdiv("IZO7")
            .popArea(true)
            .popAreaProx(12.345)
            .recStatus("A")
            .referenceDoc("Provider Reference Documentation")
            .resProd("RT")
            .reviewDate(LocalDate.parse("2008-06-10"))
            .runways(5L)
            .symCode("SOGPU----------")
            .type("AIRBASE")
            .usage("MILITARY")
            .utm("19P4390691376966")
            .vegHt(3.0)
            .vegType("FR")
            .wac("0427")
            .build()
    }

    @Test
    fun body() {
        val params =
            SiteCreateParams.builder()
                .classificationMarking("U")
                .dataMode(SiteCreateParams.DataMode.TEST)
                .name("Site Name")
                .source("Bluestaq")
                .id("SITE-ID")
                .activity("OCC")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .beNumber("0427RT1030")
                .catCode("20345")
                .catText("Radar Facility, General")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .entity(
                    EntityIngest.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(EntityIngest.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationIngest.builder()
                                .classificationMarking("U")
                                .dataMode(LocationIngest.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            EntityIngest.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(EntityIngest.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .addUrl("URL1")
                        .addUrl("URL2")
                        .build()
                )
                .eval(7)
                .faa("FAA1")
                .fpa("EOB")
                .functPrimary("JG")
                .geoArea("E2")
                .geoidalMslSep(12.34)
                .grade(5)
                .iata("AAA")
                .icao("ICA1")
                .ident("FRIEND")
                .idEntity("ENTITY-ID")
                .idParentSite("ID-Parent-Site")
                .lzUsage("AF")
                .maxRunwayLength(1000)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("AA")
                .msnPrimarySpec("AB")
                .notes("Example Notes")
                .nucCap("A")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origLzId("ORIG-LZ-ID")
                .origNetwork("ORIG")
                .origSiteId("ORIG-SITE-ID")
                .osuffix("BB002")
                .pin("25200")
                .polSubdiv("IZO7")
                .popArea(true)
                .popAreaProx(12.345)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .runways(5L)
                .symCode("SOGPU----------")
                .type("AIRBASE")
                .usage("MILITARY")
                .utm("19P4390691376966")
                .vegHt(3.0)
                .vegType("FR")
                .wac("0427")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SiteCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("Site Name")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("SITE-ID")
        assertThat(body.activity()).contains("OCC")
        assertThat(body.airDefArea()).contains("AL006")
        assertThat(body.allegiance()).contains("OTHR")
        assertThat(body.altAllegiance()).contains("HL")
        assertThat(body.beNumber()).contains("0427RT1030")
        assertThat(body.catCode()).contains("20345")
        assertThat(body.catText()).contains("Radar Facility, General")
        assertThat(body.classRating()).contains("1")
        assertThat(body.condition()).contains("RDY")
        assertThat(body.conditionAvail()).contains("A")
        assertThat(body.coord()).contains("340000000N0430000000E")
        assertThat(body.coordDatum()).contains("WGS")
        assertThat(body.coordDerivAcc()).contains(12.345)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.elevMsl()).contains(123.45)
        assertThat(body.elevMslConfLvl()).contains(50)
        assertThat(body.elevMslDerivAcc()).contains(12.34)
        assertThat(body.entity())
            .contains(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
        assertThat(body.eval()).contains(7)
        assertThat(body.faa()).contains("FAA1")
        assertThat(body.fpa()).contains("EOB")
        assertThat(body.functPrimary()).contains("JG")
        assertThat(body.geoArea()).contains("E2")
        assertThat(body.geoidalMslSep()).contains(12.34)
        assertThat(body.grade()).contains(5)
        assertThat(body.iata()).contains("AAA")
        assertThat(body.icao()).contains("ICA1")
        assertThat(body.ident()).contains("FRIEND")
        assertThat(body.idEntity()).contains("ENTITY-ID")
        assertThat(body.idParentSite()).contains("ID-Parent-Site")
        assertThat(body.lzUsage()).contains("AF")
        assertThat(body.maxRunwayLength()).contains(1000)
        assertThat(body.milGrid()).contains("4QFJ12345678")
        assertThat(body.milGridSys()).contains("UTM")
        assertThat(body.msnPrimary()).contains("AA")
        assertThat(body.msnPrimarySpec()).contains("AB")
        assertThat(body.notes()).contains("Example Notes")
        assertThat(body.nucCap()).contains("A")
        assertThat(body.operStatus()).contains("OPR")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origLzId()).contains("ORIG-LZ-ID")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origSiteId()).contains("ORIG-SITE-ID")
        assertThat(body.osuffix()).contains("BB002")
        assertThat(body.pin()).contains("25200")
        assertThat(body.polSubdiv()).contains("IZO7")
        assertThat(body.popArea()).contains(true)
        assertThat(body.popAreaProx()).contains(12.345)
        assertThat(body.recStatus()).contains("A")
        assertThat(body.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(body.resProd()).contains("RT")
        assertThat(body.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(body.runways()).contains(5L)
        assertThat(body.symCode()).contains("SOGPU----------")
        assertThat(body.type()).contains("AIRBASE")
        assertThat(body.usage()).contains("MILITARY")
        assertThat(body.utm()).contains("19P4390691376966")
        assertThat(body.vegHt()).contains(3.0)
        assertThat(body.vegType()).contains("FR")
        assertThat(body.wac()).contains("0427")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SiteCreateParams.builder()
                .classificationMarking("U")
                .dataMode(SiteCreateParams.DataMode.TEST)
                .name("Site Name")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SiteCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("Site Name")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
