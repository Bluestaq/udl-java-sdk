// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.site

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SiteListResponseTest {

    @Test
    fun create() {
        val siteListResponse =
            SiteListResponse.builder()
                .classificationMarking("U")
                .dataMode(SiteListResponse.DataMode.TEST)
                .name("Site Name")
                .source("Bluestaq")
                .id("SITE-ID")
                .activity("OCC")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .beNumber("0427RT1030")
                .catCode("20345")
                .catText("Radar Facility, General")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .faa("FAA1")
                .fpa("EOB")
                .functPrimary("JG")
                .geoArea("E2")
                .geoidalMslSep(12.34)
                .grade(5)
                .iata("AAA")
                .icao("ICA1")
                .ident("FRIEND")
                .idEntity("ENTITY-ID")
                .idParentSite("ID-Parent-Site")
                .lzUsage("AF")
                .maxRunwayLength(1000)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("AA")
                .msnPrimarySpec("AB")
                .notes("Example Notes")
                .nucCap("A")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origLzId("ORIG-LZ-ID")
                .origNetwork("ORIG")
                .origSiteId("ORIG-SITE-ID")
                .osuffix("BB002")
                .pin("25200")
                .polSubdiv("IZO7")
                .popArea(true)
                .popAreaProx(12.345)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .runways(5L)
                .symCode("SOGPU----------")
                .type("AIRBASE")
                .usage("MILITARY")
                .utm("19P4390691376966")
                .vegHt(3.0)
                .vegType("FR")
                .wac("0427")
                .build()

        assertThat(siteListResponse.classificationMarking()).isEqualTo("U")
        assertThat(siteListResponse.dataMode()).isEqualTo(SiteListResponse.DataMode.TEST)
        assertThat(siteListResponse.name()).isEqualTo("Site Name")
        assertThat(siteListResponse.source()).isEqualTo("Bluestaq")
        assertThat(siteListResponse.id()).contains("SITE-ID")
        assertThat(siteListResponse.activity()).contains("OCC")
        assertThat(siteListResponse.airDefArea()).contains("AL006")
        assertThat(siteListResponse.allegiance()).contains("OTHR")
        assertThat(siteListResponse.altAllegiance()).contains("HL")
        assertThat(siteListResponse.beNumber()).contains("0427RT1030")
        assertThat(siteListResponse.catCode()).contains("20345")
        assertThat(siteListResponse.catText()).contains("Radar Facility, General")
        assertThat(siteListResponse.classRating()).contains("1")
        assertThat(siteListResponse.condition()).contains("RDY")
        assertThat(siteListResponse.conditionAvail()).contains("A")
        assertThat(siteListResponse.coord()).contains("340000000N0430000000E")
        assertThat(siteListResponse.coordDatum()).contains("WGS")
        assertThat(siteListResponse.coordDerivAcc()).contains(12.345)
        assertThat(siteListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(siteListResponse.createdBy()).contains("some.user")
        assertThat(siteListResponse.elevMsl()).contains(123.45)
        assertThat(siteListResponse.elevMslConfLvl()).contains(50)
        assertThat(siteListResponse.elevMslDerivAcc()).contains(12.34)
        assertThat(siteListResponse.eval()).contains(7)
        assertThat(siteListResponse.faa()).contains("FAA1")
        assertThat(siteListResponse.fpa()).contains("EOB")
        assertThat(siteListResponse.functPrimary()).contains("JG")
        assertThat(siteListResponse.geoArea()).contains("E2")
        assertThat(siteListResponse.geoidalMslSep()).contains(12.34)
        assertThat(siteListResponse.grade()).contains(5)
        assertThat(siteListResponse.iata()).contains("AAA")
        assertThat(siteListResponse.icao()).contains("ICA1")
        assertThat(siteListResponse.ident()).contains("FRIEND")
        assertThat(siteListResponse.idEntity()).contains("ENTITY-ID")
        assertThat(siteListResponse.idParentSite()).contains("ID-Parent-Site")
        assertThat(siteListResponse.lzUsage()).contains("AF")
        assertThat(siteListResponse.maxRunwayLength()).contains(1000)
        assertThat(siteListResponse.milGrid()).contains("4QFJ12345678")
        assertThat(siteListResponse.milGridSys()).contains("UTM")
        assertThat(siteListResponse.msnPrimary()).contains("AA")
        assertThat(siteListResponse.msnPrimarySpec()).contains("AB")
        assertThat(siteListResponse.notes()).contains("Example Notes")
        assertThat(siteListResponse.nucCap()).contains("A")
        assertThat(siteListResponse.operStatus()).contains("OPR")
        assertThat(siteListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(siteListResponse.origLzId()).contains("ORIG-LZ-ID")
        assertThat(siteListResponse.origNetwork()).contains("ORIG")
        assertThat(siteListResponse.origSiteId()).contains("ORIG-SITE-ID")
        assertThat(siteListResponse.osuffix()).contains("BB002")
        assertThat(siteListResponse.pin()).contains("25200")
        assertThat(siteListResponse.polSubdiv()).contains("IZO7")
        assertThat(siteListResponse.popArea()).contains(true)
        assertThat(siteListResponse.popAreaProx()).contains(12.345)
        assertThat(siteListResponse.recStatus()).contains("A")
        assertThat(siteListResponse.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(siteListResponse.resProd()).contains("RT")
        assertThat(siteListResponse.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(siteListResponse.runways()).contains(5L)
        assertThat(siteListResponse.symCode()).contains("SOGPU----------")
        assertThat(siteListResponse.type()).contains("AIRBASE")
        assertThat(siteListResponse.usage()).contains("MILITARY")
        assertThat(siteListResponse.utm()).contains("19P4390691376966")
        assertThat(siteListResponse.vegHt()).contains(3.0)
        assertThat(siteListResponse.vegType()).contains("FR")
        assertThat(siteListResponse.wac()).contains("0427")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val siteListResponse =
            SiteListResponse.builder()
                .classificationMarking("U")
                .dataMode(SiteListResponse.DataMode.TEST)
                .name("Site Name")
                .source("Bluestaq")
                .id("SITE-ID")
                .activity("OCC")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .beNumber("0427RT1030")
                .catCode("20345")
                .catText("Radar Facility, General")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .faa("FAA1")
                .fpa("EOB")
                .functPrimary("JG")
                .geoArea("E2")
                .geoidalMslSep(12.34)
                .grade(5)
                .iata("AAA")
                .icao("ICA1")
                .ident("FRIEND")
                .idEntity("ENTITY-ID")
                .idParentSite("ID-Parent-Site")
                .lzUsage("AF")
                .maxRunwayLength(1000)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("AA")
                .msnPrimarySpec("AB")
                .notes("Example Notes")
                .nucCap("A")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origLzId("ORIG-LZ-ID")
                .origNetwork("ORIG")
                .origSiteId("ORIG-SITE-ID")
                .osuffix("BB002")
                .pin("25200")
                .polSubdiv("IZO7")
                .popArea(true)
                .popAreaProx(12.345)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .runways(5L)
                .symCode("SOGPU----------")
                .type("AIRBASE")
                .usage("MILITARY")
                .utm("19P4390691376966")
                .vegHt(3.0)
                .vegType("FR")
                .wac("0427")
                .build()

        val roundtrippedSiteListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(siteListResponse),
                jacksonTypeRef<SiteListResponse>(),
            )

        assertThat(roundtrippedSiteListResponse).isEqualTo(siteListResponse)
    }
}
