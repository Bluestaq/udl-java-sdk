// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrganizationDetailsFullTest {

    @Test
    fun create() {
      val organizationDetailsFull = OrganizationDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(OrganizationDetailsFull.DataMode.TEST)
          .idOrganization("ORGANIZATION-ID")
          .name("some.user")
          .source("some.user")
          .id("ORGANIZATIONDETAILS-ID")
          .address1("123 Main Street")
          .address2("Apt 4B")
          .address3("Colorado Springs CO, 80903")
          .broker("some.user")
          .ceo("some.user")
          .cfo("some.user")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cto("some.user")
          .description("Example description")
          .ebitda(123.4)
          .email("some_organization@organization.com")
          .financialNotes("Example notes")
          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
          .fleetPlanNotes("Example notes")
          .formerOrgId("FORMERORG-ID")
          .ftes(123)
          .geoAdminLevel1("Colorado")
          .geoAdminLevel2("El Paso County")
          .geoAdminLevel3("Colorado Springs")
          .massRanking(123)
          .origin("some.user")
          .origNetwork("OPS1")
          .parentOrgId("PARENTORG-ID")
          .postalCode("80903")
          .profit(123.4)
          .revenue(123.4)
          .revenueRanking(123)
          .riskManager("some.user")
          .servicesNotes("Example notes")
          .addTag("PROVIDER_TAG1")
          .addTag("PROVIDER_TAG2")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(organizationDetailsFull.classificationMarking()).isEqualTo("U")
      assertThat(organizationDetailsFull.dataMode()).isEqualTo(OrganizationDetailsFull.DataMode.TEST)
      assertThat(organizationDetailsFull.idOrganization()).isEqualTo("ORGANIZATION-ID")
      assertThat(organizationDetailsFull.name()).isEqualTo("some.user")
      assertThat(organizationDetailsFull.source()).isEqualTo("some.user")
      assertThat(organizationDetailsFull.id()).contains("ORGANIZATIONDETAILS-ID")
      assertThat(organizationDetailsFull.address1()).contains("123 Main Street")
      assertThat(organizationDetailsFull.address2()).contains("Apt 4B")
      assertThat(organizationDetailsFull.address3()).contains("Colorado Springs CO, 80903")
      assertThat(organizationDetailsFull.broker()).contains("some.user")
      assertThat(organizationDetailsFull.ceo()).contains("some.user")
      assertThat(organizationDetailsFull.cfo()).contains("some.user")
      assertThat(organizationDetailsFull.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(organizationDetailsFull.createdBy()).contains("some.user")
      assertThat(organizationDetailsFull.cto()).contains("some.user")
      assertThat(organizationDetailsFull.description()).contains("Example description")
      assertThat(organizationDetailsFull.ebitda()).contains(123.4)
      assertThat(organizationDetailsFull.email()).contains("some_organization@organization.com")
      assertThat(organizationDetailsFull.financialNotes()).contains("Example notes")
      assertThat(organizationDetailsFull.financialYearEndDate()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
      assertThat(organizationDetailsFull.fleetPlanNotes()).contains("Example notes")
      assertThat(organizationDetailsFull.formerOrgId()).contains("FORMERORG-ID")
      assertThat(organizationDetailsFull.ftes()).contains(123)
      assertThat(organizationDetailsFull.geoAdminLevel1()).contains("Colorado")
      assertThat(organizationDetailsFull.geoAdminLevel2()).contains("El Paso County")
      assertThat(organizationDetailsFull.geoAdminLevel3()).contains("Colorado Springs")
      assertThat(organizationDetailsFull.massRanking()).contains(123)
      assertThat(organizationDetailsFull.origin()).contains("some.user")
      assertThat(organizationDetailsFull.origNetwork()).contains("OPS1")
      assertThat(organizationDetailsFull.parentOrgId()).contains("PARENTORG-ID")
      assertThat(organizationDetailsFull.postalCode()).contains("80903")
      assertThat(organizationDetailsFull.profit()).contains(123.4)
      assertThat(organizationDetailsFull.revenue()).contains(123.4)
      assertThat(organizationDetailsFull.revenueRanking()).contains(123)
      assertThat(organizationDetailsFull.riskManager()).contains("some.user")
      assertThat(organizationDetailsFull.servicesNotes()).contains("Example notes")
      assertThat(organizationDetailsFull.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
      assertThat(organizationDetailsFull.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(organizationDetailsFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val organizationDetailsFull = OrganizationDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(OrganizationDetailsFull.DataMode.TEST)
          .idOrganization("ORGANIZATION-ID")
          .name("some.user")
          .source("some.user")
          .id("ORGANIZATIONDETAILS-ID")
          .address1("123 Main Street")
          .address2("Apt 4B")
          .address3("Colorado Springs CO, 80903")
          .broker("some.user")
          .ceo("some.user")
          .cfo("some.user")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cto("some.user")
          .description("Example description")
          .ebitda(123.4)
          .email("some_organization@organization.com")
          .financialNotes("Example notes")
          .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
          .fleetPlanNotes("Example notes")
          .formerOrgId("FORMERORG-ID")
          .ftes(123)
          .geoAdminLevel1("Colorado")
          .geoAdminLevel2("El Paso County")
          .geoAdminLevel3("Colorado Springs")
          .massRanking(123)
          .origin("some.user")
          .origNetwork("OPS1")
          .parentOrgId("PARENTORG-ID")
          .postalCode("80903")
          .profit(123.4)
          .revenue(123.4)
          .revenueRanking(123)
          .riskManager("some.user")
          .servicesNotes("Example notes")
          .addTag("PROVIDER_TAG1")
          .addTag("PROVIDER_TAG2")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedOrganizationDetailsFull = jsonMapper.readValue(jsonMapper.writeValueAsString(organizationDetailsFull), jacksonTypeRef<OrganizationDetailsFull>())

      assertThat(roundtrippedOrganizationDetailsFull).isEqualTo(organizationDetailsFull)
    }
}
