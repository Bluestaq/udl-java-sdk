// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirfieldFullTest {

    @Test
    fun create() {
        val airfieldFull =
            AirfieldFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldFull.DataMode.TEST)
                .name("Hickam Air Force Base")
                .source("Bluestaq")
                .type("Commercial")
                .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
                .altAirfieldId("45301")
                .addAlternativeName("BELLEVILLE")
                .addAlternativeName("JONESTOWN")
                .city("Honolulu")
                .countryCode("US")
                .countryName("United States")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dstInfo("SEE THE ENROUTE SUPP FOR INFORMATION")
                .elevFt(33.562)
                .elevM(10.29)
                .faa("FAA1")
                .geoloc("XLSX")
                .gmtOffset("-4:30")
                .hostNatCode("ZPU")
                .iata("AAA")
                .icao("KCOS")
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .infoUrl("URL Link to the Airfield")
                .lat(45.23)
                .lon(179.1)
                .magDec(7.35)
                .maxRunwayLength(1000)
                .miscCodes("AMZ")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .regionalAuthority("18TH AF")
                .regionName("Hawaii")
                .runways(5)
                .secondaryIcao("PHNL")
                .sourceDl("AXE")
                .state("Hawaii")
                .stateProvinceCode("US15")
                .suitabilityCodeDescs(listOf("Suitable C-32", "Suitable C-5", "Suitable C-130"))
                .suitabilityCodes("ABC")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wacInnr("0409-00039")
                .zarId("231")
                .build()

        assertThat(airfieldFull.classificationMarking()).isEqualTo("U")
        assertThat(airfieldFull.dataMode()).isEqualTo(AirfieldFull.DataMode.TEST)
        assertThat(airfieldFull.name()).isEqualTo("Hickam Air Force Base")
        assertThat(airfieldFull.source()).isEqualTo("Bluestaq")
        assertThat(airfieldFull.type()).isEqualTo("Commercial")
        assertThat(airfieldFull.id()).contains("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
        assertThat(airfieldFull.altAirfieldId()).contains("45301")
        assertThat(airfieldFull.alternativeNames().getOrNull())
            .containsExactly("BELLEVILLE", "JONESTOWN")
        assertThat(airfieldFull.city()).contains("Honolulu")
        assertThat(airfieldFull.countryCode()).contains("US")
        assertThat(airfieldFull.countryName()).contains("United States")
        assertThat(airfieldFull.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(airfieldFull.createdBy()).contains("some.user")
        assertThat(airfieldFull.dstInfo()).contains("SEE THE ENROUTE SUPP FOR INFORMATION")
        assertThat(airfieldFull.elevFt()).contains(33.562)
        assertThat(airfieldFull.elevM()).contains(10.29)
        assertThat(airfieldFull.faa()).contains("FAA1")
        assertThat(airfieldFull.geoloc()).contains("XLSX")
        assertThat(airfieldFull.gmtOffset()).contains("-4:30")
        assertThat(airfieldFull.hostNatCode()).contains("ZPU")
        assertThat(airfieldFull.iata()).contains("AAA")
        assertThat(airfieldFull.icao()).contains("KCOS")
        assertThat(airfieldFull.idSite()).contains("a150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(airfieldFull.infoUrl()).contains("URL Link to the Airfield")
        assertThat(airfieldFull.lat()).contains(45.23)
        assertThat(airfieldFull.lon()).contains(179.1)
        assertThat(airfieldFull.magDec()).contains(7.35)
        assertThat(airfieldFull.maxRunwayLength()).contains(1000)
        assertThat(airfieldFull.miscCodes()).contains("AMZ")
        assertThat(airfieldFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(airfieldFull.origNetwork()).contains("OPS1")
        assertThat(airfieldFull.regionalAuthority()).contains("18TH AF")
        assertThat(airfieldFull.regionName()).contains("Hawaii")
        assertThat(airfieldFull.runways()).contains(5)
        assertThat(airfieldFull.secondaryIcao()).contains("PHNL")
        assertThat(airfieldFull.sourceDl()).contains("AXE")
        assertThat(airfieldFull.state()).contains("Hawaii")
        assertThat(airfieldFull.stateProvinceCode()).contains("US15")
        assertThat(airfieldFull.suitabilityCodeDescs().getOrNull())
            .containsExactly("Suitable C-32", "Suitable C-5", "Suitable C-130")
        assertThat(airfieldFull.suitabilityCodes()).contains("ABC")
        assertThat(airfieldFull.updatedAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(airfieldFull.updatedBy()).contains("some.user")
        assertThat(airfieldFull.wacInnr()).contains("0409-00039")
        assertThat(airfieldFull.zarId()).contains("231")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val airfieldFull =
            AirfieldFull.builder()
                .classificationMarking("U")
                .dataMode(AirfieldFull.DataMode.TEST)
                .name("Hickam Air Force Base")
                .source("Bluestaq")
                .type("Commercial")
                .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
                .altAirfieldId("45301")
                .addAlternativeName("BELLEVILLE")
                .addAlternativeName("JONESTOWN")
                .city("Honolulu")
                .countryCode("US")
                .countryName("United States")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dstInfo("SEE THE ENROUTE SUPP FOR INFORMATION")
                .elevFt(33.562)
                .elevM(10.29)
                .faa("FAA1")
                .geoloc("XLSX")
                .gmtOffset("-4:30")
                .hostNatCode("ZPU")
                .iata("AAA")
                .icao("KCOS")
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .infoUrl("URL Link to the Airfield")
                .lat(45.23)
                .lon(179.1)
                .magDec(7.35)
                .maxRunwayLength(1000)
                .miscCodes("AMZ")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .regionalAuthority("18TH AF")
                .regionName("Hawaii")
                .runways(5)
                .secondaryIcao("PHNL")
                .sourceDl("AXE")
                .state("Hawaii")
                .stateProvinceCode("US15")
                .suitabilityCodeDescs(listOf("Suitable C-32", "Suitable C-5", "Suitable C-130"))
                .suitabilityCodes("ABC")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .wacInnr("0409-00039")
                .zarId("231")
                .build()

        val roundtrippedAirfieldFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(airfieldFull),
                jacksonTypeRef<AirfieldFull>(),
            )

        assertThat(roundtrippedAirfieldFull).isEqualTo(airfieldFull)
    }
}
