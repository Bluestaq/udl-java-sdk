// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.launchvehicledetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaunchVehicleDetailGetResponseTest {

    @Test
    fun create() {
        val launchVehicleDetailGetResponse =
            LaunchVehicleDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailGetResponse.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("LAUNCHVEHICLEDETAILS-ID")
                .attitudeAccuracy(10.23)
                .category("Example-category")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deploymentRotationRate(10.23)
                .diameter(10.23)
                .estLaunchPrice(10.23)
                .estLaunchPriceTypical(10.23)
                .fairingExternalDiameter(10.23)
                .fairingInternalDiameter(10.23)
                .fairingLength(10.23)
                .fairingMass(10.23)
                .fairingMaterial("Example-fairing-material")
                .fairingName("Example-fairing-name")
                .fairingNotes("Example notes")
                .family("Example-family")
                .geoPayloadMass(10.23)
                .gtoInj3SigAccuracyApogeeMargin(10.23)
                .gtoInj3SigAccuracyApogeeTarget(10.23)
                .gtoInj3SigAccuracyInclinationMargin(10.23)
                .gtoInj3SigAccuracyInclinationTarget(10.23)
                .gtoInj3SigAccuracyPerigeeMargin(10.23)
                .gtoInj3SigAccuracyPerigeeTarget(10.23)
                .gtoPayloadMass(10.23)
                .launchMass(10.23)
                .launchPrefix("AX011")
                .length(10.23)
                .leoPayloadMass(10.23)
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .maxAccelLoad(10.23)
                .maxAcousticLevel(10.23)
                .maxAcousticLevelRange(10.23)
                .maxFairingPressureChange(10.23)
                .maxFlightShockForce(10.23)
                .maxFlightShockFreq(10.23)
                .maxPayloadFreqLat(10.23)
                .maxPayloadFreqLon(10.23)
                .minorVariant("Example-minor-variant")
                .notes("Example notes")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .oxidizer("Bromine")
                .payloadNotes("Example notes")
                .payloadSeparationRate(10.23)
                .propellant("Nitrogen")
                .soundPressureLevel(10.23)
                .sourceUrl("Example URL")
                .ssoPayloadMass(10.23)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .variant("Example-variant")
                .build()

        assertThat(launchVehicleDetailGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(launchVehicleDetailGetResponse.dataMode())
            .isEqualTo(LaunchVehicleDetailGetResponse.DataMode.TEST)
        assertThat(launchVehicleDetailGetResponse.idLaunchVehicle()).isEqualTo("LAUNCHVEHICLE-ID")
        assertThat(launchVehicleDetailGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(launchVehicleDetailGetResponse.id()).contains("LAUNCHVEHICLEDETAILS-ID")
        assertThat(launchVehicleDetailGetResponse.attitudeAccuracy()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.category()).contains("Example-category")
        assertThat(launchVehicleDetailGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchVehicleDetailGetResponse.createdBy()).contains("some.user")
        assertThat(launchVehicleDetailGetResponse.deploymentRotationRate()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.diameter()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.estLaunchPrice()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.estLaunchPriceTypical()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.fairingExternalDiameter()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.fairingInternalDiameter()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.fairingLength()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.fairingMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.fairingMaterial())
            .contains("Example-fairing-material")
        assertThat(launchVehicleDetailGetResponse.fairingName()).contains("Example-fairing-name")
        assertThat(launchVehicleDetailGetResponse.fairingNotes()).contains("Example notes")
        assertThat(launchVehicleDetailGetResponse.family()).contains("Example-family")
        assertThat(launchVehicleDetailGetResponse.geoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyApogeeMargin()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyApogeeTarget()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyInclinationMargin())
            .contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyInclinationTarget())
            .contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyPerigeeMargin()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoInj3SigAccuracyPerigeeTarget()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.gtoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.launchMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.launchPrefix()).contains("AX011")
        assertThat(launchVehicleDetailGetResponse.length()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.leoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.manufacturerOrg())
            .contains(
                OrganizationFull.builder()
                    .classificationMarking("U")
                    .dataMode(OrganizationFull.DataMode.TEST)
                    .name("some.user")
                    .source("some.user")
                    .type("GOVERNMENT")
                    .id("ORGANIZATION-ID")
                    .active(false)
                    .category("Private company")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("Example description")
                    .externalId("EXTERNAL-ID")
                    .nationality("US")
                    .addOrganizationDetail(
                        OrganizationDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationDetailsFull.DataMode.TEST)
                            .idOrganization("ORGANIZATION-ID")
                            .name("some.user")
                            .source("some.user")
                            .id("ORGANIZATIONDETAILS-ID")
                            .address1("123 Main Street")
                            .address2("Apt 4B")
                            .address3("Colorado Springs CO, 80903")
                            .broker("some.user")
                            .ceo("some.user")
                            .cfo("some.user")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cto("some.user")
                            .description("Example description")
                            .ebitda(123.4)
                            .email("some_organization@organization.com")
                            .financialNotes("Example notes")
                            .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .fleetPlanNotes("Example notes")
                            .formerOrgId("FORMERORG-ID")
                            .ftes(123)
                            .geoAdminLevel1("Colorado")
                            .geoAdminLevel2("El Paso County")
                            .geoAdminLevel3("Colorado Springs")
                            .massRanking(123)
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .parentOrgId("PARENTORG-ID")
                            .postalCode("80903")
                            .profit(123.4)
                            .revenue(123.4)
                            .revenueRanking(123)
                            .riskManager("some.user")
                            .servicesNotes("Example notes")
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .origin("some.user")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(launchVehicleDetailGetResponse.manufacturerOrgId())
            .contains("MANUFACTURERORG-ID")
        assertThat(launchVehicleDetailGetResponse.maxAccelLoad()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxAcousticLevel()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxAcousticLevelRange()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxFairingPressureChange()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxFlightShockForce()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxFlightShockFreq()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxPayloadFreqLat()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.maxPayloadFreqLon()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.minorVariant()).contains("Example-minor-variant")
        assertThat(launchVehicleDetailGetResponse.notes()).contains("Example notes")
        assertThat(launchVehicleDetailGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(launchVehicleDetailGetResponse.origNetwork()).contains("OPS1")
        assertThat(launchVehicleDetailGetResponse.oxidizer()).contains("Bromine")
        assertThat(launchVehicleDetailGetResponse.payloadNotes()).contains("Example notes")
        assertThat(launchVehicleDetailGetResponse.payloadSeparationRate()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.propellant()).contains("Nitrogen")
        assertThat(launchVehicleDetailGetResponse.soundPressureLevel()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.sourceUrl()).contains("Example URL")
        assertThat(launchVehicleDetailGetResponse.ssoPayloadMass()).contains(10.23)
        assertThat(launchVehicleDetailGetResponse.tags().getOrNull())
            .containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(launchVehicleDetailGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchVehicleDetailGetResponse.updatedBy()).contains("some.user")
        assertThat(launchVehicleDetailGetResponse.variant()).contains("Example-variant")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val launchVehicleDetailGetResponse =
            LaunchVehicleDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleDetailGetResponse.DataMode.TEST)
                .idLaunchVehicle("LAUNCHVEHICLE-ID")
                .source("Bluestaq")
                .id("LAUNCHVEHICLEDETAILS-ID")
                .attitudeAccuracy(10.23)
                .category("Example-category")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deploymentRotationRate(10.23)
                .diameter(10.23)
                .estLaunchPrice(10.23)
                .estLaunchPriceTypical(10.23)
                .fairingExternalDiameter(10.23)
                .fairingInternalDiameter(10.23)
                .fairingLength(10.23)
                .fairingMass(10.23)
                .fairingMaterial("Example-fairing-material")
                .fairingName("Example-fairing-name")
                .fairingNotes("Example notes")
                .family("Example-family")
                .geoPayloadMass(10.23)
                .gtoInj3SigAccuracyApogeeMargin(10.23)
                .gtoInj3SigAccuracyApogeeTarget(10.23)
                .gtoInj3SigAccuracyInclinationMargin(10.23)
                .gtoInj3SigAccuracyInclinationTarget(10.23)
                .gtoInj3SigAccuracyPerigeeMargin(10.23)
                .gtoInj3SigAccuracyPerigeeTarget(10.23)
                .gtoPayloadMass(10.23)
                .launchMass(10.23)
                .launchPrefix("AX011")
                .length(10.23)
                .leoPayloadMass(10.23)
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .maxAccelLoad(10.23)
                .maxAcousticLevel(10.23)
                .maxAcousticLevelRange(10.23)
                .maxFairingPressureChange(10.23)
                .maxFlightShockForce(10.23)
                .maxFlightShockFreq(10.23)
                .maxPayloadFreqLat(10.23)
                .maxPayloadFreqLon(10.23)
                .minorVariant("Example-minor-variant")
                .notes("Example notes")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .oxidizer("Bromine")
                .payloadNotes("Example notes")
                .payloadSeparationRate(10.23)
                .propellant("Nitrogen")
                .soundPressureLevel(10.23)
                .sourceUrl("Example URL")
                .ssoPayloadMass(10.23)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .variant("Example-variant")
                .build()

        val roundtrippedLaunchVehicleDetailGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(launchVehicleDetailGetResponse),
                jacksonTypeRef<LaunchVehicleDetailGetResponse>(),
            )

        assertThat(roundtrippedLaunchVehicleDetailGetResponse)
            .isEqualTo(launchVehicleDetailGetResponse)
    }
}
