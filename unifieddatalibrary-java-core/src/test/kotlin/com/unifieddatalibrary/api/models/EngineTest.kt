// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.Engine
import com.unifieddatalibrary.api.models.EngineDetailsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EngineTest {

    @Test
    fun create() {
      val engine = Engine.builder()
          .classificationMarking("U")
          .dataMode(Engine.DataMode.TEST)
          .name("ENGINE_VARIANT1")
          .source("Bluestaq")
          .id("ENGINE-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addEngineDetail(EngineDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(EngineDetailsFull.DataMode.TEST)
              .idEngine("ENGINE-ID")
              .source("Bluestaq")
              .id("ENGINEDETAILS-ID")
              .burnTime(1.1)
              .chamberPressure(1.1)
              .characteristicType("Electric")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .cycleType("Pressure Fed")
              .family("ENGINE_TYPE1")
              .manufacturerOrgId("MANUFACTURERORG-ID")
              .maxFirings(5)
              .notes("Example notes")
              .nozzleExpansionRatio(1.1)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .oxidizer("Liquid Oxygen")
              .propellant("Liquid")
              .seaLevelThrust(1.1)
              .specificImpulse(1.1)
              .addTag("PROVIDER_TAG1")
              .addTag("PROVIDER_TAG2")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .vacuumThrust(1.1)
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(engine.classificationMarking()).isEqualTo("U")
      assertThat(engine.dataMode()).isEqualTo(Engine.DataMode.TEST)
      assertThat(engine.name()).isEqualTo("ENGINE_VARIANT1")
      assertThat(engine.source()).isEqualTo("Bluestaq")
      assertThat(engine.id()).contains("ENGINE-ID")
      assertThat(engine.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(engine.createdBy()).contains("some.user")
      assertThat(engine.engineDetails().getOrNull()).containsExactly(EngineDetailsFull.builder()
          .classificationMarking("U")
          .dataMode(EngineDetailsFull.DataMode.TEST)
          .idEngine("ENGINE-ID")
          .source("Bluestaq")
          .id("ENGINEDETAILS-ID")
          .burnTime(1.1)
          .chamberPressure(1.1)
          .characteristicType("Electric")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cycleType("Pressure Fed")
          .family("ENGINE_TYPE1")
          .manufacturerOrgId("MANUFACTURERORG-ID")
          .maxFirings(5)
          .notes("Example notes")
          .nozzleExpansionRatio(1.1)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .oxidizer("Liquid Oxygen")
          .propellant("Liquid")
          .seaLevelThrust(1.1)
          .specificImpulse(1.1)
          .addTag("PROVIDER_TAG1")
          .addTag("PROVIDER_TAG2")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .vacuumThrust(1.1)
          .build())
      assertThat(engine.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(engine.origNetwork()).contains("ORIG")
      assertThat(engine.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(engine.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val engine = Engine.builder()
          .classificationMarking("U")
          .dataMode(Engine.DataMode.TEST)
          .name("ENGINE_VARIANT1")
          .source("Bluestaq")
          .id("ENGINE-ID")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addEngineDetail(EngineDetailsFull.builder()
              .classificationMarking("U")
              .dataMode(EngineDetailsFull.DataMode.TEST)
              .idEngine("ENGINE-ID")
              .source("Bluestaq")
              .id("ENGINEDETAILS-ID")
              .burnTime(1.1)
              .chamberPressure(1.1)
              .characteristicType("Electric")
              .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .createdBy("some.user")
              .cycleType("Pressure Fed")
              .family("ENGINE_TYPE1")
              .manufacturerOrgId("MANUFACTURERORG-ID")
              .maxFirings(5)
              .notes("Example notes")
              .nozzleExpansionRatio(1.1)
              .origin("THIRD_PARTY_DATASOURCE")
              .origNetwork("ORIG")
              .oxidizer("Liquid Oxygen")
              .propellant("Liquid")
              .seaLevelThrust(1.1)
              .specificImpulse(1.1)
              .addTag("PROVIDER_TAG1")
              .addTag("PROVIDER_TAG2")
              .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
              .updatedBy("some.user")
              .vacuumThrust(1.1)
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedEngine = jsonMapper.readValue(jsonMapper.writeValueAsString(engine), jacksonTypeRef<Engine>())

      assertThat(roundtrippedEngine).isEqualTo(engine)
    }
}
