// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.evac

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EvacCreateParamsTest {

    @Test
    fun create() {
        EvacCreateParams.builder()
            .classificationMarking("U")
            .dataMode(EvacCreateParams.DataMode.TEST)
            .pickupLat(75.1234)
            .pickupLon(175.1234)
            .reqTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
            .source("Bluestaq")
            .type(EvacCreateParams.Type.REQUEST)
            .id("MEDEVACEVENT-ID")
            .addCasualtyInfo(
                EvacCreateParams.CasualtyInfo.builder()
                    .age(35)
                    .addAllergy(
                        EvacCreateParams.CasualtyInfo.Allergy.builder()
                            .comments("Comments on the patient's allergies.")
                            .type("PENICILLIN")
                            .build()
                    )
                    .bloodType("O NEG")
                    .bodyPart("FACE")
                    .burialLocation(listOf(-33.123, 150.33, 0.24))
                    .callSign("SHARK")
                    .careProviderUrn("CARE_PROVIDER-1")
                    .casualtyKey("casualty-007")
                    .casualtyType("DENTAL")
                    .collectionPoint(listOf(12.44, 122.55, 0.98))
                    .comments("Comments relating to this casualty info.")
                    .addCondition(
                        EvacCreateParams.CasualtyInfo.Condition.builder()
                            .bodyPart("ANKLE LEFT FRONT")
                            .comments("Comments on the patient's condition.")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("ACTIVITY LOW")
                            .build()
                    )
                    .contamType("NONE")
                    .disposition("EVACUATE WOUNDED")
                    .dispositionType("EVACUATE")
                    .addEtiology(
                        EvacCreateParams.CasualtyInfo.Etiology.builder()
                            .bodyPart("ARM LEFT FRONT")
                            .comments("Comments on the etiology info.")
                            .time(OffsetDateTime.parse("2021-10-16T16:00:00.123Z"))
                            .type("BURN")
                            .build()
                    )
                    .evacType("GROUND")
                    .gender("MALE")
                    .addHealthState(
                        EvacCreateParams.CasualtyInfo.HealthState.builder()
                            .healthStateCode("BLUE")
                            .medConfFactor(1)
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("COGNITIVE")
                            .build()
                    )
                    .addInjury(
                        EvacCreateParams.CasualtyInfo.Injury.builder()
                            .bodyPart("ARM LEFT FRONT")
                            .comments("Comments on the patient's injury.")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("ABRASION")
                            .build()
                    )
                    .last4Ssn("1234")
                    .addMedication(
                        EvacCreateParams.CasualtyInfo.Medication.builder()
                            .adminRoute("ORAL")
                            .bodyPart("ARM LEFT BACK")
                            .comments("Comments on the patient's medication information.")
                            .dose("800mg")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("TYLENOL")
                            .build()
                    )
                    .name("John Smith")
                    .nationality("US")
                    .occSpeciality("Healthcare")
                    .patientIdentity("FRIEND CIVILIAN")
                    .patientStatus("US CIVILIAN")
                    .payGrade("CIVILIAN")
                    .priority("ROUTINE")
                    .reportGen("DEVICE")
                    .reportTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                    .service("CIV")
                    .addSpecMedEquip("OXYGEN")
                    .addSpecMedEquip("HOIST")
                    .addTreatment(
                        EvacCreateParams.CasualtyInfo.Treatment.builder()
                            .bodyPart("CHEST")
                            .comments("Comments on the treatment info.")
                            .time(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .type("BREATHING CHEST TUBE")
                            .build()
                    )
                    .addVitalSignData(
                        EvacCreateParams.CasualtyInfo.VitalSignData.builder()
                            .medConfFactor(1)
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .vitalSign("HEART RATE")
                            .vitalSign1(120.0)
                            .vitalSign2(80.0)
                            .build()
                    )
                    .build()
            )
            .ce(10.1234)
            .cntctFreq(3.11)
            .comments("Comments concerning mission")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .addEnemyData(
                EvacCreateParams.EnemyData.builder()
                    .dirToEnemy("NORTH")
                    .friendliesRemarks("Comments from friendlies.")
                    .hlzRemarks("Remarks about hot landing zone.")
                    .hostileFireType("SMALL ARMS")
                    .build()
            )
            .idWeatherReport("WeatherReport-ID")
            .le(5.1234)
            .medevacId("MedEvac-ID")
            .medicReq(true)
            .missionType("GROUND")
            .numAmbulatory(5)
            .numCasualties(5)
            .numKia(0)
            .numLitter(0)
            .numWia(3)
            .obstaclesRemarks("N/A")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .pickupAlt(30.1234)
            .pickupTime(OffsetDateTime.parse("2021-10-20T16:00:00.123Z"))
            .reqCallSign("Bravo")
            .reqNum("MED.1.223908")
            .terrain("ROCKY")
            .terrainRemarks("N/A")
            .zoneContrCallSign("Tango")
            .zoneHot(false)
            .zoneMarking("ILLUMINATION")
            .zoneMarkingColor("RED")
            .zoneName("example-zone")
            .zoneSecurity("NO ENEMY")
            .build()
    }

    @Test
    fun body() {
        val params =
            EvacCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EvacCreateParams.DataMode.TEST)
                .pickupLat(75.1234)
                .pickupLon(175.1234)
                .reqTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                .source("Bluestaq")
                .type(EvacCreateParams.Type.REQUEST)
                .id("MEDEVACEVENT-ID")
                .addCasualtyInfo(
                    EvacCreateParams.CasualtyInfo.builder()
                        .age(35)
                        .addAllergy(
                            EvacCreateParams.CasualtyInfo.Allergy.builder()
                                .comments("Comments on the patient's allergies.")
                                .type("PENICILLIN")
                                .build()
                        )
                        .bloodType("O NEG")
                        .bodyPart("FACE")
                        .burialLocation(listOf(-33.123, 150.33, 0.24))
                        .callSign("SHARK")
                        .careProviderUrn("CARE_PROVIDER-1")
                        .casualtyKey("casualty-007")
                        .casualtyType("DENTAL")
                        .collectionPoint(listOf(12.44, 122.55, 0.98))
                        .comments("Comments relating to this casualty info.")
                        .addCondition(
                            EvacCreateParams.CasualtyInfo.Condition.builder()
                                .bodyPart("ANKLE LEFT FRONT")
                                .comments("Comments on the patient's condition.")
                                .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                                .type("ACTIVITY LOW")
                                .build()
                        )
                        .contamType("NONE")
                        .disposition("EVACUATE WOUNDED")
                        .dispositionType("EVACUATE")
                        .addEtiology(
                            EvacCreateParams.CasualtyInfo.Etiology.builder()
                                .bodyPart("ARM LEFT FRONT")
                                .comments("Comments on the etiology info.")
                                .time(OffsetDateTime.parse("2021-10-16T16:00:00.123Z"))
                                .type("BURN")
                                .build()
                        )
                        .evacType("GROUND")
                        .gender("MALE")
                        .addHealthState(
                            EvacCreateParams.CasualtyInfo.HealthState.builder()
                                .healthStateCode("BLUE")
                                .medConfFactor(1)
                                .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                                .type("COGNITIVE")
                                .build()
                        )
                        .addInjury(
                            EvacCreateParams.CasualtyInfo.Injury.builder()
                                .bodyPart("ARM LEFT FRONT")
                                .comments("Comments on the patient's injury.")
                                .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                                .type("ABRASION")
                                .build()
                        )
                        .last4Ssn("1234")
                        .addMedication(
                            EvacCreateParams.CasualtyInfo.Medication.builder()
                                .adminRoute("ORAL")
                                .bodyPart("ARM LEFT BACK")
                                .comments("Comments on the patient's medication information.")
                                .dose("800mg")
                                .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                                .type("TYLENOL")
                                .build()
                        )
                        .name("John Smith")
                        .nationality("US")
                        .occSpeciality("Healthcare")
                        .patientIdentity("FRIEND CIVILIAN")
                        .patientStatus("US CIVILIAN")
                        .payGrade("CIVILIAN")
                        .priority("ROUTINE")
                        .reportGen("DEVICE")
                        .reportTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                        .service("CIV")
                        .addSpecMedEquip("OXYGEN")
                        .addSpecMedEquip("HOIST")
                        .addTreatment(
                            EvacCreateParams.CasualtyInfo.Treatment.builder()
                                .bodyPart("CHEST")
                                .comments("Comments on the treatment info.")
                                .time(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .type("BREATHING CHEST TUBE")
                                .build()
                        )
                        .addVitalSignData(
                            EvacCreateParams.CasualtyInfo.VitalSignData.builder()
                                .medConfFactor(1)
                                .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                                .vitalSign("HEART RATE")
                                .vitalSign1(120.0)
                                .vitalSign2(80.0)
                                .build()
                        )
                        .build()
                )
                .ce(10.1234)
                .cntctFreq(3.11)
                .comments("Comments concerning mission")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addEnemyData(
                    EvacCreateParams.EnemyData.builder()
                        .dirToEnemy("NORTH")
                        .friendliesRemarks("Comments from friendlies.")
                        .hlzRemarks("Remarks about hot landing zone.")
                        .hostileFireType("SMALL ARMS")
                        .build()
                )
                .idWeatherReport("WeatherReport-ID")
                .le(5.1234)
                .medevacId("MedEvac-ID")
                .medicReq(true)
                .missionType("GROUND")
                .numAmbulatory(5)
                .numCasualties(5)
                .numKia(0)
                .numLitter(0)
                .numWia(3)
                .obstaclesRemarks("N/A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .pickupAlt(30.1234)
                .pickupTime(OffsetDateTime.parse("2021-10-20T16:00:00.123Z"))
                .reqCallSign("Bravo")
                .reqNum("MED.1.223908")
                .terrain("ROCKY")
                .terrainRemarks("N/A")
                .zoneContrCallSign("Tango")
                .zoneHot(false)
                .zoneMarking("ILLUMINATION")
                .zoneMarkingColor("RED")
                .zoneName("example-zone")
                .zoneSecurity("NO ENEMY")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EvacCreateParams.DataMode.TEST)
        assertThat(body.pickupLat()).isEqualTo(75.1234)
        assertThat(body.pickupLon()).isEqualTo(175.1234)
        assertThat(body.reqTime()).isEqualTo(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo(EvacCreateParams.Type.REQUEST)
        assertThat(body.id()).contains("MEDEVACEVENT-ID")
        assertThat(body.casualtyInfo().getOrNull())
            .containsExactly(
                EvacCreateParams.CasualtyInfo.builder()
                    .age(35)
                    .addAllergy(
                        EvacCreateParams.CasualtyInfo.Allergy.builder()
                            .comments("Comments on the patient's allergies.")
                            .type("PENICILLIN")
                            .build()
                    )
                    .bloodType("O NEG")
                    .bodyPart("FACE")
                    .burialLocation(listOf(-33.123, 150.33, 0.24))
                    .callSign("SHARK")
                    .careProviderUrn("CARE_PROVIDER-1")
                    .casualtyKey("casualty-007")
                    .casualtyType("DENTAL")
                    .collectionPoint(listOf(12.44, 122.55, 0.98))
                    .comments("Comments relating to this casualty info.")
                    .addCondition(
                        EvacCreateParams.CasualtyInfo.Condition.builder()
                            .bodyPart("ANKLE LEFT FRONT")
                            .comments("Comments on the patient's condition.")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("ACTIVITY LOW")
                            .build()
                    )
                    .contamType("NONE")
                    .disposition("EVACUATE WOUNDED")
                    .dispositionType("EVACUATE")
                    .addEtiology(
                        EvacCreateParams.CasualtyInfo.Etiology.builder()
                            .bodyPart("ARM LEFT FRONT")
                            .comments("Comments on the etiology info.")
                            .time(OffsetDateTime.parse("2021-10-16T16:00:00.123Z"))
                            .type("BURN")
                            .build()
                    )
                    .evacType("GROUND")
                    .gender("MALE")
                    .addHealthState(
                        EvacCreateParams.CasualtyInfo.HealthState.builder()
                            .healthStateCode("BLUE")
                            .medConfFactor(1)
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("COGNITIVE")
                            .build()
                    )
                    .addInjury(
                        EvacCreateParams.CasualtyInfo.Injury.builder()
                            .bodyPart("ARM LEFT FRONT")
                            .comments("Comments on the patient's injury.")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("ABRASION")
                            .build()
                    )
                    .last4Ssn("1234")
                    .addMedication(
                        EvacCreateParams.CasualtyInfo.Medication.builder()
                            .adminRoute("ORAL")
                            .bodyPart("ARM LEFT BACK")
                            .comments("Comments on the patient's medication information.")
                            .dose("800mg")
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .type("TYLENOL")
                            .build()
                    )
                    .name("John Smith")
                    .nationality("US")
                    .occSpeciality("Healthcare")
                    .patientIdentity("FRIEND CIVILIAN")
                    .patientStatus("US CIVILIAN")
                    .payGrade("CIVILIAN")
                    .priority("ROUTINE")
                    .reportGen("DEVICE")
                    .reportTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                    .service("CIV")
                    .addSpecMedEquip("OXYGEN")
                    .addSpecMedEquip("HOIST")
                    .addTreatment(
                        EvacCreateParams.CasualtyInfo.Treatment.builder()
                            .bodyPart("CHEST")
                            .comments("Comments on the treatment info.")
                            .time(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .type("BREATHING CHEST TUBE")
                            .build()
                    )
                    .addVitalSignData(
                        EvacCreateParams.CasualtyInfo.VitalSignData.builder()
                            .medConfFactor(1)
                            .time(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                            .vitalSign("HEART RATE")
                            .vitalSign1(120.0)
                            .vitalSign2(80.0)
                            .build()
                    )
                    .build()
            )
        assertThat(body.ce()).contains(10.1234)
        assertThat(body.cntctFreq()).contains(3.11)
        assertThat(body.comments()).contains("Comments concerning mission")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.enemyData().getOrNull())
            .containsExactly(
                EvacCreateParams.EnemyData.builder()
                    .dirToEnemy("NORTH")
                    .friendliesRemarks("Comments from friendlies.")
                    .hlzRemarks("Remarks about hot landing zone.")
                    .hostileFireType("SMALL ARMS")
                    .build()
            )
        assertThat(body.idWeatherReport()).contains("WeatherReport-ID")
        assertThat(body.le()).contains(5.1234)
        assertThat(body.medevacId()).contains("MedEvac-ID")
        assertThat(body.medicReq()).contains(true)
        assertThat(body.missionType()).contains("GROUND")
        assertThat(body.numAmbulatory()).contains(5)
        assertThat(body.numCasualties()).contains(5)
        assertThat(body.numKia()).contains(0)
        assertThat(body.numLitter()).contains(0)
        assertThat(body.numWia()).contains(3)
        assertThat(body.obstaclesRemarks()).contains("N/A")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.pickupAlt()).contains(30.1234)
        assertThat(body.pickupTime()).contains(OffsetDateTime.parse("2021-10-20T16:00:00.123Z"))
        assertThat(body.reqCallSign()).contains("Bravo")
        assertThat(body.reqNum()).contains("MED.1.223908")
        assertThat(body.terrain()).contains("ROCKY")
        assertThat(body.terrainRemarks()).contains("N/A")
        assertThat(body.zoneContrCallSign()).contains("Tango")
        assertThat(body.zoneHot()).contains(false)
        assertThat(body.zoneMarking()).contains("ILLUMINATION")
        assertThat(body.zoneMarkingColor()).contains("RED")
        assertThat(body.zoneName()).contains("example-zone")
        assertThat(body.zoneSecurity()).contains("NO ENEMY")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EvacCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EvacCreateParams.DataMode.TEST)
                .pickupLat(75.1234)
                .pickupLon(175.1234)
                .reqTime(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
                .source("Bluestaq")
                .type(EvacCreateParams.Type.REQUEST)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EvacCreateParams.DataMode.TEST)
        assertThat(body.pickupLat()).isEqualTo(75.1234)
        assertThat(body.pickupLon()).isEqualTo(175.1234)
        assertThat(body.reqTime()).isEqualTo(OffsetDateTime.parse("2021-10-15T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo(EvacCreateParams.Type.REQUEST)
    }
}
