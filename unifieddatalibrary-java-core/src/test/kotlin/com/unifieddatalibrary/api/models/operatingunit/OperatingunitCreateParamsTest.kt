// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.operatingunit

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OperatingunitCreateParamsTest {

    @Test
    fun create() {
        OperatingunitCreateParams.builder()
            .classificationMarking("U")
            .dataMode(OperatingunitCreateParams.DataMode.TEST)
            .name("SOME_NAME")
            .source("some.user")
            .airDefArea("AL006")
            .allegiance("OTHR")
            .altAllegiance("HL")
            .altCountryCode("IZ")
            .altOperatingUnitId("32100000000021")
            .classRating("1")
            .condition("RDY")
            .conditionAvail("A")
            .coord("340000000N0430000000E")
            .coordDatum("WGS")
            .coordDerivAcc(12.345)
            .countryCode("IQ")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .deployStatus("ND")
            .description("Description of unit")
            .divCat("5")
            .echelon("SHIP")
            .echelonTier("68")
            .elevMsl(123.45)
            .elevMslConfLvl(50)
            .elevMslDerivAcc(12.34)
            .eval(7)
            .flagFlown("IZ")
            .fleetId("A")
            .force("NV")
            .forceName("FORCE-NAME")
            .fpa("EOB")
            .functRole("MIL")
            .geoidalMslSep(12.34)
            .idContact("CONTACT-ID")
            .ident("FRIEND")
            .idLocation("LOCATION-ID")
            .idOperatingUnit("OPERATINGUNIT-ID")
            .idOrganization("ORGANIZATION-ID")
            .lat(45.23)
            .locName("LOCATION_NAME")
            .locReason("GR")
            .lon(179.1)
            .masterUnit(true)
            .milGrid("4QFJ12345678")
            .milGridSys("UTM")
            .msnPrimary("W6")
            .msnPrimarySpecialty("QK")
            .operStatus("OPR")
            .origin("THIRD_PARTY_DATASOURCE")
            .polSubdiv("IZ07")
            .recStatus("A")
            .referenceDoc("Provider Reference Documentation")
            .resProd("RT")
            .reviewDate(LocalDate.parse("2008-06-10"))
            .stylizedUnit(true)
            .symCode("SOGPU----------")
            .unitIdentifier("AZXAZ12345")
            .utm("19P4390691376966")
            .wac("0427")
            .build()
    }

    @Test
    fun body() {
        val params =
            OperatingunitCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitCreateParams.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altOperatingUnitId("32100000000021")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .countryCode("IQ")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deployStatus("ND")
                .description("Description of unit")
                .divCat("5")
                .echelon("SHIP")
                .echelonTier("68")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eval(7)
                .flagFlown("IZ")
                .fleetId("A")
                .force("NV")
                .forceName("FORCE-NAME")
                .fpa("EOB")
                .functRole("MIL")
                .geoidalMslSep(12.34)
                .idContact("CONTACT-ID")
                .ident("FRIEND")
                .idLocation("LOCATION-ID")
                .idOperatingUnit("OPERATINGUNIT-ID")
                .idOrganization("ORGANIZATION-ID")
                .lat(45.23)
                .locName("LOCATION_NAME")
                .locReason("GR")
                .lon(179.1)
                .masterUnit(true)
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .msnPrimary("W6")
                .msnPrimarySpecialty("QK")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .stylizedUnit(true)
                .symCode("SOGPU----------")
                .unitIdentifier("AZXAZ12345")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OperatingunitCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("SOME_NAME")
        assertThat(body.source()).isEqualTo("some.user")
        assertThat(body.airDefArea()).contains("AL006")
        assertThat(body.allegiance()).contains("OTHR")
        assertThat(body.altAllegiance()).contains("HL")
        assertThat(body.altCountryCode()).contains("IZ")
        assertThat(body.altOperatingUnitId()).contains("32100000000021")
        assertThat(body.classRating()).contains("1")
        assertThat(body.condition()).contains("RDY")
        assertThat(body.conditionAvail()).contains("A")
        assertThat(body.coord()).contains("340000000N0430000000E")
        assertThat(body.coordDatum()).contains("WGS")
        assertThat(body.coordDerivAcc()).contains(12.345)
        assertThat(body.countryCode()).contains("IQ")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.deployStatus()).contains("ND")
        assertThat(body.description()).contains("Description of unit")
        assertThat(body.divCat()).contains("5")
        assertThat(body.echelon()).contains("SHIP")
        assertThat(body.echelonTier()).contains("68")
        assertThat(body.elevMsl()).contains(123.45)
        assertThat(body.elevMslConfLvl()).contains(50)
        assertThat(body.elevMslDerivAcc()).contains(12.34)
        assertThat(body.eval()).contains(7)
        assertThat(body.flagFlown()).contains("IZ")
        assertThat(body.fleetId()).contains("A")
        assertThat(body.force()).contains("NV")
        assertThat(body.forceName()).contains("FORCE-NAME")
        assertThat(body.fpa()).contains("EOB")
        assertThat(body.functRole()).contains("MIL")
        assertThat(body.geoidalMslSep()).contains(12.34)
        assertThat(body.idContact()).contains("CONTACT-ID")
        assertThat(body.ident()).contains("FRIEND")
        assertThat(body.idLocation()).contains("LOCATION-ID")
        assertThat(body.idOperatingUnit()).contains("OPERATINGUNIT-ID")
        assertThat(body.idOrganization()).contains("ORGANIZATION-ID")
        assertThat(body.lat()).contains(45.23)
        assertThat(body.locName()).contains("LOCATION_NAME")
        assertThat(body.locReason()).contains("GR")
        assertThat(body.lon()).contains(179.1)
        assertThat(body.masterUnit()).contains(true)
        assertThat(body.milGrid()).contains("4QFJ12345678")
        assertThat(body.milGridSys()).contains("UTM")
        assertThat(body.msnPrimary()).contains("W6")
        assertThat(body.msnPrimarySpecialty()).contains("QK")
        assertThat(body.operStatus()).contains("OPR")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.polSubdiv()).contains("IZ07")
        assertThat(body.recStatus()).contains("A")
        assertThat(body.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(body.resProd()).contains("RT")
        assertThat(body.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(body.stylizedUnit()).contains(true)
        assertThat(body.symCode()).contains("SOGPU----------")
        assertThat(body.unitIdentifier()).contains("AZXAZ12345")
        assertThat(body.utm()).contains("19P4390691376966")
        assertThat(body.wac()).contains("0427")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OperatingunitCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OperatingunitCreateParams.DataMode.TEST)
                .name("SOME_NAME")
                .source("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OperatingunitCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("SOME_NAME")
        assertThat(body.source()).isEqualTo("some.user")
    }
}
