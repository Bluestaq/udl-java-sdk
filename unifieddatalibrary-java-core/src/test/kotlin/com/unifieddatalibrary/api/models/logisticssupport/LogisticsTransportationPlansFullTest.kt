// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.logisticssupport

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LogisticsTransportationPlansFullTest {

    @Test
    fun create() {
        val logisticsTransportationPlansFull =
            LogisticsTransportationPlansFull.builder()
                .actDepTime(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
                .aircraftStatus("NMCMU")
                .approxArrTime(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .cancelledDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .closedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .coordinator("SMITH, JOHN")
                .coordinatorUnit("TACC")
                .destinationIcao("YBCS")
                .duration("086:20")
                .estArrTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                .estDepTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                .lastChangedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .logisticMasterRecordId("L62126")
                .addLogisticsSegment(
                    LogisticsSegmentsFull.builder()
                        .arrivalIcao("YBCS")
                        .departureIcao("PHIK")
                        .extMissionId("2001101RF01202307062205")
                        .idMission("EXAMPLE-UUID")
                        .itin(200)
                        .missionNumber("TAM308901196")
                        .missionType("SAAM")
                        .modeCode("A")
                        .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segAircraftMds("B7772E")
                        .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segmentNumber(3)
                        .segTailNumber("N819AX")
                        .build()
                )
                .addLogisticsTransportationPlansRemark(
                    LogisticsRemarksFull.builder()
                        .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                        .remark("EXAMPLE REMARK")
                        .username("JSMITH")
                        .build()
                )
                .majcom("HQAMC")
                .missionChange(false)
                .numEnrouteStops(4)
                .numTransLoads(3)
                .originIcao("KATL")
                .planDefinition("DEPLOY")
                .plansNumber("T89002")
                .serialNumber("9009209")
                .statusCode("N")
                .tpAircraftMds("C17A")
                .tpTailNumber("99209")
                .build()

        assertThat(logisticsTransportationPlansFull.actDepTime())
            .contains(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
        assertThat(logisticsTransportationPlansFull.aircraftStatus()).contains("NMCMU")
        assertThat(logisticsTransportationPlansFull.approxArrTime())
            .contains(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
        assertThat(logisticsTransportationPlansFull.cancelledDate())
            .contains(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
        assertThat(logisticsTransportationPlansFull.closedDate())
            .contains(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
        assertThat(logisticsTransportationPlansFull.coordinator()).contains("SMITH, JOHN")
        assertThat(logisticsTransportationPlansFull.coordinatorUnit()).contains("TACC")
        assertThat(logisticsTransportationPlansFull.destinationIcao()).contains("YBCS")
        assertThat(logisticsTransportationPlansFull.duration()).contains("086:20")
        assertThat(logisticsTransportationPlansFull.estArrTime())
            .contains(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
        assertThat(logisticsTransportationPlansFull.estDepTime())
            .contains(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
        assertThat(logisticsTransportationPlansFull.lastChangedDate())
            .contains(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
        assertThat(logisticsTransportationPlansFull.logisticMasterRecordId()).contains("L62126")
        assertThat(logisticsTransportationPlansFull.logisticsSegments().getOrNull())
            .containsExactly(
                LogisticsSegmentsFull.builder()
                    .arrivalIcao("YBCS")
                    .departureIcao("PHIK")
                    .extMissionId("2001101RF01202307062205")
                    .idMission("EXAMPLE-UUID")
                    .itin(200)
                    .missionNumber("TAM308901196")
                    .missionType("SAAM")
                    .modeCode("A")
                    .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                    .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                    .segAircraftMds("B7772E")
                    .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                    .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                    .segmentNumber(3)
                    .segTailNumber("N819AX")
                    .build()
            )
        assertThat(
                logisticsTransportationPlansFull.logisticsTransportationPlansRemarks().getOrNull()
            )
            .containsExactly(
                LogisticsRemarksFull.builder()
                    .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                    .remark("EXAMPLE REMARK")
                    .username("JSMITH")
                    .build()
            )
        assertThat(logisticsTransportationPlansFull.majcom()).contains("HQAMC")
        assertThat(logisticsTransportationPlansFull.missionChange()).contains(false)
        assertThat(logisticsTransportationPlansFull.numEnrouteStops()).contains(4)
        assertThat(logisticsTransportationPlansFull.numTransLoads()).contains(3)
        assertThat(logisticsTransportationPlansFull.originIcao()).contains("KATL")
        assertThat(logisticsTransportationPlansFull.planDefinition()).contains("DEPLOY")
        assertThat(logisticsTransportationPlansFull.plansNumber()).contains("T89002")
        assertThat(logisticsTransportationPlansFull.serialNumber()).contains("9009209")
        assertThat(logisticsTransportationPlansFull.statusCode()).contains("N")
        assertThat(logisticsTransportationPlansFull.tpAircraftMds()).contains("C17A")
        assertThat(logisticsTransportationPlansFull.tpTailNumber()).contains("99209")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val logisticsTransportationPlansFull =
            LogisticsTransportationPlansFull.builder()
                .actDepTime(OffsetDateTime.parse("2023-07-14T19:37:00.123Z"))
                .aircraftStatus("NMCMU")
                .approxArrTime(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .cancelledDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .closedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .coordinator("SMITH, JOHN")
                .coordinatorUnit("TACC")
                .destinationIcao("YBCS")
                .duration("086:20")
                .estArrTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                .estDepTime(OffsetDateTime.parse("2023-07-15T14:25:00.123Z"))
                .lastChangedDate(OffsetDateTime.parse("2023-07-14T20:37:00.123Z"))
                .logisticMasterRecordId("L62126")
                .addLogisticsSegment(
                    LogisticsSegmentsFull.builder()
                        .arrivalIcao("YBCS")
                        .departureIcao("PHIK")
                        .extMissionId("2001101RF01202307062205")
                        .idMission("EXAMPLE-UUID")
                        .itin(200)
                        .missionNumber("TAM308901196")
                        .missionType("SAAM")
                        .modeCode("A")
                        .segActArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segActDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segAircraftMds("B7772E")
                        .segEstArrTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segEstDepTime(OffsetDateTime.parse("2023-07-17T19:20:00.123Z"))
                        .segmentNumber(3)
                        .segTailNumber("N819AX")
                        .build()
                )
                .addLogisticsTransportationPlansRemark(
                    LogisticsRemarksFull.builder()
                        .lastChanged(OffsetDateTime.parse("2023-07-17T10:30:00.123Z"))
                        .remark("EXAMPLE REMARK")
                        .username("JSMITH")
                        .build()
                )
                .majcom("HQAMC")
                .missionChange(false)
                .numEnrouteStops(4)
                .numTransLoads(3)
                .originIcao("KATL")
                .planDefinition("DEPLOY")
                .plansNumber("T89002")
                .serialNumber("9009209")
                .statusCode("N")
                .tpAircraftMds("C17A")
                .tpTailNumber("99209")
                .build()

        val roundtrippedLogisticsTransportationPlansFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(logisticsTransportationPlansFull),
                jacksonTypeRef<LogisticsTransportationPlansFull>(),
            )

        assertThat(roundtrippedLogisticsTransportationPlansFull)
            .isEqualTo(logisticsTransportationPlansFull)
    }
}
