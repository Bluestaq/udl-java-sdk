// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.trackdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TrackDetailListResponseTest {

    @Test
    fun create() {
        val trackDetailListResponse =
            TrackDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(TrackDetailListResponse.DataMode.TEST)
                .lat(19.88550102)
                .lon(46.74596844)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("TRACK-DETAILS-ID")
                .acftSubType("SLBM")
                .addInfo("Additional information")
                .alert("TGT")
                .alt(153.01)
                .angElev(15.2)
                .antennaRefDimensions(listOf(50.1, 50.1, 20.1, 20.1))
                .aouRptData(listOf(34.3, 26.5, 1.2))
                .aouRptType("ELLIPSE")
                .appGrp("GP1")
                .arrCargo("Freight")
                .arrFlag("USA")
                .arrPort("Lanshan")
                .arrTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .aton("Cardinal Mark N")
                .avgSpd(18.25)
                .azCorrArcWidth(71.76)
                .azCorrCenterLine(12.876)
                .beNumber("ENC-123")
                .boosting(false)
                .burnoutAlt(30567.452)
                .callSign("Charlie")
                .cargoType("Freight")
                .cI("BB")
                .containment(97.0)
                .coopLocInd("COOPERATIVE")
                .course(4.3580153)
                .cpa(500.0)
                .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .createdBy("some.user")
                .depCargo("Freight")
                .depFlag("USA")
                .depPort("Lanshan")
                .desCargo("Freight")
                .desFlag("USA")
                .destination("USCLE")
                .disId("7670")
                .draught(21.1)
                .dropPtInd(false)
                .dummy(false)
                .ecefPos(listOf(1.23, 2.35, 3.42))
                .ecefVel(listOf(1.23, 2.35, 3.42))
                .elnot1("A123A")
                .elnot2("A123B")
                .emgInd(false)
                .emitterName("RAY1500")
                .env(TrackDetailListResponse.Env.LAND)
                .errAreaOrient(69.6)
                .errGeoAreaSwitch("CIRCLE_ELLIPSE")
                .errSemiIntAxis(7010.882)
                .errSemiMajElev(168.8)
                .eta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .etd(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .evalRating("A1")
                .feint(false)
                .freq(63.65)
                .ftn("FTN")
                .ftnCmd("TRUETT")
                .ftnMsgTs(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .harmonics("8,12,4")
                .hdng(19.7)
                .hq(false)
                .hullNum("A30081")
                .hullProf("Raised 1-23")
                .identAmp("JOKER")
                .iff("ID Mode")
                .imon(9015462)
                .impactAouData(listOf(34.3, 26.5, 1.2))
                .impactAouType("ELLIPSE")
                .impactLat(19.88550102)
                .impactLon(46.74550102)
                .impactTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .infoSource("S1")
                .installation(false)
                .launchAouData(listOf(34.3, 26.5, 1.2))
                .launchAouType("ELLIPSE")
                .launchLat(19.88550102)
                .launchLon(46.74550102)
                .launchTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .length(511.1)
                .lostTrkInd(false)
                .maneuverInd("POST_BOOST_NONE")
                .maxFreq(10324.53)
                .midbCat("20345")
                .mil2525Bstr("SHP*S----------")
                .mmsi(304010417)
                .msgType("PLATFORM")
                .mslStatus("AT LAUNCH")
                .muidSrc("MUID-SRC")
                .muidSrcTrk("MUID-SRC-ID")
                .name("TRACK-NAME")
                .navStatus("Underway Using Engine")
                .ntds("ZZ777")
                .numBlades(4)
                .numShafts(3)
                .objAct("HOLDING")
                .objIdent(TrackDetailListResponse.ObjIdent.FRIEND)
                .objNat("USA")
                .objPlat("WEAPON")
                .objType("TRACKED")
                .offPosInd("ON")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origXref("INT")
                .oSuffix("AA125")
                .pif("0137")
                .pin("E12345012")
                .polarSingLocLat(19.88550102)
                .polarSingLocLon(46.74550102)
                .posDeviceType("GPS")
                .prf(17.65)
                .pri(56657.2238)
                .propRpm(8.2)
                .propType("Diesel")
                .pw(1347.45)
                .reduced(false)
                .reinforced(false)
                .rptArchived(false)
                .rptChxref("INT")
                .addRtn("ex-a")
                .rtnCmd("YORKTOWN")
                .addRtnMsgT(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .rtnTrkState("Local_RTN")
                .scanRate(12.01)
                .scanType("UNK")
                .scn(1474305)
                .sconum("B45524")
                .selfReport(false)
                .sen("OTH")
                .shipClass("Nimitz")
                .shortName("COMMSCHECK")
                .sourceUid("MCS")
                .spaceAmp("NUCLEAR WARHEAD")
                .spaceAmpConf(6)
                .spaceSpecType("SS-21_MOD_2_CRBM")
                .spd(15.03443)
                .staffCmts("Staff Comments")
                .sternType("Cruiser")
                .taskForce(false)
                .tcpa(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .tesEventId("6217")
                .tol(4.1)
                .tpk(2.65)
                .trkConf(0.95)
                .trkId("trkId")
                .trkNum("trkNum")
                .trkQual(1)
                .trkScope("OTH")
                .trnspdrId("11")
                .trnspdrType("AFTS")
                .vslWt(3423.76)
                .width(24.1)
                .build()

        assertThat(trackDetailListResponse.classificationMarking()).isEqualTo("U")
        assertThat(trackDetailListResponse.dataMode())
            .isEqualTo(TrackDetailListResponse.DataMode.TEST)
        assertThat(trackDetailListResponse.lat()).isEqualTo(19.88550102)
        assertThat(trackDetailListResponse.lon()).isEqualTo(46.74596844)
        assertThat(trackDetailListResponse.source()).isEqualTo("Bluestaq")
        assertThat(trackDetailListResponse.ts())
            .isEqualTo(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.id()).contains("TRACK-DETAILS-ID")
        assertThat(trackDetailListResponse.acftSubType()).contains("SLBM")
        assertThat(trackDetailListResponse.addInfo()).contains("Additional information")
        assertThat(trackDetailListResponse.alert()).contains("TGT")
        assertThat(trackDetailListResponse.alt()).contains(153.01)
        assertThat(trackDetailListResponse.angElev()).contains(15.2)
        assertThat(trackDetailListResponse.antennaRefDimensions().getOrNull())
            .containsExactly(50.1, 50.1, 20.1, 20.1)
        assertThat(trackDetailListResponse.aouRptData().getOrNull())
            .containsExactly(34.3, 26.5, 1.2)
        assertThat(trackDetailListResponse.aouRptType()).contains("ELLIPSE")
        assertThat(trackDetailListResponse.appGrp()).contains("GP1")
        assertThat(trackDetailListResponse.arrCargo()).contains("Freight")
        assertThat(trackDetailListResponse.arrFlag()).contains("USA")
        assertThat(trackDetailListResponse.arrPort()).contains("Lanshan")
        assertThat(trackDetailListResponse.arrTime())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.aton()).contains("Cardinal Mark N")
        assertThat(trackDetailListResponse.avgSpd()).contains(18.25)
        assertThat(trackDetailListResponse.azCorrArcWidth()).contains(71.76)
        assertThat(trackDetailListResponse.azCorrCenterLine()).contains(12.876)
        assertThat(trackDetailListResponse.beNumber()).contains("ENC-123")
        assertThat(trackDetailListResponse.boosting()).contains(false)
        assertThat(trackDetailListResponse.burnoutAlt()).contains(30567.452)
        assertThat(trackDetailListResponse.callSign()).contains("Charlie")
        assertThat(trackDetailListResponse.cargoType()).contains("Freight")
        assertThat(trackDetailListResponse.cI()).contains("BB")
        assertThat(trackDetailListResponse.containment()).contains(97.0)
        assertThat(trackDetailListResponse.coopLocInd()).contains("COOPERATIVE")
        assertThat(trackDetailListResponse.course()).contains(4.3580153)
        assertThat(trackDetailListResponse.cpa()).contains(500.0)
        assertThat(trackDetailListResponse.createdAt())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
        assertThat(trackDetailListResponse.createdBy()).contains("some.user")
        assertThat(trackDetailListResponse.depCargo()).contains("Freight")
        assertThat(trackDetailListResponse.depFlag()).contains("USA")
        assertThat(trackDetailListResponse.depPort()).contains("Lanshan")
        assertThat(trackDetailListResponse.desCargo()).contains("Freight")
        assertThat(trackDetailListResponse.desFlag()).contains("USA")
        assertThat(trackDetailListResponse.destination()).contains("USCLE")
        assertThat(trackDetailListResponse.disId()).contains("7670")
        assertThat(trackDetailListResponse.draught()).contains(21.1)
        assertThat(trackDetailListResponse.dropPtInd()).contains(false)
        assertThat(trackDetailListResponse.dummy()).contains(false)
        assertThat(trackDetailListResponse.ecefPos().getOrNull()).containsExactly(1.23, 2.35, 3.42)
        assertThat(trackDetailListResponse.ecefVel().getOrNull()).containsExactly(1.23, 2.35, 3.42)
        assertThat(trackDetailListResponse.elnot1()).contains("A123A")
        assertThat(trackDetailListResponse.elnot2()).contains("A123B")
        assertThat(trackDetailListResponse.emgInd()).contains(false)
        assertThat(trackDetailListResponse.emitterName()).contains("RAY1500")
        assertThat(trackDetailListResponse.env()).contains(TrackDetailListResponse.Env.LAND)
        assertThat(trackDetailListResponse.errAreaOrient()).contains(69.6)
        assertThat(trackDetailListResponse.errGeoAreaSwitch()).contains("CIRCLE_ELLIPSE")
        assertThat(trackDetailListResponse.errSemiIntAxis()).contains(7010.882)
        assertThat(trackDetailListResponse.errSemiMajElev()).contains(168.8)
        assertThat(trackDetailListResponse.eta())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.etd())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.evalRating()).contains("A1")
        assertThat(trackDetailListResponse.feint()).contains(false)
        assertThat(trackDetailListResponse.freq()).contains(63.65)
        assertThat(trackDetailListResponse.ftn()).contains("FTN")
        assertThat(trackDetailListResponse.ftnCmd()).contains("TRUETT")
        assertThat(trackDetailListResponse.ftnMsgTs())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.harmonics()).contains("8,12,4")
        assertThat(trackDetailListResponse.hdng()).contains(19.7)
        assertThat(trackDetailListResponse.hq()).contains(false)
        assertThat(trackDetailListResponse.hullNum()).contains("A30081")
        assertThat(trackDetailListResponse.hullProf()).contains("Raised 1-23")
        assertThat(trackDetailListResponse.identAmp()).contains("JOKER")
        assertThat(trackDetailListResponse.iff()).contains("ID Mode")
        assertThat(trackDetailListResponse.imon()).contains(9015462)
        assertThat(trackDetailListResponse.impactAouData().getOrNull())
            .containsExactly(34.3, 26.5, 1.2)
        assertThat(trackDetailListResponse.impactAouType()).contains("ELLIPSE")
        assertThat(trackDetailListResponse.impactLat()).contains(19.88550102)
        assertThat(trackDetailListResponse.impactLon()).contains(46.74550102)
        assertThat(trackDetailListResponse.impactTime())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.infoSource()).contains("S1")
        assertThat(trackDetailListResponse.installation()).contains(false)
        assertThat(trackDetailListResponse.launchAouData().getOrNull())
            .containsExactly(34.3, 26.5, 1.2)
        assertThat(trackDetailListResponse.launchAouType()).contains("ELLIPSE")
        assertThat(trackDetailListResponse.launchLat()).contains(19.88550102)
        assertThat(trackDetailListResponse.launchLon()).contains(46.74550102)
        assertThat(trackDetailListResponse.launchTime())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.length()).contains(511.1)
        assertThat(trackDetailListResponse.lostTrkInd()).contains(false)
        assertThat(trackDetailListResponse.maneuverInd()).contains("POST_BOOST_NONE")
        assertThat(trackDetailListResponse.maxFreq()).contains(10324.53)
        assertThat(trackDetailListResponse.midbCat()).contains("20345")
        assertThat(trackDetailListResponse.mil2525Bstr()).contains("SHP*S----------")
        assertThat(trackDetailListResponse.mmsi()).contains(304010417)
        assertThat(trackDetailListResponse.msgType()).contains("PLATFORM")
        assertThat(trackDetailListResponse.mslStatus()).contains("AT LAUNCH")
        assertThat(trackDetailListResponse.muidSrc()).contains("MUID-SRC")
        assertThat(trackDetailListResponse.muidSrcTrk()).contains("MUID-SRC-ID")
        assertThat(trackDetailListResponse.name()).contains("TRACK-NAME")
        assertThat(trackDetailListResponse.navStatus()).contains("Underway Using Engine")
        assertThat(trackDetailListResponse.ntds()).contains("ZZ777")
        assertThat(trackDetailListResponse.numBlades()).contains(4)
        assertThat(trackDetailListResponse.numShafts()).contains(3)
        assertThat(trackDetailListResponse.objAct()).contains("HOLDING")
        assertThat(trackDetailListResponse.objIdent())
            .contains(TrackDetailListResponse.ObjIdent.FRIEND)
        assertThat(trackDetailListResponse.objNat()).contains("USA")
        assertThat(trackDetailListResponse.objPlat()).contains("WEAPON")
        assertThat(trackDetailListResponse.objType()).contains("TRACKED")
        assertThat(trackDetailListResponse.offPosInd()).contains("ON")
        assertThat(trackDetailListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(trackDetailListResponse.origNetwork()).contains("ORIG")
        assertThat(trackDetailListResponse.origXref()).contains("INT")
        assertThat(trackDetailListResponse.oSuffix()).contains("AA125")
        assertThat(trackDetailListResponse.pif()).contains("0137")
        assertThat(trackDetailListResponse.pin()).contains("E12345012")
        assertThat(trackDetailListResponse.polarSingLocLat()).contains(19.88550102)
        assertThat(trackDetailListResponse.polarSingLocLon()).contains(46.74550102)
        assertThat(trackDetailListResponse.posDeviceType()).contains("GPS")
        assertThat(trackDetailListResponse.prf()).contains(17.65)
        assertThat(trackDetailListResponse.pri()).contains(56657.2238)
        assertThat(trackDetailListResponse.propRpm()).contains(8.2)
        assertThat(trackDetailListResponse.propType()).contains("Diesel")
        assertThat(trackDetailListResponse.pw()).contains(1347.45)
        assertThat(trackDetailListResponse.reduced()).contains(false)
        assertThat(trackDetailListResponse.reinforced()).contains(false)
        assertThat(trackDetailListResponse.rptArchived()).contains(false)
        assertThat(trackDetailListResponse.rptChxref()).contains("INT")
        assertThat(trackDetailListResponse.rtn().getOrNull()).containsExactly("ex-a")
        assertThat(trackDetailListResponse.rtnCmd()).contains("YORKTOWN")
        assertThat(trackDetailListResponse.rtnMsgTs().getOrNull())
            .containsExactly(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(trackDetailListResponse.rtnTrkState()).contains("Local_RTN")
        assertThat(trackDetailListResponse.scanRate()).contains(12.01)
        assertThat(trackDetailListResponse.scanType()).contains("UNK")
        assertThat(trackDetailListResponse.scn()).contains(1474305)
        assertThat(trackDetailListResponse.sconum()).contains("B45524")
        assertThat(trackDetailListResponse.selfReport()).contains(false)
        assertThat(trackDetailListResponse.sen()).contains("OTH")
        assertThat(trackDetailListResponse.shipClass()).contains("Nimitz")
        assertThat(trackDetailListResponse.shortName()).contains("COMMSCHECK")
        assertThat(trackDetailListResponse.sourceUid()).contains("MCS")
        assertThat(trackDetailListResponse.spaceAmp()).contains("NUCLEAR WARHEAD")
        assertThat(trackDetailListResponse.spaceAmpConf()).contains(6)
        assertThat(trackDetailListResponse.spaceSpecType()).contains("SS-21_MOD_2_CRBM")
        assertThat(trackDetailListResponse.spd()).contains(15.03443)
        assertThat(trackDetailListResponse.staffCmts()).contains("Staff Comments")
        assertThat(trackDetailListResponse.sternType()).contains("Cruiser")
        assertThat(trackDetailListResponse.taskForce()).contains(false)
        assertThat(trackDetailListResponse.tcpa())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
        assertThat(trackDetailListResponse.tesEventId()).contains("6217")
        assertThat(trackDetailListResponse.tol()).contains(4.1)
        assertThat(trackDetailListResponse.tpk()).contains(2.65)
        assertThat(trackDetailListResponse.trkConf()).contains(0.95)
        assertThat(trackDetailListResponse.trkId()).contains("trkId")
        assertThat(trackDetailListResponse.trkNum()).contains("trkNum")
        assertThat(trackDetailListResponse.trkQual()).contains(1)
        assertThat(trackDetailListResponse.trkScope()).contains("OTH")
        assertThat(trackDetailListResponse.trnspdrId()).contains("11")
        assertThat(trackDetailListResponse.trnspdrType()).contains("AFTS")
        assertThat(trackDetailListResponse.vslWt()).contains(3423.76)
        assertThat(trackDetailListResponse.width()).contains(24.1)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val trackDetailListResponse =
            TrackDetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(TrackDetailListResponse.DataMode.TEST)
                .lat(19.88550102)
                .lon(46.74596844)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("TRACK-DETAILS-ID")
                .acftSubType("SLBM")
                .addInfo("Additional information")
                .alert("TGT")
                .alt(153.01)
                .angElev(15.2)
                .antennaRefDimensions(listOf(50.1, 50.1, 20.1, 20.1))
                .aouRptData(listOf(34.3, 26.5, 1.2))
                .aouRptType("ELLIPSE")
                .appGrp("GP1")
                .arrCargo("Freight")
                .arrFlag("USA")
                .arrPort("Lanshan")
                .arrTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .aton("Cardinal Mark N")
                .avgSpd(18.25)
                .azCorrArcWidth(71.76)
                .azCorrCenterLine(12.876)
                .beNumber("ENC-123")
                .boosting(false)
                .burnoutAlt(30567.452)
                .callSign("Charlie")
                .cargoType("Freight")
                .cI("BB")
                .containment(97.0)
                .coopLocInd("COOPERATIVE")
                .course(4.3580153)
                .cpa(500.0)
                .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .createdBy("some.user")
                .depCargo("Freight")
                .depFlag("USA")
                .depPort("Lanshan")
                .desCargo("Freight")
                .desFlag("USA")
                .destination("USCLE")
                .disId("7670")
                .draught(21.1)
                .dropPtInd(false)
                .dummy(false)
                .ecefPos(listOf(1.23, 2.35, 3.42))
                .ecefVel(listOf(1.23, 2.35, 3.42))
                .elnot1("A123A")
                .elnot2("A123B")
                .emgInd(false)
                .emitterName("RAY1500")
                .env(TrackDetailListResponse.Env.LAND)
                .errAreaOrient(69.6)
                .errGeoAreaSwitch("CIRCLE_ELLIPSE")
                .errSemiIntAxis(7010.882)
                .errSemiMajElev(168.8)
                .eta(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .etd(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .evalRating("A1")
                .feint(false)
                .freq(63.65)
                .ftn("FTN")
                .ftnCmd("TRUETT")
                .ftnMsgTs(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .harmonics("8,12,4")
                .hdng(19.7)
                .hq(false)
                .hullNum("A30081")
                .hullProf("Raised 1-23")
                .identAmp("JOKER")
                .iff("ID Mode")
                .imon(9015462)
                .impactAouData(listOf(34.3, 26.5, 1.2))
                .impactAouType("ELLIPSE")
                .impactLat(19.88550102)
                .impactLon(46.74550102)
                .impactTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .infoSource("S1")
                .installation(false)
                .launchAouData(listOf(34.3, 26.5, 1.2))
                .launchAouType("ELLIPSE")
                .launchLat(19.88550102)
                .launchLon(46.74550102)
                .launchTime(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .length(511.1)
                .lostTrkInd(false)
                .maneuverInd("POST_BOOST_NONE")
                .maxFreq(10324.53)
                .midbCat("20345")
                .mil2525Bstr("SHP*S----------")
                .mmsi(304010417)
                .msgType("PLATFORM")
                .mslStatus("AT LAUNCH")
                .muidSrc("MUID-SRC")
                .muidSrcTrk("MUID-SRC-ID")
                .name("TRACK-NAME")
                .navStatus("Underway Using Engine")
                .ntds("ZZ777")
                .numBlades(4)
                .numShafts(3)
                .objAct("HOLDING")
                .objIdent(TrackDetailListResponse.ObjIdent.FRIEND)
                .objNat("USA")
                .objPlat("WEAPON")
                .objType("TRACKED")
                .offPosInd("ON")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origXref("INT")
                .oSuffix("AA125")
                .pif("0137")
                .pin("E12345012")
                .polarSingLocLat(19.88550102)
                .polarSingLocLon(46.74550102)
                .posDeviceType("GPS")
                .prf(17.65)
                .pri(56657.2238)
                .propRpm(8.2)
                .propType("Diesel")
                .pw(1347.45)
                .reduced(false)
                .reinforced(false)
                .rptArchived(false)
                .rptChxref("INT")
                .addRtn("ex-a")
                .rtnCmd("YORKTOWN")
                .addRtnMsgT(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .rtnTrkState("Local_RTN")
                .scanRate(12.01)
                .scanType("UNK")
                .scn(1474305)
                .sconum("B45524")
                .selfReport(false)
                .sen("OTH")
                .shipClass("Nimitz")
                .shortName("COMMSCHECK")
                .sourceUid("MCS")
                .spaceAmp("NUCLEAR WARHEAD")
                .spaceAmpConf(6)
                .spaceSpecType("SS-21_MOD_2_CRBM")
                .spd(15.03443)
                .staffCmts("Staff Comments")
                .sternType("Cruiser")
                .taskForce(false)
                .tcpa(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .tesEventId("6217")
                .tol(4.1)
                .tpk(2.65)
                .trkConf(0.95)
                .trkId("trkId")
                .trkNum("trkNum")
                .trkQual(1)
                .trkScope("OTH")
                .trnspdrId("11")
                .trnspdrType("AFTS")
                .vslWt(3423.76)
                .width(24.1)
                .build()

        val roundtrippedTrackDetailListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(trackDetailListResponse),
                jacksonTypeRef<TrackDetailListResponse>(),
            )

        assertThat(roundtrippedTrackDetailListResponse).isEqualTo(trackDetailListResponse)
    }
}
