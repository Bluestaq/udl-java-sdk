// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.laserdeconflictrequest.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.laserdeconflictrequest.FixedPointFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryListResponseTest {

    @Test
    fun create() {
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .endDate(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
                .addIdLaserEmitter("2346c0a0-585f-4232-af5d-93bad320fdc0")
                .addIdLaserEmitter("4446c0a0-585f-4232-af5d-93bad320fbb1")
                .numTargets(25)
                .requestId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .requestTs(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
                .source("Bluestaq")
                .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .centerlineAzimuth(20.3)
                .centerlineElevation(19.434)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .defaultCha(2.5)
                .enableDss(true)
                .addFixedPoint(
                    FixedPointFull.builder()
                        .latitude(-10.18)
                        .longitude(-179.98)
                        .height(-18.13)
                        .build()
                )
                .geopotentialModel("WGS84")
                .idOnOrbit("ONORBIT-ID")
                .addLaserDeconflictTarget(
                    HistoryListResponse.LaserDeconflictTarget.builder()
                        .classificationMarking("U")
                        .dataMode(HistoryListResponse.LaserDeconflictTarget.DataMode.TEST)
                        .source("Bluestaq")
                        .id("026dd511-8ba5-47d3-9909-836149f87686")
                        .azimuth(27.91)
                        .azimuthEnd(90.5)
                        .azimuthIncrement(1.5)
                        .azimuthStart(60.5)
                        .centerlineAzimuth(11.02)
                        .centerlineElevation(1.68)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .declination(10.23)
                        .elevation(17.09)
                        .elevationEnd(88.05)
                        .elevationIncrement(0.5)
                        .elevationStart(67.05)
                        .addFixedPoint(
                            FixedPointFull.builder()
                                .latitude(-10.18)
                                .longitude(-179.98)
                                .height(-18.13)
                                .build()
                        )
                        .idLaserDeconflictRequest("026dd511-8ba5-47d3-9909-836149f87686")
                        .lengthCenterline(369.79)
                        .lengthLeftRight(20.23)
                        .lengthUpDown(28.67)
                        .maximumHeight(0.5)
                        .minimumHeight(0.25)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ra(11.93)
                        .solarSystemBody("MARS")
                        .sourceDl("AXE")
                        .starNumber(3791)
                        .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                        .targetNumber(100)
                        .targetObjectId("TARGET-ID")
                        .targetObjectNo(46852)
                        .build()
                )
                .laserSystemName("HEL-1")
                .lengthCenterline(79.35)
                .lengthLeftRight(56.23)
                .lengthUpDown(22.6)
                .maximumHeight(440.3)
                .minimumHeight(0.5)
                .missionName("USSF LP 18-1 Test Laser")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .platformLocationName("Vandenberg")
                .platformLocationType("FIXED_POINT")
                .programId("performance_test_llh-sat")
                .propagator("GP")
                .addProtectList(1234)
                .addProtectList(5678)
                .satNo(46852)
                .sourceDl("AXE")
                .sourceEnabled(false)
                .status("REQUESTED")
                .addTag("TAG1")
                .addTag("TAG2")
                .targetEnabled(true)
                .targetType("BOX_CENTERPOINT_LINE")
                .transactionId("TRANSACTION-ID")
                .treatEarthAs("VICTIM")
                .useFieldOfRegard(true)
                .victimEnabled(true)
                .build()

        assertThat(historyListResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyListResponse.dataMode()).isEqualTo(HistoryListResponse.DataMode.TEST)
        assertThat(historyListResponse.endDate())
            .isEqualTo(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
        assertThat(historyListResponse.idLaserEmitters())
            .containsExactly(
                "2346c0a0-585f-4232-af5d-93bad320fdc0",
                "4446c0a0-585f-4232-af5d-93bad320fbb1",
            )
        assertThat(historyListResponse.numTargets()).isEqualTo(25)
        assertThat(historyListResponse.requestId())
            .isEqualTo("3856c0a0-585f-4232-af5d-93bad320fac6")
        assertThat(historyListResponse.requestTs())
            .isEqualTo(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
        assertThat(historyListResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyListResponse.startDate())
            .isEqualTo(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
        assertThat(historyListResponse.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(historyListResponse.centerlineAzimuth()).contains(20.3)
        assertThat(historyListResponse.centerlineElevation()).contains(19.434)
        assertThat(historyListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.createdBy()).contains("some.user")
        assertThat(historyListResponse.defaultCha()).contains(2.5)
        assertThat(historyListResponse.enableDss()).contains(true)
        assertThat(historyListResponse.fixedPoints().getOrNull())
            .containsExactly(
                FixedPointFull.builder().latitude(-10.18).longitude(-179.98).height(-18.13).build()
            )
        assertThat(historyListResponse.geopotentialModel()).contains("WGS84")
        assertThat(historyListResponse.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(historyListResponse.laserDeconflictTargets().getOrNull())
            .containsExactly(
                HistoryListResponse.LaserDeconflictTarget.builder()
                    .classificationMarking("U")
                    .dataMode(HistoryListResponse.LaserDeconflictTarget.DataMode.TEST)
                    .source("Bluestaq")
                    .id("026dd511-8ba5-47d3-9909-836149f87686")
                    .azimuth(27.91)
                    .azimuthEnd(90.5)
                    .azimuthIncrement(1.5)
                    .azimuthStart(60.5)
                    .centerlineAzimuth(11.02)
                    .centerlineElevation(1.68)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(10.23)
                    .elevation(17.09)
                    .elevationEnd(88.05)
                    .elevationIncrement(0.5)
                    .elevationStart(67.05)
                    .addFixedPoint(
                        FixedPointFull.builder()
                            .latitude(-10.18)
                            .longitude(-179.98)
                            .height(-18.13)
                            .build()
                    )
                    .idLaserDeconflictRequest("026dd511-8ba5-47d3-9909-836149f87686")
                    .lengthCenterline(369.79)
                    .lengthLeftRight(20.23)
                    .lengthUpDown(28.67)
                    .maximumHeight(0.5)
                    .minimumHeight(0.25)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ra(11.93)
                    .solarSystemBody("MARS")
                    .sourceDl("AXE")
                    .starNumber(3791)
                    .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                    .targetNumber(100)
                    .targetObjectId("TARGET-ID")
                    .targetObjectNo(46852)
                    .build()
            )
        assertThat(historyListResponse.laserSystemName()).contains("HEL-1")
        assertThat(historyListResponse.lengthCenterline()).contains(79.35)
        assertThat(historyListResponse.lengthLeftRight()).contains(56.23)
        assertThat(historyListResponse.lengthUpDown()).contains(22.6)
        assertThat(historyListResponse.maximumHeight()).contains(440.3)
        assertThat(historyListResponse.minimumHeight()).contains(0.5)
        assertThat(historyListResponse.missionName()).contains("USSF LP 18-1 Test Laser")
        assertThat(historyListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyListResponse.origNetwork()).contains("OPS1")
        assertThat(historyListResponse.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(historyListResponse.platformLocationName()).contains("Vandenberg")
        assertThat(historyListResponse.platformLocationType()).contains("FIXED_POINT")
        assertThat(historyListResponse.programId()).contains("performance_test_llh-sat")
        assertThat(historyListResponse.propagator()).contains("GP")
        assertThat(historyListResponse.protectList().getOrNull()).containsExactly(1234, 5678)
        assertThat(historyListResponse.satNo()).contains(46852)
        assertThat(historyListResponse.sourceDl()).contains("AXE")
        assertThat(historyListResponse.sourceEnabled()).contains(false)
        assertThat(historyListResponse.status()).contains("REQUESTED")
        assertThat(historyListResponse.tags().getOrNull()).containsExactly("TAG1", "TAG2")
        assertThat(historyListResponse.targetEnabled()).contains(true)
        assertThat(historyListResponse.targetType()).contains("BOX_CENTERPOINT_LINE")
        assertThat(historyListResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(historyListResponse.treatEarthAs()).contains("VICTIM")
        assertThat(historyListResponse.useFieldOfRegard()).contains(true)
        assertThat(historyListResponse.victimEnabled()).contains(true)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .endDate(OffsetDateTime.parse("2023-07-20T00:00:00.123Z"))
                .addIdLaserEmitter("2346c0a0-585f-4232-af5d-93bad320fdc0")
                .addIdLaserEmitter("4446c0a0-585f-4232-af5d-93bad320fbb1")
                .numTargets(25)
                .requestId("3856c0a0-585f-4232-af5d-93bad320fac6")
                .requestTs(OffsetDateTime.parse("2023-07-15T12:30:30.123Z"))
                .source("Bluestaq")
                .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .centerlineAzimuth(20.3)
                .centerlineElevation(19.434)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .defaultCha(2.5)
                .enableDss(true)
                .addFixedPoint(
                    FixedPointFull.builder()
                        .latitude(-10.18)
                        .longitude(-179.98)
                        .height(-18.13)
                        .build()
                )
                .geopotentialModel("WGS84")
                .idOnOrbit("ONORBIT-ID")
                .addLaserDeconflictTarget(
                    HistoryListResponse.LaserDeconflictTarget.builder()
                        .classificationMarking("U")
                        .dataMode(HistoryListResponse.LaserDeconflictTarget.DataMode.TEST)
                        .source("Bluestaq")
                        .id("026dd511-8ba5-47d3-9909-836149f87686")
                        .azimuth(27.91)
                        .azimuthEnd(90.5)
                        .azimuthIncrement(1.5)
                        .azimuthStart(60.5)
                        .centerlineAzimuth(11.02)
                        .centerlineElevation(1.68)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .declination(10.23)
                        .elevation(17.09)
                        .elevationEnd(88.05)
                        .elevationIncrement(0.5)
                        .elevationStart(67.05)
                        .addFixedPoint(
                            FixedPointFull.builder()
                                .latitude(-10.18)
                                .longitude(-179.98)
                                .height(-18.13)
                                .build()
                        )
                        .idLaserDeconflictRequest("026dd511-8ba5-47d3-9909-836149f87686")
                        .lengthCenterline(369.79)
                        .lengthLeftRight(20.23)
                        .lengthUpDown(28.67)
                        .maximumHeight(0.5)
                        .minimumHeight(0.25)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ra(11.93)
                        .solarSystemBody("MARS")
                        .sourceDl("AXE")
                        .starNumber(3791)
                        .startDate(OffsetDateTime.parse("2023-07-19T00:00:00.123Z"))
                        .targetNumber(100)
                        .targetObjectId("TARGET-ID")
                        .targetObjectNo(46852)
                        .build()
                )
                .laserSystemName("HEL-1")
                .lengthCenterline(79.35)
                .lengthLeftRight(56.23)
                .lengthUpDown(22.6)
                .maximumHeight(440.3)
                .minimumHeight(0.5)
                .missionName("USSF LP 18-1 Test Laser")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .platformLocationName("Vandenberg")
                .platformLocationType("FIXED_POINT")
                .programId("performance_test_llh-sat")
                .propagator("GP")
                .addProtectList(1234)
                .addProtectList(5678)
                .satNo(46852)
                .sourceDl("AXE")
                .sourceEnabled(false)
                .status("REQUESTED")
                .addTag("TAG1")
                .addTag("TAG2")
                .targetEnabled(true)
                .targetType("BOX_CENTERPOINT_LINE")
                .transactionId("TRANSACTION-ID")
                .treatEarthAs("VICTIM")
                .useFieldOfRegard(true)
                .victimEnabled(true)
                .build()

        val roundtrippedHistoryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyListResponse),
                jacksonTypeRef<HistoryListResponse>(),
            )

        assertThat(roundtrippedHistoryListResponse).isEqualTo(historyListResponse)
    }
}
