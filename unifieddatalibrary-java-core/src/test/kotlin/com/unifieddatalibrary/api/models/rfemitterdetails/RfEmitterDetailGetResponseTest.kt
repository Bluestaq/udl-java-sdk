// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.rfemitterdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.LocationFull
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RfEmitterDetailGetResponseTest {

    @Test
    fun create() {
        val rfEmitterDetailGetResponse =
            RfEmitterDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(RfEmitterDetailGetResponse.DataMode.TEST)
                .idRfEmitter("RFEMITTER-ID")
                .source("Bluestaq")
                .id("RFEMITTERDETAILS-ID")
                .alternateFacilityName("ALTERNATE_FACILITY_NAME")
                .altName("ALTERNATE_NAME")
                .antennaDiameter(20.23)
                .addAntennaSize(1.1)
                .addAntennaSize(2.2)
                .barrageNoiseBandwidth(5.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("DESCRIPTION")
                .designator("DESIGNATOR")
                .dopplerNoise(10.23)
                .drfmInstantaneousBandwidth(20.23)
                .family("FAMILY")
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .notes("NOTES")
                .numBits(256)
                .numChannels(10)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .productionFacilityLocation(
                    LocationFull.builder()
                        .classificationMarking("U")
                        .dataMode(LocationFull.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .productionFacilityLocationId("PRODUCTIONFACILITYLOCATION-ID")
                .productionFacilityName("PRODUCTION_FACILITY")
                .receiverBandwidth(15.23)
                .receiverSensitivity(10.23)
                .receiverType("RECEIVER_TYPE")
                .secondaryNotes("MORE_NOTES")
                .systemSensitivityEnd(150.23)
                .systemSensitivityStart(50.23)
                .transmitPower(100.23)
                .transmitterBandwidth(0.125)
                .transmitterFrequency(105.9)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addUrl("TAG1")
                .addUrl("TAG2")
                .build()

        assertThat(rfEmitterDetailGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(rfEmitterDetailGetResponse.dataMode())
            .isEqualTo(RfEmitterDetailGetResponse.DataMode.TEST)
        assertThat(rfEmitterDetailGetResponse.idRfEmitter()).isEqualTo("RFEMITTER-ID")
        assertThat(rfEmitterDetailGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(rfEmitterDetailGetResponse.id()).contains("RFEMITTERDETAILS-ID")
        assertThat(rfEmitterDetailGetResponse.alternateFacilityName())
            .contains("ALTERNATE_FACILITY_NAME")
        assertThat(rfEmitterDetailGetResponse.altName()).contains("ALTERNATE_NAME")
        assertThat(rfEmitterDetailGetResponse.antennaDiameter()).contains(20.23)
        assertThat(rfEmitterDetailGetResponse.antennaSize().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(rfEmitterDetailGetResponse.barrageNoiseBandwidth()).contains(5.23)
        assertThat(rfEmitterDetailGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(rfEmitterDetailGetResponse.createdBy()).contains("some.user")
        assertThat(rfEmitterDetailGetResponse.description()).contains("DESCRIPTION")
        assertThat(rfEmitterDetailGetResponse.designator()).contains("DESIGNATOR")
        assertThat(rfEmitterDetailGetResponse.dopplerNoise()).contains(10.23)
        assertThat(rfEmitterDetailGetResponse.drfmInstantaneousBandwidth()).contains(20.23)
        assertThat(rfEmitterDetailGetResponse.family()).contains("FAMILY")
        assertThat(rfEmitterDetailGetResponse.manufacturerOrg())
            .contains(
                OrganizationFull.builder()
                    .classificationMarking("U")
                    .dataMode(OrganizationFull.DataMode.TEST)
                    .name("some.user")
                    .source("some.user")
                    .type("GOVERNMENT")
                    .id("ORGANIZATION-ID")
                    .active(false)
                    .category("Private company")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("Example description")
                    .externalId("EXTERNAL-ID")
                    .nationality("US")
                    .addOrganizationDetail(
                        OrganizationDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationDetailsFull.DataMode.TEST)
                            .idOrganization("ORGANIZATION-ID")
                            .name("some.user")
                            .source("some.user")
                            .id("ORGANIZATIONDETAILS-ID")
                            .address1("123 Main Street")
                            .address2("Apt 4B")
                            .address3("Colorado Springs CO, 80903")
                            .broker("some.user")
                            .ceo("some.user")
                            .cfo("some.user")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cto("some.user")
                            .description("Example description")
                            .ebitda(123.4)
                            .email("some_organization@organization.com")
                            .financialNotes("Example notes")
                            .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .fleetPlanNotes("Example notes")
                            .formerOrgId("FORMERORG-ID")
                            .ftes(123)
                            .geoAdminLevel1("Colorado")
                            .geoAdminLevel2("El Paso County")
                            .geoAdminLevel3("Colorado Springs")
                            .massRanking(123)
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .parentOrgId("PARENTORG-ID")
                            .postalCode("80903")
                            .profit(123.4)
                            .revenue(123.4)
                            .revenueRanking(123)
                            .riskManager("some.user")
                            .servicesNotes("Example notes")
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .origin("some.user")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(rfEmitterDetailGetResponse.manufacturerOrgId()).contains("MANUFACTURERORG-ID")
        assertThat(rfEmitterDetailGetResponse.notes()).contains("NOTES")
        assertThat(rfEmitterDetailGetResponse.numBits()).contains(256)
        assertThat(rfEmitterDetailGetResponse.numChannels()).contains(10)
        assertThat(rfEmitterDetailGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(rfEmitterDetailGetResponse.origNetwork()).contains("ORIG")
        assertThat(rfEmitterDetailGetResponse.productionFacilityLocation())
            .contains(
                LocationFull.builder()
                    .classificationMarking("U")
                    .dataMode(LocationFull.DataMode.TEST)
                    .name("Example location")
                    .source("Bluestaq")
                    .altitude(10.23)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idLocation("LOCATION-ID")
                    .lat(45.23)
                    .lon(179.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(rfEmitterDetailGetResponse.productionFacilityLocationId())
            .contains("PRODUCTIONFACILITYLOCATION-ID")
        assertThat(rfEmitterDetailGetResponse.productionFacilityName())
            .contains("PRODUCTION_FACILITY")
        assertThat(rfEmitterDetailGetResponse.receiverBandwidth()).contains(15.23)
        assertThat(rfEmitterDetailGetResponse.receiverSensitivity()).contains(10.23)
        assertThat(rfEmitterDetailGetResponse.receiverType()).contains("RECEIVER_TYPE")
        assertThat(rfEmitterDetailGetResponse.secondaryNotes()).contains("MORE_NOTES")
        assertThat(rfEmitterDetailGetResponse.systemSensitivityEnd()).contains(150.23)
        assertThat(rfEmitterDetailGetResponse.systemSensitivityStart()).contains(50.23)
        assertThat(rfEmitterDetailGetResponse.transmitPower()).contains(100.23)
        assertThat(rfEmitterDetailGetResponse.transmitterBandwidth()).contains(0.125)
        assertThat(rfEmitterDetailGetResponse.transmitterFrequency()).contains(105.9)
        assertThat(rfEmitterDetailGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(rfEmitterDetailGetResponse.updatedBy()).contains("some.user")
        assertThat(rfEmitterDetailGetResponse.urls().getOrNull()).containsExactly("TAG1", "TAG2")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val rfEmitterDetailGetResponse =
            RfEmitterDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(RfEmitterDetailGetResponse.DataMode.TEST)
                .idRfEmitter("RFEMITTER-ID")
                .source("Bluestaq")
                .id("RFEMITTERDETAILS-ID")
                .alternateFacilityName("ALTERNATE_FACILITY_NAME")
                .altName("ALTERNATE_NAME")
                .antennaDiameter(20.23)
                .addAntennaSize(1.1)
                .addAntennaSize(2.2)
                .barrageNoiseBandwidth(5.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("DESCRIPTION")
                .designator("DESIGNATOR")
                .dopplerNoise(10.23)
                .drfmInstantaneousBandwidth(20.23)
                .family("FAMILY")
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .notes("NOTES")
                .numBits(256)
                .numChannels(10)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .productionFacilityLocation(
                    LocationFull.builder()
                        .classificationMarking("U")
                        .dataMode(LocationFull.DataMode.TEST)
                        .name("Example location")
                        .source("Bluestaq")
                        .altitude(10.23)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idLocation("LOCATION-ID")
                        .lat(45.23)
                        .lon(179.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .productionFacilityLocationId("PRODUCTIONFACILITYLOCATION-ID")
                .productionFacilityName("PRODUCTION_FACILITY")
                .receiverBandwidth(15.23)
                .receiverSensitivity(10.23)
                .receiverType("RECEIVER_TYPE")
                .secondaryNotes("MORE_NOTES")
                .systemSensitivityEnd(150.23)
                .systemSensitivityStart(50.23)
                .transmitPower(100.23)
                .transmitterBandwidth(0.125)
                .transmitterFrequency(105.9)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addUrl("TAG1")
                .addUrl("TAG2")
                .build()

        val roundtrippedRfEmitterDetailGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(rfEmitterDetailGetResponse),
                jacksonTypeRef<RfEmitterDetailGetResponse>(),
            )

        assertThat(roundtrippedRfEmitterDetailGetResponse).isEqualTo(rfEmitterDetailGetResponse)
    }
}
