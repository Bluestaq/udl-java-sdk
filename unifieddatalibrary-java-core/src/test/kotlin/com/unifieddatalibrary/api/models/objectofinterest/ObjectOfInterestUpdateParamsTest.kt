// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.objectofinterest

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ObjectOfInterestUpdateParamsTest {

    @Test
    fun create() {
        ObjectOfInterestUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(ObjectOfInterestUpdateParams.DataMode.TEST)
            .idOnOrbit("REF-ONORBIT-ID")
            .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .source("Bluestaq")
            .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .bodyId("OBJECTOFINTEREST-ID")
            .addAffectedObject("AFFECTEDOBJECT1-ID")
            .addAffectedObject("AFFECTEDOBJECT2-ID")
            .apogee(123.4)
            .argOfPerigee(123.4)
            .bStar(123.4)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .deltaTs(listOf(1.1, 2.2, 3.3))
            .deltaVs(listOf(1.1, 2.2, 3.3))
            .description("Example description")
            .eccentricity(123.4)
            .elsetEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .inclination(123.4)
            .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .meanAnomaly(123.4)
            .meanMotion(123.4)
            .meanMotionDDot(123.4)
            .meanMotionDot(123.4)
            .missedObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .name("Example_name")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .perigee(123.4)
            .period(123.4)
            .priority(7)
            .raan(123.4)
            .revNo(123)
            .satNo(12)
            .semiMajorAxis(123.4)
            .sensorTaskingStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .status("OPEN")
            .svEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .x(123.4)
            .xvel(123.4)
            .y(123.4)
            .yvel(123.4)
            .z(123.4)
            .zvel(123.4)
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            ObjectOfInterestUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(ObjectOfInterestUpdateParams.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            ObjectOfInterestUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(ObjectOfInterestUpdateParams.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .bodyId("OBJECTOFINTEREST-ID")
                .addAffectedObject("AFFECTEDOBJECT1-ID")
                .addAffectedObject("AFFECTEDOBJECT2-ID")
                .apogee(123.4)
                .argOfPerigee(123.4)
                .bStar(123.4)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaTs(listOf(1.1, 2.2, 3.3))
                .deltaVs(listOf(1.1, 2.2, 3.3))
                .description("Example description")
                .eccentricity(123.4)
                .elsetEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .inclination(123.4)
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .meanAnomaly(123.4)
                .meanMotion(123.4)
                .meanMotionDDot(123.4)
                .meanMotionDot(123.4)
                .missedObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .name("Example_name")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .perigee(123.4)
                .period(123.4)
                .priority(7)
                .raan(123.4)
                .revNo(123)
                .satNo(12)
                .semiMajorAxis(123.4)
                .sensorTaskingStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .status("OPEN")
                .svEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .x(123.4)
                .xvel(123.4)
                .y(123.4)
                .yvel(123.4)
                .z(123.4)
                .zvel(123.4)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ObjectOfInterestUpdateParams.DataMode.TEST)
        assertThat(body.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(body.sensorTaskingStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.statusDate()).isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.bodyId()).contains("OBJECTOFINTEREST-ID")
        assertThat(body.affectedObjects().getOrNull())
            .containsExactly("AFFECTEDOBJECT1-ID", "AFFECTEDOBJECT2-ID")
        assertThat(body.apogee()).contains(123.4)
        assertThat(body.argOfPerigee()).contains(123.4)
        assertThat(body.bStar()).contains(123.4)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.deltaTs().getOrNull()).containsExactly(1.1, 2.2, 3.3)
        assertThat(body.deltaVs().getOrNull()).containsExactly(1.1, 2.2, 3.3)
        assertThat(body.description()).contains("Example description")
        assertThat(body.eccentricity()).contains(123.4)
        assertThat(body.elsetEpoch()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.inclination()).contains(123.4)
        assertThat(body.lastObTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.meanAnomaly()).contains(123.4)
        assertThat(body.meanMotion()).contains(123.4)
        assertThat(body.meanMotionDDot()).contains(123.4)
        assertThat(body.meanMotionDot()).contains(123.4)
        assertThat(body.missedObTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.name()).contains("Example_name")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.perigee()).contains(123.4)
        assertThat(body.period()).contains(123.4)
        assertThat(body.priority()).contains(7)
        assertThat(body.raan()).contains(123.4)
        assertThat(body.revNo()).contains(123)
        assertThat(body.satNo()).contains(12)
        assertThat(body.semiMajorAxis()).contains(123.4)
        assertThat(body.sensorTaskingStopTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.status()).contains("OPEN")
        assertThat(body.svEpoch()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.x()).contains(123.4)
        assertThat(body.xvel()).contains(123.4)
        assertThat(body.y()).contains(123.4)
        assertThat(body.yvel()).contains(123.4)
        assertThat(body.z()).contains(123.4)
        assertThat(body.zvel()).contains(123.4)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            ObjectOfInterestUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(ObjectOfInterestUpdateParams.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ObjectOfInterestUpdateParams.DataMode.TEST)
        assertThat(body.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(body.sensorTaskingStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.statusDate()).isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
    }
}
