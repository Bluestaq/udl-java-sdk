// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.starcatalog

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StarCatalogTupleResponseTest {

    @Test
    fun create() {
        val starCatalogTupleResponse =
            StarCatalogTupleResponse.builder()
                .astrometryOrigin(StarCatalogTupleResponse.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogTupleResponse.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .id("STAR-CAT-DATASET-ID")
                .allWiseId("WISEA J152743.04+624823.6")
                .allWisew1Mag(15.782)
                .allWisew1MagUnc(0.042)
                .allWisew2Mag(16.523)
                .allWisew2MagUnc(0.021)
                .allWisew3Mag(11.541)
                .allWisew3MagUnc(0.159)
                .allWisew4Mag(9.007)
                .allWisew4MagUnc(0.468)
                .bpmag(0.04559)
                .bpmagUnc(0.2227)
                .catVersion("1.23")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decUnc(40.996)
                .gaiadr3CatId(89012345678901L)
                .gmag(0.0046)
                .gmagUnc(0.00292)
                .gncCatId(12345)
                .hipCatId(12345)
                .hmag(12.126)
                .hmagUnc(5.722)
                .jmag(9.515)
                .jmagUnc(7.559)
                .kmag(13.545)
                .kmagUnc(0.052)
                .multFlag(true)
                .multiplicity("2")
                .neighborDistance(201.406)
                .neighborFlag(false)
                .neighborId(2456)
                .nonSingleStar("7")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .parallax(-6.8)
                .parallaxUnc(82.35)
                .pmdec(-970.1003)
                .pmdecUnc(1.22)
                .pmra(1000.45)
                .pmraUnc(5.6)
                .pmUncFlag(false)
                .posUncFlag(false)
                .raUnc(509.466)
                .rpmag(8.0047)
                .rpmagUnc(1.233)
                .shift(4.548)
                .shiftFlag(false)
                .shiftFwhm1(0.157)
                .shiftFwhm6(1.065)
                .twoMassId("A1B2C3D4E5")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .varFlag(true)
                .variability("1")
                .build()

        assertThat(starCatalogTupleResponse.astrometryOrigin())
            .isEqualTo(StarCatalogTupleResponse.AstrometryOrigin.GAIADR3)
        assertThat(starCatalogTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(starCatalogTupleResponse.csId()).isEqualTo(12345L)
        assertThat(starCatalogTupleResponse.dataMode())
            .isEqualTo(StarCatalogTupleResponse.DataMode.TEST)
        assertThat(starCatalogTupleResponse.dec()).isEqualTo(21.8)
        assertThat(starCatalogTupleResponse.ra()).isEqualTo(14.43)
        assertThat(starCatalogTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(starCatalogTupleResponse.starEpoch()).isEqualTo(2016.0)
        assertThat(starCatalogTupleResponse.id()).contains("STAR-CAT-DATASET-ID")
        assertThat(starCatalogTupleResponse.allWiseId()).contains("WISEA J152743.04+624823.6")
        assertThat(starCatalogTupleResponse.allWisew1Mag()).contains(15.782)
        assertThat(starCatalogTupleResponse.allWisew1MagUnc()).contains(0.042)
        assertThat(starCatalogTupleResponse.allWisew2Mag()).contains(16.523)
        assertThat(starCatalogTupleResponse.allWisew2MagUnc()).contains(0.021)
        assertThat(starCatalogTupleResponse.allWisew3Mag()).contains(11.541)
        assertThat(starCatalogTupleResponse.allWisew3MagUnc()).contains(0.159)
        assertThat(starCatalogTupleResponse.allWisew4Mag()).contains(9.007)
        assertThat(starCatalogTupleResponse.allWisew4MagUnc()).contains(0.468)
        assertThat(starCatalogTupleResponse.bpmag()).contains(0.04559)
        assertThat(starCatalogTupleResponse.bpmagUnc()).contains(0.2227)
        assertThat(starCatalogTupleResponse.catVersion()).contains("1.23")
        assertThat(starCatalogTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(starCatalogTupleResponse.createdBy()).contains("some.user")
        assertThat(starCatalogTupleResponse.decUnc()).contains(40.996)
        assertThat(starCatalogTupleResponse.gaiadr3CatId()).contains(89012345678901L)
        assertThat(starCatalogTupleResponse.gmag()).contains(0.0046)
        assertThat(starCatalogTupleResponse.gmagUnc()).contains(0.00292)
        assertThat(starCatalogTupleResponse.gncCatId()).contains(12345)
        assertThat(starCatalogTupleResponse.hipCatId()).contains(12345)
        assertThat(starCatalogTupleResponse.hmag()).contains(12.126)
        assertThat(starCatalogTupleResponse.hmagUnc()).contains(5.722)
        assertThat(starCatalogTupleResponse.jmag()).contains(9.515)
        assertThat(starCatalogTupleResponse.jmagUnc()).contains(7.559)
        assertThat(starCatalogTupleResponse.kmag()).contains(13.545)
        assertThat(starCatalogTupleResponse.kmagUnc()).contains(0.052)
        assertThat(starCatalogTupleResponse.multFlag()).contains(true)
        assertThat(starCatalogTupleResponse.multiplicity()).contains("2")
        assertThat(starCatalogTupleResponse.neighborDistance()).contains(201.406)
        assertThat(starCatalogTupleResponse.neighborFlag()).contains(false)
        assertThat(starCatalogTupleResponse.neighborId()).contains(2456)
        assertThat(starCatalogTupleResponse.nonSingleStar()).contains("7")
        assertThat(starCatalogTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(starCatalogTupleResponse.origNetwork()).contains("OPS1")
        assertThat(starCatalogTupleResponse.parallax()).contains(-6.8)
        assertThat(starCatalogTupleResponse.parallaxUnc()).contains(82.35)
        assertThat(starCatalogTupleResponse.pmdec()).contains(-970.1003)
        assertThat(starCatalogTupleResponse.pmdecUnc()).contains(1.22)
        assertThat(starCatalogTupleResponse.pmra()).contains(1000.45)
        assertThat(starCatalogTupleResponse.pmraUnc()).contains(5.6)
        assertThat(starCatalogTupleResponse.pmUncFlag()).contains(false)
        assertThat(starCatalogTupleResponse.posUncFlag()).contains(false)
        assertThat(starCatalogTupleResponse.raUnc()).contains(509.466)
        assertThat(starCatalogTupleResponse.rpmag()).contains(8.0047)
        assertThat(starCatalogTupleResponse.rpmagUnc()).contains(1.233)
        assertThat(starCatalogTupleResponse.shift()).contains(4.548)
        assertThat(starCatalogTupleResponse.shiftFlag()).contains(false)
        assertThat(starCatalogTupleResponse.shiftFwhm1()).contains(0.157)
        assertThat(starCatalogTupleResponse.shiftFwhm6()).contains(1.065)
        assertThat(starCatalogTupleResponse.twoMassId()).contains("A1B2C3D4E5")
        assertThat(starCatalogTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(starCatalogTupleResponse.updatedBy()).contains("some.user")
        assertThat(starCatalogTupleResponse.varFlag()).contains(true)
        assertThat(starCatalogTupleResponse.variability()).contains("1")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val starCatalogTupleResponse =
            StarCatalogTupleResponse.builder()
                .astrometryOrigin(StarCatalogTupleResponse.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogTupleResponse.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .id("STAR-CAT-DATASET-ID")
                .allWiseId("WISEA J152743.04+624823.6")
                .allWisew1Mag(15.782)
                .allWisew1MagUnc(0.042)
                .allWisew2Mag(16.523)
                .allWisew2MagUnc(0.021)
                .allWisew3Mag(11.541)
                .allWisew3MagUnc(0.159)
                .allWisew4Mag(9.007)
                .allWisew4MagUnc(0.468)
                .bpmag(0.04559)
                .bpmagUnc(0.2227)
                .catVersion("1.23")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decUnc(40.996)
                .gaiadr3CatId(89012345678901L)
                .gmag(0.0046)
                .gmagUnc(0.00292)
                .gncCatId(12345)
                .hipCatId(12345)
                .hmag(12.126)
                .hmagUnc(5.722)
                .jmag(9.515)
                .jmagUnc(7.559)
                .kmag(13.545)
                .kmagUnc(0.052)
                .multFlag(true)
                .multiplicity("2")
                .neighborDistance(201.406)
                .neighborFlag(false)
                .neighborId(2456)
                .nonSingleStar("7")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .parallax(-6.8)
                .parallaxUnc(82.35)
                .pmdec(-970.1003)
                .pmdecUnc(1.22)
                .pmra(1000.45)
                .pmraUnc(5.6)
                .pmUncFlag(false)
                .posUncFlag(false)
                .raUnc(509.466)
                .rpmag(8.0047)
                .rpmagUnc(1.233)
                .shift(4.548)
                .shiftFlag(false)
                .shiftFwhm1(0.157)
                .shiftFwhm6(1.065)
                .twoMassId("A1B2C3D4E5")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .varFlag(true)
                .variability("1")
                .build()

        val roundtrippedStarCatalogTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(starCatalogTupleResponse),
                jacksonTypeRef<StarCatalogTupleResponse>(),
            )

        assertThat(roundtrippedStarCatalogTupleResponse).isEqualTo(starCatalogTupleResponse)
    }
}
