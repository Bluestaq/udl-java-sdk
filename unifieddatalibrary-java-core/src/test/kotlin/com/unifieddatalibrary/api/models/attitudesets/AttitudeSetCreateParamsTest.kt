// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.attitudesets

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AttitudeSetCreateParamsTest {

    @Test
    fun create() {
        AttitudeSetCreateParams.builder()
            .classificationMarking("U")
            .dataMode(AttitudeSetCreateParams.DataMode.TEST)
            .endTime(OffsetDateTime.parse("2022-07-07T18:00:00.654321Z"))
            .frame1("SCBODY")
            .frame2("J2000")
            .numPoints(120)
            .source("Bluestaq")
            .startTime(OffsetDateTime.parse("2022-07-07T16:00:00.123456Z"))
            .type("AEM")
            .id("ATTITUDESET-ID")
            .addAsRef("2ea97de6-4680-4767-a07e-35d16398ef60")
            .addAttitudeList(
                AttitudeSetCreateParams.AttitudeList.builder()
                    .classificationMarking("U")
                    .dataMode(AttitudeSetCreateParams.AttitudeList.DataMode.TEST)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2022-03-07T14:51:39.653043Z"))
                    .id("ATTITUDEDATA-ID")
                    .asId("773c9887-e931-42eb-8155-f0fbd227b235")
                    .coningAngle(0.1)
                    .createdAt(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(0.799)
                    .idOnOrbit("41947")
                    .motionType("PROSOL_MOTION")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("D6593")
                    .precPeriod(36.1)
                    .q1(0.0312)
                    .q1Dot(0.0043)
                    .q2(0.7854)
                    .q2Dot(0.06)
                    .q3(0.3916)
                    .q3Dot(0.499)
                    .qc(0.4783)
                    .qcDot(0.011)
                    .ra(-173.75)
                    .satNo(41947)
                    .spinPeriod(0.1)
                    .addXAngle(139.753)
                    .addXRate(0.105)
                    .addYAngle(25.066)
                    .addYRate(0.032)
                    .addZAngle(-53.368)
                    .addZRate(0.022)
                    .build()
            )
            .createdAt(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
            .createdBy("some.user")
            .esId("60f7a241-b7be-48d8-acf3-786670af53f9")
            .eulerRotSeq("123")
            .idOnOrbit("41947")
            .idSensor("a7e99418-b6d6-29ab-e767-440a989cce26")
            .interpolator("LINEAR")
            .interpolatorDegree(2)
            .notes("Notes for this attitude set")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("D6593")
            .origSensorId("ORIGSENSOR-ID")
            .precAngleInit(30.5)
            .satNo(41947)
            .spinAngleInit(25.5)
            .stepSize(60)
            .build()
    }

    @Test
    fun body() {
        val params =
            AttitudeSetCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AttitudeSetCreateParams.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2022-07-07T18:00:00.654321Z"))
                .frame1("SCBODY")
                .frame2("J2000")
                .numPoints(120)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2022-07-07T16:00:00.123456Z"))
                .type("AEM")
                .id("ATTITUDESET-ID")
                .addAsRef("2ea97de6-4680-4767-a07e-35d16398ef60")
                .addAttitudeList(
                    AttitudeSetCreateParams.AttitudeList.builder()
                        .classificationMarking("U")
                        .dataMode(AttitudeSetCreateParams.AttitudeList.DataMode.TEST)
                        .source("Bluestaq")
                        .ts(OffsetDateTime.parse("2022-03-07T14:51:39.653043Z"))
                        .id("ATTITUDEDATA-ID")
                        .asId("773c9887-e931-42eb-8155-f0fbd227b235")
                        .coningAngle(0.1)
                        .createdAt(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
                        .createdBy("some.user")
                        .declination(0.799)
                        .idOnOrbit("41947")
                        .motionType("PROSOL_MOTION")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .origObjectId("D6593")
                        .precPeriod(36.1)
                        .q1(0.0312)
                        .q1Dot(0.0043)
                        .q2(0.7854)
                        .q2Dot(0.06)
                        .q3(0.3916)
                        .q3Dot(0.499)
                        .qc(0.4783)
                        .qcDot(0.011)
                        .ra(-173.75)
                        .satNo(41947)
                        .spinPeriod(0.1)
                        .addXAngle(139.753)
                        .addXRate(0.105)
                        .addYAngle(25.066)
                        .addYRate(0.032)
                        .addZAngle(-53.368)
                        .addZRate(0.022)
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
                .createdBy("some.user")
                .esId("60f7a241-b7be-48d8-acf3-786670af53f9")
                .eulerRotSeq("123")
                .idOnOrbit("41947")
                .idSensor("a7e99418-b6d6-29ab-e767-440a989cce26")
                .interpolator("LINEAR")
                .interpolatorDegree(2)
                .notes("Notes for this attitude set")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("D6593")
                .origSensorId("ORIGSENSOR-ID")
                .precAngleInit(30.5)
                .satNo(41947)
                .spinAngleInit(25.5)
                .stepSize(60)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AttitudeSetCreateParams.DataMode.TEST)
        assertThat(body.endTime()).isEqualTo(OffsetDateTime.parse("2022-07-07T18:00:00.654321Z"))
        assertThat(body.frame1()).isEqualTo("SCBODY")
        assertThat(body.frame2()).isEqualTo("J2000")
        assertThat(body.numPoints()).isEqualTo(120)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2022-07-07T16:00:00.123456Z"))
        assertThat(body.type()).isEqualTo("AEM")
        assertThat(body.id()).contains("ATTITUDESET-ID")
        assertThat(body.asRef().getOrNull()).containsExactly("2ea97de6-4680-4767-a07e-35d16398ef60")
        assertThat(body.attitudeList().getOrNull())
            .containsExactly(
                AttitudeSetCreateParams.AttitudeList.builder()
                    .classificationMarking("U")
                    .dataMode(AttitudeSetCreateParams.AttitudeList.DataMode.TEST)
                    .source("Bluestaq")
                    .ts(OffsetDateTime.parse("2022-03-07T14:51:39.653043Z"))
                    .id("ATTITUDEDATA-ID")
                    .asId("773c9887-e931-42eb-8155-f0fbd227b235")
                    .coningAngle(0.1)
                    .createdAt(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(0.799)
                    .idOnOrbit("41947")
                    .motionType("PROSOL_MOTION")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .origObjectId("D6593")
                    .precPeriod(36.1)
                    .q1(0.0312)
                    .q1Dot(0.0043)
                    .q2(0.7854)
                    .q2Dot(0.06)
                    .q3(0.3916)
                    .q3Dot(0.499)
                    .qc(0.4783)
                    .qcDot(0.011)
                    .ra(-173.75)
                    .satNo(41947)
                    .spinPeriod(0.1)
                    .addXAngle(139.753)
                    .addXRate(0.105)
                    .addYAngle(25.066)
                    .addYRate(0.032)
                    .addZAngle(-53.368)
                    .addZRate(0.022)
                    .build()
            )
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-07-05T12:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.esId()).contains("60f7a241-b7be-48d8-acf3-786670af53f9")
        assertThat(body.eulerRotSeq()).contains("123")
        assertThat(body.idOnOrbit()).contains("41947")
        assertThat(body.idSensor()).contains("a7e99418-b6d6-29ab-e767-440a989cce26")
        assertThat(body.interpolator()).contains("LINEAR")
        assertThat(body.interpolatorDegree()).contains(2)
        assertThat(body.notes()).contains("Notes for this attitude set")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("D6593")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.precAngleInit()).contains(30.5)
        assertThat(body.satNo()).contains(41947)
        assertThat(body.spinAngleInit()).contains(25.5)
        assertThat(body.stepSize()).contains(60)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            AttitudeSetCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AttitudeSetCreateParams.DataMode.TEST)
                .endTime(OffsetDateTime.parse("2022-07-07T18:00:00.654321Z"))
                .frame1("SCBODY")
                .frame2("J2000")
                .numPoints(120)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2022-07-07T16:00:00.123456Z"))
                .type("AEM")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AttitudeSetCreateParams.DataMode.TEST)
        assertThat(body.endTime()).isEqualTo(OffsetDateTime.parse("2022-07-07T18:00:00.654321Z"))
        assertThat(body.frame1()).isEqualTo("SCBODY")
        assertThat(body.frame2()).isEqualTo("J2000")
        assertThat(body.numPoints()).isEqualTo(120)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2022-07-07T16:00:00.123456Z"))
        assertThat(body.type()).isEqualTo("AEM")
    }
}
