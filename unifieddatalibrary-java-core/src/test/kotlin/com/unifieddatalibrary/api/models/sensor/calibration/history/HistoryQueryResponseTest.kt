// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sensor.calibration.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryQueryResponseTest {

    @Test
    fun create() {
        val historyQueryResponse =
            HistoryQueryResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryQueryResponse.DataMode.TEST)
                .idSensor("09f2c68c-5e24-4b72-9cc8-ba9b1efa82f0")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .azRaAccelBias(0.0123)
                .azRaAccelSigma(0.0123)
                .azRaBias(0.327883)
                .azRaRateBias(0.123)
                .azRaRateSigma(0.123)
                .azRaRms(0.605333)
                .azRaSigma(0.000381)
                .calAngleRef("AZEL")
                .calTrackMode("INTRA_TRACK")
                .calType("OPERATIONAL")
                .confidenceNoiseBias(0.001477)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .duration(14.125)
                .ecr(listOf(352815.1, -5852915.3, 3255189.0))
                .elDecAccelBias(0.0123)
                .elDecAccelSigma(0.0123)
                .elDecBias(0.012555)
                .elDecRateBias(0.123)
                .elDecRateSigma(0.123)
                .elDecRms(0.080505)
                .elDecSigma(0.00265)
                .endTime(OffsetDateTime.parse("2018-01-14T16:00:00.123Z"))
                .numAzRaObs(339)
                .numElDecObs(339)
                .numObs(341)
                .numPhotoObs(77)
                .numRangeObs(341)
                .numRangeRateObs(341)
                .numRcsObs(325)
                .numTimeObs(307)
                .numTracks(85)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .photoBias(0.123)
                .photoSigma(0.0123)
                .rangeAccelBias(0.123)
                .rangeAccelSigma(0.0123)
                .rangeBias(0.024777)
                .rangeRateBias(0.105333)
                .rangeRateRms(0.000227)
                .rangeRateSigma(0.000321)
                .rangeRms(0.0123)
                .rangeSigma(0.042644)
                .rcsBias(0.123)
                .rcsSigma(0.0123)
                .refTargets(listOf("xx", "yy", "zz"))
                .refType("SLR")
                .senType("PHASED ARRAY")
                .sourceDl("AXE")
                .timeBias(0.000372)
                .timeBiasSigma(15.333212)
                .build()

        assertThat(historyQueryResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyQueryResponse.dataMode()).isEqualTo(HistoryQueryResponse.DataMode.TEST)
        assertThat(historyQueryResponse.idSensor())
            .isEqualTo("09f2c68c-5e24-4b72-9cc8-ba9b1efa82f0")
        assertThat(historyQueryResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyQueryResponse.startTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyQueryResponse.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(historyQueryResponse.azRaAccelBias()).contains(0.0123)
        assertThat(historyQueryResponse.azRaAccelSigma()).contains(0.0123)
        assertThat(historyQueryResponse.azRaBias()).contains(0.327883)
        assertThat(historyQueryResponse.azRaRateBias()).contains(0.123)
        assertThat(historyQueryResponse.azRaRateSigma()).contains(0.123)
        assertThat(historyQueryResponse.azRaRms()).contains(0.605333)
        assertThat(historyQueryResponse.azRaSigma()).contains(0.000381)
        assertThat(historyQueryResponse.calAngleRef()).contains("AZEL")
        assertThat(historyQueryResponse.calTrackMode()).contains("INTRA_TRACK")
        assertThat(historyQueryResponse.calType()).contains("OPERATIONAL")
        assertThat(historyQueryResponse.confidenceNoiseBias()).contains(0.001477)
        assertThat(historyQueryResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(historyQueryResponse.createdBy()).contains("some.user")
        assertThat(historyQueryResponse.duration()).contains(14.125)
        assertThat(historyQueryResponse.ecr().getOrNull())
            .containsExactly(352815.1, -5852915.3, 3255189.0)
        assertThat(historyQueryResponse.elDecAccelBias()).contains(0.0123)
        assertThat(historyQueryResponse.elDecAccelSigma()).contains(0.0123)
        assertThat(historyQueryResponse.elDecBias()).contains(0.012555)
        assertThat(historyQueryResponse.elDecRateBias()).contains(0.123)
        assertThat(historyQueryResponse.elDecRateSigma()).contains(0.123)
        assertThat(historyQueryResponse.elDecRms()).contains(0.080505)
        assertThat(historyQueryResponse.elDecSigma()).contains(0.00265)
        assertThat(historyQueryResponse.endTime())
            .contains(OffsetDateTime.parse("2018-01-14T16:00:00.123Z"))
        assertThat(historyQueryResponse.numAzRaObs()).contains(339)
        assertThat(historyQueryResponse.numElDecObs()).contains(339)
        assertThat(historyQueryResponse.numObs()).contains(341)
        assertThat(historyQueryResponse.numPhotoObs()).contains(77)
        assertThat(historyQueryResponse.numRangeObs()).contains(341)
        assertThat(historyQueryResponse.numRangeRateObs()).contains(341)
        assertThat(historyQueryResponse.numRcsObs()).contains(325)
        assertThat(historyQueryResponse.numTimeObs()).contains(307)
        assertThat(historyQueryResponse.numTracks()).contains(85)
        assertThat(historyQueryResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyQueryResponse.origNetwork()).contains("OPS1")
        assertThat(historyQueryResponse.photoBias()).contains(0.123)
        assertThat(historyQueryResponse.photoSigma()).contains(0.0123)
        assertThat(historyQueryResponse.rangeAccelBias()).contains(0.123)
        assertThat(historyQueryResponse.rangeAccelSigma()).contains(0.0123)
        assertThat(historyQueryResponse.rangeBias()).contains(0.024777)
        assertThat(historyQueryResponse.rangeRateBias()).contains(0.105333)
        assertThat(historyQueryResponse.rangeRateRms()).contains(0.000227)
        assertThat(historyQueryResponse.rangeRateSigma()).contains(0.000321)
        assertThat(historyQueryResponse.rangeRms()).contains(0.0123)
        assertThat(historyQueryResponse.rangeSigma()).contains(0.042644)
        assertThat(historyQueryResponse.rcsBias()).contains(0.123)
        assertThat(historyQueryResponse.rcsSigma()).contains(0.0123)
        assertThat(historyQueryResponse.refTargets().getOrNull()).containsExactly("xx", "yy", "zz")
        assertThat(historyQueryResponse.refType()).contains("SLR")
        assertThat(historyQueryResponse.senType()).contains("PHASED ARRAY")
        assertThat(historyQueryResponse.sourceDl()).contains("AXE")
        assertThat(historyQueryResponse.timeBias()).contains(0.000372)
        assertThat(historyQueryResponse.timeBiasSigma()).contains(15.333212)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyQueryResponse =
            HistoryQueryResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryQueryResponse.DataMode.TEST)
                .idSensor("09f2c68c-5e24-4b72-9cc8-ba9b1efa82f0")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .azRaAccelBias(0.0123)
                .azRaAccelSigma(0.0123)
                .azRaBias(0.327883)
                .azRaRateBias(0.123)
                .azRaRateSigma(0.123)
                .azRaRms(0.605333)
                .azRaSigma(0.000381)
                .calAngleRef("AZEL")
                .calTrackMode("INTRA_TRACK")
                .calType("OPERATIONAL")
                .confidenceNoiseBias(0.001477)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .duration(14.125)
                .ecr(listOf(352815.1, -5852915.3, 3255189.0))
                .elDecAccelBias(0.0123)
                .elDecAccelSigma(0.0123)
                .elDecBias(0.012555)
                .elDecRateBias(0.123)
                .elDecRateSigma(0.123)
                .elDecRms(0.080505)
                .elDecSigma(0.00265)
                .endTime(OffsetDateTime.parse("2018-01-14T16:00:00.123Z"))
                .numAzRaObs(339)
                .numElDecObs(339)
                .numObs(341)
                .numPhotoObs(77)
                .numRangeObs(341)
                .numRangeRateObs(341)
                .numRcsObs(325)
                .numTimeObs(307)
                .numTracks(85)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .photoBias(0.123)
                .photoSigma(0.0123)
                .rangeAccelBias(0.123)
                .rangeAccelSigma(0.0123)
                .rangeBias(0.024777)
                .rangeRateBias(0.105333)
                .rangeRateRms(0.000227)
                .rangeRateSigma(0.000321)
                .rangeRms(0.0123)
                .rangeSigma(0.042644)
                .rcsBias(0.123)
                .rcsSigma(0.0123)
                .refTargets(listOf("xx", "yy", "zz"))
                .refType("SLR")
                .senType("PHASED ARRAY")
                .sourceDl("AXE")
                .timeBias(0.000372)
                .timeBiasSigma(15.333212)
                .build()

        val roundtrippedHistoryQueryResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyQueryResponse),
                jacksonTypeRef<HistoryQueryResponse>(),
            )

        assertThat(roundtrippedHistoryQueryResponse).isEqualTo(historyQueryResponse)
    }
}
