// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradatacommdetails

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeraDataCommDetailCreateParamsTest {

    @Test
    fun create() {
        SeraDataCommDetailCreateParams.builder()
            .classificationMarking("U")
            .dataMode(SeraDataCommDetailCreateParams.DataMode.TEST)
            .source("Bluestaq")
            .id("SERADATACOMMDETAILS-ID")
            .band("X")
            .bandwidth(1.23)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .eirp(1.23)
            .estHtsTotalCapacity(1.23)
            .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
            .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
            .gatewayDownlinkFrom(1.23)
            .gatewayDownlinkTo(1.23)
            .gatewayUplinkFrom(1.23)
            .gatewayUplinkTo(1.23)
            .hostedForCompanyOrgId("hostedForCompanyOrgId")
            .htsNumUserSpotBeams(1)
            .htsUserDownlinkBandwidthPerBeam(1.23)
            .htsUserUplinkBandwidthPerBeam(1.23)
            .idComm("idComm")
            .manufacturerOrgId("manufacturerOrgId")
            .num36MhzEquivalentTransponders(1)
            .numOperationalTransponders(1)
            .numSpareTransponders(1)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .payloadNotes("Sample Notes")
            .polarization("polarization")
            .solidStatePowerAmp(1.23)
            .spacecraftId("spacecraftId")
            .tradeLeaseOrgId("tradeLeaseOrgId")
            .travelingWaveTubeAmplifier(1.23)
            .userDownlinkFrom(1.23)
            .userDownlinkTo(1.23)
            .userUplinkFrom(1.23)
            .userUplinkTo(1.23)
            .build()
    }

    @Test
    fun body() {
        val params =
            SeraDataCommDetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(SeraDataCommDetailCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .id("SERADATACOMMDETAILS-ID")
                .band("X")
                .bandwidth(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .eirp(1.23)
                .estHtsTotalCapacity(1.23)
                .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
                .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
                .gatewayDownlinkFrom(1.23)
                .gatewayDownlinkTo(1.23)
                .gatewayUplinkFrom(1.23)
                .gatewayUplinkTo(1.23)
                .hostedForCompanyOrgId("hostedForCompanyOrgId")
                .htsNumUserSpotBeams(1)
                .htsUserDownlinkBandwidthPerBeam(1.23)
                .htsUserUplinkBandwidthPerBeam(1.23)
                .idComm("idComm")
                .manufacturerOrgId("manufacturerOrgId")
                .num36MhzEquivalentTransponders(1)
                .numOperationalTransponders(1)
                .numSpareTransponders(1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .payloadNotes("Sample Notes")
                .polarization("polarization")
                .solidStatePowerAmp(1.23)
                .spacecraftId("spacecraftId")
                .tradeLeaseOrgId("tradeLeaseOrgId")
                .travelingWaveTubeAmplifier(1.23)
                .userDownlinkFrom(1.23)
                .userDownlinkTo(1.23)
                .userUplinkFrom(1.23)
                .userUplinkTo(1.23)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SeraDataCommDetailCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("SERADATACOMMDETAILS-ID")
        assertThat(body.band()).contains("X")
        assertThat(body.bandwidth()).contains(1.23)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.eirp()).contains(1.23)
        assertThat(body.estHtsTotalCapacity()).contains(1.23)
        assertThat(body.estHtsTotalUserDownlinkBandwidthPerBeam()).contains(1.23)
        assertThat(body.estHtsTotalUserUplinkBandwidthPerBeam()).contains(1.23)
        assertThat(body.gatewayDownlinkFrom()).contains(1.23)
        assertThat(body.gatewayDownlinkTo()).contains(1.23)
        assertThat(body.gatewayUplinkFrom()).contains(1.23)
        assertThat(body.gatewayUplinkTo()).contains(1.23)
        assertThat(body.hostedForCompanyOrgId()).contains("hostedForCompanyOrgId")
        assertThat(body.htsNumUserSpotBeams()).contains(1)
        assertThat(body.htsUserDownlinkBandwidthPerBeam()).contains(1.23)
        assertThat(body.htsUserUplinkBandwidthPerBeam()).contains(1.23)
        assertThat(body.idComm()).contains("idComm")
        assertThat(body.manufacturerOrgId()).contains("manufacturerOrgId")
        assertThat(body.num36MhzEquivalentTransponders()).contains(1)
        assertThat(body.numOperationalTransponders()).contains(1)
        assertThat(body.numSpareTransponders()).contains(1)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.payloadNotes()).contains("Sample Notes")
        assertThat(body.polarization()).contains("polarization")
        assertThat(body.solidStatePowerAmp()).contains(1.23)
        assertThat(body.spacecraftId()).contains("spacecraftId")
        assertThat(body.tradeLeaseOrgId()).contains("tradeLeaseOrgId")
        assertThat(body.travelingWaveTubeAmplifier()).contains(1.23)
        assertThat(body.userDownlinkFrom()).contains(1.23)
        assertThat(body.userDownlinkTo()).contains(1.23)
        assertThat(body.userUplinkFrom()).contains(1.23)
        assertThat(body.userUplinkTo()).contains(1.23)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            SeraDataCommDetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(SeraDataCommDetailCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(SeraDataCommDetailCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
