// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.sgi

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SgiTupleResponseTest {

    @Test
    fun create() {
        val sgiTupleResponse =
            SgiTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(SgiTupleResponse.DataMode.TEST)
                .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("SGI-ID")
                .analyzerAttenuation(5.1)
                .ap(1.23)
                .apDuration(3)
                .coeffDegree(listOf(1, 2, 3))
                .coeffOrder(listOf(1, 2, 3))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctce(listOf(1.23, 342.3, 1.32))
                .ctci(listOf(1.23, 342.3, 1.32))
                .dst(1.23)
                .dtc(1.23)
                .e10(1.23)
                .e54(1.23)
                .f10(1.23)
                .f10High(187.5)
                .f10Low(185.5)
                .f54(1.23)
                .f81(1.23)
                .frequencies(listOf(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875))
                .gamma(25)
                .idSensor("57c96c97-e076-48af-a068-73ee2cb37e65")
                .kIndex(1)
                .kp(4.66)
                .kpDuration(3)
                .m10(1.23)
                .m54(1.23)
                .mode(1)
                .normFactor(2.12679e-7)
                .observedBaseline(listOf(15, 32, 25, 134, 0, 6, 19, 8))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .powers(listOf(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1))
                .precedence(SgiTupleResponse.Precedence.R)
                .rawFileUri("rawFileURI")
                .rbDuration(24)
                .rbIndex(1.02947164506)
                .rbRegionCode(2)
                .s10(1.23)
                .s54(1.23)
                .state(SgiTupleResponse.State.I)
                .stationName("Boulder")
                .stce(listOf(1.23, 342.3, 1.32))
                .stci(listOf(1.23, 342.3, 1.32))
                .sunspotNum(151.1)
                .sunspotNumHigh(152.1)
                .sunspotNumLow(150.1)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .transactionId("TRANSACTION-ID")
                .type("JBH09")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .y10(1.23)
                .y54(1.23)
                .build()

        assertThat(sgiTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(sgiTupleResponse.dataMode()).isEqualTo(SgiTupleResponse.DataMode.TEST)
        assertThat(sgiTupleResponse.effectiveDate())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(sgiTupleResponse.sgiDate())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(sgiTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(sgiTupleResponse.id()).contains("SGI-ID")
        assertThat(sgiTupleResponse.analyzerAttenuation()).contains(5.1)
        assertThat(sgiTupleResponse.ap()).contains(1.23)
        assertThat(sgiTupleResponse.apDuration()).contains(3)
        assertThat(sgiTupleResponse.coeffDegree().getOrNull()).containsExactly(1, 2, 3)
        assertThat(sgiTupleResponse.coeffOrder().getOrNull()).containsExactly(1, 2, 3)
        assertThat(sgiTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(sgiTupleResponse.createdBy()).contains("some.user")
        assertThat(sgiTupleResponse.ctce().getOrNull()).containsExactly(1.23, 342.3, 1.32)
        assertThat(sgiTupleResponse.ctci().getOrNull()).containsExactly(1.23, 342.3, 1.32)
        assertThat(sgiTupleResponse.dst()).contains(1.23)
        assertThat(sgiTupleResponse.dtc()).contains(1.23)
        assertThat(sgiTupleResponse.e10()).contains(1.23)
        assertThat(sgiTupleResponse.e54()).contains(1.23)
        assertThat(sgiTupleResponse.f10()).contains(1.23)
        assertThat(sgiTupleResponse.f10High()).contains(187.5)
        assertThat(sgiTupleResponse.f10Low()).contains(185.5)
        assertThat(sgiTupleResponse.f54()).contains(1.23)
        assertThat(sgiTupleResponse.f81()).contains(1.23)
        assertThat(sgiTupleResponse.frequencies().getOrNull())
            .containsExactly(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875)
        assertThat(sgiTupleResponse.gamma()).contains(25)
        assertThat(sgiTupleResponse.idSensor()).contains("57c96c97-e076-48af-a068-73ee2cb37e65")
        assertThat(sgiTupleResponse.kIndex()).contains(1)
        assertThat(sgiTupleResponse.kp()).contains(4.66)
        assertThat(sgiTupleResponse.kpDuration()).contains(3)
        assertThat(sgiTupleResponse.m10()).contains(1.23)
        assertThat(sgiTupleResponse.m54()).contains(1.23)
        assertThat(sgiTupleResponse.mode()).contains(1)
        assertThat(sgiTupleResponse.normFactor()).contains(2.12679e-7)
        assertThat(sgiTupleResponse.observedBaseline().getOrNull())
            .containsExactly(15, 32, 25, 134, 0, 6, 19, 8)
        assertThat(sgiTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(sgiTupleResponse.origNetwork()).contains("OPS1")
        assertThat(sgiTupleResponse.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(sgiTupleResponse.powers().getOrNull())
            .containsExactly(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1)
        assertThat(sgiTupleResponse.precedence()).contains(SgiTupleResponse.Precedence.R)
        assertThat(sgiTupleResponse.rawFileUri()).contains("rawFileURI")
        assertThat(sgiTupleResponse.rbDuration()).contains(24)
        assertThat(sgiTupleResponse.rbIndex()).contains(1.02947164506)
        assertThat(sgiTupleResponse.rbRegionCode()).contains(2)
        assertThat(sgiTupleResponse.s10()).contains(1.23)
        assertThat(sgiTupleResponse.s54()).contains(1.23)
        assertThat(sgiTupleResponse.state()).contains(SgiTupleResponse.State.I)
        assertThat(sgiTupleResponse.stationName()).contains("Boulder")
        assertThat(sgiTupleResponse.stce().getOrNull()).containsExactly(1.23, 342.3, 1.32)
        assertThat(sgiTupleResponse.stci().getOrNull()).containsExactly(1.23, 342.3, 1.32)
        assertThat(sgiTupleResponse.sunspotNum()).contains(151.1)
        assertThat(sgiTupleResponse.sunspotNumHigh()).contains(152.1)
        assertThat(sgiTupleResponse.sunspotNumLow()).contains(150.1)
        assertThat(sgiTupleResponse.tags().getOrNull())
            .containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(sgiTupleResponse.transactionId()).contains("TRANSACTION-ID")
        assertThat(sgiTupleResponse.type()).contains("JBH09")
        assertThat(sgiTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(sgiTupleResponse.updatedBy()).contains("some.user")
        assertThat(sgiTupleResponse.y10()).contains(1.23)
        assertThat(sgiTupleResponse.y54()).contains(1.23)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val sgiTupleResponse =
            SgiTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(SgiTupleResponse.DataMode.TEST)
                .effectiveDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .sgiDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("SGI-ID")
                .analyzerAttenuation(5.1)
                .ap(1.23)
                .apDuration(3)
                .coeffDegree(listOf(1, 2, 3))
                .coeffOrder(listOf(1, 2, 3))
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctce(listOf(1.23, 342.3, 1.32))
                .ctci(listOf(1.23, 342.3, 1.32))
                .dst(1.23)
                .dtc(1.23)
                .e10(1.23)
                .e54(1.23)
                .f10(1.23)
                .f10High(187.5)
                .f10Low(185.5)
                .f54(1.23)
                .f81(1.23)
                .frequencies(listOf(25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875))
                .gamma(25)
                .idSensor("57c96c97-e076-48af-a068-73ee2cb37e65")
                .kIndex(1)
                .kp(4.66)
                .kpDuration(3)
                .m10(1.23)
                .m54(1.23)
                .mode(1)
                .normFactor(2.12679e-7)
                .observedBaseline(listOf(15, 32, 25, 134, 0, 6, 19, 8))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .powers(listOf(67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1))
                .precedence(SgiTupleResponse.Precedence.R)
                .rawFileUri("rawFileURI")
                .rbDuration(24)
                .rbIndex(1.02947164506)
                .rbRegionCode(2)
                .s10(1.23)
                .s54(1.23)
                .state(SgiTupleResponse.State.I)
                .stationName("Boulder")
                .stce(listOf(1.23, 342.3, 1.32))
                .stci(listOf(1.23, 342.3, 1.32))
                .sunspotNum(151.1)
                .sunspotNumHigh(152.1)
                .sunspotNumLow(150.1)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .transactionId("TRANSACTION-ID")
                .type("JBH09")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .y10(1.23)
                .y54(1.23)
                .build()

        val roundtrippedSgiTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(sgiTupleResponse),
                jacksonTypeRef<SgiTupleResponse>(),
            )

        assertThat(roundtrippedSgiTupleResponse).isEqualTo(sgiTupleResponse)
    }
}
