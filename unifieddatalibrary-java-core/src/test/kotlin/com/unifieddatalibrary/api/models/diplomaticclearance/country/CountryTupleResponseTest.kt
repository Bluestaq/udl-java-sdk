// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.diplomaticclearance.country

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryTupleResponse
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CountryTupleResponseTest {

    @Test
    fun create() {
      val countryTupleResponse = CountryTupleResponse.builder()
          .classificationMarking("U")
          .countryCode("NL")
          .dataMode(CountryTupleResponse.DataMode.TEST)
          .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .source("Bluestaq")
          .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
          .acceptsDms(true)
          .acceptsEmail(true)
          .acceptsFax(true)
          .acceptsSiprNet(false)
          .agency("TACC")
          .altCountryCode("IZ")
          .closeTime("16:00")
          .countryId("GDSSBL010412140742262246")
          .countryName("NETHERLANDS")
          .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addDiplomaticClearanceCountryContact(CountryTupleResponse.DiplomaticClearanceCountryContact.builder()
              .ahNum("256039858")
              .ahSpdDialCode("75")
              .commNum("904716104")
              .commSpdDialCode("74")
              .contactId("GDSSMC112108191329534522")
              .contactName("John Smith")
              .contactRemark("Contact remark")
              .dsnNum("513827215")
              .dsnSpdDialCode("94")
              .faxNum("571654897")
              .niprNum("525574441")
              .siprNum("546144352")
              .build())
          .addDiplomaticClearanceCountryEntryExitPoint(CountryTupleResponse.DiplomaticClearanceCountryEntryExitPoint.builder()
              .isEntry(true)
              .isExit(true)
              .pointName("BATEL")
              .build())
          .addDiplomaticClearanceCountryProfile(CountryTupleResponse.DiplomaticClearanceCountryProfile.builder()
              .cargoPaxRemark("Cargo passenger remark")
              .clearanceId("MDCNPER231360050AAR")
              .crewInfoRemark("Crew info remark")
              .defClearanceStatus("R")
              .defEntryRemark("Default entry remark")
              .defEntryTime("15:00")
              .defExitRemark("Default exit remark")
              .defExitTime("17:00")
              .fltInfoRemark("Flight info remark")
              .hazInfoRemark("Hazmat remark")
              .landDefProf(true)
              .landLeadTime(7)
              .landLeadTimeRemark("Landing lead time remark")
              .landLeadTimeUnit("Day")
              .landValidPeriodMinus(0)
              .landValidPeriodPlus(72)
              .landValidPeriodRemark("Landing valid period remark")
              .landValidPeriodUnit("Hour")
              .overflyDefProf(true)
              .overflyLeadTime(7)
              .overflyLeadTimeRemark("Overfly remark")
              .overflyLeadTimeUnit("Day")
              .overflyValidPeriodMinus(0)
              .overflyValidPeriodPlus(72)
              .overflyValidPeriodRemark("Overfly valid period remark")
              .overflyValidPeriodUnit("Hour")
              .profile("Netherlands Non Haz Landing")
              .profileAgency("USAFE")
              .profileId("GDSSBL010412140742262247")
              .profileRemark("Profile remark")
              .reqAcAltName(false)
              .reqAllHazInfo(false)
              .reqAmcStdInfo(false)
              .reqCargoList(false)
              .reqCargoPax(false)
              .reqClass1Info(false)
              .reqClass9Info(false)
              .reqCrewComp(false)
              .reqCrewDetail(false)
              .reqCrewInfo(false)
              .reqDiv1Info(false)
              .reqDv(false)
              .reqEntryExitCoord(false)
              .reqFltInfo(false)
              .reqFltPlanRoute(false)
              .reqFundSource(false)
              .reqHazInfo(false)
              .reqIcao(false)
              .reqPassportInfo(false)
              .reqRaven(false)
              .reqRepChange(false)
              .reqTailNum(false)
              .reqWeaponsInfo(false)
              .undefinedCrewReporting(false)
              .build())
          .existingProfile(true)
          .gmtOffset("-04:30")
          .officeName("DAO.EU")
          .officePoc("John Smith")
          .officeRemark("Diplomatic clearance office remark")
          .openFri(true)
          .openMon(true)
          .openSat(false)
          .openSun(false)
          .openThu(true)
          .openTime("07:00")
          .openTue(true)
          .openWed(true)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .sourceDl("AXE")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(countryTupleResponse.classificationMarking()).isEqualTo("U")
      assertThat(countryTupleResponse.countryCode()).isEqualTo("NL")
      assertThat(countryTupleResponse.dataMode()).isEqualTo(CountryTupleResponse.DataMode.TEST)
      assertThat(countryTupleResponse.lastChangedDate()).isEqualTo(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
      assertThat(countryTupleResponse.source()).isEqualTo("Bluestaq")
      assertThat(countryTupleResponse.id()).contains("25059135-4afc-45c2-b78b-d6e843dbd96d")
      assertThat(countryTupleResponse.acceptsDms()).contains(true)
      assertThat(countryTupleResponse.acceptsEmail()).contains(true)
      assertThat(countryTupleResponse.acceptsFax()).contains(true)
      assertThat(countryTupleResponse.acceptsSiprNet()).contains(false)
      assertThat(countryTupleResponse.agency()).contains("TACC")
      assertThat(countryTupleResponse.altCountryCode()).contains("IZ")
      assertThat(countryTupleResponse.closeTime()).contains("16:00")
      assertThat(countryTupleResponse.countryId()).contains("GDSSBL010412140742262246")
      assertThat(countryTupleResponse.countryName()).contains("NETHERLANDS")
      assertThat(countryTupleResponse.countryRemark()).contains("Amsterdam airport EHAM will not accept hazardous cargo.")
      assertThat(countryTupleResponse.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(countryTupleResponse.createdBy()).contains("some.user")
      assertThat(countryTupleResponse.diplomaticClearanceCountryContacts().getOrNull()).containsExactly(CountryTupleResponse.DiplomaticClearanceCountryContact.builder()
          .ahNum("256039858")
          .ahSpdDialCode("75")
          .commNum("904716104")
          .commSpdDialCode("74")
          .contactId("GDSSMC112108191329534522")
          .contactName("John Smith")
          .contactRemark("Contact remark")
          .dsnNum("513827215")
          .dsnSpdDialCode("94")
          .faxNum("571654897")
          .niprNum("525574441")
          .siprNum("546144352")
          .build())
      assertThat(countryTupleResponse.diplomaticClearanceCountryEntryExitPoints().getOrNull()).containsExactly(CountryTupleResponse.DiplomaticClearanceCountryEntryExitPoint.builder()
          .isEntry(true)
          .isExit(true)
          .pointName("BATEL")
          .build())
      assertThat(countryTupleResponse.diplomaticClearanceCountryProfiles().getOrNull()).containsExactly(CountryTupleResponse.DiplomaticClearanceCountryProfile.builder()
          .cargoPaxRemark("Cargo passenger remark")
          .clearanceId("MDCNPER231360050AAR")
          .crewInfoRemark("Crew info remark")
          .defClearanceStatus("R")
          .defEntryRemark("Default entry remark")
          .defEntryTime("15:00")
          .defExitRemark("Default exit remark")
          .defExitTime("17:00")
          .fltInfoRemark("Flight info remark")
          .hazInfoRemark("Hazmat remark")
          .landDefProf(true)
          .landLeadTime(7)
          .landLeadTimeRemark("Landing lead time remark")
          .landLeadTimeUnit("Day")
          .landValidPeriodMinus(0)
          .landValidPeriodPlus(72)
          .landValidPeriodRemark("Landing valid period remark")
          .landValidPeriodUnit("Hour")
          .overflyDefProf(true)
          .overflyLeadTime(7)
          .overflyLeadTimeRemark("Overfly remark")
          .overflyLeadTimeUnit("Day")
          .overflyValidPeriodMinus(0)
          .overflyValidPeriodPlus(72)
          .overflyValidPeriodRemark("Overfly valid period remark")
          .overflyValidPeriodUnit("Hour")
          .profile("Netherlands Non Haz Landing")
          .profileAgency("USAFE")
          .profileId("GDSSBL010412140742262247")
          .profileRemark("Profile remark")
          .reqAcAltName(false)
          .reqAllHazInfo(false)
          .reqAmcStdInfo(false)
          .reqCargoList(false)
          .reqCargoPax(false)
          .reqClass1Info(false)
          .reqClass9Info(false)
          .reqCrewComp(false)
          .reqCrewDetail(false)
          .reqCrewInfo(false)
          .reqDiv1Info(false)
          .reqDv(false)
          .reqEntryExitCoord(false)
          .reqFltInfo(false)
          .reqFltPlanRoute(false)
          .reqFundSource(false)
          .reqHazInfo(false)
          .reqIcao(false)
          .reqPassportInfo(false)
          .reqRaven(false)
          .reqRepChange(false)
          .reqTailNum(false)
          .reqWeaponsInfo(false)
          .undefinedCrewReporting(false)
          .build())
      assertThat(countryTupleResponse.existingProfile()).contains(true)
      assertThat(countryTupleResponse.gmtOffset()).contains("-04:30")
      assertThat(countryTupleResponse.officeName()).contains("DAO.EU")
      assertThat(countryTupleResponse.officePoc()).contains("John Smith")
      assertThat(countryTupleResponse.officeRemark()).contains("Diplomatic clearance office remark")
      assertThat(countryTupleResponse.openFri()).contains(true)
      assertThat(countryTupleResponse.openMon()).contains(true)
      assertThat(countryTupleResponse.openSat()).contains(false)
      assertThat(countryTupleResponse.openSun()).contains(false)
      assertThat(countryTupleResponse.openThu()).contains(true)
      assertThat(countryTupleResponse.openTime()).contains("07:00")
      assertThat(countryTupleResponse.openTue()).contains(true)
      assertThat(countryTupleResponse.openWed()).contains(true)
      assertThat(countryTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(countryTupleResponse.origNetwork()).contains("ORIG")
      assertThat(countryTupleResponse.sourceDl()).contains("AXE")
      assertThat(countryTupleResponse.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(countryTupleResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val countryTupleResponse = CountryTupleResponse.builder()
          .classificationMarking("U")
          .countryCode("NL")
          .dataMode(CountryTupleResponse.DataMode.TEST)
          .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .source("Bluestaq")
          .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
          .acceptsDms(true)
          .acceptsEmail(true)
          .acceptsFax(true)
          .acceptsSiprNet(false)
          .agency("TACC")
          .altCountryCode("IZ")
          .closeTime("16:00")
          .countryId("GDSSBL010412140742262246")
          .countryName("NETHERLANDS")
          .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addDiplomaticClearanceCountryContact(CountryTupleResponse.DiplomaticClearanceCountryContact.builder()
              .ahNum("256039858")
              .ahSpdDialCode("75")
              .commNum("904716104")
              .commSpdDialCode("74")
              .contactId("GDSSMC112108191329534522")
              .contactName("John Smith")
              .contactRemark("Contact remark")
              .dsnNum("513827215")
              .dsnSpdDialCode("94")
              .faxNum("571654897")
              .niprNum("525574441")
              .siprNum("546144352")
              .build())
          .addDiplomaticClearanceCountryEntryExitPoint(CountryTupleResponse.DiplomaticClearanceCountryEntryExitPoint.builder()
              .isEntry(true)
              .isExit(true)
              .pointName("BATEL")
              .build())
          .addDiplomaticClearanceCountryProfile(CountryTupleResponse.DiplomaticClearanceCountryProfile.builder()
              .cargoPaxRemark("Cargo passenger remark")
              .clearanceId("MDCNPER231360050AAR")
              .crewInfoRemark("Crew info remark")
              .defClearanceStatus("R")
              .defEntryRemark("Default entry remark")
              .defEntryTime("15:00")
              .defExitRemark("Default exit remark")
              .defExitTime("17:00")
              .fltInfoRemark("Flight info remark")
              .hazInfoRemark("Hazmat remark")
              .landDefProf(true)
              .landLeadTime(7)
              .landLeadTimeRemark("Landing lead time remark")
              .landLeadTimeUnit("Day")
              .landValidPeriodMinus(0)
              .landValidPeriodPlus(72)
              .landValidPeriodRemark("Landing valid period remark")
              .landValidPeriodUnit("Hour")
              .overflyDefProf(true)
              .overflyLeadTime(7)
              .overflyLeadTimeRemark("Overfly remark")
              .overflyLeadTimeUnit("Day")
              .overflyValidPeriodMinus(0)
              .overflyValidPeriodPlus(72)
              .overflyValidPeriodRemark("Overfly valid period remark")
              .overflyValidPeriodUnit("Hour")
              .profile("Netherlands Non Haz Landing")
              .profileAgency("USAFE")
              .profileId("GDSSBL010412140742262247")
              .profileRemark("Profile remark")
              .reqAcAltName(false)
              .reqAllHazInfo(false)
              .reqAmcStdInfo(false)
              .reqCargoList(false)
              .reqCargoPax(false)
              .reqClass1Info(false)
              .reqClass9Info(false)
              .reqCrewComp(false)
              .reqCrewDetail(false)
              .reqCrewInfo(false)
              .reqDiv1Info(false)
              .reqDv(false)
              .reqEntryExitCoord(false)
              .reqFltInfo(false)
              .reqFltPlanRoute(false)
              .reqFundSource(false)
              .reqHazInfo(false)
              .reqIcao(false)
              .reqPassportInfo(false)
              .reqRaven(false)
              .reqRepChange(false)
              .reqTailNum(false)
              .reqWeaponsInfo(false)
              .undefinedCrewReporting(false)
              .build())
          .existingProfile(true)
          .gmtOffset("-04:30")
          .officeName("DAO.EU")
          .officePoc("John Smith")
          .officeRemark("Diplomatic clearance office remark")
          .openFri(true)
          .openMon(true)
          .openSat(false)
          .openSun(false)
          .openThu(true)
          .openTime("07:00")
          .openTue(true)
          .openWed(true)
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .sourceDl("AXE")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedCountryTupleResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(countryTupleResponse), jacksonTypeRef<CountryTupleResponse>())

      assertThat(roundtrippedCountryTupleResponse).isEqualTo(countryTupleResponse)
    }
}
