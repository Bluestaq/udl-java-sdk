// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.navigationalobstruction

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class NavigationalObstructionGetResponseTest {

    @Test
    fun create() {
        val navigationalObstructionGetResponse =
            NavigationalObstructionGetResponse.builder()
                .classificationMarking("U")
                .cycleDate(LocalDate.parse("2024-06-13"))
                .dataMode(NavigationalObstructionGetResponse.DataMode.TEST)
                .obstacleId("359655")
                .obstacleType("V")
                .source("Bluestaq")
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .actDelCode("A")
                .airacCycle(2406)
                .baseAiracCycle(2405)
                .baselineCutoffDate(LocalDate.parse("2024-04-23"))
                .boundNeLat(29.1)
                .boundNeLon(99.1)
                .boundSwLat(-44.1)
                .boundSwLon(-144.1)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cutoffDate(LocalDate.parse("2024-05-21"))
                .dataSetRemarks("Data set remarks")
                .deletingOrg("ACME")
                .derivingOrg("ACME")
                .directivityCode(2)
                .elevation(840.1)
                .elevationAcc(17.1)
                .externalId("OU812")
                .facc("AT040")
                .featureCode("540")
                .featureDescription("Powerline Pylon, General")
                .featureName("PYLON")
                .featureType("540")
                .heightAgl(314.1)
                .heightAglAcc(30.1)
                .heightMsl(1154.1)
                .heightMslAcc(34.1)
                .horizAcc(8.1)
                .horizDatumCode("WGS-84")
                .initRecordDate(LocalDate.parse("1991-03-28"))
                .addKey("key1")
                .addKey("key2")
                .lightingCode("U")
                .lineNeLat(49.000584)
                .lineNeLon(-122.197891)
                .linesFilename("lines.txt")
                .lineSwLat(48.507027)
                .lineSwLon(-122.722946)
                .minHeightAgl(20.1)
                .multObs("S")
                .nextCycleDate(LocalDate.parse("2024-07-11"))
                .numLines(45993)
                .numObs(1)
                .numPoints(21830590)
                .obstacleRemarks("Obstacle remarks")
                .origId("L0000002289")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerCountryCode("US")
                .pointLat(46.757211)
                .pointLon(-67.759494)
                .pointsFilename("points.txt")
                .processCode("OT")
                .producer("ACME")
                .provinceCode("23")
                .quality("0")
                .rawFileUri("Example URI")
                .revDate(LocalDate.parse("2020-02-26"))
                .segEndPoint(359655)
                .segNum(1)
                .segStartPoint(359655)
                .sourceDate(LocalDate.parse("2016-04-01"))
                .sourceDl("AXE")
                .surfaceMatCode("U")
                .transactionCode("V")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .validationCode(3)
                .addValue("value1")
                .addValue("value2")
                .vectorsFilename("vectors.txt")
                .wac("262")
                .wacInnr("0409-00039")
                .build()

        assertThat(navigationalObstructionGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(navigationalObstructionGetResponse.cycleDate())
            .isEqualTo(LocalDate.parse("2024-06-13"))
        assertThat(navigationalObstructionGetResponse.dataMode())
            .isEqualTo(NavigationalObstructionGetResponse.DataMode.TEST)
        assertThat(navigationalObstructionGetResponse.obstacleId()).isEqualTo("359655")
        assertThat(navigationalObstructionGetResponse.obstacleType()).isEqualTo("V")
        assertThat(navigationalObstructionGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(navigationalObstructionGetResponse.id())
            .contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(navigationalObstructionGetResponse.actDelCode()).contains("A")
        assertThat(navigationalObstructionGetResponse.airacCycle()).contains(2406)
        assertThat(navigationalObstructionGetResponse.baseAiracCycle()).contains(2405)
        assertThat(navigationalObstructionGetResponse.baselineCutoffDate())
            .contains(LocalDate.parse("2024-04-23"))
        assertThat(navigationalObstructionGetResponse.boundNeLat()).contains(29.1)
        assertThat(navigationalObstructionGetResponse.boundNeLon()).contains(99.1)
        assertThat(navigationalObstructionGetResponse.boundSwLat()).contains(-44.1)
        assertThat(navigationalObstructionGetResponse.boundSwLon()).contains(-144.1)
        assertThat(navigationalObstructionGetResponse.countryCode()).contains("US")
        assertThat(navigationalObstructionGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(navigationalObstructionGetResponse.createdBy()).contains("some.user")
        assertThat(navigationalObstructionGetResponse.cutoffDate())
            .contains(LocalDate.parse("2024-05-21"))
        assertThat(navigationalObstructionGetResponse.dataSetRemarks()).contains("Data set remarks")
        assertThat(navigationalObstructionGetResponse.deletingOrg()).contains("ACME")
        assertThat(navigationalObstructionGetResponse.derivingOrg()).contains("ACME")
        assertThat(navigationalObstructionGetResponse.directivityCode()).contains(2)
        assertThat(navigationalObstructionGetResponse.elevation()).contains(840.1)
        assertThat(navigationalObstructionGetResponse.elevationAcc()).contains(17.1)
        assertThat(navigationalObstructionGetResponse.externalId()).contains("OU812")
        assertThat(navigationalObstructionGetResponse.facc()).contains("AT040")
        assertThat(navigationalObstructionGetResponse.featureCode()).contains("540")
        assertThat(navigationalObstructionGetResponse.featureDescription())
            .contains("Powerline Pylon, General")
        assertThat(navigationalObstructionGetResponse.featureName()).contains("PYLON")
        assertThat(navigationalObstructionGetResponse.featureType()).contains("540")
        assertThat(navigationalObstructionGetResponse.heightAgl()).contains(314.1)
        assertThat(navigationalObstructionGetResponse.heightAglAcc()).contains(30.1)
        assertThat(navigationalObstructionGetResponse.heightMsl()).contains(1154.1)
        assertThat(navigationalObstructionGetResponse.heightMslAcc()).contains(34.1)
        assertThat(navigationalObstructionGetResponse.horizAcc()).contains(8.1)
        assertThat(navigationalObstructionGetResponse.horizDatumCode()).contains("WGS-84")
        assertThat(navigationalObstructionGetResponse.initRecordDate())
            .contains(LocalDate.parse("1991-03-28"))
        assertThat(navigationalObstructionGetResponse.keys().getOrNull())
            .containsExactly("key1", "key2")
        assertThat(navigationalObstructionGetResponse.lightingCode()).contains("U")
        assertThat(navigationalObstructionGetResponse.lineNeLat()).contains(49.000584)
        assertThat(navigationalObstructionGetResponse.lineNeLon()).contains(-122.197891)
        assertThat(navigationalObstructionGetResponse.linesFilename()).contains("lines.txt")
        assertThat(navigationalObstructionGetResponse.lineSwLat()).contains(48.507027)
        assertThat(navigationalObstructionGetResponse.lineSwLon()).contains(-122.722946)
        assertThat(navigationalObstructionGetResponse.minHeightAgl()).contains(20.1)
        assertThat(navigationalObstructionGetResponse.multObs()).contains("S")
        assertThat(navigationalObstructionGetResponse.nextCycleDate())
            .contains(LocalDate.parse("2024-07-11"))
        assertThat(navigationalObstructionGetResponse.numLines()).contains(45993)
        assertThat(navigationalObstructionGetResponse.numObs()).contains(1)
        assertThat(navigationalObstructionGetResponse.numPoints()).contains(21830590)
        assertThat(navigationalObstructionGetResponse.obstacleRemarks())
            .contains("Obstacle remarks")
        assertThat(navigationalObstructionGetResponse.origId()).contains("L0000002289")
        assertThat(navigationalObstructionGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(navigationalObstructionGetResponse.origNetwork()).contains("OPS1")
        assertThat(navigationalObstructionGetResponse.ownerCountryCode()).contains("US")
        assertThat(navigationalObstructionGetResponse.pointLat()).contains(46.757211)
        assertThat(navigationalObstructionGetResponse.pointLon()).contains(-67.759494)
        assertThat(navigationalObstructionGetResponse.pointsFilename()).contains("points.txt")
        assertThat(navigationalObstructionGetResponse.processCode()).contains("OT")
        assertThat(navigationalObstructionGetResponse.producer()).contains("ACME")
        assertThat(navigationalObstructionGetResponse.provinceCode()).contains("23")
        assertThat(navigationalObstructionGetResponse.quality()).contains("0")
        assertThat(navigationalObstructionGetResponse.rawFileUri()).contains("Example URI")
        assertThat(navigationalObstructionGetResponse.revDate())
            .contains(LocalDate.parse("2020-02-26"))
        assertThat(navigationalObstructionGetResponse.segEndPoint()).contains(359655)
        assertThat(navigationalObstructionGetResponse.segNum()).contains(1)
        assertThat(navigationalObstructionGetResponse.segStartPoint()).contains(359655)
        assertThat(navigationalObstructionGetResponse.sourceDate())
            .contains(LocalDate.parse("2016-04-01"))
        assertThat(navigationalObstructionGetResponse.sourceDl()).contains("AXE")
        assertThat(navigationalObstructionGetResponse.surfaceMatCode()).contains("U")
        assertThat(navigationalObstructionGetResponse.transactionCode()).contains("V")
        assertThat(navigationalObstructionGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(navigationalObstructionGetResponse.updatedBy()).contains("some.user")
        assertThat(navigationalObstructionGetResponse.validationCode()).contains(3)
        assertThat(navigationalObstructionGetResponse.values().getOrNull())
            .containsExactly("value1", "value2")
        assertThat(navigationalObstructionGetResponse.vectorsFilename()).contains("vectors.txt")
        assertThat(navigationalObstructionGetResponse.wac()).contains("262")
        assertThat(navigationalObstructionGetResponse.wacInnr()).contains("0409-00039")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val navigationalObstructionGetResponse =
            NavigationalObstructionGetResponse.builder()
                .classificationMarking("U")
                .cycleDate(LocalDate.parse("2024-06-13"))
                .dataMode(NavigationalObstructionGetResponse.DataMode.TEST)
                .obstacleId("359655")
                .obstacleType("V")
                .source("Bluestaq")
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .actDelCode("A")
                .airacCycle(2406)
                .baseAiracCycle(2405)
                .baselineCutoffDate(LocalDate.parse("2024-04-23"))
                .boundNeLat(29.1)
                .boundNeLon(99.1)
                .boundSwLat(-44.1)
                .boundSwLon(-144.1)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .cutoffDate(LocalDate.parse("2024-05-21"))
                .dataSetRemarks("Data set remarks")
                .deletingOrg("ACME")
                .derivingOrg("ACME")
                .directivityCode(2)
                .elevation(840.1)
                .elevationAcc(17.1)
                .externalId("OU812")
                .facc("AT040")
                .featureCode("540")
                .featureDescription("Powerline Pylon, General")
                .featureName("PYLON")
                .featureType("540")
                .heightAgl(314.1)
                .heightAglAcc(30.1)
                .heightMsl(1154.1)
                .heightMslAcc(34.1)
                .horizAcc(8.1)
                .horizDatumCode("WGS-84")
                .initRecordDate(LocalDate.parse("1991-03-28"))
                .addKey("key1")
                .addKey("key2")
                .lightingCode("U")
                .lineNeLat(49.000584)
                .lineNeLon(-122.197891)
                .linesFilename("lines.txt")
                .lineSwLat(48.507027)
                .lineSwLon(-122.722946)
                .minHeightAgl(20.1)
                .multObs("S")
                .nextCycleDate(LocalDate.parse("2024-07-11"))
                .numLines(45993)
                .numObs(1)
                .numPoints(21830590)
                .obstacleRemarks("Obstacle remarks")
                .origId("L0000002289")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ownerCountryCode("US")
                .pointLat(46.757211)
                .pointLon(-67.759494)
                .pointsFilename("points.txt")
                .processCode("OT")
                .producer("ACME")
                .provinceCode("23")
                .quality("0")
                .rawFileUri("Example URI")
                .revDate(LocalDate.parse("2020-02-26"))
                .segEndPoint(359655)
                .segNum(1)
                .segStartPoint(359655)
                .sourceDate(LocalDate.parse("2016-04-01"))
                .sourceDl("AXE")
                .surfaceMatCode("U")
                .transactionCode("V")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .validationCode(3)
                .addValue("value1")
                .addValue("value2")
                .vectorsFilename("vectors.txt")
                .wac("262")
                .wacInnr("0409-00039")
                .build()

        val roundtrippedNavigationalObstructionGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(navigationalObstructionGetResponse),
                jacksonTypeRef<NavigationalObstructionGetResponse>(),
            )

        assertThat(roundtrippedNavigationalObstructionGetResponse)
            .isEqualTo(navigationalObstructionGetResponse)
    }
}
