// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airoperations.aircraftsorties

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftsortieAbridgedTest {

    @Test
    fun create() {
        val aircraftsortieAbridged =
            AircraftsortieAbridged.builder()
                .classificationMarking("U")
                .dataMode(AircraftsortieAbridged.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("AIRCRAFTSORTIE-ID")
                .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .aircraftAdsb("AE123C")
                .aircraftAltId("ALT-AIRCRAFT-ID")
                .aircraftEvent("Example event")
                .aircraftMds("C017A")
                .aircraftRemarks("Some remark about aircraft A")
                .alertStatus(22)
                .alertStatusCode("C1")
                .amcMsnNum("AJM512571333")
                .amcMsnType("SAAM")
                .arrFaa("FAA1")
                .arrIata("AAA")
                .arrIcao("KCOS")
                .arrItinerary(101)
                .arrPurposeCode("O")
                .callSign("BAKER")
                .cargoConfig("C-1")
                .commanderName("Smith")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentState("Park")
                .delayCode("500")
                .depFaa("FAA1")
                .depIata("AAA")
                .depIcao("KCOS")
                .depItinerary(100)
                .depPurposeCode("P")
                .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
                .dhdReason("Due for maintenance")
                .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .filename("ExampleFileName")
                .filesize(12)
                .flightTime(104.5)
                .fmDeskNum("7198675309")
                .fmName("Smith")
                .fuelReq(20000.1)
                .gndTime(387.8)
                .idAircraft("REF-AIRCRAFT-ID")
                .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
                .jcsPriority("1A3")
                .legNum(14)
                .lineNumber(99)
                .missionId("ABLE")
                .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
                .objectiveRemarks("Some objective remark about aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSortieId("A0640")
                .oxyOnCrew(12.3)
                .oxyOnPax(12.3)
                .oxyReqCrew(12.3)
                .oxyReqPax(12.3)
                .paperStatus(AircraftsortieAbridged.PaperStatus.PUBLISHED)
                .papersVersion("1.1")
                .parkingLoc("KCOS")
                .passengers(17)
                .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .pprStatus(AircraftsortieAbridged.PprStatus.PENDING)
                .primaryScl("ABC")
                .rawFileUri("Example URI")
                .reqConfig("C-1")
                .resultRemarks("Some remark about aircraft A")
                .rvnReq(AircraftsortieAbridged.RvnReq.R)
                .scheduleRemarks("Some schedule remark about aircraft A")
                .secondaryScl("ABC")
                .soe("OPS")
                .sortieDate(LocalDate.parse("2021-01-01"))
                .sourceDl("AXE")
                .tailNumber("Tail_1")
                .build()

        assertThat(aircraftsortieAbridged.classificationMarking()).isEqualTo("U")
        assertThat(aircraftsortieAbridged.dataMode())
            .isEqualTo(AircraftsortieAbridged.DataMode.TEST)
        assertThat(aircraftsortieAbridged.plannedDepTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.source()).isEqualTo("Bluestaq")
        assertThat(aircraftsortieAbridged.id()).contains("AIRCRAFTSORTIE-ID")
        assertThat(aircraftsortieAbridged.actualArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.actualBlockInTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(aircraftsortieAbridged.actualBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(aircraftsortieAbridged.actualDepTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.aircraftAdsb()).contains("AE123C")
        assertThat(aircraftsortieAbridged.aircraftAltId()).contains("ALT-AIRCRAFT-ID")
        assertThat(aircraftsortieAbridged.aircraftEvent()).contains("Example event")
        assertThat(aircraftsortieAbridged.aircraftMds()).contains("C017A")
        assertThat(aircraftsortieAbridged.aircraftRemarks())
            .contains("Some remark about aircraft A")
        assertThat(aircraftsortieAbridged.alertStatus()).contains(22)
        assertThat(aircraftsortieAbridged.alertStatusCode()).contains("C1")
        assertThat(aircraftsortieAbridged.amcMsnNum()).contains("AJM512571333")
        assertThat(aircraftsortieAbridged.amcMsnType()).contains("SAAM")
        assertThat(aircraftsortieAbridged.arrFaa()).contains("FAA1")
        assertThat(aircraftsortieAbridged.arrIata()).contains("AAA")
        assertThat(aircraftsortieAbridged.arrIcao()).contains("KCOS")
        assertThat(aircraftsortieAbridged.arrItinerary()).contains(101)
        assertThat(aircraftsortieAbridged.arrPurposeCode()).contains("O")
        assertThat(aircraftsortieAbridged.callSign()).contains("BAKER")
        assertThat(aircraftsortieAbridged.cargoConfig()).contains("C-1")
        assertThat(aircraftsortieAbridged.commanderName()).contains("Smith")
        assertThat(aircraftsortieAbridged.createdAt())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftsortieAbridged.createdBy()).contains("some.user")
        assertThat(aircraftsortieAbridged.currentState()).contains("Park")
        assertThat(aircraftsortieAbridged.delayCode()).contains("500")
        assertThat(aircraftsortieAbridged.depFaa()).contains("FAA1")
        assertThat(aircraftsortieAbridged.depIata()).contains("AAA")
        assertThat(aircraftsortieAbridged.depIcao()).contains("KCOS")
        assertThat(aircraftsortieAbridged.depItinerary()).contains(100)
        assertThat(aircraftsortieAbridged.depPurposeCode()).contains("P")
        assertThat(aircraftsortieAbridged.dhd())
            .contains(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.dhdReason()).contains("Due for maintenance")
        assertThat(aircraftsortieAbridged.estArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.estBlockInTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
        assertThat(aircraftsortieAbridged.estBlockOutTime())
            .contains(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
        assertThat(aircraftsortieAbridged.estDepTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.filename()).contains("ExampleFileName")
        assertThat(aircraftsortieAbridged.filesize()).contains(12)
        assertThat(aircraftsortieAbridged.flightTime()).contains(104.5)
        assertThat(aircraftsortieAbridged.fmDeskNum()).contains("7198675309")
        assertThat(aircraftsortieAbridged.fmName()).contains("Smith")
        assertThat(aircraftsortieAbridged.fuelReq()).contains(20000.1)
        assertThat(aircraftsortieAbridged.gndTime()).contains(387.8)
        assertThat(aircraftsortieAbridged.idAircraft()).contains("REF-AIRCRAFT-ID")
        assertThat(aircraftsortieAbridged.idMission())
            .contains("fa18d96e-91ea-60da-a7a8-1af6500066c8")
        assertThat(aircraftsortieAbridged.jcsPriority()).contains("1A3")
        assertThat(aircraftsortieAbridged.legNum()).contains(14)
        assertThat(aircraftsortieAbridged.lineNumber()).contains(99)
        assertThat(aircraftsortieAbridged.missionId()).contains("ABLE")
        assertThat(aircraftsortieAbridged.missionUpdate())
            .contains(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.objectiveRemarks())
            .contains("Some objective remark about aircraft A")
        assertThat(aircraftsortieAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(aircraftsortieAbridged.origNetwork()).contains("OPS1")
        assertThat(aircraftsortieAbridged.origSortieId()).contains("A0640")
        assertThat(aircraftsortieAbridged.oxyOnCrew()).contains(12.3)
        assertThat(aircraftsortieAbridged.oxyOnPax()).contains(12.3)
        assertThat(aircraftsortieAbridged.oxyReqCrew()).contains(12.3)
        assertThat(aircraftsortieAbridged.oxyReqPax()).contains(12.3)
        assertThat(aircraftsortieAbridged.paperStatus())
            .contains(AircraftsortieAbridged.PaperStatus.PUBLISHED)
        assertThat(aircraftsortieAbridged.papersVersion()).contains("1.1")
        assertThat(aircraftsortieAbridged.parkingLoc()).contains("KCOS")
        assertThat(aircraftsortieAbridged.passengers()).contains(17)
        assertThat(aircraftsortieAbridged.plannedArrTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(aircraftsortieAbridged.pprStatus())
            .contains(AircraftsortieAbridged.PprStatus.PENDING)
        assertThat(aircraftsortieAbridged.primaryScl()).contains("ABC")
        assertThat(aircraftsortieAbridged.rawFileUri()).contains("Example URI")
        assertThat(aircraftsortieAbridged.reqConfig()).contains("C-1")
        assertThat(aircraftsortieAbridged.resultRemarks()).contains("Some remark about aircraft A")
        assertThat(aircraftsortieAbridged.rvnReq()).contains(AircraftsortieAbridged.RvnReq.R)
        assertThat(aircraftsortieAbridged.scheduleRemarks())
            .contains("Some schedule remark about aircraft A")
        assertThat(aircraftsortieAbridged.secondaryScl()).contains("ABC")
        assertThat(aircraftsortieAbridged.soe()).contains("OPS")
        assertThat(aircraftsortieAbridged.sortieDate()).contains(LocalDate.parse("2021-01-01"))
        assertThat(aircraftsortieAbridged.sourceDl()).contains("AXE")
        assertThat(aircraftsortieAbridged.tailNumber()).contains("Tail_1")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val aircraftsortieAbridged =
            AircraftsortieAbridged.builder()
                .classificationMarking("U")
                .dataMode(AircraftsortieAbridged.DataMode.TEST)
                .plannedDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .id("AIRCRAFTSORTIE-ID")
                .actualArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .actualBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .actualBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .actualDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .aircraftAdsb("AE123C")
                .aircraftAltId("ALT-AIRCRAFT-ID")
                .aircraftEvent("Example event")
                .aircraftMds("C017A")
                .aircraftRemarks("Some remark about aircraft A")
                .alertStatus(22)
                .alertStatusCode("C1")
                .amcMsnNum("AJM512571333")
                .amcMsnType("SAAM")
                .arrFaa("FAA1")
                .arrIata("AAA")
                .arrIcao("KCOS")
                .arrItinerary(101)
                .arrPurposeCode("O")
                .callSign("BAKER")
                .cargoConfig("C-1")
                .commanderName("Smith")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentState("Park")
                .delayCode("500")
                .depFaa("FAA1")
                .depIata("AAA")
                .depIcao("KCOS")
                .depItinerary(100)
                .depPurposeCode("P")
                .dhd(OffsetDateTime.parse("2021-01-03T01:01:01.123Z"))
                .dhdReason("Due for maintenance")
                .estArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .estBlockInTime(OffsetDateTime.parse("2021-01-01T01:06:01.123Z"))
                .estBlockOutTime(OffsetDateTime.parse("2021-01-01T00:55:01.123Z"))
                .estDepTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .filename("ExampleFileName")
                .filesize(12)
                .flightTime(104.5)
                .fmDeskNum("7198675309")
                .fmName("Smith")
                .fuelReq(20000.1)
                .gndTime(387.8)
                .idAircraft("REF-AIRCRAFT-ID")
                .idMission("fa18d96e-91ea-60da-a7a8-1af6500066c8")
                .jcsPriority("1A3")
                .legNum(14)
                .lineNumber(99)
                .missionId("ABLE")
                .missionUpdate(OffsetDateTime.parse("2024-09-09T01:01:01.123Z"))
                .objectiveRemarks("Some objective remark about aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSortieId("A0640")
                .oxyOnCrew(12.3)
                .oxyOnPax(12.3)
                .oxyReqCrew(12.3)
                .oxyReqPax(12.3)
                .paperStatus(AircraftsortieAbridged.PaperStatus.PUBLISHED)
                .papersVersion("1.1")
                .parkingLoc("KCOS")
                .passengers(17)
                .plannedArrTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .pprStatus(AircraftsortieAbridged.PprStatus.PENDING)
                .primaryScl("ABC")
                .rawFileUri("Example URI")
                .reqConfig("C-1")
                .resultRemarks("Some remark about aircraft A")
                .rvnReq(AircraftsortieAbridged.RvnReq.R)
                .scheduleRemarks("Some schedule remark about aircraft A")
                .secondaryScl("ABC")
                .soe("OPS")
                .sortieDate(LocalDate.parse("2021-01-01"))
                .sourceDl("AXE")
                .tailNumber("Tail_1")
                .build()

        val roundtrippedAircraftsortieAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(aircraftsortieAbridged),
                jacksonTypeRef<AircraftsortieAbridged>(),
            )

        assertThat(roundtrippedAircraftsortieAbridged).isEqualTo(aircraftsortieAbridged)
    }
}
