// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.linkstatus

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LinkStatusCreateParamsTest {

    @Test
    fun create() {
        LinkStatusCreateParams.builder()
            .classificationMarking("U")
            .dataMode(LinkStatusCreateParams.DataMode.TEST)
            .endPoint1Lat(45.23)
            .endPoint1Lon(80.23)
            .endPoint1Name("Example endpoint")
            .endPoint2Lat(45.23)
            .endPoint2Lon(80.23)
            .endPoint2Name("Example description")
            .linkName("Example description")
            .linkStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .linkStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .source("Bluestaq")
            .id("LINKSTATUS-ID")
            .band("MIL-KA")
            .constellation("Fornax")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .dataRate1To2(10.23)
            .dataRate2To1(10.23)
            .idBeam1("REF-BEAM1-ID")
            .idBeam2("REF-BEAM2-ID")
            .idOnOrbit1("REF-ONORBIT1-ID")
            .idOnOrbit2("REF-ONORBIT2-ID")
            .linkState("DEGRADED-WEATHER")
            .linkType("Example link")
            .opsCap("Example status")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .satNo1(1)
            .satNo2(2)
            .snr(10.1)
            .sysCap("Example status")
            .build()
    }

    @Test
    fun body() {
        val params =
            LinkStatusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(LinkStatusCreateParams.DataMode.TEST)
                .endPoint1Lat(45.23)
                .endPoint1Lon(80.23)
                .endPoint1Name("Example endpoint")
                .endPoint2Lat(45.23)
                .endPoint2Lon(80.23)
                .endPoint2Name("Example description")
                .linkName("Example description")
                .linkStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .linkStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .source("Bluestaq")
                .id("LINKSTATUS-ID")
                .band("MIL-KA")
                .constellation("Fornax")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataRate1To2(10.23)
                .dataRate2To1(10.23)
                .idBeam1("REF-BEAM1-ID")
                .idBeam2("REF-BEAM2-ID")
                .idOnOrbit1("REF-ONORBIT1-ID")
                .idOnOrbit2("REF-ONORBIT2-ID")
                .linkState("DEGRADED-WEATHER")
                .linkType("Example link")
                .opsCap("Example status")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .satNo1(1)
                .satNo2(2)
                .snr(10.1)
                .sysCap("Example status")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LinkStatusCreateParams.DataMode.TEST)
        assertThat(body.endPoint1Lat()).isEqualTo(45.23)
        assertThat(body.endPoint1Lon()).isEqualTo(80.23)
        assertThat(body.endPoint1Name()).isEqualTo("Example endpoint")
        assertThat(body.endPoint2Lat()).isEqualTo(45.23)
        assertThat(body.endPoint2Lon()).isEqualTo(80.23)
        assertThat(body.endPoint2Name()).isEqualTo("Example description")
        assertThat(body.linkName()).isEqualTo("Example description")
        assertThat(body.linkStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.linkStopTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("LINKSTATUS-ID")
        assertThat(body.band()).contains("MIL-KA")
        assertThat(body.constellation()).contains("Fornax")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.dataRate1To2()).contains(10.23)
        assertThat(body.dataRate2To1()).contains(10.23)
        assertThat(body.idBeam1()).contains("REF-BEAM1-ID")
        assertThat(body.idBeam2()).contains("REF-BEAM2-ID")
        assertThat(body.idOnOrbit1()).contains("REF-ONORBIT1-ID")
        assertThat(body.idOnOrbit2()).contains("REF-ONORBIT2-ID")
        assertThat(body.linkState()).contains("DEGRADED-WEATHER")
        assertThat(body.linkType()).contains("Example link")
        assertThat(body.opsCap()).contains("Example status")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.satNo1()).contains(1)
        assertThat(body.satNo2()).contains(2)
        assertThat(body.snr()).contains(10.1)
        assertThat(body.sysCap()).contains("Example status")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            LinkStatusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(LinkStatusCreateParams.DataMode.TEST)
                .endPoint1Lat(45.23)
                .endPoint1Lon(80.23)
                .endPoint1Name("Example endpoint")
                .endPoint2Lat(45.23)
                .endPoint2Lon(80.23)
                .endPoint2Name("Example description")
                .linkName("Example description")
                .linkStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .linkStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(LinkStatusCreateParams.DataMode.TEST)
        assertThat(body.endPoint1Lat()).isEqualTo(45.23)
        assertThat(body.endPoint1Lon()).isEqualTo(80.23)
        assertThat(body.endPoint1Name()).isEqualTo("Example endpoint")
        assertThat(body.endPoint2Lat()).isEqualTo(45.23)
        assertThat(body.endPoint2Lon()).isEqualTo(80.23)
        assertThat(body.endPoint2Name()).isEqualTo("Example description")
        assertThat(body.linkName()).isEqualTo("Example description")
        assertThat(body.linkStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.linkStopTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
