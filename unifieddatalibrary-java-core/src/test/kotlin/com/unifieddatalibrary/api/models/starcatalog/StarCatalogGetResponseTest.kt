// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.starcatalog

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StarCatalogGetResponseTest {

    @Test
    fun create() {
        val starCatalogGetResponse =
            StarCatalogGetResponse.builder()
                .astrometryOrigin(StarCatalogGetResponse.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogGetResponse.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .id("STAR-CAT-DATASET-ID")
                .bpmag(0.04559)
                .bpmagUnc(0.2227)
                .catVersion("1.23")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decUnc(40.996)
                .gaiadr3CatId(89012345678901L)
                .gmag(0.0046)
                .gmagUnc(0.00292)
                .gncCatId(12345)
                .hipCatId(12345)
                .hmag(12.126)
                .hmagUnc(5.722)
                .jmag(9.515)
                .jmagUnc(7.559)
                .kmag(13.545)
                .kmagUnc(0.052)
                .multFlag(true)
                .neighborDistance(201.406)
                .neighborFlag(false)
                .neighborId(2456)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .parallax(-6.8)
                .parallaxUnc(82.35)
                .pmdec(-970.1003)
                .pmdecUnc(1.22)
                .pmra(1000.45)
                .pmraUnc(5.6)
                .pmUncFlag(false)
                .posUncFlag(false)
                .raUnc(509.466)
                .rpmag(8.0047)
                .rpmagUnc(1.233)
                .shift(4.548)
                .shiftFlag(false)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .varFlag(true)
                .build()

        assertThat(starCatalogGetResponse.astrometryOrigin())
            .isEqualTo(StarCatalogGetResponse.AstrometryOrigin.GAIADR3)
        assertThat(starCatalogGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(starCatalogGetResponse.csId()).isEqualTo(12345L)
        assertThat(starCatalogGetResponse.dataMode())
            .isEqualTo(StarCatalogGetResponse.DataMode.TEST)
        assertThat(starCatalogGetResponse.dec()).isEqualTo(21.8)
        assertThat(starCatalogGetResponse.ra()).isEqualTo(14.43)
        assertThat(starCatalogGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(starCatalogGetResponse.starEpoch()).isEqualTo(2016.0)
        assertThat(starCatalogGetResponse.id()).contains("STAR-CAT-DATASET-ID")
        assertThat(starCatalogGetResponse.bpmag()).contains(0.04559)
        assertThat(starCatalogGetResponse.bpmagUnc()).contains(0.2227)
        assertThat(starCatalogGetResponse.catVersion()).contains("1.23")
        assertThat(starCatalogGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(starCatalogGetResponse.createdBy()).contains("some.user")
        assertThat(starCatalogGetResponse.decUnc()).contains(40.996)
        assertThat(starCatalogGetResponse.gaiadr3CatId()).contains(89012345678901L)
        assertThat(starCatalogGetResponse.gmag()).contains(0.0046)
        assertThat(starCatalogGetResponse.gmagUnc()).contains(0.00292)
        assertThat(starCatalogGetResponse.gncCatId()).contains(12345)
        assertThat(starCatalogGetResponse.hipCatId()).contains(12345)
        assertThat(starCatalogGetResponse.hmag()).contains(12.126)
        assertThat(starCatalogGetResponse.hmagUnc()).contains(5.722)
        assertThat(starCatalogGetResponse.jmag()).contains(9.515)
        assertThat(starCatalogGetResponse.jmagUnc()).contains(7.559)
        assertThat(starCatalogGetResponse.kmag()).contains(13.545)
        assertThat(starCatalogGetResponse.kmagUnc()).contains(0.052)
        assertThat(starCatalogGetResponse.multFlag()).contains(true)
        assertThat(starCatalogGetResponse.neighborDistance()).contains(201.406)
        assertThat(starCatalogGetResponse.neighborFlag()).contains(false)
        assertThat(starCatalogGetResponse.neighborId()).contains(2456)
        assertThat(starCatalogGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(starCatalogGetResponse.origNetwork()).contains("ORIG")
        assertThat(starCatalogGetResponse.parallax()).contains(-6.8)
        assertThat(starCatalogGetResponse.parallaxUnc()).contains(82.35)
        assertThat(starCatalogGetResponse.pmdec()).contains(-970.1003)
        assertThat(starCatalogGetResponse.pmdecUnc()).contains(1.22)
        assertThat(starCatalogGetResponse.pmra()).contains(1000.45)
        assertThat(starCatalogGetResponse.pmraUnc()).contains(5.6)
        assertThat(starCatalogGetResponse.pmUncFlag()).contains(false)
        assertThat(starCatalogGetResponse.posUncFlag()).contains(false)
        assertThat(starCatalogGetResponse.raUnc()).contains(509.466)
        assertThat(starCatalogGetResponse.rpmag()).contains(8.0047)
        assertThat(starCatalogGetResponse.rpmagUnc()).contains(1.233)
        assertThat(starCatalogGetResponse.shift()).contains(4.548)
        assertThat(starCatalogGetResponse.shiftFlag()).contains(false)
        assertThat(starCatalogGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(starCatalogGetResponse.updatedBy()).contains("some.user")
        assertThat(starCatalogGetResponse.varFlag()).contains(true)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val starCatalogGetResponse =
            StarCatalogGetResponse.builder()
                .astrometryOrigin(StarCatalogGetResponse.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogGetResponse.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .id("STAR-CAT-DATASET-ID")
                .bpmag(0.04559)
                .bpmagUnc(0.2227)
                .catVersion("1.23")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decUnc(40.996)
                .gaiadr3CatId(89012345678901L)
                .gmag(0.0046)
                .gmagUnc(0.00292)
                .gncCatId(12345)
                .hipCatId(12345)
                .hmag(12.126)
                .hmagUnc(5.722)
                .jmag(9.515)
                .jmagUnc(7.559)
                .kmag(13.545)
                .kmagUnc(0.052)
                .multFlag(true)
                .neighborDistance(201.406)
                .neighborFlag(false)
                .neighborId(2456)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .parallax(-6.8)
                .parallaxUnc(82.35)
                .pmdec(-970.1003)
                .pmdecUnc(1.22)
                .pmra(1000.45)
                .pmraUnc(5.6)
                .pmUncFlag(false)
                .posUncFlag(false)
                .raUnc(509.466)
                .rpmag(8.0047)
                .rpmagUnc(1.233)
                .shift(4.548)
                .shiftFlag(false)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .varFlag(true)
                .build()

        val roundtrippedStarCatalogGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(starCatalogGetResponse),
                jacksonTypeRef<StarCatalogGetResponse>(),
            )

        assertThat(roundtrippedStarCatalogGetResponse).isEqualTo(starCatalogGetResponse)
    }
}
