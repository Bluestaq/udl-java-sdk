// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.weatherreport

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WeatherReportListResponseTest {

    @Test
    fun create() {
        val weatherReportListResponse =
            WeatherReportListResponse.builder()
                .classificationMarking("U")
                .dataMode(WeatherReportListResponse.DataMode.TEST)
                .lat(56.12)
                .lon(-156.6)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .reportType("FORECAST")
                .source("Bluestaq")
                .id("WEATHER-REPORT-ID")
                .actWeather("NO STATEMENT")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .alt(123.12)
                .andims(2L)
                .asrid(4326)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("ST_Polygon")
                .barPress(101.2)
                .ccEvent(true)
                .addCloudCover("OVERCAST")
                .addCloudCover("BROKEN")
                .addCloudHght(1.2)
                .addCloudHght(2.2)
                .contrailHghtLower(123.123)
                .contrailHghtUpper(123.123)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataLevel("MANDATORY")
                .dewPoint(15.6)
                .difRad(234.5)
                .dirDev(9.1)
                .enRouteWeather("THUNDERSTORMS")
                .externalId("GDSSMB022408301601304517")
                .externalLocationId("TMDS060AD4OG03CC")
                .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
                .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .geoPotentialAlt(1000.0)
                .hshear(3.8)
                .icao("KAFF")
                .icingLowerLimit(123.123)
                .icingUpperLimit(123.123)
                .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
                .idGroundImagery("GROUND-IMAGERY-ID")
                .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                .idSite("AIRFIELD-ID")
                .indexRefraction(1.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .precipRate(3.4)
                .qnh(1234.456)
                .radVel(-0.04)
                .radVelBeam1(4.4)
                .radVelBeam2(-0.2)
                .radVelBeam3(-0.2)
                .radVelBeam4(11.4)
                .radVelBeam5(4.1)
                .rainHour(1.2)
                .rawMetar(
                    "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
                )
                .rawTaf(
                    "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
                )
                .refRad(56.7)
                .relHumidity(34.456)
                .senalt(1.23)
                .senlat(12.456)
                .senlon(123.456)
                .soilMoisture(3.5)
                .soilTemp(22.4)
                .solarRad(1234.456)
                .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
                .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
                .addSrcTyp("SENSOR")
                .addSrcTyp("WEATHERDATA")
                .surroundingWeather("NO STATEMENT")
                .temperature(23.45)
                .visibility(1234.456)
                .vshear(3.8)
                .weatherAmp("NO STATEMENT")
                .weatherDesc("NO STATEMENT")
                .weatherId("WEATHER-ID")
                .weatherInt("NO STATEMENT")
                .windChill(15.6)
                .addWindCov(1.1)
                .addWindCov(2.2)
                .windDir(75.1234)
                .windDirAvg(57.1)
                .windDirPeak(78.4)
                .windDirPeak10(44.5)
                .windGust(10.23)
                .windGust10(13.2)
                .windSpd(1.23)
                .windSpdAvg(12.1)
                .windVar(false)
                .build()

        assertThat(weatherReportListResponse.classificationMarking()).isEqualTo("U")
        assertThat(weatherReportListResponse.dataMode())
            .isEqualTo(WeatherReportListResponse.DataMode.TEST)
        assertThat(weatherReportListResponse.lat()).isEqualTo(56.12)
        assertThat(weatherReportListResponse.lon()).isEqualTo(-156.6)
        assertThat(weatherReportListResponse.obTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(weatherReportListResponse.reportType()).isEqualTo("FORECAST")
        assertThat(weatherReportListResponse.source()).isEqualTo("Bluestaq")
        assertThat(weatherReportListResponse.id()).contains("WEATHER-REPORT-ID")
        assertThat(weatherReportListResponse.actWeather()).contains("NO STATEMENT")
        assertThat(weatherReportListResponse.agjson())
            .contains(
                "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
            )
        assertThat(weatherReportListResponse.alt()).contains(123.12)
        assertThat(weatherReportListResponse.andims()).contains(2L)
        assertThat(weatherReportListResponse.asrid()).contains(4326)
        assertThat(weatherReportListResponse.atext())
            .contains(
                "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
            )
        assertThat(weatherReportListResponse.atype()).contains("ST_Polygon")
        assertThat(weatherReportListResponse.barPress()).contains(101.2)
        assertThat(weatherReportListResponse.ccEvent()).contains(true)
        assertThat(weatherReportListResponse.cloudCover().getOrNull())
            .containsExactly("OVERCAST", "BROKEN")
        assertThat(weatherReportListResponse.cloudHght().getOrNull()).containsExactly(1.2, 2.2)
        assertThat(weatherReportListResponse.contrailHghtLower()).contains(123.123)
        assertThat(weatherReportListResponse.contrailHghtUpper()).contains(123.123)
        assertThat(weatherReportListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(weatherReportListResponse.createdBy()).contains("some.user")
        assertThat(weatherReportListResponse.dataLevel()).contains("MANDATORY")
        assertThat(weatherReportListResponse.dewPoint()).contains(15.6)
        assertThat(weatherReportListResponse.difRad()).contains(234.5)
        assertThat(weatherReportListResponse.dirDev()).contains(9.1)
        assertThat(weatherReportListResponse.enRouteWeather()).contains("THUNDERSTORMS")
        assertThat(weatherReportListResponse.externalId()).contains("GDSSMB022408301601304517")
        assertThat(weatherReportListResponse.externalLocationId()).contains("TMDS060AD4OG03CC")
        assertThat(weatherReportListResponse.forecastEndTime())
            .contains(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
        assertThat(weatherReportListResponse.forecastStartTime())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
        assertThat(weatherReportListResponse.geoPotentialAlt()).contains(1000.0)
        assertThat(weatherReportListResponse.hshear()).contains(3.8)
        assertThat(weatherReportListResponse.icao()).contains("KAFF")
        assertThat(weatherReportListResponse.icingLowerLimit()).contains(123.123)
        assertThat(weatherReportListResponse.icingUpperLimit()).contains(123.123)
        assertThat(weatherReportListResponse.idAirfield())
            .contains("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
        assertThat(weatherReportListResponse.idGroundImagery()).contains("GROUND-IMAGERY-ID")
        assertThat(weatherReportListResponse.idSensor())
            .contains("0129f577-e04c-441e-65ca-0a04a750bed9")
        assertThat(weatherReportListResponse.idSite()).contains("AIRFIELD-ID")
        assertThat(weatherReportListResponse.indexRefraction()).contains(1.1)
        assertThat(weatherReportListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(weatherReportListResponse.origNetwork()).contains("OPS1")
        assertThat(weatherReportListResponse.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(weatherReportListResponse.precipRate()).contains(3.4)
        assertThat(weatherReportListResponse.qnh()).contains(1234.456)
        assertThat(weatherReportListResponse.radVel()).contains(-0.04)
        assertThat(weatherReportListResponse.radVelBeam1()).contains(4.4)
        assertThat(weatherReportListResponse.radVelBeam2()).contains(-0.2)
        assertThat(weatherReportListResponse.radVelBeam3()).contains(-0.2)
        assertThat(weatherReportListResponse.radVelBeam4()).contains(11.4)
        assertThat(weatherReportListResponse.radVelBeam5()).contains(4.1)
        assertThat(weatherReportListResponse.rainHour()).contains(1.2)
        assertThat(weatherReportListResponse.rawMetar())
            .contains(
                "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
            )
        assertThat(weatherReportListResponse.rawTaf())
            .contains(
                "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
            )
        assertThat(weatherReportListResponse.refRad()).contains(56.7)
        assertThat(weatherReportListResponse.relHumidity()).contains(34.456)
        assertThat(weatherReportListResponse.senalt()).contains(1.23)
        assertThat(weatherReportListResponse.senlat()).contains(12.456)
        assertThat(weatherReportListResponse.senlon()).contains(123.456)
        assertThat(weatherReportListResponse.soilMoisture()).contains(3.5)
        assertThat(weatherReportListResponse.soilTemp()).contains(22.4)
        assertThat(weatherReportListResponse.solarRad()).contains(1234.456)
        assertThat(weatherReportListResponse.srcIds().getOrNull())
            .containsExactly(
                "e609a90d-4059-4043-9f1a-fd7b49a3e1d0",
                "c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52",
            )
        assertThat(weatherReportListResponse.srcTyps().getOrNull())
            .containsExactly("SENSOR", "WEATHERDATA")
        assertThat(weatherReportListResponse.surroundingWeather()).contains("NO STATEMENT")
        assertThat(weatherReportListResponse.temperature()).contains(23.45)
        assertThat(weatherReportListResponse.visibility()).contains(1234.456)
        assertThat(weatherReportListResponse.vshear()).contains(3.8)
        assertThat(weatherReportListResponse.weatherAmp()).contains("NO STATEMENT")
        assertThat(weatherReportListResponse.weatherDesc()).contains("NO STATEMENT")
        assertThat(weatherReportListResponse.weatherId()).contains("WEATHER-ID")
        assertThat(weatherReportListResponse.weatherInt()).contains("NO STATEMENT")
        assertThat(weatherReportListResponse.windChill()).contains(15.6)
        assertThat(weatherReportListResponse.windCov().getOrNull()).containsExactly(1.1, 2.2)
        assertThat(weatherReportListResponse.windDir()).contains(75.1234)
        assertThat(weatherReportListResponse.windDirAvg()).contains(57.1)
        assertThat(weatherReportListResponse.windDirPeak()).contains(78.4)
        assertThat(weatherReportListResponse.windDirPeak10()).contains(44.5)
        assertThat(weatherReportListResponse.windGust()).contains(10.23)
        assertThat(weatherReportListResponse.windGust10()).contains(13.2)
        assertThat(weatherReportListResponse.windSpd()).contains(1.23)
        assertThat(weatherReportListResponse.windSpdAvg()).contains(12.1)
        assertThat(weatherReportListResponse.windVar()).contains(false)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val weatherReportListResponse =
            WeatherReportListResponse.builder()
                .classificationMarking("U")
                .dataMode(WeatherReportListResponse.DataMode.TEST)
                .lat(56.12)
                .lon(-156.6)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .reportType("FORECAST")
                .source("Bluestaq")
                .id("WEATHER-REPORT-ID")
                .actWeather("NO STATEMENT")
                .agjson(
                    "{\"type\":\"Polygon\",\"coordinates\":[ [ [ 67.3291113966927, 26.156175339112 ], [ 67.2580009640721, 26.091022064271 ], [ 67.1795862381682, 26.6637992964562 ], [ 67.2501237475598, 26.730115808233 ], [ 67.3291113966927, 26.156175339112 ] ] ] }"
                )
                .alt(123.12)
                .andims(2L)
                .asrid(4326)
                .atext(
                    "POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))"
                )
                .atype("ST_Polygon")
                .barPress(101.2)
                .ccEvent(true)
                .addCloudCover("OVERCAST")
                .addCloudCover("BROKEN")
                .addCloudHght(1.2)
                .addCloudHght(2.2)
                .contrailHghtLower(123.123)
                .contrailHghtUpper(123.123)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataLevel("MANDATORY")
                .dewPoint(15.6)
                .difRad(234.5)
                .dirDev(9.1)
                .enRouteWeather("THUNDERSTORMS")
                .externalId("GDSSMB022408301601304517")
                .externalLocationId("TMDS060AD4OG03CC")
                .forecastEndTime(OffsetDateTime.parse("2024-01-01T18:00:00.123Z"))
                .forecastStartTime(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                .geoPotentialAlt(1000.0)
                .hshear(3.8)
                .icao("KAFF")
                .icingLowerLimit(123.123)
                .icingUpperLimit(123.123)
                .idAirfield("8fb38d6d-a3de-45dd-8974-4e3ed73e9449")
                .idGroundImagery("GROUND-IMAGERY-ID")
                .idSensor("0129f577-e04c-441e-65ca-0a04a750bed9")
                .idSite("AIRFIELD-ID")
                .indexRefraction(1.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .precipRate(3.4)
                .qnh(1234.456)
                .radVel(-0.04)
                .radVelBeam1(4.4)
                .radVelBeam2(-0.2)
                .radVelBeam3(-0.2)
                .radVelBeam4(11.4)
                .radVelBeam5(4.1)
                .rainHour(1.2)
                .rawMetar(
                    "KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015"
                )
                .rawTaf(
                    "KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z="
                )
                .refRad(56.7)
                .relHumidity(34.456)
                .senalt(1.23)
                .senlat(12.456)
                .senlon(123.456)
                .soilMoisture(3.5)
                .soilTemp(22.4)
                .solarRad(1234.456)
                .addSrcId("e609a90d-4059-4043-9f1a-fd7b49a3e1d0")
                .addSrcId("c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52")
                .addSrcTyp("SENSOR")
                .addSrcTyp("WEATHERDATA")
                .surroundingWeather("NO STATEMENT")
                .temperature(23.45)
                .visibility(1234.456)
                .vshear(3.8)
                .weatherAmp("NO STATEMENT")
                .weatherDesc("NO STATEMENT")
                .weatherId("WEATHER-ID")
                .weatherInt("NO STATEMENT")
                .windChill(15.6)
                .addWindCov(1.1)
                .addWindCov(2.2)
                .windDir(75.1234)
                .windDirAvg(57.1)
                .windDirPeak(78.4)
                .windDirPeak10(44.5)
                .windGust(10.23)
                .windGust10(13.2)
                .windSpd(1.23)
                .windSpdAvg(12.1)
                .windVar(false)
                .build()

        val roundtrippedWeatherReportListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(weatherReportListResponse),
                jacksonTypeRef<WeatherReportListResponse>(),
            )

        assertThat(roundtrippedWeatherReportListResponse).isEqualTo(weatherReportListResponse)
    }
}
