// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.objectofinterest

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ObjectOfInterestListResponseTest {

    @Test
    fun create() {
        val objectOfInterestListResponse =
            ObjectOfInterestListResponse.builder()
                .classificationMarking("U")
                .dataMode(ObjectOfInterestListResponse.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .id("OBJECTOFINTEREST-ID")
                .apogee(123.4)
                .argOfPerigee(123.4)
                .bStar(123.4)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaTs(listOf(1.1, 2.2, 3.3))
                .deltaVs(listOf(1.1, 2.2, 3.3))
                .description("Example description")
                .eccentricity(123.4)
                .elsetEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .inclination(123.4)
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .meanAnomaly(123.4)
                .meanMotion(123.4)
                .meanMotionDDot(123.4)
                .meanMotionDot(123.4)
                .missedObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .name("Example_name")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .perigee(123.4)
                .period(123.4)
                .priority(7)
                .raan(123.4)
                .revNo(123)
                .satNo(12)
                .semiMajorAxis(123.4)
                .sensorTaskingStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .status("OPEN")
                .svEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .x(123.4)
                .xvel(123.4)
                .y(123.4)
                .yvel(123.4)
                .z(123.4)
                .zvel(123.4)
                .build()

        assertThat(objectOfInterestListResponse.classificationMarking()).isEqualTo("U")
        assertThat(objectOfInterestListResponse.dataMode())
            .isEqualTo(ObjectOfInterestListResponse.DataMode.TEST)
        assertThat(objectOfInterestListResponse.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(objectOfInterestListResponse.sensorTaskingStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(objectOfInterestListResponse.source()).isEqualTo("Bluestaq")
        assertThat(objectOfInterestListResponse.statusDate())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(objectOfInterestListResponse.id()).contains("OBJECTOFINTEREST-ID")
        assertThat(objectOfInterestListResponse.apogee()).contains(123.4)
        assertThat(objectOfInterestListResponse.argOfPerigee()).contains(123.4)
        assertThat(objectOfInterestListResponse.bStar()).contains(123.4)
        assertThat(objectOfInterestListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(objectOfInterestListResponse.createdBy()).contains("some.user")
        assertThat(objectOfInterestListResponse.deltaTs().getOrNull())
            .containsExactly(1.1, 2.2, 3.3)
        assertThat(objectOfInterestListResponse.deltaVs().getOrNull())
            .containsExactly(1.1, 2.2, 3.3)
        assertThat(objectOfInterestListResponse.description()).contains("Example description")
        assertThat(objectOfInterestListResponse.eccentricity()).contains(123.4)
        assertThat(objectOfInterestListResponse.elsetEpoch())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(objectOfInterestListResponse.inclination()).contains(123.4)
        assertThat(objectOfInterestListResponse.lastObTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(objectOfInterestListResponse.meanAnomaly()).contains(123.4)
        assertThat(objectOfInterestListResponse.meanMotion()).contains(123.4)
        assertThat(objectOfInterestListResponse.meanMotionDDot()).contains(123.4)
        assertThat(objectOfInterestListResponse.meanMotionDot()).contains(123.4)
        assertThat(objectOfInterestListResponse.missedObTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(objectOfInterestListResponse.name()).contains("Example_name")
        assertThat(objectOfInterestListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(objectOfInterestListResponse.origNetwork()).contains("ORIG")
        assertThat(objectOfInterestListResponse.perigee()).contains(123.4)
        assertThat(objectOfInterestListResponse.period()).contains(123.4)
        assertThat(objectOfInterestListResponse.priority()).contains(7)
        assertThat(objectOfInterestListResponse.raan()).contains(123.4)
        assertThat(objectOfInterestListResponse.revNo()).contains(123)
        assertThat(objectOfInterestListResponse.satNo()).contains(12)
        assertThat(objectOfInterestListResponse.semiMajorAxis()).contains(123.4)
        assertThat(objectOfInterestListResponse.sensorTaskingStopTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(objectOfInterestListResponse.status()).contains("OPEN")
        assertThat(objectOfInterestListResponse.svEpoch())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(objectOfInterestListResponse.x()).contains(123.4)
        assertThat(objectOfInterestListResponse.xvel()).contains(123.4)
        assertThat(objectOfInterestListResponse.y()).contains(123.4)
        assertThat(objectOfInterestListResponse.yvel()).contains(123.4)
        assertThat(objectOfInterestListResponse.z()).contains(123.4)
        assertThat(objectOfInterestListResponse.zvel()).contains(123.4)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val objectOfInterestListResponse =
            ObjectOfInterestListResponse.builder()
                .classificationMarking("U")
                .dataMode(ObjectOfInterestListResponse.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .sensorTaskingStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .source("Bluestaq")
                .statusDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .id("OBJECTOFINTEREST-ID")
                .apogee(123.4)
                .argOfPerigee(123.4)
                .bStar(123.4)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaTs(listOf(1.1, 2.2, 3.3))
                .deltaVs(listOf(1.1, 2.2, 3.3))
                .description("Example description")
                .eccentricity(123.4)
                .elsetEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .inclination(123.4)
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .meanAnomaly(123.4)
                .meanMotion(123.4)
                .meanMotionDDot(123.4)
                .meanMotionDot(123.4)
                .missedObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .name("Example_name")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .perigee(123.4)
                .period(123.4)
                .priority(7)
                .raan(123.4)
                .revNo(123)
                .satNo(12)
                .semiMajorAxis(123.4)
                .sensorTaskingStopTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .status("OPEN")
                .svEpoch(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .x(123.4)
                .xvel(123.4)
                .y(123.4)
                .yvel(123.4)
                .z(123.4)
                .zvel(123.4)
                .build()

        val roundtrippedObjectOfInterestListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(objectOfInterestListResponse),
                jacksonTypeRef<ObjectOfInterestListResponse>(),
            )

        assertThat(roundtrippedObjectOfInterestListResponse).isEqualTo(objectOfInterestListResponse)
    }
}
