// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.buses

import com.unifieddatalibrary.api.models.entities.EntityIngest
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class BusCreateParamsTest {

    @Test
    fun create() {
        BusCreateParams.builder()
            .classificationMarking("U")
            .dataMode(BusCreateParams.DataMode.TEST)
            .name("Example name")
            .source("Bluestaq")
            .id("BUS-ID")
            .aocsNotes("Example notes")
            .avgDryMass(2879.1)
            .avgPayloadMass(10.1)
            .avgPayloadPower(10.1)
            .avgSpacecraftPower(10.1)
            .avgWetMass(5246.1)
            .bodyDimensionX(10.1)
            .bodyDimensionY(10.1)
            .bodyDimensionZ(10.1)
            .busKitDesignerOrgId("BUSKITDESIGNERORG-ID")
            .countryCode("US")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .description("Dedicated small spacecraft bus.")
            .entity(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
            .generic(false)
            .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
            .launchEnvelopeDimensionX(10.1)
            .launchEnvelopeDimensionY(10.1)
            .launchEnvelopeDimensionZ(10.1)
            .mainComputerManufacturerOrgId("MAINCOMPUTERMANUFACTURERORG-ID")
            .manufacturerOrgId("MANUFACTURERORG-ID")
            .massCategory("Nanosatellite")
            .maxBolPowerLower(10.1)
            .maxBolPowerUpper(10.1)
            .maxBolStationMass(10.1)
            .maxDryMass(2900.1)
            .maxEolPowerLower(10.1)
            .maxEolPowerUpper(10.1)
            .maxLaunchMassLower(10.1)
            .maxLaunchMassUpper(10.1)
            .maxPayloadMass(10.1)
            .maxPayloadPower(10.1)
            .maxSpacecraftPower(10.1)
            .maxWetMass(5300.0)
            .medianDryMass(2950.1)
            .medianWetMass(5260.1)
            .minDryMass(2858.1)
            .minWetMass(5192.1)
            .numOrbitType(3)
            .oapPayloadPower(10.1)
            .oapSpacecraftPower(10.1)
            .orbitTypes(listOf("LEO", "HEO", "GEO"))
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .payloadDimensionX(1.1)
            .payloadDimensionY(1.1)
            .payloadDimensionZ(1.1)
            .payloadVolume(1.1)
            .powerCategory("low power")
            .telemetryTrackingManufacturerOrgId("TELEMETRYTRACKINGMANUFACTURERORG-ID")
            .type("Example type")
            .build()
    }

    @Test
    fun body() {
        val params =
            BusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(BusCreateParams.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .id("BUS-ID")
                .aocsNotes("Example notes")
                .avgDryMass(2879.1)
                .avgPayloadMass(10.1)
                .avgPayloadPower(10.1)
                .avgSpacecraftPower(10.1)
                .avgWetMass(5246.1)
                .bodyDimensionX(10.1)
                .bodyDimensionY(10.1)
                .bodyDimensionZ(10.1)
                .busKitDesignerOrgId("BUSKITDESIGNERORG-ID")
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Dedicated small spacecraft bus.")
                .entity(
                    EntityIngest.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(EntityIngest.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationIngest.builder()
                                .classificationMarking("U")
                                .dataMode(LocationIngest.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            EntityIngest.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(EntityIngest.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .addUrl("URL1")
                        .addUrl("URL2")
                        .build()
                )
                .generic(false)
                .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .launchEnvelopeDimensionX(10.1)
                .launchEnvelopeDimensionY(10.1)
                .launchEnvelopeDimensionZ(10.1)
                .mainComputerManufacturerOrgId("MAINCOMPUTERMANUFACTURERORG-ID")
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .massCategory("Nanosatellite")
                .maxBolPowerLower(10.1)
                .maxBolPowerUpper(10.1)
                .maxBolStationMass(10.1)
                .maxDryMass(2900.1)
                .maxEolPowerLower(10.1)
                .maxEolPowerUpper(10.1)
                .maxLaunchMassLower(10.1)
                .maxLaunchMassUpper(10.1)
                .maxPayloadMass(10.1)
                .maxPayloadPower(10.1)
                .maxSpacecraftPower(10.1)
                .maxWetMass(5300.0)
                .medianDryMass(2950.1)
                .medianWetMass(5260.1)
                .minDryMass(2858.1)
                .minWetMass(5192.1)
                .numOrbitType(3)
                .oapPayloadPower(10.1)
                .oapSpacecraftPower(10.1)
                .orbitTypes(listOf("LEO", "HEO", "GEO"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .payloadDimensionX(1.1)
                .payloadDimensionY(1.1)
                .payloadDimensionZ(1.1)
                .payloadVolume(1.1)
                .powerCategory("low power")
                .telemetryTrackingManufacturerOrgId("TELEMETRYTRACKINGMANUFACTURERORG-ID")
                .type("Example type")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(BusCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("Example name")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("BUS-ID")
        assertThat(body.aocsNotes()).contains("Example notes")
        assertThat(body.avgDryMass()).contains(2879.1)
        assertThat(body.avgPayloadMass()).contains(10.1)
        assertThat(body.avgPayloadPower()).contains(10.1)
        assertThat(body.avgSpacecraftPower()).contains(10.1)
        assertThat(body.avgWetMass()).contains(5246.1)
        assertThat(body.bodyDimensionX()).contains(10.1)
        assertThat(body.bodyDimensionY()).contains(10.1)
        assertThat(body.bodyDimensionZ()).contains(10.1)
        assertThat(body.busKitDesignerOrgId()).contains("BUSKITDESIGNERORG-ID")
        assertThat(body.countryCode()).contains("US")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.description()).contains("Dedicated small spacecraft bus.")
        assertThat(body.entity())
            .contains(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
        assertThat(body.generic()).contains(false)
        assertThat(body.idEntity()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(body.launchEnvelopeDimensionX()).contains(10.1)
        assertThat(body.launchEnvelopeDimensionY()).contains(10.1)
        assertThat(body.launchEnvelopeDimensionZ()).contains(10.1)
        assertThat(body.mainComputerManufacturerOrgId()).contains("MAINCOMPUTERMANUFACTURERORG-ID")
        assertThat(body.manufacturerOrgId()).contains("MANUFACTURERORG-ID")
        assertThat(body.massCategory()).contains("Nanosatellite")
        assertThat(body.maxBolPowerLower()).contains(10.1)
        assertThat(body.maxBolPowerUpper()).contains(10.1)
        assertThat(body.maxBolStationMass()).contains(10.1)
        assertThat(body.maxDryMass()).contains(2900.1)
        assertThat(body.maxEolPowerLower()).contains(10.1)
        assertThat(body.maxEolPowerUpper()).contains(10.1)
        assertThat(body.maxLaunchMassLower()).contains(10.1)
        assertThat(body.maxLaunchMassUpper()).contains(10.1)
        assertThat(body.maxPayloadMass()).contains(10.1)
        assertThat(body.maxPayloadPower()).contains(10.1)
        assertThat(body.maxSpacecraftPower()).contains(10.1)
        assertThat(body.maxWetMass()).contains(5300.0)
        assertThat(body.medianDryMass()).contains(2950.1)
        assertThat(body.medianWetMass()).contains(5260.1)
        assertThat(body.minDryMass()).contains(2858.1)
        assertThat(body.minWetMass()).contains(5192.1)
        assertThat(body.numOrbitType()).contains(3)
        assertThat(body.oapPayloadPower()).contains(10.1)
        assertThat(body.oapSpacecraftPower()).contains(10.1)
        assertThat(body.orbitTypes().getOrNull()).containsExactly("LEO", "HEO", "GEO")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.payloadDimensionX()).contains(1.1)
        assertThat(body.payloadDimensionY()).contains(1.1)
        assertThat(body.payloadDimensionZ()).contains(1.1)
        assertThat(body.payloadVolume()).contains(1.1)
        assertThat(body.powerCategory()).contains("low power")
        assertThat(body.telemetryTrackingManufacturerOrgId())
            .contains("TELEMETRYTRACKINGMANUFACTURERORG-ID")
        assertThat(body.type()).contains("Example type")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            BusCreateParams.builder()
                .classificationMarking("U")
                .dataMode(BusCreateParams.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(BusCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("Example name")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
