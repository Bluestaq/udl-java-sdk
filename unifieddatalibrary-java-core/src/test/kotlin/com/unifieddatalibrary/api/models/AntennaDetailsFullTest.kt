// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AntennaDetailsFullTest {

    @Test
    fun create() {
        val antennaDetailsFull =
            AntennaDetailsFull.builder()
                .classificationMarking("U")
                .dataMode(AntennaDetailsFull.DataMode.TEST)
                .idAntenna("ANTENNA-ID")
                .source("Bluestaq")
                .id("ANTENNADETAILS-ID")
                .beamForming(false)
                .beamwidth(14.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Description of antenna A")
                .diameter(0.01)
                .endFrequency(3.3)
                .gain(20.1)
                .gainTolerance(5.1)
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTUREORG-ID")
                .mode(AntennaDetailsFull.Mode.TX)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .polarization(45.1)
                .position("Top")
                .addSize(0.03)
                .addSize(0.05)
                .startFrequency(2.1)
                .steerable(false)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .type("Reflector")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(antennaDetailsFull.classificationMarking()).isEqualTo("U")
        assertThat(antennaDetailsFull.dataMode()).isEqualTo(AntennaDetailsFull.DataMode.TEST)
        assertThat(antennaDetailsFull.idAntenna()).isEqualTo("ANTENNA-ID")
        assertThat(antennaDetailsFull.source()).isEqualTo("Bluestaq")
        assertThat(antennaDetailsFull.id()).contains("ANTENNADETAILS-ID")
        assertThat(antennaDetailsFull.beamForming()).contains(false)
        assertThat(antennaDetailsFull.beamwidth()).contains(14.1)
        assertThat(antennaDetailsFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(antennaDetailsFull.createdBy()).contains("some.user")
        assertThat(antennaDetailsFull.description()).contains("Description of antenna A")
        assertThat(antennaDetailsFull.diameter()).contains(0.01)
        assertThat(antennaDetailsFull.endFrequency()).contains(3.3)
        assertThat(antennaDetailsFull.gain()).contains(20.1)
        assertThat(antennaDetailsFull.gainTolerance()).contains(5.1)
        assertThat(antennaDetailsFull.manufacturerOrg())
            .contains(
                OrganizationFull.builder()
                    .classificationMarking("U")
                    .dataMode(OrganizationFull.DataMode.TEST)
                    .name("some.user")
                    .source("some.user")
                    .type("GOVERNMENT")
                    .id("ORGANIZATION-ID")
                    .active(false)
                    .category("Private company")
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("Example description")
                    .externalId("EXTERNAL-ID")
                    .nationality("US")
                    .addOrganizationDetail(
                        OrganizationDetailsFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationDetailsFull.DataMode.TEST)
                            .idOrganization("ORGANIZATION-ID")
                            .name("some.user")
                            .source("some.user")
                            .id("ORGANIZATIONDETAILS-ID")
                            .address1("123 Main Street")
                            .address2("Apt 4B")
                            .address3("Colorado Springs CO, 80903")
                            .broker("some.user")
                            .ceo("some.user")
                            .cfo("some.user")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .cto("some.user")
                            .description("Example description")
                            .ebitda(123.4)
                            .email("some_organization@organization.com")
                            .financialNotes("Example notes")
                            .financialYearEndDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .fleetPlanNotes("Example notes")
                            .formerOrgId("FORMERORG-ID")
                            .ftes(123)
                            .geoAdminLevel1("Colorado")
                            .geoAdminLevel2("El Paso County")
                            .geoAdminLevel3("Colorado Springs")
                            .massRanking(123)
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .parentOrgId("PARENTORG-ID")
                            .postalCode("80903")
                            .profit(123.4)
                            .revenue(123.4)
                            .revenueRanking(123)
                            .riskManager("some.user")
                            .servicesNotes("Example notes")
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .origin("some.user")
                    .origNetwork("OPS1")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(antennaDetailsFull.manufacturerOrgId()).contains("MANUFACTUREORG-ID")
        assertThat(antennaDetailsFull.mode()).contains(AntennaDetailsFull.Mode.TX)
        assertThat(antennaDetailsFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(antennaDetailsFull.origNetwork()).contains("OPS1")
        assertThat(antennaDetailsFull.polarization()).contains(45.1)
        assertThat(antennaDetailsFull.position()).contains("Top")
        assertThat(antennaDetailsFull.size().getOrNull()).containsExactly(0.03, 0.05)
        assertThat(antennaDetailsFull.startFrequency()).contains(2.1)
        assertThat(antennaDetailsFull.steerable()).contains(false)
        assertThat(antennaDetailsFull.tags().getOrNull())
            .containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(antennaDetailsFull.type()).contains("Reflector")
        assertThat(antennaDetailsFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(antennaDetailsFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val antennaDetailsFull =
            AntennaDetailsFull.builder()
                .classificationMarking("U")
                .dataMode(AntennaDetailsFull.DataMode.TEST)
                .idAntenna("ANTENNA-ID")
                .source("Bluestaq")
                .id("ANTENNADETAILS-ID")
                .beamForming(false)
                .beamwidth(14.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Description of antenna A")
                .diameter(0.01)
                .endFrequency(3.3)
                .gain(20.1)
                .gainTolerance(5.1)
                .manufacturerOrg(
                    OrganizationFull.builder()
                        .classificationMarking("U")
                        .dataMode(OrganizationFull.DataMode.TEST)
                        .name("some.user")
                        .source("some.user")
                        .type("GOVERNMENT")
                        .id("ORGANIZATION-ID")
                        .active(false)
                        .category("Private company")
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("Example description")
                        .externalId("EXTERNAL-ID")
                        .nationality("US")
                        .addOrganizationDetail(
                            OrganizationDetailsFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                .idOrganization("ORGANIZATION-ID")
                                .name("some.user")
                                .source("some.user")
                                .id("ORGANIZATIONDETAILS-ID")
                                .address1("123 Main Street")
                                .address2("Apt 4B")
                                .address3("Colorado Springs CO, 80903")
                                .broker("some.user")
                                .ceo("some.user")
                                .cfo("some.user")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .cto("some.user")
                                .description("Example description")
                                .ebitda(123.4)
                                .email("some_organization@organization.com")
                                .financialNotes("Example notes")
                                .financialYearEndDate(
                                    OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                )
                                .fleetPlanNotes("Example notes")
                                .formerOrgId("FORMERORG-ID")
                                .ftes(123)
                                .geoAdminLevel1("Colorado")
                                .geoAdminLevel2("El Paso County")
                                .geoAdminLevel3("Colorado Springs")
                                .massRanking(123)
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .parentOrgId("PARENTORG-ID")
                                .postalCode("80903")
                                .profit(123.4)
                                .revenue(123.4)
                                .revenueRanking(123)
                                .riskManager("some.user")
                                .servicesNotes("Example notes")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .origin("some.user")
                        .origNetwork("OPS1")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .manufacturerOrgId("MANUFACTUREORG-ID")
                .mode(AntennaDetailsFull.Mode.TX)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .polarization(45.1)
                .position("Top")
                .addSize(0.03)
                .addSize(0.05)
                .startFrequency(2.1)
                .steerable(false)
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .type("Reflector")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedAntennaDetailsFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(antennaDetailsFull),
                jacksonTypeRef<AntennaDetailsFull>(),
            )

        assertThat(roundtrippedAntennaDetailsFull).isEqualTo(antennaDetailsFull)
    }
}
