// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.trackroute

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class TrackRouteUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        TrackRouteUnvalidatedPublishParams.builder()
            .classificationMarking("U")
            .dataMode(TrackRouteUnvalidatedPublishParams.DataMode.TEST)
            .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
            .source("Bluestaq")
            .type("AIR REFUELING")
            .id("026dd511-8ba5-47d3-9909-836149f87686")
            .addAltitudeBlock(
                TrackRouteUnvalidatedPublishParams.AltitudeBlock.builder()
                    .altitudeSequenceId("A1")
                    .lowerAltitude(27000.1)
                    .upperAltitude(27200.5)
                    .build()
            )
            .apnSetting("1-3-1")
            .apxBeaconCode("5/1")
            .artccMessage("OAKLAND CTR/GUAM CERAP")
            .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .creatingOrg("HQPAC")
            .direction("NE")
            .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
            .externalId("GDSSMH121004232315303094")
            .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
            .locationTrackId("POACHR")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .addPoc(
                TrackRouteUnvalidatedPublishParams.Poc.builder()
                    .office("A34")
                    .phone("8675309")
                    .pocName("Fred Smith")
                    .pocOrg("HQAF")
                    .pocSequenceId(1)
                    .pocTypeName("Originator")
                    .rank("Capt")
                    .remark("POC remark.")
                    .username("fgsmith")
                    .build()
            )
            .priFreq(357.5)
            .receiverTankerChCode("31/094")
            .regionCode("5")
            .regionName("North America")
            .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
            .addRoutePoint(
                TrackRouteUnvalidatedPublishParams.RoutePoint.builder()
                    .altCountryCode("IZ")
                    .countryCode("NL")
                    .dafifPt(true)
                    .magDec(7.35)
                    .navaid("HTO")
                    .navaidLength(100.2)
                    .navaidType("VORTAC")
                    .ptLat(45.23)
                    .ptLon(179.1)
                    .ptSequenceId(1)
                    .ptTypeCode("EP")
                    .ptTypeName("ENTRY POINT")
                    .waypointName("KCHS")
                    .build()
            )
            .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
            .schedulerOrgUnit("612 AOC")
            .secFreq(319.7)
            .shortName("CH61")
            .sic("N")
            .sourceDl("AXE")
            .trackId("CH61A")
            .trackName("CH61 POST")
            .typeCode("V")
            .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .build()
    }

    @Test
    fun body() {
        val params =
            TrackRouteUnvalidatedPublishParams.builder()
                .classificationMarking("U")
                .dataMode(TrackRouteUnvalidatedPublishParams.DataMode.TEST)
                .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .source("Bluestaq")
                .type("AIR REFUELING")
                .id("026dd511-8ba5-47d3-9909-836149f87686")
                .addAltitudeBlock(
                    TrackRouteUnvalidatedPublishParams.AltitudeBlock.builder()
                        .altitudeSequenceId("A1")
                        .lowerAltitude(27000.1)
                        .upperAltitude(27200.5)
                        .build()
                )
                .apnSetting("1-3-1")
                .apxBeaconCode("5/1")
                .artccMessage("OAKLAND CTR/GUAM CERAP")
                .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .creatingOrg("HQPAC")
                .direction("NE")
                .effectiveDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .externalId("GDSSMH121004232315303094")
                .lastUsedDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .locationTrackId("POACHR")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPoc(
                    TrackRouteUnvalidatedPublishParams.Poc.builder()
                        .office("A34")
                        .phone("8675309")
                        .pocName("Fred Smith")
                        .pocOrg("HQAF")
                        .pocSequenceId(1)
                        .pocTypeName("Originator")
                        .rank("Capt")
                        .remark("POC remark.")
                        .username("fgsmith")
                        .build()
                )
                .priFreq(357.5)
                .receiverTankerChCode("31/094")
                .regionCode("5")
                .regionName("North America")
                .reviewDate(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
                .addRoutePoint(
                    TrackRouteUnvalidatedPublishParams.RoutePoint.builder()
                        .altCountryCode("IZ")
                        .countryCode("NL")
                        .dafifPt(true)
                        .magDec(7.35)
                        .navaid("HTO")
                        .navaidLength(100.2)
                        .navaidType("VORTAC")
                        .ptLat(45.23)
                        .ptLon(179.1)
                        .ptSequenceId(1)
                        .ptTypeCode("EP")
                        .ptTypeName("ENTRY POINT")
                        .waypointName("KCHS")
                        .build()
                )
                .schedulerOrgName("97 OSS/OSOS DSN 866-5555")
                .schedulerOrgUnit("612 AOC")
                .secFreq(319.7)
                .shortName("CH61")
                .sic("N")
                .sourceDl("AXE")
                .trackId("CH61A")
                .trackName("CH61 POST")
                .typeCode("V")
                .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(TrackRouteUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.lastUpdateDate())
            .isEqualTo(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("AIR REFUELING")
        assertThat(body.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
        assertThat(body.altitudeBlocks().getOrNull())
            .containsExactly(
                TrackRouteUnvalidatedPublishParams.AltitudeBlock.builder()
                    .altitudeSequenceId("A1")
                    .lowerAltitude(27000.1)
                    .upperAltitude(27200.5)
                    .build()
            )
        assertThat(body.apnSetting()).contains("1-3-1")
        assertThat(body.apxBeaconCode()).contains("5/1")
        assertThat(body.artccMessage()).contains("OAKLAND CTR/GUAM CERAP")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.creatingOrg()).contains("HQPAC")
        assertThat(body.direction()).contains("NE")
        assertThat(body.effectiveDate()).contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(body.externalId()).contains("GDSSMH121004232315303094")
        assertThat(body.lastUsedDate()).contains(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(body.locationTrackId()).contains("POACHR")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.poc().getOrNull())
            .containsExactly(
                TrackRouteUnvalidatedPublishParams.Poc.builder()
                    .office("A34")
                    .phone("8675309")
                    .pocName("Fred Smith")
                    .pocOrg("HQAF")
                    .pocSequenceId(1)
                    .pocTypeName("Originator")
                    .rank("Capt")
                    .remark("POC remark.")
                    .username("fgsmith")
                    .build()
            )
        assertThat(body.priFreq()).contains(357.5)
        assertThat(body.receiverTankerChCode()).contains("31/094")
        assertThat(body.regionCode()).contains("5")
        assertThat(body.regionName()).contains("North America")
        assertThat(body.reviewDate()).contains(OffsetDateTime.parse("2024-09-16T16:00:00.123Z"))
        assertThat(body.routePoints().getOrNull())
            .containsExactly(
                TrackRouteUnvalidatedPublishParams.RoutePoint.builder()
                    .altCountryCode("IZ")
                    .countryCode("NL")
                    .dafifPt(true)
                    .magDec(7.35)
                    .navaid("HTO")
                    .navaidLength(100.2)
                    .navaidType("VORTAC")
                    .ptLat(45.23)
                    .ptLon(179.1)
                    .ptSequenceId(1)
                    .ptTypeCode("EP")
                    .ptTypeName("ENTRY POINT")
                    .waypointName("KCHS")
                    .build()
            )
        assertThat(body.schedulerOrgName()).contains("97 OSS/OSOS DSN 866-5555")
        assertThat(body.schedulerOrgUnit()).contains("612 AOC")
        assertThat(body.secFreq()).contains(319.7)
        assertThat(body.shortName()).contains("CH61")
        assertThat(body.sic()).contains("N")
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.trackId()).contains("CH61A")
        assertThat(body.trackName()).contains("CH61 POST")
        assertThat(body.typeCode()).contains("V")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            TrackRouteUnvalidatedPublishParams.builder()
                .classificationMarking("U")
                .dataMode(TrackRouteUnvalidatedPublishParams.DataMode.TEST)
                .lastUpdateDate(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
                .source("Bluestaq")
                .type("AIR REFUELING")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(TrackRouteUnvalidatedPublishParams.DataMode.TEST)
        assertThat(body.lastUpdateDate())
            .isEqualTo(OffsetDateTime.parse("2024-09-17T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("AIR REFUELING")
    }
}
