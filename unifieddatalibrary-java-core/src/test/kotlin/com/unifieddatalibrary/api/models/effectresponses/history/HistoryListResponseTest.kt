// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.effectresponses.history

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.effectresponses.EffectResponseActionsListFull
import com.unifieddatalibrary.api.models.effectresponses.EffectResponseMetricsFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HistoryListResponseTest {

    @Test
    fun create() {
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .source("Bluestaq")
                .type("COA")
                .id("EFFECTRESPONSE-ID")
                .addActionsList(
                    EffectResponseActionsListFull.builder()
                        .actionActorSrcId("ACTIONACTORSRC-ID")
                        .actionActorSrcType("AIRCRAFT")
                        .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .actionId("ACTION-ID")
                        .addActionMetric(
                            EffectResponseMetricsFull.builder()
                                .domainValue(10.1)
                                .metricType("GoalAchievement")
                                .provenance("Example metric")
                                .relativeValue(10.1)
                                .build()
                        )
                        .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .actorInterceptAlt(1.1)
                        .actorInterceptLat(45.1)
                        .actorInterceptLon(180.1)
                        .effector("SENSOR1")
                        .summary("Example summary")
                        .targetSrcId("TARGETSRC-ID")
                        .targetSrcType("POI")
                        .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .weaponInterceptAlt(1.1)
                        .weaponInterceptLat(45.1)
                        .weaponInterceptLon(180.1)
                        .build()
                )
                .actorSrcId("RC-ID")
                .actorSrcType("AIRCRAFT")
                .addCoaMetric(
                    EffectResponseMetricsFull.builder()
                        .domainValue(10.1)
                        .metricType("GoalAchievement")
                        .provenance("Example metric")
                        .relativeValue(10.1)
                        .build()
                )
                .collateralDamageEst(0.5)
                .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                .addExternalAction("ACTION1")
                .addExternalAction("ACTION2")
                .externalRequestId("EXTERNALREQUEST-ID")
                .idEffectRequest("EFFECTREQUEST-ID")
                .munitionId("MUNITION-ID")
                .munitionType("Dummy")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .probabilityOfKill(0.7)
                .redTargetSrcId("REDTARGETSRC-ID")
                .redTargetSrcType("POI")
                .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                .shotsRequired(10)
                .build()

        assertThat(historyListResponse.classificationMarking()).isEqualTo("U")
        assertThat(historyListResponse.dataMode()).isEqualTo(HistoryListResponse.DataMode.TEST)
        assertThat(historyListResponse.source()).isEqualTo("Bluestaq")
        assertThat(historyListResponse.type()).isEqualTo("COA")
        assertThat(historyListResponse.id()).contains("EFFECTRESPONSE-ID")
        assertThat(historyListResponse.actionsList().getOrNull())
            .containsExactly(
                EffectResponseActionsListFull.builder()
                    .actionActorSrcId("ACTIONACTORSRC-ID")
                    .actionActorSrcType("AIRCRAFT")
                    .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .actionId("ACTION-ID")
                    .addActionMetric(
                        EffectResponseMetricsFull.builder()
                            .domainValue(10.1)
                            .metricType("GoalAchievement")
                            .provenance("Example metric")
                            .relativeValue(10.1)
                            .build()
                    )
                    .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .actorInterceptAlt(1.1)
                    .actorInterceptLat(45.1)
                    .actorInterceptLon(180.1)
                    .effector("SENSOR1")
                    .summary("Example summary")
                    .targetSrcId("TARGETSRC-ID")
                    .targetSrcType("POI")
                    .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .weaponInterceptAlt(1.1)
                    .weaponInterceptLat(45.1)
                    .weaponInterceptLon(180.1)
                    .build()
            )
        assertThat(historyListResponse.actorSrcId()).contains("RC-ID")
        assertThat(historyListResponse.actorSrcType()).contains("AIRCRAFT")
        assertThat(historyListResponse.coaMetrics().getOrNull())
            .containsExactly(
                EffectResponseMetricsFull.builder()
                    .domainValue(10.1)
                    .metricType("GoalAchievement")
                    .provenance("Example metric")
                    .relativeValue(10.1)
                    .build()
            )
        assertThat(historyListResponse.collateralDamageEst()).contains(0.5)
        assertThat(historyListResponse.createdAt())
            .contains(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
        assertThat(historyListResponse.createdBy()).contains("some.user")
        assertThat(historyListResponse.decisionDeadline())
            .contains(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
        assertThat(historyListResponse.externalActions().getOrNull())
            .containsExactly("ACTION1", "ACTION2")
        assertThat(historyListResponse.externalRequestId()).contains("EXTERNALREQUEST-ID")
        assertThat(historyListResponse.idEffectRequest()).contains("EFFECTREQUEST-ID")
        assertThat(historyListResponse.munitionId()).contains("MUNITION-ID")
        assertThat(historyListResponse.munitionType()).contains("Dummy")
        assertThat(historyListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(historyListResponse.origNetwork()).contains("OPS1")
        assertThat(historyListResponse.probabilityOfKill()).contains(0.7)
        assertThat(historyListResponse.redTargetSrcId()).contains("REDTARGETSRC-ID")
        assertThat(historyListResponse.redTargetSrcType()).contains("POI")
        assertThat(historyListResponse.redTimeToOverhead())
            .contains(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
        assertThat(historyListResponse.shotsRequired()).contains(10)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val historyListResponse =
            HistoryListResponse.builder()
                .classificationMarking("U")
                .dataMode(HistoryListResponse.DataMode.TEST)
                .source("Bluestaq")
                .type("COA")
                .id("EFFECTRESPONSE-ID")
                .addActionsList(
                    EffectResponseActionsListFull.builder()
                        .actionActorSrcId("ACTIONACTORSRC-ID")
                        .actionActorSrcType("AIRCRAFT")
                        .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .actionId("ACTION-ID")
                        .addActionMetric(
                            EffectResponseMetricsFull.builder()
                                .domainValue(10.1)
                                .metricType("GoalAchievement")
                                .provenance("Example metric")
                                .relativeValue(10.1)
                                .build()
                        )
                        .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .actorInterceptAlt(1.1)
                        .actorInterceptLat(45.1)
                        .actorInterceptLon(180.1)
                        .effector("SENSOR1")
                        .summary("Example summary")
                        .targetSrcId("TARGETSRC-ID")
                        .targetSrcType("POI")
                        .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .weaponInterceptAlt(1.1)
                        .weaponInterceptLat(45.1)
                        .weaponInterceptLon(180.1)
                        .build()
                )
                .actorSrcId("RC-ID")
                .actorSrcType("AIRCRAFT")
                .addCoaMetric(
                    EffectResponseMetricsFull.builder()
                        .domainValue(10.1)
                        .metricType("GoalAchievement")
                        .provenance("Example metric")
                        .relativeValue(10.1)
                        .build()
                )
                .collateralDamageEst(0.5)
                .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                .addExternalAction("ACTION1")
                .addExternalAction("ACTION2")
                .externalRequestId("EXTERNALREQUEST-ID")
                .idEffectRequest("EFFECTREQUEST-ID")
                .munitionId("MUNITION-ID")
                .munitionType("Dummy")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .probabilityOfKill(0.7)
                .redTargetSrcId("REDTARGETSRC-ID")
                .redTargetSrcType("POI")
                .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                .shotsRequired(10)
                .build()

        val roundtrippedHistoryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(historyListResponse),
                jacksonTypeRef<HistoryListResponse>(),
            )

        assertThat(roundtrippedHistoryListResponse).isEqualTo(historyListResponse)
    }
}
