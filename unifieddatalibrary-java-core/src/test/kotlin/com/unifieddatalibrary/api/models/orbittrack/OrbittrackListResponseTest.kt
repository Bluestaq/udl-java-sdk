// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.orbittrack

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OrbittrackListResponseTest {

    @Test
    fun create() {
        val orbittrackListResponse =
            OrbittrackListResponse.builder()
                .classificationMarking("U")
                .dataMode(OrbittrackListResponse.DataMode.TEST)
                .lat(19.88550102)
                .lon(46.74596844)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("ORBIT_TRACK_ID")
                .alt(585.71)
                .amplification("A note regarding this spacecraft")
                .angElev(15.2)
                .aouData(listOf(34.3, 26.5, 1.2))
                .aouType("ELLIPSE")
                .callSign("Charlie")
                .charlieLine("323751332255940400010000003635829600010200072500098205001150")
                .chXRef("FHKX")
                .cntnmnt(90.0)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .createdBy("some.user")
                .decay(0.5868)
                .dummy(false)
                .feint(false)
                .hq(false)
                .idElset("c715a619-8695-44d2-9e7d-effd257b4843")
                .identAmp("JOKER")
                .idOnOrbit("32375")
                .iff("ID Mode")
                .installation(false)
                .objectType(OrbittrackListResponse.ObjectType.PAYLOAD)
                .objIdent(OrbittrackListResponse.ObjIdent.FRIEND)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("L2045")
                .rdfRf(1.5273)
                .reduced(false)
                .reinforced(false)
                .rptNum("123")
                .satNo(37375)
                .satStatus("INACTIVE")
                .spd(15.03443)
                .taskForce(false)
                .addTrackSensor(
                    OrbittrackListResponse.TrackSensor.builder()
                        .az(90.0)
                        .range(4023.95)
                        .minRangeLimit(20.23)
                        .missionNumber("Example Mission")
                        .sensorFovType(OrbittrackListResponse.TrackSensor.SensorFovType.UNKNOWN)
                        .sensorName("SENSOR_NAME")
                        .sensorNumber(1234)
                        .build()
                )
                .trkId("3668f135-fcba-4630-a43d-e7782e11d988")
                .vehType("SPACE")
                .xref("XE")
                .build()

        assertThat(orbittrackListResponse.classificationMarking()).isEqualTo("U")
        assertThat(orbittrackListResponse.dataMode())
            .isEqualTo(OrbittrackListResponse.DataMode.TEST)
        assertThat(orbittrackListResponse.lat()).isEqualTo(19.88550102)
        assertThat(orbittrackListResponse.lon()).isEqualTo(46.74596844)
        assertThat(orbittrackListResponse.source()).isEqualTo("Bluestaq")
        assertThat(orbittrackListResponse.ts())
            .isEqualTo(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
        assertThat(orbittrackListResponse.id()).contains("ORBIT_TRACK_ID")
        assertThat(orbittrackListResponse.alt()).contains(585.71)
        assertThat(orbittrackListResponse.amplification())
            .contains("A note regarding this spacecraft")
        assertThat(orbittrackListResponse.angElev()).contains(15.2)
        assertThat(orbittrackListResponse.aouData().getOrNull()).containsExactly(34.3, 26.5, 1.2)
        assertThat(orbittrackListResponse.aouType()).contains("ELLIPSE")
        assertThat(orbittrackListResponse.callSign()).contains("Charlie")
        assertThat(orbittrackListResponse.charlieLine())
            .contains("323751332255940400010000003635829600010200072500098205001150")
        assertThat(orbittrackListResponse.chXRef()).contains("FHKX")
        assertThat(orbittrackListResponse.cntnmnt()).contains(90.0)
        assertThat(orbittrackListResponse.countryCode()).contains("US")
        assertThat(orbittrackListResponse.createdAt())
            .contains(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
        assertThat(orbittrackListResponse.createdBy()).contains("some.user")
        assertThat(orbittrackListResponse.decay()).contains(0.5868)
        assertThat(orbittrackListResponse.dummy()).contains(false)
        assertThat(orbittrackListResponse.feint()).contains(false)
        assertThat(orbittrackListResponse.hq()).contains(false)
        assertThat(orbittrackListResponse.idElset())
            .contains("c715a619-8695-44d2-9e7d-effd257b4843")
        assertThat(orbittrackListResponse.identAmp()).contains("JOKER")
        assertThat(orbittrackListResponse.idOnOrbit()).contains("32375")
        assertThat(orbittrackListResponse.iff()).contains("ID Mode")
        assertThat(orbittrackListResponse.installation()).contains(false)
        assertThat(orbittrackListResponse.objectType())
            .contains(OrbittrackListResponse.ObjectType.PAYLOAD)
        assertThat(orbittrackListResponse.objIdent())
            .contains(OrbittrackListResponse.ObjIdent.FRIEND)
        assertThat(orbittrackListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(orbittrackListResponse.origNetwork()).contains("ORIG")
        assertThat(orbittrackListResponse.origObjectId()).contains("L2045")
        assertThat(orbittrackListResponse.rdfRf()).contains(1.5273)
        assertThat(orbittrackListResponse.reduced()).contains(false)
        assertThat(orbittrackListResponse.reinforced()).contains(false)
        assertThat(orbittrackListResponse.rptNum()).contains("123")
        assertThat(orbittrackListResponse.satNo()).contains(37375)
        assertThat(orbittrackListResponse.satStatus()).contains("INACTIVE")
        assertThat(orbittrackListResponse.spd()).contains(15.03443)
        assertThat(orbittrackListResponse.taskForce()).contains(false)
        assertThat(orbittrackListResponse.trackSensors().getOrNull())
            .containsExactly(
                OrbittrackListResponse.TrackSensor.builder()
                    .az(90.0)
                    .range(4023.95)
                    .minRangeLimit(20.23)
                    .missionNumber("Example Mission")
                    .sensorFovType(OrbittrackListResponse.TrackSensor.SensorFovType.UNKNOWN)
                    .sensorName("SENSOR_NAME")
                    .sensorNumber(1234)
                    .build()
            )
        assertThat(orbittrackListResponse.trkId()).contains("3668f135-fcba-4630-a43d-e7782e11d988")
        assertThat(orbittrackListResponse.vehType()).contains("SPACE")
        assertThat(orbittrackListResponse.xref()).contains("XE")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val orbittrackListResponse =
            OrbittrackListResponse.builder()
                .classificationMarking("U")
                .dataMode(OrbittrackListResponse.DataMode.TEST)
                .lat(19.88550102)
                .lon(46.74596844)
                .source("Bluestaq")
                .ts(OffsetDateTime.parse("2021-02-25T12:00:00.123456Z"))
                .id("ORBIT_TRACK_ID")
                .alt(585.71)
                .amplification("A note regarding this spacecraft")
                .angElev(15.2)
                .aouData(listOf(34.3, 26.5, 1.2))
                .aouType("ELLIPSE")
                .callSign("Charlie")
                .charlieLine("323751332255940400010000003635829600010200072500098205001150")
                .chXRef("FHKX")
                .cntnmnt(90.0)
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2021-02-25T12:00:00.123Z"))
                .createdBy("some.user")
                .decay(0.5868)
                .dummy(false)
                .feint(false)
                .hq(false)
                .idElset("c715a619-8695-44d2-9e7d-effd257b4843")
                .identAmp("JOKER")
                .idOnOrbit("32375")
                .iff("ID Mode")
                .installation(false)
                .objectType(OrbittrackListResponse.ObjectType.PAYLOAD)
                .objIdent(OrbittrackListResponse.ObjIdent.FRIEND)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("L2045")
                .rdfRf(1.5273)
                .reduced(false)
                .reinforced(false)
                .rptNum("123")
                .satNo(37375)
                .satStatus("INACTIVE")
                .spd(15.03443)
                .taskForce(false)
                .addTrackSensor(
                    OrbittrackListResponse.TrackSensor.builder()
                        .az(90.0)
                        .range(4023.95)
                        .minRangeLimit(20.23)
                        .missionNumber("Example Mission")
                        .sensorFovType(OrbittrackListResponse.TrackSensor.SensorFovType.UNKNOWN)
                        .sensorName("SENSOR_NAME")
                        .sensorNumber(1234)
                        .build()
                )
                .trkId("3668f135-fcba-4630-a43d-e7782e11d988")
                .vehType("SPACE")
                .xref("XE")
                .build()

        val roundtrippedOrbittrackListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(orbittrackListResponse),
                jacksonTypeRef<OrbittrackListResponse>(),
            )

        assertThat(roundtrippedOrbittrackListResponse).isEqualTo(orbittrackListResponse)
    }
}
