// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.scientific

import com.unifieddatalibrary.api.models.entities.EntityIngest
import com.unifieddatalibrary.api.models.location.LocationIngest
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ScientificCreateParamsTest {

    @Test
    fun create() {
        ScientificCreateParams.builder()
            .classificationMarking("U")
            .dataMode(ScientificCreateParams.DataMode.TEST)
            .name("SEM/MAG")
            .source("Bluestaq")
            .spacecraftId("REF-SPACECRAFT-ID")
            .id("SCIENTIFIC-ID")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .entity(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
            .frequencyBand("Gamma")
            .hostedForCompanyOrgId("REF-HOSTEDFORCOMPANYORG-ID")
            .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
            .manufacturerOrgId("REF-MANUFACTURERORG-ID")
            .notes("NOTES")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .payloadCategory("Sensor")
            .build()
    }

    @Test
    fun body() {
        val params =
            ScientificCreateParams.builder()
                .classificationMarking("U")
                .dataMode(ScientificCreateParams.DataMode.TEST)
                .name("SEM/MAG")
                .source("Bluestaq")
                .spacecraftId("REF-SPACECRAFT-ID")
                .id("SCIENTIFIC-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .entity(
                    EntityIngest.builder()
                        .classificationMarking("U")
                        .dataMode(EntityIngest.DataMode.TEST)
                        .name("Example name")
                        .source("Bluestaq")
                        .type(EntityIngest.Type.ONORBIT)
                        .countryCode("US")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .idEntity("ENTITY-ID")
                        .idLocation("LOCATION-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOperatingUnit("OPERATINGUNIT-ID")
                        .location(
                            LocationIngest.builder()
                                .classificationMarking("U")
                                .dataMode(LocationIngest.DataMode.TEST)
                                .name("Example location")
                                .source("Bluestaq")
                                .altitude(10.23)
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .idLocation("LOCATION-ID")
                                .lat(45.23)
                                .lon(179.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .onOrbit(
                            EntityIngest.OnOrbit.builder()
                                .classificationMarking("U")
                                .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                                .satNo(1)
                                .source("Bluestaq")
                                .altName("Alternate Name")
                                .category(EntityIngest.OnOrbit.Category.LUNAR)
                                .commonName("Example common name")
                                .constellation("Big Dipper")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .idOnOrbit("ONORBIT-ID")
                                .intlDes("2021123ABC")
                                .launchDate(LocalDate.parse("2018-01-01"))
                                .launchSiteId("LAUNCHSITE-ID")
                                .lifetimeYears(10)
                                .missionNumber("Expedition 1")
                                .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .build()
                        )
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                        .taskable(false)
                        .addUrl("URL1")
                        .addUrl("URL2")
                        .build()
                )
                .frequencyBand("Gamma")
                .hostedForCompanyOrgId("REF-HOSTEDFORCOMPANYORG-ID")
                .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .manufacturerOrgId("REF-MANUFACTURERORG-ID")
                .notes("NOTES")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .payloadCategory("Sensor")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ScientificCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("SEM/MAG")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.spacecraftId()).isEqualTo("REF-SPACECRAFT-ID")
        assertThat(body.id()).contains("SCIENTIFIC-ID")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.entity())
            .contains(
                EntityIngest.builder()
                    .classificationMarking("U")
                    .dataMode(EntityIngest.DataMode.TEST)
                    .name("Example name")
                    .source("Bluestaq")
                    .type(EntityIngest.Type.ONORBIT)
                    .countryCode("US")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .idEntity("ENTITY-ID")
                    .idLocation("LOCATION-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOperatingUnit("OPERATINGUNIT-ID")
                    .location(
                        LocationIngest.builder()
                            .classificationMarking("U")
                            .dataMode(LocationIngest.DataMode.TEST)
                            .name("Example location")
                            .source("Bluestaq")
                            .altitude(10.23)
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .idLocation("LOCATION-ID")
                            .lat(45.23)
                            .lon(179.1)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .onOrbit(
                        EntityIngest.OnOrbit.builder()
                            .classificationMarking("U")
                            .dataMode(EntityIngest.OnOrbit.DataMode.TEST)
                            .satNo(1)
                            .source("Bluestaq")
                            .altName("Alternate Name")
                            .category(EntityIngest.OnOrbit.Category.LUNAR)
                            .commonName("Example common name")
                            .constellation("Big Dipper")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .decayDate(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .idOnOrbit("ONORBIT-ID")
                            .intlDes("2021123ABC")
                            .launchDate(LocalDate.parse("2018-01-01"))
                            .launchSiteId("LAUNCHSITE-ID")
                            .lifetimeYears(10)
                            .missionNumber("Expedition 1")
                            .objectType(EntityIngest.OnOrbit.ObjectType.PAYLOAD)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .build()
                    )
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .ownerType(EntityIngest.OwnerType.COMMERCIAL)
                    .taskable(false)
                    .addUrl("URL1")
                    .addUrl("URL2")
                    .build()
            )
        assertThat(body.frequencyBand()).contains("Gamma")
        assertThat(body.hostedForCompanyOrgId()).contains("REF-HOSTEDFORCOMPANYORG-ID")
        assertThat(body.idEntity()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(body.manufacturerOrgId()).contains("REF-MANUFACTURERORG-ID")
        assertThat(body.notes()).contains("NOTES")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.payloadCategory()).contains("Sensor")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            ScientificCreateParams.builder()
                .classificationMarking("U")
                .dataMode(ScientificCreateParams.DataMode.TEST)
                .name("SEM/MAG")
                .source("Bluestaq")
                .spacecraftId("REF-SPACECRAFT-ID")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ScientificCreateParams.DataMode.TEST)
        assertThat(body.name()).isEqualTo("SEM/MAG")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.spacecraftId()).isEqualTo("REF-SPACECRAFT-ID")
    }
}
