// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradataradarpayload

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.seradataradarpayload.SeradataRadarPayloadGetResponse
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeradataRadarPayloadGetResponseTest {

    @Test
    fun create() {
      val seradataRadarPayloadGetResponse = SeradataRadarPayloadGetResponse.builder()
          .classificationMarking("U")
          .dataMode(SeradataRadarPayloadGetResponse.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("12345")
          .id("SERADATARADARPAYLOAD-ID")
          .bandwidth(1.23)
          .bestResolution(1.23)
          .category("SAR")
          .constellationInterferometricCapability("constellationInterferometricCapability")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .dutyCycle("dutyCycle")
          .fieldOfRegard(1.23)
          .fieldOfView(1.23)
          .frequency(1.23)
          .frequencyBand("X")
          .groundStationLocations("51,42N-44,35E")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idSensor("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
          .manufacturerOrgId("manufacturerOrgId")
          .name("ALT")
          .notes("Sample Notes")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .partnerSpacecraft("partnerSpacecraft")
          .pointingMethod("Spacecraft")
          .receivePolarization("Lin Dual")
          .recorderSize("256")
          .swathWidth(1.23)
          .transmitPolarization("Lin Dual")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .waveLength(1.23)
          .build()

      assertThat(seradataRadarPayloadGetResponse.classificationMarking()).isEqualTo("U")
      assertThat(seradataRadarPayloadGetResponse.dataMode()).isEqualTo(SeradataRadarPayloadGetResponse.DataMode.TEST)
      assertThat(seradataRadarPayloadGetResponse.source()).isEqualTo("Bluestaq")
      assertThat(seradataRadarPayloadGetResponse.spacecraftId()).isEqualTo("12345")
      assertThat(seradataRadarPayloadGetResponse.id()).contains("SERADATARADARPAYLOAD-ID")
      assertThat(seradataRadarPayloadGetResponse.bandwidth()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.bestResolution()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.category()).contains("SAR")
      assertThat(seradataRadarPayloadGetResponse.constellationInterferometricCapability()).contains("constellationInterferometricCapability")
      assertThat(seradataRadarPayloadGetResponse.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataRadarPayloadGetResponse.createdBy()).contains("some.user")
      assertThat(seradataRadarPayloadGetResponse.dutyCycle()).contains("dutyCycle")
      assertThat(seradataRadarPayloadGetResponse.fieldOfRegard()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.fieldOfView()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.frequency()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.frequencyBand()).contains("X")
      assertThat(seradataRadarPayloadGetResponse.groundStationLocations()).contains("51,42N-44,35E")
      assertThat(seradataRadarPayloadGetResponse.groundStations()).contains("groundStations")
      assertThat(seradataRadarPayloadGetResponse.hostedForCompanyOrgId()).contains("hostedForCompanyOrgId")
      assertThat(seradataRadarPayloadGetResponse.idSensor()).contains("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
      assertThat(seradataRadarPayloadGetResponse.manufacturerOrgId()).contains("manufacturerOrgId")
      assertThat(seradataRadarPayloadGetResponse.name()).contains("ALT")
      assertThat(seradataRadarPayloadGetResponse.notes()).contains("Sample Notes")
      assertThat(seradataRadarPayloadGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(seradataRadarPayloadGetResponse.origNetwork()).contains("ORIG")
      assertThat(seradataRadarPayloadGetResponse.partnerSpacecraft()).contains("partnerSpacecraft")
      assertThat(seradataRadarPayloadGetResponse.pointingMethod()).contains("Spacecraft")
      assertThat(seradataRadarPayloadGetResponse.receivePolarization()).contains("Lin Dual")
      assertThat(seradataRadarPayloadGetResponse.recorderSize()).contains("256")
      assertThat(seradataRadarPayloadGetResponse.swathWidth()).contains(1.23)
      assertThat(seradataRadarPayloadGetResponse.transmitPolarization()).contains("Lin Dual")
      assertThat(seradataRadarPayloadGetResponse.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(seradataRadarPayloadGetResponse.updatedBy()).contains("some.user")
      assertThat(seradataRadarPayloadGetResponse.waveLength()).contains(1.23)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val seradataRadarPayloadGetResponse = SeradataRadarPayloadGetResponse.builder()
          .classificationMarking("U")
          .dataMode(SeradataRadarPayloadGetResponse.DataMode.TEST)
          .source("Bluestaq")
          .spacecraftId("12345")
          .id("SERADATARADARPAYLOAD-ID")
          .bandwidth(1.23)
          .bestResolution(1.23)
          .category("SAR")
          .constellationInterferometricCapability("constellationInterferometricCapability")
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .dutyCycle("dutyCycle")
          .fieldOfRegard(1.23)
          .fieldOfView(1.23)
          .frequency(1.23)
          .frequencyBand("X")
          .groundStationLocations("51,42N-44,35E")
          .groundStations("groundStations")
          .hostedForCompanyOrgId("hostedForCompanyOrgId")
          .idSensor("3c1ee9a0-90ad-1d75-c47b-2414e0a77e53")
          .manufacturerOrgId("manufacturerOrgId")
          .name("ALT")
          .notes("Sample Notes")
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("ORIG")
          .partnerSpacecraft("partnerSpacecraft")
          .pointingMethod("Spacecraft")
          .receivePolarization("Lin Dual")
          .recorderSize("256")
          .swathWidth(1.23)
          .transmitPolarization("Lin Dual")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .waveLength(1.23)
          .build()

      val roundtrippedSeradataRadarPayloadGetResponse = jsonMapper.readValue(jsonMapper.writeValueAsString(seradataRadarPayloadGetResponse), jacksonTypeRef<SeradataRadarPayloadGetResponse>())

      assertThat(roundtrippedSeradataRadarPayloadGetResponse).isEqualTo(seradataRadarPayloadGetResponse)
    }
}
