// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.equipment

import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EquipmentUpdateParamsTest {

    @Test
    fun create() {
        EquipmentUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .countryCode("IQ")
            .dataMode(EquipmentUpdateParams.DataMode.TEST)
            .lat(39.019242)
            .lon(-104.251659)
            .source("Bluestaq")
            .bodyId("0167f577-e06c-358e-85aa-0a07a730bdd0")
            .airDefArea("AL006")
            .allegiance("OTHR")
            .altAllegiance("HL")
            .altCountryCode("IZ")
            .altEqpId("ORIG-EQP-ID")
            .classRating("1")
            .condition("RDY")
            .conditionAvail("A")
            .coord("340000000N0430000000E")
            .coordDatum("WGS")
            .coordDerivAcc(12.345)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .elevMsl(123.45)
            .elevMslConfLvl(50)
            .elevMslDerivAcc(12.34)
            .eqpCode("X12345")
            .eqpIdNum("001")
            .eval(7)
            .fpa("NOB")
            .function("OCC")
            .functPrimary("JG")
            .geoidalMslSep(12.34)
            .ident("FRIEND")
            .idOperatingUnit("UNIT-ID")
            .idParentEquipment("PARENT-EQUIPMENT-ID")
            .idSite("SITE-ID")
            .locReason("GR")
            .milGrid("4QFJ12345678")
            .milGridSys("UTM")
            .nomen("AMPHIBIOUS WARFARE SHIP")
            .operAreaPrimary("Territorial Sea")
            .operStatus("OPR")
            .origin("THIRD_PARTY_DATASOURCE")
            .polSubdiv("IZ07")
            .qtyOh(7)
            .recStatus("A")
            .referenceDoc("Provider Reference Documentation")
            .resProd("RT")
            .reviewDate(LocalDate.parse("2008-06-10"))
            .seqNum(5)
            .addSrcId("SRC_ID_1")
            .addSrcTyp("AIRCRAFT")
            .symCode("SOGPU----------")
            .utm("19P4390691376966")
            .wac("0427")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            EquipmentUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentUpdateParams.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            EquipmentUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentUpdateParams.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .bodyId("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .airDefArea("AL006")
                .allegiance("OTHR")
                .altAllegiance("HL")
                .altCountryCode("IZ")
                .altEqpId("ORIG-EQP-ID")
                .classRating("1")
                .condition("RDY")
                .conditionAvail("A")
                .coord("340000000N0430000000E")
                .coordDatum("WGS")
                .coordDerivAcc(12.345)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .elevMsl(123.45)
                .elevMslConfLvl(50)
                .elevMslDerivAcc(12.34)
                .eqpCode("X12345")
                .eqpIdNum("001")
                .eval(7)
                .fpa("NOB")
                .function("OCC")
                .functPrimary("JG")
                .geoidalMslSep(12.34)
                .ident("FRIEND")
                .idOperatingUnit("UNIT-ID")
                .idParentEquipment("PARENT-EQUIPMENT-ID")
                .idSite("SITE-ID")
                .locReason("GR")
                .milGrid("4QFJ12345678")
                .milGridSys("UTM")
                .nomen("AMPHIBIOUS WARFARE SHIP")
                .operAreaPrimary("Territorial Sea")
                .operStatus("OPR")
                .origin("THIRD_PARTY_DATASOURCE")
                .polSubdiv("IZ07")
                .qtyOh(7)
                .recStatus("A")
                .referenceDoc("Provider Reference Documentation")
                .resProd("RT")
                .reviewDate(LocalDate.parse("2008-06-10"))
                .seqNum(5)
                .addSrcId("SRC_ID_1")
                .addSrcTyp("AIRCRAFT")
                .symCode("SOGPU----------")
                .utm("19P4390691376966")
                .wac("0427")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.countryCode()).isEqualTo("IQ")
        assertThat(body.dataMode()).isEqualTo(EquipmentUpdateParams.DataMode.TEST)
        assertThat(body.lat()).isEqualTo(39.019242)
        assertThat(body.lon()).isEqualTo(-104.251659)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(body.airDefArea()).contains("AL006")
        assertThat(body.allegiance()).contains("OTHR")
        assertThat(body.altAllegiance()).contains("HL")
        assertThat(body.altCountryCode()).contains("IZ")
        assertThat(body.altEqpId()).contains("ORIG-EQP-ID")
        assertThat(body.classRating()).contains("1")
        assertThat(body.condition()).contains("RDY")
        assertThat(body.conditionAvail()).contains("A")
        assertThat(body.coord()).contains("340000000N0430000000E")
        assertThat(body.coordDatum()).contains("WGS")
        assertThat(body.coordDerivAcc()).contains(12.345)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.elevMsl()).contains(123.45)
        assertThat(body.elevMslConfLvl()).contains(50)
        assertThat(body.elevMslDerivAcc()).contains(12.34)
        assertThat(body.eqpCode()).contains("X12345")
        assertThat(body.eqpIdNum()).contains("001")
        assertThat(body.eval()).contains(7)
        assertThat(body.fpa()).contains("NOB")
        assertThat(body.function()).contains("OCC")
        assertThat(body.functPrimary()).contains("JG")
        assertThat(body.geoidalMslSep()).contains(12.34)
        assertThat(body.ident()).contains("FRIEND")
        assertThat(body.idOperatingUnit()).contains("UNIT-ID")
        assertThat(body.idParentEquipment()).contains("PARENT-EQUIPMENT-ID")
        assertThat(body.idSite()).contains("SITE-ID")
        assertThat(body.locReason()).contains("GR")
        assertThat(body.milGrid()).contains("4QFJ12345678")
        assertThat(body.milGridSys()).contains("UTM")
        assertThat(body.nomen()).contains("AMPHIBIOUS WARFARE SHIP")
        assertThat(body.operAreaPrimary()).contains("Territorial Sea")
        assertThat(body.operStatus()).contains("OPR")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.polSubdiv()).contains("IZ07")
        assertThat(body.qtyOh()).contains(7)
        assertThat(body.recStatus()).contains("A")
        assertThat(body.referenceDoc()).contains("Provider Reference Documentation")
        assertThat(body.resProd()).contains("RT")
        assertThat(body.reviewDate()).contains(LocalDate.parse("2008-06-10"))
        assertThat(body.seqNum()).contains(5)
        assertThat(body.srcIds().getOrNull()).containsExactly("SRC_ID_1")
        assertThat(body.srcTyps().getOrNull()).containsExactly("AIRCRAFT")
        assertThat(body.symCode()).contains("SOGPU----------")
        assertThat(body.utm()).contains("19P4390691376966")
        assertThat(body.wac()).contains("0427")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EquipmentUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .countryCode("IQ")
                .dataMode(EquipmentUpdateParams.DataMode.TEST)
                .lat(39.019242)
                .lon(-104.251659)
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.countryCode()).isEqualTo("IQ")
        assertThat(body.dataMode()).isEqualTo(EquipmentUpdateParams.DataMode.TEST)
        assertThat(body.lat()).isEqualTo(39.019242)
        assertThat(body.lon()).isEqualTo(-104.251659)
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
