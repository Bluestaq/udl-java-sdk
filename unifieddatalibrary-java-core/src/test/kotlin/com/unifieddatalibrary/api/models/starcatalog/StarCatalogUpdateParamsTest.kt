// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.starcatalog

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class StarCatalogUpdateParamsTest {

    @Test
    fun create() {
        StarCatalogUpdateParams.builder()
            .pathId("id")
            .astrometryOrigin(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
            .classificationMarking("U")
            .csId(12345L)
            .dataMode(StarCatalogUpdateParams.DataMode.TEST)
            .dec(21.8)
            .ra(14.43)
            .source("Bluestaq")
            .starEpoch(2016.0)
            .bodyId("STAR-CAT-DATASET-ID")
            .bpmag(0.04559)
            .bpmagUnc(0.2227)
            .catVersion("1.23")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .decUnc(40.996)
            .gaiadr3CatId(89012345678901L)
            .gmag(0.0046)
            .gmagUnc(0.00292)
            .gncCatId(12345)
            .hipCatId(12345)
            .hmag(12.126)
            .hmagUnc(5.722)
            .jmag(9.515)
            .jmagUnc(7.559)
            .kmag(13.545)
            .kmagUnc(0.052)
            .multFlag(true)
            .neighborDistance(201.406)
            .neighborFlag(false)
            .neighborId(2456)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .parallax(-6.8)
            .parallaxUnc(82.35)
            .pmdec(-970.1003)
            .pmdecUnc(1.22)
            .pmra(1000.45)
            .pmraUnc(5.6)
            .pmUncFlag(false)
            .posUncFlag(false)
            .raUnc(509.466)
            .rpmag(8.0047)
            .rpmagUnc(1.233)
            .shift(4.548)
            .shiftFlag(false)
            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .varFlag(true)
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            StarCatalogUpdateParams.builder()
                .pathId("id")
                .astrometryOrigin(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogUpdateParams.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            StarCatalogUpdateParams.builder()
                .pathId("id")
                .astrometryOrigin(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogUpdateParams.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .bodyId("STAR-CAT-DATASET-ID")
                .bpmag(0.04559)
                .bpmagUnc(0.2227)
                .catVersion("1.23")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .decUnc(40.996)
                .gaiadr3CatId(89012345678901L)
                .gmag(0.0046)
                .gmagUnc(0.00292)
                .gncCatId(12345)
                .hipCatId(12345)
                .hmag(12.126)
                .hmagUnc(5.722)
                .jmag(9.515)
                .jmagUnc(7.559)
                .kmag(13.545)
                .kmagUnc(0.052)
                .multFlag(true)
                .neighborDistance(201.406)
                .neighborFlag(false)
                .neighborId(2456)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .parallax(-6.8)
                .parallaxUnc(82.35)
                .pmdec(-970.1003)
                .pmdecUnc(1.22)
                .pmra(1000.45)
                .pmraUnc(5.6)
                .pmUncFlag(false)
                .posUncFlag(false)
                .raUnc(509.466)
                .rpmag(8.0047)
                .rpmagUnc(1.233)
                .shift(4.548)
                .shiftFlag(false)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .varFlag(true)
                .build()

        val body = params._body()

        assertThat(body.astrometryOrigin())
            .isEqualTo(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.csId()).isEqualTo(12345L)
        assertThat(body.dataMode()).isEqualTo(StarCatalogUpdateParams.DataMode.TEST)
        assertThat(body.dec()).isEqualTo(21.8)
        assertThat(body.ra()).isEqualTo(14.43)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.starEpoch()).isEqualTo(2016.0)
        assertThat(body.bodyId()).contains("STAR-CAT-DATASET-ID")
        assertThat(body.bpmag()).contains(0.04559)
        assertThat(body.bpmagUnc()).contains(0.2227)
        assertThat(body.catVersion()).contains("1.23")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.decUnc()).contains(40.996)
        assertThat(body.gaiadr3CatId()).contains(89012345678901L)
        assertThat(body.gmag()).contains(0.0046)
        assertThat(body.gmagUnc()).contains(0.00292)
        assertThat(body.gncCatId()).contains(12345)
        assertThat(body.hipCatId()).contains(12345)
        assertThat(body.hmag()).contains(12.126)
        assertThat(body.hmagUnc()).contains(5.722)
        assertThat(body.jmag()).contains(9.515)
        assertThat(body.jmagUnc()).contains(7.559)
        assertThat(body.kmag()).contains(13.545)
        assertThat(body.kmagUnc()).contains(0.052)
        assertThat(body.multFlag()).contains(true)
        assertThat(body.neighborDistance()).contains(201.406)
        assertThat(body.neighborFlag()).contains(false)
        assertThat(body.neighborId()).contains(2456)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.parallax()).contains(-6.8)
        assertThat(body.parallaxUnc()).contains(82.35)
        assertThat(body.pmdec()).contains(-970.1003)
        assertThat(body.pmdecUnc()).contains(1.22)
        assertThat(body.pmra()).contains(1000.45)
        assertThat(body.pmraUnc()).contains(5.6)
        assertThat(body.pmUncFlag()).contains(false)
        assertThat(body.posUncFlag()).contains(false)
        assertThat(body.raUnc()).contains(509.466)
        assertThat(body.rpmag()).contains(8.0047)
        assertThat(body.rpmagUnc()).contains(1.233)
        assertThat(body.shift()).contains(4.548)
        assertThat(body.shiftFlag()).contains(false)
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
        assertThat(body.varFlag()).contains(true)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            StarCatalogUpdateParams.builder()
                .pathId("id")
                .astrometryOrigin(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
                .classificationMarking("U")
                .csId(12345L)
                .dataMode(StarCatalogUpdateParams.DataMode.TEST)
                .dec(21.8)
                .ra(14.43)
                .source("Bluestaq")
                .starEpoch(2016.0)
                .build()

        val body = params._body()

        assertThat(body.astrometryOrigin())
            .isEqualTo(StarCatalogUpdateParams.AstrometryOrigin.GAIADR3)
        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.csId()).isEqualTo(12345L)
        assertThat(body.dataMode()).isEqualTo(StarCatalogUpdateParams.DataMode.TEST)
        assertThat(body.dec()).isEqualTo(21.8)
        assertThat(body.ra()).isEqualTo(14.43)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.starEpoch()).isEqualTo(2016.0)
    }
}
