// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.tdoafdoa.diffofarrival

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DiffofarrivalAbridgedTest {

    @Test
    fun create() {
        val diffofarrivalAbridged =
            DiffofarrivalAbridged.builder()
                .classificationMarking("U")
                .dataMode(DiffofarrivalAbridged.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("DIFFOFARRIVAL-ID")
                .bandwidth(1.1)
                .collectionMode("SURVEY")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaRange(1.1)
                .deltaRangeRate(1.1)
                .deltaRangeRateUnc(1.1)
                .deltaRangeUnc(1.1)
                .descriptor("Example descriptor")
                .fdoa(1.1)
                .fdoaUnc(1.1)
                .frequency(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor1("SENSOR1-ID")
                .idSensor2("SENSOR2-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId1("ORIGSENSOR1-ID")
                .origSensorId2("ORIGSENSOR2-ID")
                .satNo(25544)
                .sen2alt(1.1)
                .sen2lat(1.1)
                .sen2lon(1.1)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(120.1)
                .sensor1Delay(1.1)
                .sensor2Delay(1.1)
                .snr(1.1)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .tdoa(1.1)
                .tdoaUnc(1.1)
                .transactionId("TRANSACTION-ID")
                .uct(false)
                .build()

        assertThat(diffofarrivalAbridged.classificationMarking()).isEqualTo("U")
        assertThat(diffofarrivalAbridged.dataMode()).isEqualTo(DiffofarrivalAbridged.DataMode.TEST)
        assertThat(diffofarrivalAbridged.obTime())
            .isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(diffofarrivalAbridged.source()).isEqualTo("Bluestaq")
        assertThat(diffofarrivalAbridged.id()).contains("DIFFOFARRIVAL-ID")
        assertThat(diffofarrivalAbridged.bandwidth()).contains(1.1)
        assertThat(diffofarrivalAbridged.collectionMode()).contains("SURVEY")
        assertThat(diffofarrivalAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(diffofarrivalAbridged.createdBy()).contains("some.user")
        assertThat(diffofarrivalAbridged.deltaRange()).contains(1.1)
        assertThat(diffofarrivalAbridged.deltaRangeRate()).contains(1.1)
        assertThat(diffofarrivalAbridged.deltaRangeRateUnc()).contains(1.1)
        assertThat(diffofarrivalAbridged.deltaRangeUnc()).contains(1.1)
        assertThat(diffofarrivalAbridged.descriptor()).contains("Example descriptor")
        assertThat(diffofarrivalAbridged.fdoa()).contains(1.1)
        assertThat(diffofarrivalAbridged.fdoaUnc()).contains(1.1)
        assertThat(diffofarrivalAbridged.frequency()).contains(1.1)
        assertThat(diffofarrivalAbridged.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(diffofarrivalAbridged.idSensor1()).contains("SENSOR1-ID")
        assertThat(diffofarrivalAbridged.idSensor2()).contains("SENSOR2-ID")
        assertThat(diffofarrivalAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(diffofarrivalAbridged.origNetwork()).contains("OPS1")
        assertThat(diffofarrivalAbridged.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(diffofarrivalAbridged.origSensorId1()).contains("ORIGSENSOR1-ID")
        assertThat(diffofarrivalAbridged.origSensorId2()).contains("ORIGSENSOR2-ID")
        assertThat(diffofarrivalAbridged.satNo()).contains(25544)
        assertThat(diffofarrivalAbridged.sen2alt()).contains(1.1)
        assertThat(diffofarrivalAbridged.sen2lat()).contains(1.1)
        assertThat(diffofarrivalAbridged.sen2lon()).contains(1.1)
        assertThat(diffofarrivalAbridged.senalt()).contains(1.1)
        assertThat(diffofarrivalAbridged.senlat()).contains(45.1)
        assertThat(diffofarrivalAbridged.senlon()).contains(120.1)
        assertThat(diffofarrivalAbridged.sensor1Delay()).contains(1.1)
        assertThat(diffofarrivalAbridged.sensor2Delay()).contains(1.1)
        assertThat(diffofarrivalAbridged.snr()).contains(1.1)
        assertThat(diffofarrivalAbridged.sourceDl()).contains("AXE")
        assertThat(diffofarrivalAbridged.taskId()).contains("TASK-ID")
        assertThat(diffofarrivalAbridged.tdoa()).contains(1.1)
        assertThat(diffofarrivalAbridged.tdoaUnc()).contains(1.1)
        assertThat(diffofarrivalAbridged.transactionId()).contains("TRANSACTION-ID")
        assertThat(diffofarrivalAbridged.uct()).contains(false)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val diffofarrivalAbridged =
            DiffofarrivalAbridged.builder()
                .classificationMarking("U")
                .dataMode(DiffofarrivalAbridged.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("DIFFOFARRIVAL-ID")
                .bandwidth(1.1)
                .collectionMode("SURVEY")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaRange(1.1)
                .deltaRangeRate(1.1)
                .deltaRangeRateUnc(1.1)
                .deltaRangeUnc(1.1)
                .descriptor("Example descriptor")
                .fdoa(1.1)
                .fdoaUnc(1.1)
                .frequency(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor1("SENSOR1-ID")
                .idSensor2("SENSOR2-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId1("ORIGSENSOR1-ID")
                .origSensorId2("ORIGSENSOR2-ID")
                .satNo(25544)
                .sen2alt(1.1)
                .sen2lat(1.1)
                .sen2lon(1.1)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(120.1)
                .sensor1Delay(1.1)
                .sensor2Delay(1.1)
                .snr(1.1)
                .sourceDl("AXE")
                .taskId("TASK-ID")
                .tdoa(1.1)
                .tdoaUnc(1.1)
                .transactionId("TRANSACTION-ID")
                .uct(false)
                .build()

        val roundtrippedDiffofarrivalAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(diffofarrivalAbridged),
                jacksonTypeRef<DiffofarrivalAbridged>(),
            )

        assertThat(roundtrippedDiffofarrivalAbridged).isEqualTo(diffofarrivalAbridged)
    }
}
