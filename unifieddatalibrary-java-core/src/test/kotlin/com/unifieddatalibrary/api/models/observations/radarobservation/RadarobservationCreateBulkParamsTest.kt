// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.radarobservation

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class RadarobservationCreateBulkParamsTest {

    @Test
    fun create() {
        RadarobservationCreateBulkParams.builder()
            .addBody(
                RadarobservationCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RadarobservationCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .id("RADAROBSERVATION-ID")
                    .azimuth(45.23)
                    .azimuthBias(45.23)
                    .azimuthMeasured(true)
                    .azimuthRate(1.23)
                    .azimuthUnc(45.23)
                    .beam(1.23)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(10.23)
                    .declinationMeasured(true)
                    .descriptor("descriptor")
                    .doppler(10.23)
                    .dopplerUnc(1.23)
                    .elevation(45.23)
                    .elevationBias(1.23)
                    .elevationMeasured(true)
                    .elevationRate(1.23)
                    .elevationUnc(1.23)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .obPosition("FIRST")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .orthogonalRcs(1.23)
                    .orthogonalRcsUnc(10.23)
                    .ra(1.23)
                    .raMeasured(true)
                    .range(100.23)
                    .rangeAccel(10.23)
                    .rangeAccelUnc(1.23)
                    .rangeBias(1.23)
                    .rangeMeasured(true)
                    .rangeRate(1.23)
                    .rangeRateMeasured(true)
                    .rangeRateUnc(0.5)
                    .rangeUnc(1.23)
                    .rawFileUri("rawFileURI")
                    .rcs(100.23)
                    .rcsUnc(1.23)
                    .satNo(1)
                    .senReferenceFrame(
                        RadarobservationCreateBulkParams.Body.SenReferenceFrame.J2000
                    )
                    .senx(45.23)
                    .seny(40.23)
                    .senz(35.23)
                    .snr(0.5)
                    .sourceDl("AXE")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taskId("TASK-ID")
                    .timingBias(1.23)
                    .trackId("TRACK-ID")
                    .trackingState("INIT ACQ")
                    .transactionId("TRANSACTION-ID")
                    .type("RADAR")
                    .uct(true)
                    .x(50.23)
                    .xvel(1.23)
                    .y(50.23)
                    .yvel(5.23)
                    .z(50.23)
                    .zvel(5.23)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            RadarobservationCreateBulkParams.builder()
                .addBody(
                    RadarobservationCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(RadarobservationCreateBulkParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .id("RADAROBSERVATION-ID")
                        .azimuth(45.23)
                        .azimuthBias(45.23)
                        .azimuthMeasured(true)
                        .azimuthRate(1.23)
                        .azimuthUnc(45.23)
                        .beam(1.23)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .declination(10.23)
                        .declinationMeasured(true)
                        .descriptor("descriptor")
                        .doppler(10.23)
                        .dopplerUnc(1.23)
                        .elevation(45.23)
                        .elevationBias(1.23)
                        .elevationMeasured(true)
                        .elevationRate(1.23)
                        .elevationUnc(1.23)
                        .idOnOrbit("ONORBIT-ID")
                        .idSensor("SENSOR-ID")
                        .obPosition("FIRST")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .origSensorId("ORIGSENSOR-ID")
                        .orthogonalRcs(1.23)
                        .orthogonalRcsUnc(10.23)
                        .ra(1.23)
                        .raMeasured(true)
                        .range(100.23)
                        .rangeAccel(10.23)
                        .rangeAccelUnc(1.23)
                        .rangeBias(1.23)
                        .rangeMeasured(true)
                        .rangeRate(1.23)
                        .rangeRateMeasured(true)
                        .rangeRateUnc(0.5)
                        .rangeUnc(1.23)
                        .rawFileUri("rawFileURI")
                        .rcs(100.23)
                        .rcsUnc(1.23)
                        .satNo(1)
                        .senReferenceFrame(
                            RadarobservationCreateBulkParams.Body.SenReferenceFrame.J2000
                        )
                        .senx(45.23)
                        .seny(40.23)
                        .senz(35.23)
                        .snr(0.5)
                        .sourceDl("AXE")
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .taskId("TASK-ID")
                        .timingBias(1.23)
                        .trackId("TRACK-ID")
                        .trackingState("INIT ACQ")
                        .transactionId("TRANSACTION-ID")
                        .type("RADAR")
                        .uct(true)
                        .x(50.23)
                        .xvel(1.23)
                        .y(50.23)
                        .yvel(5.23)
                        .z(50.23)
                        .zvel(5.23)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                RadarobservationCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RadarobservationCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .id("RADAROBSERVATION-ID")
                    .azimuth(45.23)
                    .azimuthBias(45.23)
                    .azimuthMeasured(true)
                    .azimuthRate(1.23)
                    .azimuthUnc(45.23)
                    .beam(1.23)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .declination(10.23)
                    .declinationMeasured(true)
                    .descriptor("descriptor")
                    .doppler(10.23)
                    .dopplerUnc(1.23)
                    .elevation(45.23)
                    .elevationBias(1.23)
                    .elevationMeasured(true)
                    .elevationRate(1.23)
                    .elevationUnc(1.23)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .obPosition("FIRST")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .origSensorId("ORIGSENSOR-ID")
                    .orthogonalRcs(1.23)
                    .orthogonalRcsUnc(10.23)
                    .ra(1.23)
                    .raMeasured(true)
                    .range(100.23)
                    .rangeAccel(10.23)
                    .rangeAccelUnc(1.23)
                    .rangeBias(1.23)
                    .rangeMeasured(true)
                    .rangeRate(1.23)
                    .rangeRateMeasured(true)
                    .rangeRateUnc(0.5)
                    .rangeUnc(1.23)
                    .rawFileUri("rawFileURI")
                    .rcs(100.23)
                    .rcsUnc(1.23)
                    .satNo(1)
                    .senReferenceFrame(
                        RadarobservationCreateBulkParams.Body.SenReferenceFrame.J2000
                    )
                    .senx(45.23)
                    .seny(40.23)
                    .senz(35.23)
                    .snr(0.5)
                    .sourceDl("AXE")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taskId("TASK-ID")
                    .timingBias(1.23)
                    .trackId("TRACK-ID")
                    .trackingState("INIT ACQ")
                    .transactionId("TRANSACTION-ID")
                    .type("RADAR")
                    .uct(true)
                    .x(50.23)
                    .xvel(1.23)
                    .y(50.23)
                    .yvel(5.23)
                    .z(50.23)
                    .zvel(5.23)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            RadarobservationCreateBulkParams.builder()
                .addBody(
                    RadarobservationCreateBulkParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(RadarobservationCreateBulkParams.Body.DataMode.TEST)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                RadarobservationCreateBulkParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(RadarobservationCreateBulkParams.Body.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .build()
            )
    }
}
