// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.eoobservations

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EoObservationCreateParamsTest {

    @Test
    fun create() {
        EoObservationCreateParams.builder()
            .classificationMarking("U")
            .dataMode(EoObservationCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .id("EOOBSERVATION-ID")
            .azimuth(1.1)
            .azimuthBias(1.1)
            .azimuthMeasured(true)
            .azimuthRate(1.1)
            .azimuthUnc(1.1)
            .bgIntensity(1.1)
            .collectMethod("AUTOTRACK")
            .corrQuality(1.1)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .declination(1.1)
            .declinationBias(1.1)
            .declinationMeasured(true)
            .declinationRate(1.1)
            .declinationUnc(1.1)
            .descriptor("PROVIDED_DATA1")
            .elevation(1.1)
            .elevationBias(1.1)
            .elevationMeasured(true)
            .elevationRate(1.1)
            .elevationUnc(1.1)
            .eoobservationDetails(
                EoObservationCreateParams.EoobservationDetails.builder()
                    .acalCrPixX(123.2)
                    .acalCrPixY(123.2)
                    .acalCrValX(123.2)
                    .acalCrValY(123.2)
                    .acalNumStars(123L)
                    .backgroundSignal(4134.1)
                    .backgroundSignalUnc(123.2)
                    .binningHoriz(12L)
                    .binningVert(14L)
                    .ccdObjPosX(123.3)
                    .ccdObjPosY(321.4)
                    .ccdObjWidth(133.2)
                    .ccdTemp(123.4)
                    .centroidColumn(0.5)
                    .centroidRow(0.1)
                    .classificationMarking("U")
                    .colorCoeffs(listOf(1.1, 2.1, 3.1))
                    .columnVariance(0.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .currentNeutralDensityFilterNum(3L)
                    .currentSpectralFilterNum(23L)
                    .dataMode(EoObservationCreateParams.EoobservationDetails.DataMode.TEST)
                    .declinationCov(123.2)
                    .distFromStreakCenter(listOf(-127.153, -126.153, -125.153))
                    .does(123.2)
                    .extinctionCoeffs(listOf(1.1, 2.1, 3.1))
                    .extinctionCoeffsUnc(listOf(1.1, 2.1, 3.1))
                    .gain(234.2)
                    .idEoObservation("EOOBSERVATION-ID")
                    .ifov(0.2)
                    .magInstrumental(123.3)
                    .magInstrumentalUnc(123.3)
                    .addNeutralDensityFilterName("numNeutralDensityFilters1")
                    .addNeutralDensityFilterName("numNeutralDensityFilters2")
                    .neutralDensityFilterTransmissions(listOf(1.1, 2.1, 3.1))
                    .neutralDensityFilterTransmissionsUnc(listOf(1.1, 2.1, 3.1))
                    .numCatalogStars(123L)
                    .numCorrelatedStars(123L)
                    .numDetectedStars(123L)
                    .numNeutralDensityFilters(12L)
                    .numSpectralFilters(10L)
                    .objSunRange(123.2)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .opticalCrossSection(123.3)
                    .opticalCrossSectionUnc(123.3)
                    .pcalNumStars(23)
                    .peakApertureCount(123.2)
                    .peakBackgroundCount(321)
                    .phaseAngBisect(123.2)
                    .pixelArrayHeight(23L)
                    .pixelArrayWidth(12L)
                    .pixelMax(256)
                    .pixelMin(12L)
                    .predictedAzimuth(10.1)
                    .predictedDeclination(10.1)
                    .predictedDeclinationUnc(123.2)
                    .predictedElevation(10.1)
                    .predictedRa(10.1)
                    .predictedRaUnc(123.2)
                    .raCov(123.2)
                    .raDeclinationCov(123.2)
                    .rowColCov(0.01)
                    .rowVariance(0.1)
                    .snrEst(13.4)
                    .solarDiskFrac(123.2)
                    .source("Bluestaq")
                    .addSpectralFilter("Keyword1")
                    .addSpectralFilter("Keyword2")
                    .spectralFilterSolarMag(listOf(1.1, 2.1, 3.1))
                    .spectralZmfl(listOf(1.1, 2.1, 3.1))
                    .sunAzimuth(10.1)
                    .sunElevation(10.1)
                    .sunStatePosX(123.3)
                    .sunStatePosY(123.3)
                    .sunStatePosZ(123.3)
                    .sunStateVelX(123.3)
                    .sunStateVelY(123.3)
                    .sunStateVelZ(123.3)
                    .surfBrightness(listOf(21.01, 21.382, 21.725))
                    .surfBrightnessUnc(listOf(0.165, 0.165, 0.165))
                    .timesUnc(13.1)
                    .toes(123.2)
                    .zeroPoints(listOf(1.1, 2.1, 3.1))
                    .zeroPointsUnc(listOf(1.1, 2.1, 3.1))
                    .build()
            )
            .expDuration(1.1)
            .fovCount(1)
            .fovCountUct(2)
            .geoalt(1.1)
            .geolat(1.1)
            .geolon(1.1)
            .georange(1.1)
            .idOnOrbit("ONORBIT-ID")
            .idSensor("SENSOR-ID")
            .idSkyImagery("SKYIMAGERY-ID")
            .intensity(1.1)
            .losUnc(1.1)
            .losx(1.1)
            .losxvel(1.1)
            .losy(1.1)
            .losyvel(1.1)
            .losz(1.1)
            .loszvel(1.1)
            .mag(1.1)
            .magNormRange(1.1)
            .magUnc(1.1)
            .netObjSig(1.1)
            .netObjSigUnc(1.1)
            .obPosition("FIRST")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId("ORIGSENSOR-ID")
            .penumbra(false)
            .primaryExtinction(1.1)
            .primaryExtinctionUnc(1.1)
            .ra(1.1)
            .raBias(1.1)
            .raMeasured(true)
            .range(1.1)
            .rangeBias(1.1)
            .rangeMeasured(true)
            .rangeRate(1.1)
            .rangeRateMeasured(true)
            .rangeRateUnc(1.1)
            .rangeUnc(1.1)
            .raRate(1.1)
            .raUnc(1.1)
            .rawFileUri("Example URI")
            .referenceFrame(EoObservationCreateParams.ReferenceFrame.J2000)
            .satNo(5)
            .senalt(1.1)
            .senlat(45.1)
            .senlon(179.1)
            .senQuat(listOf(0.4492, 0.02, 0.8765, 0.2213))
            .senReferenceFrame(EoObservationCreateParams.SenReferenceFrame.J2000)
            .senvelx(1.1)
            .senvely(1.1)
            .senvelz(1.1)
            .senx(1.1)
            .seny(1.1)
            .senz(1.1)
            .shutterDelay(1.1)
            .skyBkgrnd(1.1)
            .solarDecAngle(1.1)
            .solarEqPhaseAngle(1.1)
            .solarPhaseAngle(1.1)
            .sourceDl("AXE")
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .taskId("TASK-ID")
            .timingBias(1.1)
            .trackId("TRACK-ID")
            .transactionId("TRANSACTION-ID")
            .type("OPTICAL")
            .uct(false)
            .umbra(false)
            .zeroptd(1.1)
            .zeroPtdUnc(1.1)
            .build()
    }

    @Test
    fun body() {
        val params =
            EoObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EoObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("EOOBSERVATION-ID")
                .azimuth(1.1)
                .azimuthBias(1.1)
                .azimuthMeasured(true)
                .azimuthRate(1.1)
                .azimuthUnc(1.1)
                .bgIntensity(1.1)
                .collectMethod("AUTOTRACK")
                .corrQuality(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declination(1.1)
                .declinationBias(1.1)
                .declinationMeasured(true)
                .declinationRate(1.1)
                .declinationUnc(1.1)
                .descriptor("PROVIDED_DATA1")
                .elevation(1.1)
                .elevationBias(1.1)
                .elevationMeasured(true)
                .elevationRate(1.1)
                .elevationUnc(1.1)
                .eoobservationDetails(
                    EoObservationCreateParams.EoobservationDetails.builder()
                        .acalCrPixX(123.2)
                        .acalCrPixY(123.2)
                        .acalCrValX(123.2)
                        .acalCrValY(123.2)
                        .acalNumStars(123L)
                        .backgroundSignal(4134.1)
                        .backgroundSignalUnc(123.2)
                        .binningHoriz(12L)
                        .binningVert(14L)
                        .ccdObjPosX(123.3)
                        .ccdObjPosY(321.4)
                        .ccdObjWidth(133.2)
                        .ccdTemp(123.4)
                        .centroidColumn(0.5)
                        .centroidRow(0.1)
                        .classificationMarking("U")
                        .colorCoeffs(listOf(1.1, 2.1, 3.1))
                        .columnVariance(0.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .currentNeutralDensityFilterNum(3L)
                        .currentSpectralFilterNum(23L)
                        .dataMode(EoObservationCreateParams.EoobservationDetails.DataMode.TEST)
                        .declinationCov(123.2)
                        .distFromStreakCenter(listOf(-127.153, -126.153, -125.153))
                        .does(123.2)
                        .extinctionCoeffs(listOf(1.1, 2.1, 3.1))
                        .extinctionCoeffsUnc(listOf(1.1, 2.1, 3.1))
                        .gain(234.2)
                        .idEoObservation("EOOBSERVATION-ID")
                        .ifov(0.2)
                        .magInstrumental(123.3)
                        .magInstrumentalUnc(123.3)
                        .addNeutralDensityFilterName("numNeutralDensityFilters1")
                        .addNeutralDensityFilterName("numNeutralDensityFilters2")
                        .neutralDensityFilterTransmissions(listOf(1.1, 2.1, 3.1))
                        .neutralDensityFilterTransmissionsUnc(listOf(1.1, 2.1, 3.1))
                        .numCatalogStars(123L)
                        .numCorrelatedStars(123L)
                        .numDetectedStars(123L)
                        .numNeutralDensityFilters(12L)
                        .numSpectralFilters(10L)
                        .objSunRange(123.2)
                        .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .opticalCrossSection(123.3)
                        .opticalCrossSectionUnc(123.3)
                        .pcalNumStars(23)
                        .peakApertureCount(123.2)
                        .peakBackgroundCount(321)
                        .phaseAngBisect(123.2)
                        .pixelArrayHeight(23L)
                        .pixelArrayWidth(12L)
                        .pixelMax(256)
                        .pixelMin(12L)
                        .predictedAzimuth(10.1)
                        .predictedDeclination(10.1)
                        .predictedDeclinationUnc(123.2)
                        .predictedElevation(10.1)
                        .predictedRa(10.1)
                        .predictedRaUnc(123.2)
                        .raCov(123.2)
                        .raDeclinationCov(123.2)
                        .rowColCov(0.01)
                        .rowVariance(0.1)
                        .snrEst(13.4)
                        .solarDiskFrac(123.2)
                        .source("Bluestaq")
                        .addSpectralFilter("Keyword1")
                        .addSpectralFilter("Keyword2")
                        .spectralFilterSolarMag(listOf(1.1, 2.1, 3.1))
                        .spectralZmfl(listOf(1.1, 2.1, 3.1))
                        .sunAzimuth(10.1)
                        .sunElevation(10.1)
                        .sunStatePosX(123.3)
                        .sunStatePosY(123.3)
                        .sunStatePosZ(123.3)
                        .sunStateVelX(123.3)
                        .sunStateVelY(123.3)
                        .sunStateVelZ(123.3)
                        .surfBrightness(listOf(21.01, 21.382, 21.725))
                        .surfBrightnessUnc(listOf(0.165, 0.165, 0.165))
                        .timesUnc(13.1)
                        .toes(123.2)
                        .zeroPoints(listOf(1.1, 2.1, 3.1))
                        .zeroPointsUnc(listOf(1.1, 2.1, 3.1))
                        .build()
                )
                .expDuration(1.1)
                .fovCount(1)
                .fovCountUct(2)
                .geoalt(1.1)
                .geolat(1.1)
                .geolon(1.1)
                .georange(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .idSkyImagery("SKYIMAGERY-ID")
                .intensity(1.1)
                .losUnc(1.1)
                .losx(1.1)
                .losxvel(1.1)
                .losy(1.1)
                .losyvel(1.1)
                .losz(1.1)
                .loszvel(1.1)
                .mag(1.1)
                .magNormRange(1.1)
                .magUnc(1.1)
                .netObjSig(1.1)
                .netObjSigUnc(1.1)
                .obPosition("FIRST")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .penumbra(false)
                .primaryExtinction(1.1)
                .primaryExtinctionUnc(1.1)
                .ra(1.1)
                .raBias(1.1)
                .raMeasured(true)
                .range(1.1)
                .rangeBias(1.1)
                .rangeMeasured(true)
                .rangeRate(1.1)
                .rangeRateMeasured(true)
                .rangeRateUnc(1.1)
                .rangeUnc(1.1)
                .raRate(1.1)
                .raUnc(1.1)
                .rawFileUri("Example URI")
                .referenceFrame(EoObservationCreateParams.ReferenceFrame.J2000)
                .satNo(5)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(179.1)
                .senQuat(listOf(0.4492, 0.02, 0.8765, 0.2213))
                .senReferenceFrame(EoObservationCreateParams.SenReferenceFrame.J2000)
                .senvelx(1.1)
                .senvely(1.1)
                .senvelz(1.1)
                .senx(1.1)
                .seny(1.1)
                .senz(1.1)
                .shutterDelay(1.1)
                .skyBkgrnd(1.1)
                .solarDecAngle(1.1)
                .solarEqPhaseAngle(1.1)
                .solarPhaseAngle(1.1)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .taskId("TASK-ID")
                .timingBias(1.1)
                .trackId("TRACK-ID")
                .transactionId("TRANSACTION-ID")
                .type("OPTICAL")
                .uct(false)
                .umbra(false)
                .zeroptd(1.1)
                .zeroPtdUnc(1.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EoObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("EOOBSERVATION-ID")
        assertThat(body.azimuth()).contains(1.1)
        assertThat(body.azimuthBias()).contains(1.1)
        assertThat(body.azimuthMeasured()).contains(true)
        assertThat(body.azimuthRate()).contains(1.1)
        assertThat(body.azimuthUnc()).contains(1.1)
        assertThat(body.bgIntensity()).contains(1.1)
        assertThat(body.collectMethod()).contains("AUTOTRACK")
        assertThat(body.corrQuality()).contains(1.1)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.declination()).contains(1.1)
        assertThat(body.declinationBias()).contains(1.1)
        assertThat(body.declinationMeasured()).contains(true)
        assertThat(body.declinationRate()).contains(1.1)
        assertThat(body.declinationUnc()).contains(1.1)
        assertThat(body.descriptor()).contains("PROVIDED_DATA1")
        assertThat(body.elevation()).contains(1.1)
        assertThat(body.elevationBias()).contains(1.1)
        assertThat(body.elevationMeasured()).contains(true)
        assertThat(body.elevationRate()).contains(1.1)
        assertThat(body.elevationUnc()).contains(1.1)
        assertThat(body.eoobservationDetails())
            .contains(
                EoObservationCreateParams.EoobservationDetails.builder()
                    .acalCrPixX(123.2)
                    .acalCrPixY(123.2)
                    .acalCrValX(123.2)
                    .acalCrValY(123.2)
                    .acalNumStars(123L)
                    .backgroundSignal(4134.1)
                    .backgroundSignalUnc(123.2)
                    .binningHoriz(12L)
                    .binningVert(14L)
                    .ccdObjPosX(123.3)
                    .ccdObjPosY(321.4)
                    .ccdObjWidth(133.2)
                    .ccdTemp(123.4)
                    .centroidColumn(0.5)
                    .centroidRow(0.1)
                    .classificationMarking("U")
                    .colorCoeffs(listOf(1.1, 2.1, 3.1))
                    .columnVariance(0.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .currentNeutralDensityFilterNum(3L)
                    .currentSpectralFilterNum(23L)
                    .dataMode(EoObservationCreateParams.EoobservationDetails.DataMode.TEST)
                    .declinationCov(123.2)
                    .distFromStreakCenter(listOf(-127.153, -126.153, -125.153))
                    .does(123.2)
                    .extinctionCoeffs(listOf(1.1, 2.1, 3.1))
                    .extinctionCoeffsUnc(listOf(1.1, 2.1, 3.1))
                    .gain(234.2)
                    .idEoObservation("EOOBSERVATION-ID")
                    .ifov(0.2)
                    .magInstrumental(123.3)
                    .magInstrumentalUnc(123.3)
                    .addNeutralDensityFilterName("numNeutralDensityFilters1")
                    .addNeutralDensityFilterName("numNeutralDensityFilters2")
                    .neutralDensityFilterTransmissions(listOf(1.1, 2.1, 3.1))
                    .neutralDensityFilterTransmissionsUnc(listOf(1.1, 2.1, 3.1))
                    .numCatalogStars(123L)
                    .numCorrelatedStars(123L)
                    .numDetectedStars(123L)
                    .numNeutralDensityFilters(12L)
                    .numSpectralFilters(10L)
                    .objSunRange(123.2)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .opticalCrossSection(123.3)
                    .opticalCrossSectionUnc(123.3)
                    .pcalNumStars(23)
                    .peakApertureCount(123.2)
                    .peakBackgroundCount(321)
                    .phaseAngBisect(123.2)
                    .pixelArrayHeight(23L)
                    .pixelArrayWidth(12L)
                    .pixelMax(256)
                    .pixelMin(12L)
                    .predictedAzimuth(10.1)
                    .predictedDeclination(10.1)
                    .predictedDeclinationUnc(123.2)
                    .predictedElevation(10.1)
                    .predictedRa(10.1)
                    .predictedRaUnc(123.2)
                    .raCov(123.2)
                    .raDeclinationCov(123.2)
                    .rowColCov(0.01)
                    .rowVariance(0.1)
                    .snrEst(13.4)
                    .solarDiskFrac(123.2)
                    .source("Bluestaq")
                    .addSpectralFilter("Keyword1")
                    .addSpectralFilter("Keyword2")
                    .spectralFilterSolarMag(listOf(1.1, 2.1, 3.1))
                    .spectralZmfl(listOf(1.1, 2.1, 3.1))
                    .sunAzimuth(10.1)
                    .sunElevation(10.1)
                    .sunStatePosX(123.3)
                    .sunStatePosY(123.3)
                    .sunStatePosZ(123.3)
                    .sunStateVelX(123.3)
                    .sunStateVelY(123.3)
                    .sunStateVelZ(123.3)
                    .surfBrightness(listOf(21.01, 21.382, 21.725))
                    .surfBrightnessUnc(listOf(0.165, 0.165, 0.165))
                    .timesUnc(13.1)
                    .toes(123.2)
                    .zeroPoints(listOf(1.1, 2.1, 3.1))
                    .zeroPointsUnc(listOf(1.1, 2.1, 3.1))
                    .build()
            )
        assertThat(body.expDuration()).contains(1.1)
        assertThat(body.fovCount()).contains(1)
        assertThat(body.fovCountUct()).contains(2)
        assertThat(body.geoalt()).contains(1.1)
        assertThat(body.geolat()).contains(1.1)
        assertThat(body.geolon()).contains(1.1)
        assertThat(body.georange()).contains(1.1)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idSensor()).contains("SENSOR-ID")
        assertThat(body.idSkyImagery()).contains("SKYIMAGERY-ID")
        assertThat(body.intensity()).contains(1.1)
        assertThat(body.losUnc()).contains(1.1)
        assertThat(body.losx()).contains(1.1)
        assertThat(body.losxvel()).contains(1.1)
        assertThat(body.losy()).contains(1.1)
        assertThat(body.losyvel()).contains(1.1)
        assertThat(body.losz()).contains(1.1)
        assertThat(body.loszvel()).contains(1.1)
        assertThat(body.mag()).contains(1.1)
        assertThat(body.magNormRange()).contains(1.1)
        assertThat(body.magUnc()).contains(1.1)
        assertThat(body.netObjSig()).contains(1.1)
        assertThat(body.netObjSigUnc()).contains(1.1)
        assertThat(body.obPosition()).contains("FIRST")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.penumbra()).contains(false)
        assertThat(body.primaryExtinction()).contains(1.1)
        assertThat(body.primaryExtinctionUnc()).contains(1.1)
        assertThat(body.ra()).contains(1.1)
        assertThat(body.raBias()).contains(1.1)
        assertThat(body.raMeasured()).contains(true)
        assertThat(body.range()).contains(1.1)
        assertThat(body.rangeBias()).contains(1.1)
        assertThat(body.rangeMeasured()).contains(true)
        assertThat(body.rangeRate()).contains(1.1)
        assertThat(body.rangeRateMeasured()).contains(true)
        assertThat(body.rangeRateUnc()).contains(1.1)
        assertThat(body.rangeUnc()).contains(1.1)
        assertThat(body.raRate()).contains(1.1)
        assertThat(body.raUnc()).contains(1.1)
        assertThat(body.rawFileUri()).contains("Example URI")
        assertThat(body.referenceFrame()).contains(EoObservationCreateParams.ReferenceFrame.J2000)
        assertThat(body.satNo()).contains(5)
        assertThat(body.senalt()).contains(1.1)
        assertThat(body.senlat()).contains(45.1)
        assertThat(body.senlon()).contains(179.1)
        assertThat(body.senQuat().getOrNull()).containsExactly(0.4492, 0.02, 0.8765, 0.2213)
        assertThat(body.senReferenceFrame())
            .contains(EoObservationCreateParams.SenReferenceFrame.J2000)
        assertThat(body.senvelx()).contains(1.1)
        assertThat(body.senvely()).contains(1.1)
        assertThat(body.senvelz()).contains(1.1)
        assertThat(body.senx()).contains(1.1)
        assertThat(body.seny()).contains(1.1)
        assertThat(body.senz()).contains(1.1)
        assertThat(body.shutterDelay()).contains(1.1)
        assertThat(body.skyBkgrnd()).contains(1.1)
        assertThat(body.solarDecAngle()).contains(1.1)
        assertThat(body.solarEqPhaseAngle()).contains(1.1)
        assertThat(body.solarPhaseAngle()).contains(1.1)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.timingBias()).contains(1.1)
        assertThat(body.trackId()).contains("TRACK-ID")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.type()).contains("OPTICAL")
        assertThat(body.uct()).contains(false)
        assertThat(body.umbra()).contains(false)
        assertThat(body.zeroptd()).contains(1.1)
        assertThat(body.zeroPtdUnc()).contains(1.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EoObservationCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EoObservationCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EoObservationCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
