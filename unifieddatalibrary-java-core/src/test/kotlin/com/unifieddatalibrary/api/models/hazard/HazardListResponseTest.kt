// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.hazard

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class HazardListResponseTest {

    @Test
    fun create() {
        val hazardListResponse =
            HazardListResponse.builder()
                .addAlarm("Alarm1")
                .addAlarm("Alarm2")
                .addAlarmValue(2.7)
                .addAlarmValue(2.9)
                .classificationMarking("U")
                .dataMode(HazardListResponse.DataMode.TEST)
                .detectTime(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
                .detectType("Chemical")
                .source("Bluestaq")
                .id("HAZARD-ID")
                .a(238)
                .activity(120.1)
                .bottleId("6264")
                .casRn("64-17-5")
                .channel("Skin")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctrnTime(1.077)
                .density(18900.2)
                .dep(1.084)
                .depCtrn(86.1)
                .dose(1.12)
                .doseRate(1.0000001865)
                .duration(14400)
                .gBar(2.5)
                .harmful(false)
                .hBar(3.1)
                .idPoi("POI-ID")
                .idTrack("TRACK-ID")
                .massFrac(0.029)
                .matCat(3)
                .matClass("Nerve Agent")
                .matName("VX")
                .matType("21")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ppm(27129)
                .radCtrn(1.31)
                .addReading("Rad1")
                .addReading("Rad2")
                .addReadingUnit("Gray")
                .addReadingUnit("Gray")
                .addReadingValue(107.2)
                .addReadingValue(124.1)
                .z(92)
                .build()

        assertThat(hazardListResponse.alarms()).containsExactly("Alarm1", "Alarm2")
        assertThat(hazardListResponse.alarmValues()).containsExactly(2.7, 2.9)
        assertThat(hazardListResponse.classificationMarking()).isEqualTo("U")
        assertThat(hazardListResponse.dataMode()).isEqualTo(HazardListResponse.DataMode.TEST)
        assertThat(hazardListResponse.detectTime())
            .isEqualTo(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
        assertThat(hazardListResponse.detectType()).isEqualTo("Chemical")
        assertThat(hazardListResponse.source()).isEqualTo("Bluestaq")
        assertThat(hazardListResponse.id()).contains("HAZARD-ID")
        assertThat(hazardListResponse.a()).contains(238)
        assertThat(hazardListResponse.activity()).contains(120.1)
        assertThat(hazardListResponse.bottleId()).contains("6264")
        assertThat(hazardListResponse.casRn()).contains("64-17-5")
        assertThat(hazardListResponse.channel()).contains("Skin")
        assertThat(hazardListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(hazardListResponse.createdBy()).contains("some.user")
        assertThat(hazardListResponse.ctrnTime()).contains(1.077)
        assertThat(hazardListResponse.density()).contains(18900.2)
        assertThat(hazardListResponse.dep()).contains(1.084)
        assertThat(hazardListResponse.depCtrn()).contains(86.1)
        assertThat(hazardListResponse.dose()).contains(1.12)
        assertThat(hazardListResponse.doseRate()).contains(1.0000001865)
        assertThat(hazardListResponse.duration()).contains(14400)
        assertThat(hazardListResponse.gBar()).contains(2.5)
        assertThat(hazardListResponse.harmful()).contains(false)
        assertThat(hazardListResponse.hBar()).contains(3.1)
        assertThat(hazardListResponse.idPoi()).contains("POI-ID")
        assertThat(hazardListResponse.idTrack()).contains("TRACK-ID")
        assertThat(hazardListResponse.massFrac()).contains(0.029)
        assertThat(hazardListResponse.matCat()).contains(3)
        assertThat(hazardListResponse.matClass()).contains("Nerve Agent")
        assertThat(hazardListResponse.matName()).contains("VX")
        assertThat(hazardListResponse.matType()).contains("21")
        assertThat(hazardListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(hazardListResponse.origNetwork()).contains("OPS1")
        assertThat(hazardListResponse.ppm()).contains(27129)
        assertThat(hazardListResponse.radCtrn()).contains(1.31)
        assertThat(hazardListResponse.readings().getOrNull()).containsExactly("Rad1", "Rad2")
        assertThat(hazardListResponse.readingUnits().getOrNull()).containsExactly("Gray", "Gray")
        assertThat(hazardListResponse.readingValues().getOrNull()).containsExactly(107.2, 124.1)
        assertThat(hazardListResponse.z()).contains(92)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val hazardListResponse =
            HazardListResponse.builder()
                .addAlarm("Alarm1")
                .addAlarm("Alarm2")
                .addAlarmValue(2.7)
                .addAlarmValue(2.9)
                .classificationMarking("U")
                .dataMode(HazardListResponse.DataMode.TEST)
                .detectTime(OffsetDateTime.parse("2022-03-07T14:51:39.653Z"))
                .detectType("Chemical")
                .source("Bluestaq")
                .id("HAZARD-ID")
                .a(238)
                .activity(120.1)
                .bottleId("6264")
                .casRn("64-17-5")
                .channel("Skin")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .ctrnTime(1.077)
                .density(18900.2)
                .dep(1.084)
                .depCtrn(86.1)
                .dose(1.12)
                .doseRate(1.0000001865)
                .duration(14400)
                .gBar(2.5)
                .harmful(false)
                .hBar(3.1)
                .idPoi("POI-ID")
                .idTrack("TRACK-ID")
                .massFrac(0.029)
                .matCat(3)
                .matClass("Nerve Agent")
                .matName("VX")
                .matType("21")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ppm(27129)
                .radCtrn(1.31)
                .addReading("Rad1")
                .addReading("Rad2")
                .addReadingUnit("Gray")
                .addReadingUnit("Gray")
                .addReadingValue(107.2)
                .addReadingValue(124.1)
                .z(92)
                .build()

        val roundtrippedHazardListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(hazardListResponse),
                jacksonTypeRef<HazardListResponse>(),
            )

        assertThat(roundtrippedHazardListResponse).isEqualTo(hazardListResponse)
    }
}
