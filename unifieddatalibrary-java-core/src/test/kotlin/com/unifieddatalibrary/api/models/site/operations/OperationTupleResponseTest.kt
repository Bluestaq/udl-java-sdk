// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.site.operations

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.DailyOperationFull
import com.unifieddatalibrary.api.models.MaximumOnGroundFull
import com.unifieddatalibrary.api.models.OperatingHoursFull
import com.unifieddatalibrary.api.models.OperationalDeviationFull
import com.unifieddatalibrary.api.models.OperationalPlanningFull
import com.unifieddatalibrary.api.models.PathwayFull
import com.unifieddatalibrary.api.models.WaiverFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OperationTupleResponseTest {

    @Test
    fun create() {
        val operationTupleResponse =
            OperationTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(OperationTupleResponse.DataMode.TEST)
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .source("Bluestaq")
                .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDailyOperation(
                    DailyOperationFull.builder()
                        .dayOfWeek(DailyOperationFull.DayOfWeek.MONDAY)
                        .addOperatingHour(
                            OperatingHoursFull.builder()
                                .opStartTime("12:00")
                                .opStopTime("22:00")
                                .build()
                        )
                        .operationName("Arrivals")
                        .ophrsLastChangedBy("John Smith")
                        .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .build()
                )
                .dopsLastChangedBy("John Smith")
                .dopsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .dopsLastChangedReason("Example reason for change.")
                .idLaunchSite("b150b3ee-884b-b9ac-60a0-6408b4b16088")
                .addMaximumOnGround(
                    MaximumOnGroundFull.builder()
                        .aircraftMds("C017A")
                        .contingencyMog(3)
                        .mogLastChangedBy("John Smith")
                        .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .wideParkingMog(1)
                        .wideWorkingMog(1)
                        .build()
                )
                .mogsLastChangedBy("Jane Doe")
                .mogsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .mogsLastChangedReason("Example reason for change.")
                .addOperationalDeviation(
                    OperationalDeviationFull.builder()
                        .affectedAircraftMds("C017A")
                        .affectedMog(1)
                        .aircraftOnGroundTime("14:00")
                        .crewRestTime("14:00")
                        .odLastChangedBy("John Smith")
                        .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .odRemark("Example remark about this operational deviation.")
                        .build()
                )
                .addOperationalPlanning(
                    OperationalPlanningFull.builder()
                        .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opLastChangedBy("John Smith")
                        .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opRemark("Example planning remark")
                        .opSource("a3")
                        .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opStatus("Verified")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addPathway(
                    PathwayFull.builder()
                        .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                        .pwLastChangedBy("John Smith")
                        .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .pwType("Taxiway")
                        .pwUsage("Arrival")
                        .build()
                )
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addWaiver(
                    WaiverFull.builder()
                        .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .hasExpired(false)
                        .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .issuerName("John Smith")
                        .requesterName("Jane Doe")
                        .requesterPhoneNumber("808-123-4567")
                        .requestingUnit("2A1")
                        .waiverAppliesTo("C017A")
                        .waiverDescription("Example waiver description")
                        .waiverLastChangedBy("J. Appleseed")
                        .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .build()
                )
                .build()

        assertThat(operationTupleResponse.classificationMarking()).isEqualTo("U")
        assertThat(operationTupleResponse.dataMode())
            .isEqualTo(OperationTupleResponse.DataMode.TEST)
        assertThat(operationTupleResponse.idSite())
            .isEqualTo("a150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(operationTupleResponse.source()).isEqualTo("Bluestaq")
        assertThat(operationTupleResponse.id()).contains("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
        assertThat(operationTupleResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(operationTupleResponse.createdBy()).contains("some.user")
        assertThat(operationTupleResponse.dailyOperations().getOrNull())
            .containsExactly(
                DailyOperationFull.builder()
                    .dayOfWeek(DailyOperationFull.DayOfWeek.MONDAY)
                    .addOperatingHour(
                        OperatingHoursFull.builder()
                            .opStartTime("12:00")
                            .opStopTime("22:00")
                            .build()
                    )
                    .operationName("Arrivals")
                    .ophrsLastChangedBy("John Smith")
                    .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .build()
            )
        assertThat(operationTupleResponse.dopsLastChangedBy()).contains("John Smith")
        assertThat(operationTupleResponse.dopsLastChangedDate())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
        assertThat(operationTupleResponse.dopsLastChangedReason())
            .contains("Example reason for change.")
        assertThat(operationTupleResponse.idLaunchSite())
            .contains("b150b3ee-884b-b9ac-60a0-6408b4b16088")
        assertThat(operationTupleResponse.maximumOnGrounds().getOrNull())
            .containsExactly(
                MaximumOnGroundFull.builder()
                    .aircraftMds("C017A")
                    .contingencyMog(3)
                    .mogLastChangedBy("John Smith")
                    .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .wideParkingMog(1)
                    .wideWorkingMog(1)
                    .build()
            )
        assertThat(operationTupleResponse.mogsLastChangedBy()).contains("Jane Doe")
        assertThat(operationTupleResponse.mogsLastChangedDate())
            .contains(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
        assertThat(operationTupleResponse.mogsLastChangedReason())
            .contains("Example reason for change.")
        assertThat(operationTupleResponse.operationalDeviations().getOrNull())
            .containsExactly(
                OperationalDeviationFull.builder()
                    .affectedAircraftMds("C017A")
                    .affectedMog(1)
                    .aircraftOnGroundTime("14:00")
                    .crewRestTime("14:00")
                    .odLastChangedBy("John Smith")
                    .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .odRemark("Example remark about this operational deviation.")
                    .build()
            )
        assertThat(operationTupleResponse.operationalPlannings().getOrNull())
            .containsExactly(
                OperationalPlanningFull.builder()
                    .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opLastChangedBy("John Smith")
                    .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opRemark("Example planning remark")
                    .opSource("a3")
                    .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .opStatus("Verified")
                    .build()
            )
        assertThat(operationTupleResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(operationTupleResponse.origNetwork()).contains("ORIG")
        assertThat(operationTupleResponse.pathways().getOrNull())
            .containsExactly(
                PathwayFull.builder()
                    .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                    .pwLastChangedBy("John Smith")
                    .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .pwType("Taxiway")
                    .pwUsage("Arrival")
                    .build()
            )
        assertThat(operationTupleResponse.sourceDl()).contains("AXE")
        assertThat(operationTupleResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(operationTupleResponse.updatedBy()).contains("some.user")
        assertThat(operationTupleResponse.waivers().getOrNull())
            .containsExactly(
                WaiverFull.builder()
                    .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .hasExpired(false)
                    .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .issuerName("John Smith")
                    .requesterName("Jane Doe")
                    .requesterPhoneNumber("808-123-4567")
                    .requestingUnit("2A1")
                    .waiverAppliesTo("C017A")
                    .waiverDescription("Example waiver description")
                    .waiverLastChangedBy("J. Appleseed")
                    .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                    .build()
            )
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val operationTupleResponse =
            OperationTupleResponse.builder()
                .classificationMarking("U")
                .dataMode(OperationTupleResponse.DataMode.TEST)
                .idSite("a150b3ee-884b-b9ac-60a0-6408b4b16088")
                .source("Bluestaq")
                .id("3f28f60b-3a50-2aef-ac88-8e9d0e39912b")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDailyOperation(
                    DailyOperationFull.builder()
                        .dayOfWeek(DailyOperationFull.DayOfWeek.MONDAY)
                        .addOperatingHour(
                            OperatingHoursFull.builder()
                                .opStartTime("12:00")
                                .opStopTime("22:00")
                                .build()
                        )
                        .operationName("Arrivals")
                        .ophrsLastChangedBy("John Smith")
                        .ophrsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                        .build()
                )
                .dopsLastChangedBy("John Smith")
                .dopsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .dopsLastChangedReason("Example reason for change.")
                .idLaunchSite("b150b3ee-884b-b9ac-60a0-6408b4b16088")
                .addMaximumOnGround(
                    MaximumOnGroundFull.builder()
                        .aircraftMds("C017A")
                        .contingencyMog(3)
                        .mogLastChangedBy("John Smith")
                        .mogLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .wideParkingMog(1)
                        .wideWorkingMog(1)
                        .build()
                )
                .mogsLastChangedBy("Jane Doe")
                .mogsLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                .mogsLastChangedReason("Example reason for change.")
                .addOperationalDeviation(
                    OperationalDeviationFull.builder()
                        .affectedAircraftMds("C017A")
                        .affectedMog(1)
                        .aircraftOnGroundTime("14:00")
                        .crewRestTime("14:00")
                        .odLastChangedBy("John Smith")
                        .odLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .odRemark("Example remark about this operational deviation.")
                        .build()
                )
                .addOperationalPlanning(
                    OperationalPlanningFull.builder()
                        .opEndDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opLastChangedBy("John Smith")
                        .opLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opRemark("Example planning remark")
                        .opSource("a3")
                        .opStartDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .opStatus("Verified")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addPathway(
                    PathwayFull.builder()
                        .pwDefinition("AGP: 14L, K6, K, G (ANG APRN TO TWY K), GUARD (MAIN)")
                        .pwLastChangedBy("John Smith")
                        .pwLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .pwType("Taxiway")
                        .pwUsage("Arrival")
                        .build()
                )
                .sourceDl("AXE")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .addWaiver(
                    WaiverFull.builder()
                        .expirationDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .hasExpired(false)
                        .issueDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .issuerName("John Smith")
                        .requesterName("Jane Doe")
                        .requesterPhoneNumber("808-123-4567")
                        .requestingUnit("2A1")
                        .waiverAppliesTo("C017A")
                        .waiverDescription("Example waiver description")
                        .waiverLastChangedBy("J. Appleseed")
                        .waiverLastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.000Z"))
                        .build()
                )
                .build()

        val roundtrippedOperationTupleResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(operationTupleResponse),
                jacksonTypeRef<OperationTupleResponse>(),
            )

        assertThat(roundtrippedOperationTupleResponse).isEqualTo(operationTupleResponse)
    }
}
