// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradatacommdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SeraDataCommDetailGetResponseTest {

    @Test
    fun create() {
        val seraDataCommDetailGetResponse =
            SeraDataCommDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(SeraDataCommDetailGetResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("SERADATACOMMDETAILS-ID")
                .band("X")
                .bandwidth(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .eirp(1.23)
                .estHtsTotalCapacity(1.23)
                .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
                .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
                .gatewayDownlinkFrom(1.23)
                .gatewayDownlinkTo(1.23)
                .gatewayUplinkFrom(1.23)
                .gatewayUplinkTo(1.23)
                .hostedForCompanyOrgId("hostedForCompanyOrgId")
                .htsNumUserSpotBeams(1)
                .htsUserDownlinkBandwidthPerBeam(1.23)
                .htsUserUplinkBandwidthPerBeam(1.23)
                .idComm("idComm")
                .manufacturerOrgId("manufacturerOrgId")
                .num36MhzEquivalentTransponders(1)
                .numOperationalTransponders(1)
                .numSpareTransponders(1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .payloadNotes("Sample Notes")
                .polarization("polarization")
                .solidStatePowerAmp(1.23)
                .spacecraftId("spacecraftId")
                .tradeLeaseOrgId("tradeLeaseOrgId")
                .travelingWaveTubeAmplifier(1.23)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .userDownlinkFrom(1.23)
                .userDownlinkTo(1.23)
                .userUplinkFrom(1.23)
                .userUplinkTo(1.23)
                .build()

        assertThat(seraDataCommDetailGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(seraDataCommDetailGetResponse.dataMode())
            .isEqualTo(SeraDataCommDetailGetResponse.DataMode.TEST)
        assertThat(seraDataCommDetailGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(seraDataCommDetailGetResponse.id()).contains("SERADATACOMMDETAILS-ID")
        assertThat(seraDataCommDetailGetResponse.band()).contains("X")
        assertThat(seraDataCommDetailGetResponse.bandwidth()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seraDataCommDetailGetResponse.createdBy()).contains("some.user")
        assertThat(seraDataCommDetailGetResponse.eirp()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.estHtsTotalCapacity()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.estHtsTotalUserDownlinkBandwidthPerBeam())
            .contains(1.23)
        assertThat(seraDataCommDetailGetResponse.estHtsTotalUserUplinkBandwidthPerBeam())
            .contains(1.23)
        assertThat(seraDataCommDetailGetResponse.gatewayDownlinkFrom()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.gatewayDownlinkTo()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.gatewayUplinkFrom()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.gatewayUplinkTo()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.hostedForCompanyOrgId())
            .contains("hostedForCompanyOrgId")
        assertThat(seraDataCommDetailGetResponse.htsNumUserSpotBeams()).contains(1)
        assertThat(seraDataCommDetailGetResponse.htsUserDownlinkBandwidthPerBeam()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.htsUserUplinkBandwidthPerBeam()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.idComm()).contains("idComm")
        assertThat(seraDataCommDetailGetResponse.manufacturerOrgId()).contains("manufacturerOrgId")
        assertThat(seraDataCommDetailGetResponse.num36MhzEquivalentTransponders()).contains(1)
        assertThat(seraDataCommDetailGetResponse.numOperationalTransponders()).contains(1)
        assertThat(seraDataCommDetailGetResponse.numSpareTransponders()).contains(1)
        assertThat(seraDataCommDetailGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(seraDataCommDetailGetResponse.origNetwork()).contains("ORIG")
        assertThat(seraDataCommDetailGetResponse.payloadNotes()).contains("Sample Notes")
        assertThat(seraDataCommDetailGetResponse.polarization()).contains("polarization")
        assertThat(seraDataCommDetailGetResponse.solidStatePowerAmp()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.spacecraftId()).contains("spacecraftId")
        assertThat(seraDataCommDetailGetResponse.tradeLeaseOrgId()).contains("tradeLeaseOrgId")
        assertThat(seraDataCommDetailGetResponse.travelingWaveTubeAmplifier()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(seraDataCommDetailGetResponse.updatedBy()).contains("some.user")
        assertThat(seraDataCommDetailGetResponse.userDownlinkFrom()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.userDownlinkTo()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.userUplinkFrom()).contains(1.23)
        assertThat(seraDataCommDetailGetResponse.userUplinkTo()).contains(1.23)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val seraDataCommDetailGetResponse =
            SeraDataCommDetailGetResponse.builder()
                .classificationMarking("U")
                .dataMode(SeraDataCommDetailGetResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("SERADATACOMMDETAILS-ID")
                .band("X")
                .bandwidth(1.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .eirp(1.23)
                .estHtsTotalCapacity(1.23)
                .estHtsTotalUserDownlinkBandwidthPerBeam(1.23)
                .estHtsTotalUserUplinkBandwidthPerBeam(1.23)
                .gatewayDownlinkFrom(1.23)
                .gatewayDownlinkTo(1.23)
                .gatewayUplinkFrom(1.23)
                .gatewayUplinkTo(1.23)
                .hostedForCompanyOrgId("hostedForCompanyOrgId")
                .htsNumUserSpotBeams(1)
                .htsUserDownlinkBandwidthPerBeam(1.23)
                .htsUserUplinkBandwidthPerBeam(1.23)
                .idComm("idComm")
                .manufacturerOrgId("manufacturerOrgId")
                .num36MhzEquivalentTransponders(1)
                .numOperationalTransponders(1)
                .numSpareTransponders(1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .payloadNotes("Sample Notes")
                .polarization("polarization")
                .solidStatePowerAmp(1.23)
                .spacecraftId("spacecraftId")
                .tradeLeaseOrgId("tradeLeaseOrgId")
                .travelingWaveTubeAmplifier(1.23)
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .userDownlinkFrom(1.23)
                .userDownlinkTo(1.23)
                .userUplinkFrom(1.23)
                .userUplinkTo(1.23)
                .build()

        val roundtrippedSeraDataCommDetailGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(seraDataCommDetailGetResponse),
                jacksonTypeRef<SeraDataCommDetailGetResponse>(),
            )

        assertThat(roundtrippedSeraDataCommDetailGetResponse)
            .isEqualTo(seraDataCommDetailGetResponse)
    }
}
