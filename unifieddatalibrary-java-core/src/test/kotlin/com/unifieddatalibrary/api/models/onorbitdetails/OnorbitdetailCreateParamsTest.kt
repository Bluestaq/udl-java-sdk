// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.onorbitdetails

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitdetailCreateParamsTest {

    @Test
    fun create() {
        OnorbitdetailCreateParams.builder()
            .classificationMarking("U")
            .dataMode(OnorbitdetailCreateParams.DataMode.TEST)
            .idOnOrbit("REF-ONORBIT-ID")
            .source("Bluestaq")
            .id("ONORBITDETAILS-ID")
            .additionalMass(10.23)
            .adeptRadius(10.23)
            .bolDeltaV(1000.1)
            .bolFuelMass(10.23)
            .busCrossSection(10.23)
            .busType("A2100")
            .colaRadius(10.23)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .crossSection(10.23)
            .currentMass(500.0)
            .deltaVUnc(50.1)
            .addDepEstMass(20.0)
            .addDepEstMass(21.0)
            .addDepMassUnc(10.0)
            .addDepMassUnc(5.0)
            .addDepName("GOES-18A")
            .addDepName("GOES-18B")
            .driftRate(1.23)
            .dryMass(10.23)
            .estDeltaVDuration(10.23)
            .fuelRemaining(10.23)
            .geoSlot(90.23)
            .lastObSource("THIRD_PARTY_DATASOURCE")
            .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
            .launchMass(10.23)
            .launchMassMax(15.23)
            .launchMassMin(5.23)
            .maneuverable(false)
            .maxDeltaV(10.23)
            .maxRadius(10.23)
            .addMissionType("Weather")
            .addMissionType("Space Weather")
            .numDeployable(2)
            .numMission(2)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .rcs(10.23)
            .rcsMax(15.23)
            .rcsMean(10.23)
            .rcsMin(5.23)
            .refSource("Wikipedia")
            .solarArrayArea(10.23)
            .totalMassUnc(50.1)
            .vismag(10.23)
            .vismagMax(15.23)
            .vismagMean(10.23)
            .vismagMin(5.23)
            .build()
    }

    @Test
    fun body() {
        val params =
            OnorbitdetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OnorbitdetailCreateParams.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .source("Bluestaq")
                .id("ONORBITDETAILS-ID")
                .additionalMass(10.23)
                .adeptRadius(10.23)
                .bolDeltaV(1000.1)
                .bolFuelMass(10.23)
                .busCrossSection(10.23)
                .busType("A2100")
                .colaRadius(10.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crossSection(10.23)
                .currentMass(500.0)
                .deltaVUnc(50.1)
                .addDepEstMass(20.0)
                .addDepEstMass(21.0)
                .addDepMassUnc(10.0)
                .addDepMassUnc(5.0)
                .addDepName("GOES-18A")
                .addDepName("GOES-18B")
                .driftRate(1.23)
                .dryMass(10.23)
                .estDeltaVDuration(10.23)
                .fuelRemaining(10.23)
                .geoSlot(90.23)
                .lastObSource("THIRD_PARTY_DATASOURCE")
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .launchMass(10.23)
                .launchMassMax(15.23)
                .launchMassMin(5.23)
                .maneuverable(false)
                .maxDeltaV(10.23)
                .maxRadius(10.23)
                .addMissionType("Weather")
                .addMissionType("Space Weather")
                .numDeployable(2)
                .numMission(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .rcs(10.23)
                .rcsMax(15.23)
                .rcsMean(10.23)
                .rcsMin(5.23)
                .refSource("Wikipedia")
                .solarArrayArea(10.23)
                .totalMassUnc(50.1)
                .vismag(10.23)
                .vismagMax(15.23)
                .vismagMean(10.23)
                .vismagMin(5.23)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OnorbitdetailCreateParams.DataMode.TEST)
        assertThat(body.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("ONORBITDETAILS-ID")
        assertThat(body.additionalMass()).contains(10.23)
        assertThat(body.adeptRadius()).contains(10.23)
        assertThat(body.bolDeltaV()).contains(1000.1)
        assertThat(body.bolFuelMass()).contains(10.23)
        assertThat(body.busCrossSection()).contains(10.23)
        assertThat(body.busType()).contains("A2100")
        assertThat(body.colaRadius()).contains(10.23)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.crossSection()).contains(10.23)
        assertThat(body.currentMass()).contains(500.0)
        assertThat(body.deltaVUnc()).contains(50.1)
        assertThat(body.depEstMasses().getOrNull()).containsExactly(20.0, 21.0)
        assertThat(body.depMassUncs().getOrNull()).containsExactly(10.0, 5.0)
        assertThat(body.depNames().getOrNull()).containsExactly("GOES-18A", "GOES-18B")
        assertThat(body.driftRate()).contains(1.23)
        assertThat(body.dryMass()).contains(10.23)
        assertThat(body.estDeltaVDuration()).contains(10.23)
        assertThat(body.fuelRemaining()).contains(10.23)
        assertThat(body.geoSlot()).contains(90.23)
        assertThat(body.lastObSource()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.lastObTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(body.launchMass()).contains(10.23)
        assertThat(body.launchMassMax()).contains(15.23)
        assertThat(body.launchMassMin()).contains(5.23)
        assertThat(body.maneuverable()).contains(false)
        assertThat(body.maxDeltaV()).contains(10.23)
        assertThat(body.maxRadius()).contains(10.23)
        assertThat(body.missionTypes().getOrNull()).containsExactly("Weather", "Space Weather")
        assertThat(body.numDeployable()).contains(2)
        assertThat(body.numMission()).contains(2)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.rcs()).contains(10.23)
        assertThat(body.rcsMax()).contains(15.23)
        assertThat(body.rcsMean()).contains(10.23)
        assertThat(body.rcsMin()).contains(5.23)
        assertThat(body.refSource()).contains("Wikipedia")
        assertThat(body.solarArrayArea()).contains(10.23)
        assertThat(body.totalMassUnc()).contains(50.1)
        assertThat(body.vismag()).contains(10.23)
        assertThat(body.vismagMax()).contains(15.23)
        assertThat(body.vismagMean()).contains(10.23)
        assertThat(body.vismagMin()).contains(5.23)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OnorbitdetailCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OnorbitdetailCreateParams.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OnorbitdetailCreateParams.DataMode.TEST)
        assertThat(body.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
