// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.skyimagery

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SkyImageryListResponseTest {

    @Test
    fun create() {
        val skyImageryListResponse =
            SkyImageryListResponse.builder()
                .classificationMarking("U")
                .dataMode(SkyImageryListResponse.DataMode.TEST)
                .expStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .imageType("imageType")
                .source("Bluestaq")
                .id("SKYIMAGERY-ID")
                .annotationKey("annotationKey")
                .calibrationKey("calibrationKey")
                .checksumValue("checksumValue")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("description")
                .expEndTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .filename("filename.jpg")
                .filesize(371945L)
                .frameFovHeight(21.23)
                .frameFovWidth(21.23)
                .frameHeightPixels(1)
                .frameWidthPixels(1)
                .idAttitudeSet("d039ba29-52f4-4839-8a8f-e85fa416aec5")
                .idOnOrbit("44920")
                .idSensor("420")
                .idSoiSet("531093d0-e9b0-475b-687aeeefefd9")
                .imageSetId("imageSetId")
                .imageSetLength(9)
                .imageSourceInfo("imageSourceInfo")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("X15-23452")
                .origSensorId("origSensorId")
                .pixelBitDepth(1)
                .pixelFovHeight(321.123)
                .pixelFovWidth(321.123)
                .satNo(25544)
                .senalt(14.483619321)
                .senlat(-33.283048)
                .senlon(149.372549)
                .senQuat(listOf(0.03, 0.02, 0.01, 0.012))
                .senQuatDot(listOf(0.03, 0.02, 0.01, 0.012))
                .senx(14.52)
                .seny(32.41)
                .senz(376.12)
                .sequenceId(1)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .topLeftStartAz(146.321)
                .topLeftStartEl(146.321)
                .topLeftStopAz(3.7)
                .topLeftStopEl(34.233)
                .transactionId("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
                .build()

        assertThat(skyImageryListResponse.classificationMarking()).isEqualTo("U")
        assertThat(skyImageryListResponse.dataMode())
            .isEqualTo(SkyImageryListResponse.DataMode.TEST)
        assertThat(skyImageryListResponse.expStartTime())
            .isEqualTo(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(skyImageryListResponse.imageType()).isEqualTo("imageType")
        assertThat(skyImageryListResponse.source()).isEqualTo("Bluestaq")
        assertThat(skyImageryListResponse.id()).contains("SKYIMAGERY-ID")
        assertThat(skyImageryListResponse.annotationKey()).contains("annotationKey")
        assertThat(skyImageryListResponse.calibrationKey()).contains("calibrationKey")
        assertThat(skyImageryListResponse.checksumValue()).contains("checksumValue")
        assertThat(skyImageryListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(skyImageryListResponse.createdBy()).contains("some.user")
        assertThat(skyImageryListResponse.description()).contains("description")
        assertThat(skyImageryListResponse.expEndTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(skyImageryListResponse.filename()).contains("filename.jpg")
        assertThat(skyImageryListResponse.filesize()).contains(371945L)
        assertThat(skyImageryListResponse.frameFovHeight()).contains(21.23)
        assertThat(skyImageryListResponse.frameFovWidth()).contains(21.23)
        assertThat(skyImageryListResponse.frameHeightPixels()).contains(1)
        assertThat(skyImageryListResponse.frameWidthPixels()).contains(1)
        assertThat(skyImageryListResponse.idAttitudeSet())
            .contains("d039ba29-52f4-4839-8a8f-e85fa416aec5")
        assertThat(skyImageryListResponse.idOnOrbit()).contains("44920")
        assertThat(skyImageryListResponse.idSensor()).contains("420")
        assertThat(skyImageryListResponse.idSoiSet()).contains("531093d0-e9b0-475b-687aeeefefd9")
        assertThat(skyImageryListResponse.imageSetId()).contains("imageSetId")
        assertThat(skyImageryListResponse.imageSetLength()).contains(9)
        assertThat(skyImageryListResponse.imageSourceInfo()).contains("imageSourceInfo")
        assertThat(skyImageryListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(skyImageryListResponse.origNetwork()).contains("ORIG")
        assertThat(skyImageryListResponse.origObjectId()).contains("X15-23452")
        assertThat(skyImageryListResponse.origSensorId()).contains("origSensorId")
        assertThat(skyImageryListResponse.pixelBitDepth()).contains(1)
        assertThat(skyImageryListResponse.pixelFovHeight()).contains(321.123)
        assertThat(skyImageryListResponse.pixelFovWidth()).contains(321.123)
        assertThat(skyImageryListResponse.satNo()).contains(25544)
        assertThat(skyImageryListResponse.senalt()).contains(14.483619321)
        assertThat(skyImageryListResponse.senlat()).contains(-33.283048)
        assertThat(skyImageryListResponse.senlon()).contains(149.372549)
        assertThat(skyImageryListResponse.senQuat().getOrNull())
            .containsExactly(0.03, 0.02, 0.01, 0.012)
        assertThat(skyImageryListResponse.senQuatDot().getOrNull())
            .containsExactly(0.03, 0.02, 0.01, 0.012)
        assertThat(skyImageryListResponse.senx()).contains(14.52)
        assertThat(skyImageryListResponse.seny()).contains(32.41)
        assertThat(skyImageryListResponse.senz()).contains(376.12)
        assertThat(skyImageryListResponse.sequenceId()).contains(1)
        assertThat(skyImageryListResponse.sourceDl()).contains("AXE")
        assertThat(skyImageryListResponse.tags().getOrNull())
            .containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(skyImageryListResponse.topLeftStartAz()).contains(146.321)
        assertThat(skyImageryListResponse.topLeftStartEl()).contains(146.321)
        assertThat(skyImageryListResponse.topLeftStopAz()).contains(3.7)
        assertThat(skyImageryListResponse.topLeftStopEl()).contains(34.233)
        assertThat(skyImageryListResponse.transactionId())
            .contains("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val skyImageryListResponse =
            SkyImageryListResponse.builder()
                .classificationMarking("U")
                .dataMode(SkyImageryListResponse.DataMode.TEST)
                .expStartTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .imageType("imageType")
                .source("Bluestaq")
                .id("SKYIMAGERY-ID")
                .annotationKey("annotationKey")
                .calibrationKey("calibrationKey")
                .checksumValue("checksumValue")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("description")
                .expEndTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .filename("filename.jpg")
                .filesize(371945L)
                .frameFovHeight(21.23)
                .frameFovWidth(21.23)
                .frameHeightPixels(1)
                .frameWidthPixels(1)
                .idAttitudeSet("d039ba29-52f4-4839-8a8f-e85fa416aec5")
                .idOnOrbit("44920")
                .idSensor("420")
                .idSoiSet("531093d0-e9b0-475b-687aeeefefd9")
                .imageSetId("imageSetId")
                .imageSetLength(9)
                .imageSourceInfo("imageSourceInfo")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("X15-23452")
                .origSensorId("origSensorId")
                .pixelBitDepth(1)
                .pixelFovHeight(321.123)
                .pixelFovWidth(321.123)
                .satNo(25544)
                .senalt(14.483619321)
                .senlat(-33.283048)
                .senlon(149.372549)
                .senQuat(listOf(0.03, 0.02, 0.01, 0.012))
                .senQuatDot(listOf(0.03, 0.02, 0.01, 0.012))
                .senx(14.52)
                .seny(32.41)
                .senz(376.12)
                .sequenceId(1)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .topLeftStartAz(146.321)
                .topLeftStartEl(146.321)
                .topLeftStopAz(3.7)
                .topLeftStopEl(34.233)
                .transactionId("a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a")
                .build()

        val roundtrippedSkyImageryListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(skyImageryListResponse),
                jacksonTypeRef<SkyImageryListResponse>(),
            )

        assertThat(roundtrippedSkyImageryListResponse).isEqualTo(skyImageryListResponse)
    }
}
