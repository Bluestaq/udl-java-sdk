// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.ecpsdr

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EcpsdrCreateParamsTest {

    @Test
    fun create() {
        EcpsdrCreateParams.builder()
            .classificationMarking("U")
            .dataMode(EcpsdrCreateParams.DataMode.TEST)
            .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .source("Bluestaq")
            .type("STANDARD")
            .id("ECPSDR-ID")
            .asl5VCurrMon(12)
            .cdsPlateVMon(12)
            .cdsRefVMon(12)
            .cdsThreshold(12)
            .cdsThrottle(12)
            .checksum(12)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .dosBias(12)
            .dsl5VCurrMon(12)
            .esdTrigCountH(12)
            .esdTrigCountL(12)
            .hiLetL(2)
            .hiLetM(2)
            .idOnOrbit("ONORBIT-ID")
            .idSensor("SENSOR-ID")
            .lowLetL(2)
            .lowLetM(2)
            .medLet1L(2)
            .medLet1M(2)
            .medLet2L(2)
            .medLet2M(2)
            .medLet3L(2)
            .medLet3M(2)
            .medLet4L(2)
            .medLet4M(2)
            .mpTemp(12)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId("ORIGSENSOR-ID")
            .pd1SigLev(12)
            .pd2SigLev(12)
            .psTempMon(12)
            .retransmit(true)
            .satNo(101)
            .senMode("TEST")
            .surfDosChargeH(12)
            .surfDosChargeL(12)
            .surfDosH(12)
            .surfDosL(12)
            .surfDosM(12)
            .surfDosStat(2)
            .transientData(listOf(1, 2, 3))
            .vRef(12)
            .build()
    }

    @Test
    fun body() {
        val params =
            EcpsdrCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EcpsdrCreateParams.DataMode.TEST)
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .type("STANDARD")
                .id("ECPSDR-ID")
                .asl5VCurrMon(12)
                .cdsPlateVMon(12)
                .cdsRefVMon(12)
                .cdsThreshold(12)
                .cdsThrottle(12)
                .checksum(12)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dosBias(12)
                .dsl5VCurrMon(12)
                .esdTrigCountH(12)
                .esdTrigCountL(12)
                .hiLetL(2)
                .hiLetM(2)
                .idOnOrbit("ONORBIT-ID")
                .idSensor("SENSOR-ID")
                .lowLetL(2)
                .lowLetM(2)
                .medLet1L(2)
                .medLet1M(2)
                .medLet2L(2)
                .medLet2M(2)
                .medLet3L(2)
                .medLet3M(2)
                .medLet4L(2)
                .medLet4M(2)
                .mpTemp(12)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .pd1SigLev(12)
                .pd2SigLev(12)
                .psTempMon(12)
                .retransmit(true)
                .satNo(101)
                .senMode("TEST")
                .surfDosChargeH(12)
                .surfDosChargeL(12)
                .surfDosH(12)
                .surfDosL(12)
                .surfDosM(12)
                .surfDosStat(2)
                .transientData(listOf(1, 2, 3))
                .vRef(12)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EcpsdrCreateParams.DataMode.TEST)
        assertThat(body.msgTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("STANDARD")
        assertThat(body.id()).contains("ECPSDR-ID")
        assertThat(body.asl5VCurrMon()).contains(12)
        assertThat(body.cdsPlateVMon()).contains(12)
        assertThat(body.cdsRefVMon()).contains(12)
        assertThat(body.cdsThreshold()).contains(12)
        assertThat(body.cdsThrottle()).contains(12)
        assertThat(body.checksum()).contains(12)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.dosBias()).contains(12)
        assertThat(body.dsl5VCurrMon()).contains(12)
        assertThat(body.esdTrigCountH()).contains(12)
        assertThat(body.esdTrigCountL()).contains(12)
        assertThat(body.hiLetL()).contains(2)
        assertThat(body.hiLetM()).contains(2)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idSensor()).contains("SENSOR-ID")
        assertThat(body.lowLetL()).contains(2)
        assertThat(body.lowLetM()).contains(2)
        assertThat(body.medLet1L()).contains(2)
        assertThat(body.medLet1M()).contains(2)
        assertThat(body.medLet2L()).contains(2)
        assertThat(body.medLet2M()).contains(2)
        assertThat(body.medLet3L()).contains(2)
        assertThat(body.medLet3M()).contains(2)
        assertThat(body.medLet4L()).contains(2)
        assertThat(body.medLet4M()).contains(2)
        assertThat(body.mpTemp()).contains(12)
        assertThat(body.obTime()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.pd1SigLev()).contains(12)
        assertThat(body.pd2SigLev()).contains(12)
        assertThat(body.psTempMon()).contains(12)
        assertThat(body.retransmit()).contains(true)
        assertThat(body.satNo()).contains(101)
        assertThat(body.senMode()).contains("TEST")
        assertThat(body.surfDosChargeH()).contains(12)
        assertThat(body.surfDosChargeL()).contains(12)
        assertThat(body.surfDosH()).contains(12)
        assertThat(body.surfDosL()).contains(12)
        assertThat(body.surfDosM()).contains(12)
        assertThat(body.surfDosStat()).contains(2)
        assertThat(body.transientData().getOrNull()).containsExactly(1, 2, 3)
        assertThat(body.vRef()).contains(12)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EcpsdrCreateParams.builder()
                .classificationMarking("U")
                .dataMode(EcpsdrCreateParams.DataMode.TEST)
                .msgTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .type("STANDARD")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(EcpsdrCreateParams.DataMode.TEST)
        assertThat(body.msgTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("STANDARD")
    }
}
