// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airloadplans

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirloadPlanUpdateParamsTest {

    @Test
    fun create() {
        AirloadPlanUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(AirloadPlanUpdateParams.DataMode.TEST)
            .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
            .source("source")
            .bodyId("0457f578-e29c-312e-85aa-0a04a430bdd0")
            .aclOnboard(500.1)
            .aclReleased(200.1)
            .aircraftMds("C17A")
            .addAirLoadPlanHazmatActual(
                AirloadPlanUpdateParams.AirLoadPlanHazmatActual.builder()
                    .ashc("RFL")
                    .cgc("A")
                    .classDiv("1.1")
                    .hazDescription("CORROSIVE OXIDIZER")
                    .hazmatRemarks("Hazmat remarks")
                    .hazNum("2031")
                    .hazNumType("UN")
                    .hazOffIcao("MBPV")
                    .hazOffItin(300)
                    .hazOnIcao("LIRQ")
                    .hazOnItin(50)
                    .hazPieces(29)
                    .hazTcn("M1358232245912XXX")
                    .hazWeight(22.1)
                    .itemName("NITRIC ACID")
                    .lotNum("1234A")
                    .netExpWt(12.1)
                    .build()
            )
            .addAirLoadPlanHr(
                AirloadPlanUpdateParams.AirLoadPlanHr.builder()
                    .container("Metal")
                    .escort("Jane Doe")
                    .hrEstArrTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                    .hrOffIcao("KDEN")
                    .hrOffItin(200)
                    .hrOnIcao("KCOS")
                    .hrOnItin(100)
                    .hrRemarks("HR remarks")
                    .name("John Doe")
                    .rank("Captain")
                    .recAgency("Agency name")
                    .service("Air Force")
                    .viewable(true)
                    .build()
            )
            .addAirLoadPlanPalletDetail(
                AirloadPlanUpdateParams.AirLoadPlanPalletDetail.builder()
                    .category("AMCMICAP")
                    .pp("2")
                    .ppDescription("Ammunition")
                    .ppOffIcao("MBPV")
                    .ppPieces(3)
                    .ppRemarks("Pallet remarks")
                    .ppTcn("M1358232245912XXX")
                    .ppWeight(100.1)
                    .specialInterest(true)
                    .build()
            )
            .addAirLoadPlanPaxCargo(
                AirloadPlanUpdateParams.AirLoadPlanPaxCargo.builder()
                    .ambPax(5)
                    .attPax(6)
                    .availablePax(20)
                    .bagWeight(2000.1)
                    .civPax(3)
                    .dvPax(2)
                    .fnPax(1)
                    .groupCargoWeight(5000.1)
                    .groupType("OFFTHIS")
                    .litPax(4)
                    .mailWeight(200.1)
                    .numPallet(20)
                    .palletWeight(400.1)
                    .paxWeight(8000.1)
                    .requiredPax(20)
                    .build()
            )
            .addAirLoadPlanUlnActual(
                AirloadPlanUpdateParams.AirLoadPlanUlnActual.builder()
                    .numAmbulatory(10)
                    .numAttendant(10)
                    .numLitter(10)
                    .numPax(44)
                    .offloadId(300)
                    .offloadLoCode("KHOP")
                    .onloadId(200)
                    .onloadLoCode("KCHS")
                    .oplan("5027A")
                    .projName("CENTINTRA21")
                    .uln("T01ME01")
                    .ulnCargoWeight(1000.1)
                    .ulnRemarks("ULN actuals remark")
                    .build()
            )
            .arrAirfield("W99")
            .arrIcao("ETAR")
            .availableTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
            .basicMoment(2500.1)
            .basicWeight(100.1)
            .briefTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
            .callSign("RCH1234")
            .cargoBayFsMax(20.1)
            .cargoBayFsMin(10.1)
            .cargoBayWidth(3.1)
            .cargoConfig("C-1")
            .cargoMoment(2500.1)
            .cargoVolume(50.1)
            .cargoWeight(100.1)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .crewSize(5)
            .depAirfield("W99")
            .depIcao("KCHS")
            .equipConfig("Standard")
            .estArrTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
            .estLandingFuelMoment(2500.1)
            .estLandingFuelWeight(100.1)
            .externalId("dec7a61a-cd97-4af0-b7bc-f4c3bb33341b")
            .fuelMoment(2500.1)
            .fuelWeight(100.1)
            .grossCg(38.8)
            .grossMoment(2500.1)
            .grossWeight(100.1)
            .idMission("412bebb6-a45e-029c-ca51-e29f8a442b12")
            .idSortie("823acfbe6-f36a-157b-ef32-b47c9b589c4")
            .landingCg(38.2)
            .landingMoment(2500.1)
            .landingWeight(100.1)
            .legNum(200)
            .loadmasterName("John Smith")
            .loadmasterRank("Staff Sergeant")
            .loadRemarks("Load remarks")
            .missionNumber("AJM123456123")
            .operatingMoment(2500.1)
            .operatingWeight(100.1)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .ppOnboard(18)
            .ppReleased(5)
            .schedTime(OffsetDateTime.parse("2024-01-01T02:30:00.123Z"))
            .seatsOnboard(20)
            .seatsReleased(15)
            .sourceDl("AXE")
            .tailNumber("77187")
            .tankConfig("ER")
            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .updatedBy("some.user")
            .utilCode("AD")
            .zeroFuelCg(39.5)
            .zeroFuelMoment(2500.1)
            .zeroFuelWeight(100.1)
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            AirloadPlanUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirloadPlanUpdateParams.DataMode.TEST)
                .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .source("source")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            AirloadPlanUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirloadPlanUpdateParams.DataMode.TEST)
                .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .source("source")
                .bodyId("0457f578-e29c-312e-85aa-0a04a430bdd0")
                .aclOnboard(500.1)
                .aclReleased(200.1)
                .aircraftMds("C17A")
                .addAirLoadPlanHazmatActual(
                    AirloadPlanUpdateParams.AirLoadPlanHazmatActual.builder()
                        .ashc("RFL")
                        .cgc("A")
                        .classDiv("1.1")
                        .hazDescription("CORROSIVE OXIDIZER")
                        .hazmatRemarks("Hazmat remarks")
                        .hazNum("2031")
                        .hazNumType("UN")
                        .hazOffIcao("MBPV")
                        .hazOffItin(300)
                        .hazOnIcao("LIRQ")
                        .hazOnItin(50)
                        .hazPieces(29)
                        .hazTcn("M1358232245912XXX")
                        .hazWeight(22.1)
                        .itemName("NITRIC ACID")
                        .lotNum("1234A")
                        .netExpWt(12.1)
                        .build()
                )
                .addAirLoadPlanHr(
                    AirloadPlanUpdateParams.AirLoadPlanHr.builder()
                        .container("Metal")
                        .escort("Jane Doe")
                        .hrEstArrTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                        .hrOffIcao("KDEN")
                        .hrOffItin(200)
                        .hrOnIcao("KCOS")
                        .hrOnItin(100)
                        .hrRemarks("HR remarks")
                        .name("John Doe")
                        .rank("Captain")
                        .recAgency("Agency name")
                        .service("Air Force")
                        .viewable(true)
                        .build()
                )
                .addAirLoadPlanPalletDetail(
                    AirloadPlanUpdateParams.AirLoadPlanPalletDetail.builder()
                        .category("AMCMICAP")
                        .pp("2")
                        .ppDescription("Ammunition")
                        .ppOffIcao("MBPV")
                        .ppPieces(3)
                        .ppRemarks("Pallet remarks")
                        .ppTcn("M1358232245912XXX")
                        .ppWeight(100.1)
                        .specialInterest(true)
                        .build()
                )
                .addAirLoadPlanPaxCargo(
                    AirloadPlanUpdateParams.AirLoadPlanPaxCargo.builder()
                        .ambPax(5)
                        .attPax(6)
                        .availablePax(20)
                        .bagWeight(2000.1)
                        .civPax(3)
                        .dvPax(2)
                        .fnPax(1)
                        .groupCargoWeight(5000.1)
                        .groupType("OFFTHIS")
                        .litPax(4)
                        .mailWeight(200.1)
                        .numPallet(20)
                        .palletWeight(400.1)
                        .paxWeight(8000.1)
                        .requiredPax(20)
                        .build()
                )
                .addAirLoadPlanUlnActual(
                    AirloadPlanUpdateParams.AirLoadPlanUlnActual.builder()
                        .numAmbulatory(10)
                        .numAttendant(10)
                        .numLitter(10)
                        .numPax(44)
                        .offloadId(300)
                        .offloadLoCode("KHOP")
                        .onloadId(200)
                        .onloadLoCode("KCHS")
                        .oplan("5027A")
                        .projName("CENTINTRA21")
                        .uln("T01ME01")
                        .ulnCargoWeight(1000.1)
                        .ulnRemarks("ULN actuals remark")
                        .build()
                )
                .arrAirfield("W99")
                .arrIcao("ETAR")
                .availableTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .basicMoment(2500.1)
                .basicWeight(100.1)
                .briefTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .callSign("RCH1234")
                .cargoBayFsMax(20.1)
                .cargoBayFsMin(10.1)
                .cargoBayWidth(3.1)
                .cargoConfig("C-1")
                .cargoMoment(2500.1)
                .cargoVolume(50.1)
                .cargoWeight(100.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crewSize(5)
                .depAirfield("W99")
                .depIcao("KCHS")
                .equipConfig("Standard")
                .estArrTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .estLandingFuelMoment(2500.1)
                .estLandingFuelWeight(100.1)
                .externalId("dec7a61a-cd97-4af0-b7bc-f4c3bb33341b")
                .fuelMoment(2500.1)
                .fuelWeight(100.1)
                .grossCg(38.8)
                .grossMoment(2500.1)
                .grossWeight(100.1)
                .idMission("412bebb6-a45e-029c-ca51-e29f8a442b12")
                .idSortie("823acfbe6-f36a-157b-ef32-b47c9b589c4")
                .landingCg(38.2)
                .landingMoment(2500.1)
                .landingWeight(100.1)
                .legNum(200)
                .loadmasterName("John Smith")
                .loadmasterRank("Staff Sergeant")
                .loadRemarks("Load remarks")
                .missionNumber("AJM123456123")
                .operatingMoment(2500.1)
                .operatingWeight(100.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ppOnboard(18)
                .ppReleased(5)
                .schedTime(OffsetDateTime.parse("2024-01-01T02:30:00.123Z"))
                .seatsOnboard(20)
                .seatsReleased(15)
                .sourceDl("AXE")
                .tailNumber("77187")
                .tankConfig("ER")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utilCode("AD")
                .zeroFuelCg(39.5)
                .zeroFuelMoment(2500.1)
                .zeroFuelWeight(100.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AirloadPlanUpdateParams.DataMode.TEST)
        assertThat(body.estDepTime()).isEqualTo(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
        assertThat(body.source()).isEqualTo("source")
        assertThat(body.bodyId()).contains("0457f578-e29c-312e-85aa-0a04a430bdd0")
        assertThat(body.aclOnboard()).contains(500.1)
        assertThat(body.aclReleased()).contains(200.1)
        assertThat(body.aircraftMds()).contains("C17A")
        assertThat(body.airLoadPlanHazmatActuals().getOrNull())
            .containsExactly(
                AirloadPlanUpdateParams.AirLoadPlanHazmatActual.builder()
                    .ashc("RFL")
                    .cgc("A")
                    .classDiv("1.1")
                    .hazDescription("CORROSIVE OXIDIZER")
                    .hazmatRemarks("Hazmat remarks")
                    .hazNum("2031")
                    .hazNumType("UN")
                    .hazOffIcao("MBPV")
                    .hazOffItin(300)
                    .hazOnIcao("LIRQ")
                    .hazOnItin(50)
                    .hazPieces(29)
                    .hazTcn("M1358232245912XXX")
                    .hazWeight(22.1)
                    .itemName("NITRIC ACID")
                    .lotNum("1234A")
                    .netExpWt(12.1)
                    .build()
            )
        assertThat(body.airLoadPlanHr().getOrNull())
            .containsExactly(
                AirloadPlanUpdateParams.AirLoadPlanHr.builder()
                    .container("Metal")
                    .escort("Jane Doe")
                    .hrEstArrTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                    .hrOffIcao("KDEN")
                    .hrOffItin(200)
                    .hrOnIcao("KCOS")
                    .hrOnItin(100)
                    .hrRemarks("HR remarks")
                    .name("John Doe")
                    .rank("Captain")
                    .recAgency("Agency name")
                    .service("Air Force")
                    .viewable(true)
                    .build()
            )
        assertThat(body.airLoadPlanPalletDetails().getOrNull())
            .containsExactly(
                AirloadPlanUpdateParams.AirLoadPlanPalletDetail.builder()
                    .category("AMCMICAP")
                    .pp("2")
                    .ppDescription("Ammunition")
                    .ppOffIcao("MBPV")
                    .ppPieces(3)
                    .ppRemarks("Pallet remarks")
                    .ppTcn("M1358232245912XXX")
                    .ppWeight(100.1)
                    .specialInterest(true)
                    .build()
            )
        assertThat(body.airLoadPlanPaxCargo().getOrNull())
            .containsExactly(
                AirloadPlanUpdateParams.AirLoadPlanPaxCargo.builder()
                    .ambPax(5)
                    .attPax(6)
                    .availablePax(20)
                    .bagWeight(2000.1)
                    .civPax(3)
                    .dvPax(2)
                    .fnPax(1)
                    .groupCargoWeight(5000.1)
                    .groupType("OFFTHIS")
                    .litPax(4)
                    .mailWeight(200.1)
                    .numPallet(20)
                    .palletWeight(400.1)
                    .paxWeight(8000.1)
                    .requiredPax(20)
                    .build()
            )
        assertThat(body.airLoadPlanUlnActuals().getOrNull())
            .containsExactly(
                AirloadPlanUpdateParams.AirLoadPlanUlnActual.builder()
                    .numAmbulatory(10)
                    .numAttendant(10)
                    .numLitter(10)
                    .numPax(44)
                    .offloadId(300)
                    .offloadLoCode("KHOP")
                    .onloadId(200)
                    .onloadLoCode("KCHS")
                    .oplan("5027A")
                    .projName("CENTINTRA21")
                    .uln("T01ME01")
                    .ulnCargoWeight(1000.1)
                    .ulnRemarks("ULN actuals remark")
                    .build()
            )
        assertThat(body.arrAirfield()).contains("W99")
        assertThat(body.arrIcao()).contains("ETAR")
        assertThat(body.availableTime()).contains(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
        assertThat(body.basicMoment()).contains(2500.1)
        assertThat(body.basicWeight()).contains(100.1)
        assertThat(body.briefTime()).contains(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
        assertThat(body.callSign()).contains("RCH1234")
        assertThat(body.cargoBayFsMax()).contains(20.1)
        assertThat(body.cargoBayFsMin()).contains(10.1)
        assertThat(body.cargoBayWidth()).contains(3.1)
        assertThat(body.cargoConfig()).contains("C-1")
        assertThat(body.cargoMoment()).contains(2500.1)
        assertThat(body.cargoVolume()).contains(50.1)
        assertThat(body.cargoWeight()).contains(100.1)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.crewSize()).contains(5)
        assertThat(body.depAirfield()).contains("W99")
        assertThat(body.depIcao()).contains("KCHS")
        assertThat(body.equipConfig()).contains("Standard")
        assertThat(body.estArrTime()).contains(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
        assertThat(body.estLandingFuelMoment()).contains(2500.1)
        assertThat(body.estLandingFuelWeight()).contains(100.1)
        assertThat(body.externalId()).contains("dec7a61a-cd97-4af0-b7bc-f4c3bb33341b")
        assertThat(body.fuelMoment()).contains(2500.1)
        assertThat(body.fuelWeight()).contains(100.1)
        assertThat(body.grossCg()).contains(38.8)
        assertThat(body.grossMoment()).contains(2500.1)
        assertThat(body.grossWeight()).contains(100.1)
        assertThat(body.idMission()).contains("412bebb6-a45e-029c-ca51-e29f8a442b12")
        assertThat(body.idSortie()).contains("823acfbe6-f36a-157b-ef32-b47c9b589c4")
        assertThat(body.landingCg()).contains(38.2)
        assertThat(body.landingMoment()).contains(2500.1)
        assertThat(body.landingWeight()).contains(100.1)
        assertThat(body.legNum()).contains(200)
        assertThat(body.loadmasterName()).contains("John Smith")
        assertThat(body.loadmasterRank()).contains("Staff Sergeant")
        assertThat(body.loadRemarks()).contains("Load remarks")
        assertThat(body.missionNumber()).contains("AJM123456123")
        assertThat(body.operatingMoment()).contains(2500.1)
        assertThat(body.operatingWeight()).contains(100.1)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.ppOnboard()).contains(18)
        assertThat(body.ppReleased()).contains(5)
        assertThat(body.schedTime()).contains(OffsetDateTime.parse("2024-01-01T02:30:00.123Z"))
        assertThat(body.seatsOnboard()).contains(20)
        assertThat(body.seatsReleased()).contains(15)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tailNumber()).contains("77187")
        assertThat(body.tankConfig()).contains("ER")
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
        assertThat(body.utilCode()).contains("AD")
        assertThat(body.zeroFuelCg()).contains(39.5)
        assertThat(body.zeroFuelMoment()).contains(2500.1)
        assertThat(body.zeroFuelWeight()).contains(100.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            AirloadPlanUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirloadPlanUpdateParams.DataMode.TEST)
                .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .source("source")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(AirloadPlanUpdateParams.DataMode.TEST)
        assertThat(body.estDepTime()).isEqualTo(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
        assertThat(body.source()).isEqualTo("source")
    }
}
