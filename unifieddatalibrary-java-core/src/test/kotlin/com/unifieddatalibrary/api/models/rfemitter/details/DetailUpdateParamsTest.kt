// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.rfemitter.details

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DetailUpdateParamsTest {

    @Test
    fun create() {
        DetailUpdateParams.builder()
            .pathId("id")
            .classificationMarking("U")
            .dataMode(DetailUpdateParams.DataMode.TEST)
            .idRfEmitter("RFEMITTER-ID")
            .source("Bluestaq")
            .bodyId("ad88770b-d824-443f-bdce-5f9e3fa500a9")
            .alternateFacilityName("ALTERNATE_FACILITY_NAME")
            .altName("ALTERNATE_NAME")
            .amplifier(
                DetailUpdateParams.Amplifier.builder()
                    .deviceIdentifier("1200W_Amplifier_GE")
                    .manufacturer("General Electric")
                    .modelName("Model 2600")
                    .power(1200.1)
                    .build()
            )
            .addAntenna(
                DetailUpdateParams.Antenna.builder()
                    .antennaDiameter(20.23)
                    .addAntennaSize(1.1)
                    .addAntennaSize(2.2)
                    .azElFixed(true)
                    .addFeed(
                        DetailUpdateParams.Antenna.Feed.builder()
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .name("Feed A")
                            .polarization("HORIZONTAL")
                            .build()
                    )
                    .fixedAzimuth(5.1)
                    .fixedElevation(10.1)
                    .addMaxAzimuth(359.1)
                    .addMaxAzimuth(359.1)
                    .maxElevation(88.1)
                    .addMinAzimuth(5.1)
                    .addMinAzimuth(7.5)
                    .minElevation(10.1)
                    .name("ds1Rotor")
                    .addReceiverChannel(
                        DetailUpdateParams.Antenna.ReceiverChannel.builder()
                            .bandwidth(0.51)
                            .channelNum("315")
                            .deviceIdentifier("MMS1")
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .maxBandwidth(100.1)
                            .minBandwidth(0.05)
                            .sensitivity(10.23)
                            .build()
                    )
                    .addTransmitChannel(
                        DetailUpdateParams.Antenna.TransmitChannel.builder()
                            .power(100.23)
                            .bandwidth(0.125)
                            .channelNum("12")
                            .deviceIdentifier("TX1-B4-778")
                            .freq(42000.1)
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .hardwareSampleRate(192000)
                            .maxBandwidth(100.1)
                            .maxGain(20.1)
                            .minBandwidth(0.05)
                            .minGain(0.1)
                            .addSampleRate(192000.0)
                            .addSampleRate(9216000.0)
                            .build()
                    )
                    .build()
            )
            .barrageNoiseBandwidth(5.23)
            .bitRunTime(120.1)
            .createdAt(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
            .createdBy("some.user")
            .description("DESCRIPTION")
            .designator("DESIGNATOR")
            .dopplerNoise(10.23)
            .drfmInstantaneousBandwidth(20.23)
            .family("FAMILY")
            .fixedAttenuation(5.1)
            .idManufacturerOrg("MANUFACTURERORG-ID")
            .idProductionFacilityLocation("PRODUCTIONFACILITYLOCATION-ID")
            .loanedToCocom("SPACEFOR-STRATNORTH")
            .notes("NOTES")
            .numBits(256)
            .numChannels(10)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .addPowerOffset(
                DetailUpdateParams.PowerOffset.builder()
                    .frequencyBand("KU")
                    .powerOffset(-5.1)
                    .build()
            )
            .prepTime(60.1)
            .primaryCocom("SPACESOC")
            .productionFacilityName("PRODUCTION_FACILITY")
            .receiverType("RECEIVER_TYPE")
            .secondaryNotes("MORE_NOTES")
            .addService(
                DetailUpdateParams.Service.builder()
                    .name("tlc-freqcontrol")
                    .version("17.2.5_build72199")
                    .build()
            )
            .systemSensitivityEnd(150.23)
            .systemSensitivityStart(50.32)
            .addTtp(
                DetailUpdateParams.Ttp.builder()
                    .outputSignalName("SIGNAL_A")
                    .addTechniqueDefinition(
                        DetailUpdateParams.Ttp.TechniqueDefinition.builder()
                            .name("SIGNAL TUNE")
                            .addParamDefinition(
                                DetailUpdateParams.Ttp.TechniqueDefinition.ParamDefinition.builder()
                                    .defaultValue("444.0")
                                    .max(1000.1)
                                    .min(0.1)
                                    .name("CENTER_FREQ")
                                    .optional(false)
                                    .type("DOUBLE")
                                    .units("hertz")
                                    .validValues(listOf("100.1", "444.1", "1000.1"))
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
            .updatedAt(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
            .updatedBy("some.user")
            .addUrl("TAG1")
            .addUrl("TAG2")
            .build()
    }

    @Test
    fun pathParams() {
        val params =
            DetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(DetailUpdateParams.DataMode.TEST)
                .idRfEmitter("RFEMITTER-ID")
                .source("Bluestaq")
                .build()

        assertThat(params._pathParam(0)).isEqualTo("id")
        // out-of-bound path param
        assertThat(params._pathParam(1)).isEqualTo("")
    }

    @Test
    fun body() {
        val params =
            DetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(DetailUpdateParams.DataMode.TEST)
                .idRfEmitter("RFEMITTER-ID")
                .source("Bluestaq")
                .bodyId("ad88770b-d824-443f-bdce-5f9e3fa500a9")
                .alternateFacilityName("ALTERNATE_FACILITY_NAME")
                .altName("ALTERNATE_NAME")
                .amplifier(
                    DetailUpdateParams.Amplifier.builder()
                        .deviceIdentifier("1200W_Amplifier_GE")
                        .manufacturer("General Electric")
                        .modelName("Model 2600")
                        .power(1200.1)
                        .build()
                )
                .addAntenna(
                    DetailUpdateParams.Antenna.builder()
                        .antennaDiameter(20.23)
                        .addAntennaSize(1.1)
                        .addAntennaSize(2.2)
                        .azElFixed(true)
                        .addFeed(
                            DetailUpdateParams.Antenna.Feed.builder()
                                .freqMax(43500.1)
                                .freqMin(39500.1)
                                .name("Feed A")
                                .polarization("HORIZONTAL")
                                .build()
                        )
                        .fixedAzimuth(5.1)
                        .fixedElevation(10.1)
                        .addMaxAzimuth(359.1)
                        .addMaxAzimuth(359.1)
                        .maxElevation(88.1)
                        .addMinAzimuth(5.1)
                        .addMinAzimuth(7.5)
                        .minElevation(10.1)
                        .name("ds1Rotor")
                        .addReceiverChannel(
                            DetailUpdateParams.Antenna.ReceiverChannel.builder()
                                .bandwidth(0.51)
                                .channelNum("315")
                                .deviceIdentifier("MMS1")
                                .freqMax(43500.1)
                                .freqMin(39500.1)
                                .maxBandwidth(100.1)
                                .minBandwidth(0.05)
                                .sensitivity(10.23)
                                .build()
                        )
                        .addTransmitChannel(
                            DetailUpdateParams.Antenna.TransmitChannel.builder()
                                .power(100.23)
                                .bandwidth(0.125)
                                .channelNum("12")
                                .deviceIdentifier("TX1-B4-778")
                                .freq(42000.1)
                                .freqMax(43500.1)
                                .freqMin(39500.1)
                                .hardwareSampleRate(192000)
                                .maxBandwidth(100.1)
                                .maxGain(20.1)
                                .minBandwidth(0.05)
                                .minGain(0.1)
                                .addSampleRate(192000.0)
                                .addSampleRate(9216000.0)
                                .build()
                        )
                        .build()
                )
                .barrageNoiseBandwidth(5.23)
                .bitRunTime(120.1)
                .createdAt(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
                .createdBy("some.user")
                .description("DESCRIPTION")
                .designator("DESIGNATOR")
                .dopplerNoise(10.23)
                .drfmInstantaneousBandwidth(20.23)
                .family("FAMILY")
                .fixedAttenuation(5.1)
                .idManufacturerOrg("MANUFACTURERORG-ID")
                .idProductionFacilityLocation("PRODUCTIONFACILITYLOCATION-ID")
                .loanedToCocom("SPACEFOR-STRATNORTH")
                .notes("NOTES")
                .numBits(256)
                .numChannels(10)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .addPowerOffset(
                    DetailUpdateParams.PowerOffset.builder()
                        .frequencyBand("KU")
                        .powerOffset(-5.1)
                        .build()
                )
                .prepTime(60.1)
                .primaryCocom("SPACESOC")
                .productionFacilityName("PRODUCTION_FACILITY")
                .receiverType("RECEIVER_TYPE")
                .secondaryNotes("MORE_NOTES")
                .addService(
                    DetailUpdateParams.Service.builder()
                        .name("tlc-freqcontrol")
                        .version("17.2.5_build72199")
                        .build()
                )
                .systemSensitivityEnd(150.23)
                .systemSensitivityStart(50.32)
                .addTtp(
                    DetailUpdateParams.Ttp.builder()
                        .outputSignalName("SIGNAL_A")
                        .addTechniqueDefinition(
                            DetailUpdateParams.Ttp.TechniqueDefinition.builder()
                                .name("SIGNAL TUNE")
                                .addParamDefinition(
                                    DetailUpdateParams.Ttp.TechniqueDefinition.ParamDefinition
                                        .builder()
                                        .defaultValue("444.0")
                                        .max(1000.1)
                                        .min(0.1)
                                        .name("CENTER_FREQ")
                                        .optional(false)
                                        .type("DOUBLE")
                                        .units("hertz")
                                        .validValues(listOf("100.1", "444.1", "1000.1"))
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .updatedAt(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
                .updatedBy("some.user")
                .addUrl("TAG1")
                .addUrl("TAG2")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(DetailUpdateParams.DataMode.TEST)
        assertThat(body.idRfEmitter()).isEqualTo("RFEMITTER-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.bodyId()).contains("ad88770b-d824-443f-bdce-5f9e3fa500a9")
        assertThat(body.alternateFacilityName()).contains("ALTERNATE_FACILITY_NAME")
        assertThat(body.altName()).contains("ALTERNATE_NAME")
        assertThat(body.amplifier())
            .contains(
                DetailUpdateParams.Amplifier.builder()
                    .deviceIdentifier("1200W_Amplifier_GE")
                    .manufacturer("General Electric")
                    .modelName("Model 2600")
                    .power(1200.1)
                    .build()
            )
        assertThat(body.antennas().getOrNull())
            .containsExactly(
                DetailUpdateParams.Antenna.builder()
                    .antennaDiameter(20.23)
                    .addAntennaSize(1.1)
                    .addAntennaSize(2.2)
                    .azElFixed(true)
                    .addFeed(
                        DetailUpdateParams.Antenna.Feed.builder()
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .name("Feed A")
                            .polarization("HORIZONTAL")
                            .build()
                    )
                    .fixedAzimuth(5.1)
                    .fixedElevation(10.1)
                    .addMaxAzimuth(359.1)
                    .addMaxAzimuth(359.1)
                    .maxElevation(88.1)
                    .addMinAzimuth(5.1)
                    .addMinAzimuth(7.5)
                    .minElevation(10.1)
                    .name("ds1Rotor")
                    .addReceiverChannel(
                        DetailUpdateParams.Antenna.ReceiverChannel.builder()
                            .bandwidth(0.51)
                            .channelNum("315")
                            .deviceIdentifier("MMS1")
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .maxBandwidth(100.1)
                            .minBandwidth(0.05)
                            .sensitivity(10.23)
                            .build()
                    )
                    .addTransmitChannel(
                        DetailUpdateParams.Antenna.TransmitChannel.builder()
                            .power(100.23)
                            .bandwidth(0.125)
                            .channelNum("12")
                            .deviceIdentifier("TX1-B4-778")
                            .freq(42000.1)
                            .freqMax(43500.1)
                            .freqMin(39500.1)
                            .hardwareSampleRate(192000)
                            .maxBandwidth(100.1)
                            .maxGain(20.1)
                            .minBandwidth(0.05)
                            .minGain(0.1)
                            .addSampleRate(192000.0)
                            .addSampleRate(9216000.0)
                            .build()
                    )
                    .build()
            )
        assertThat(body.barrageNoiseBandwidth()).contains(5.23)
        assertThat(body.bitRunTime()).contains(120.1)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.description()).contains("DESCRIPTION")
        assertThat(body.designator()).contains("DESIGNATOR")
        assertThat(body.dopplerNoise()).contains(10.23)
        assertThat(body.drfmInstantaneousBandwidth()).contains(20.23)
        assertThat(body.family()).contains("FAMILY")
        assertThat(body.fixedAttenuation()).contains(5.1)
        assertThat(body.idManufacturerOrg()).contains("MANUFACTURERORG-ID")
        assertThat(body.idProductionFacilityLocation()).contains("PRODUCTIONFACILITYLOCATION-ID")
        assertThat(body.loanedToCocom()).contains("SPACEFOR-STRATNORTH")
        assertThat(body.notes()).contains("NOTES")
        assertThat(body.numBits()).contains(256)
        assertThat(body.numChannels()).contains(10)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.powerOffsets().getOrNull())
            .containsExactly(
                DetailUpdateParams.PowerOffset.builder()
                    .frequencyBand("KU")
                    .powerOffset(-5.1)
                    .build()
            )
        assertThat(body.prepTime()).contains(60.1)
        assertThat(body.primaryCocom()).contains("SPACESOC")
        assertThat(body.productionFacilityName()).contains("PRODUCTION_FACILITY")
        assertThat(body.receiverType()).contains("RECEIVER_TYPE")
        assertThat(body.secondaryNotes()).contains("MORE_NOTES")
        assertThat(body.services().getOrNull())
            .containsExactly(
                DetailUpdateParams.Service.builder()
                    .name("tlc-freqcontrol")
                    .version("17.2.5_build72199")
                    .build()
            )
        assertThat(body.systemSensitivityEnd()).contains(150.23)
        assertThat(body.systemSensitivityStart()).contains(50.32)
        assertThat(body.ttps().getOrNull())
            .containsExactly(
                DetailUpdateParams.Ttp.builder()
                    .outputSignalName("SIGNAL_A")
                    .addTechniqueDefinition(
                        DetailUpdateParams.Ttp.TechniqueDefinition.builder()
                            .name("SIGNAL TUNE")
                            .addParamDefinition(
                                DetailUpdateParams.Ttp.TechniqueDefinition.ParamDefinition.builder()
                                    .defaultValue("444.0")
                                    .max(1000.1)
                                    .min(0.1)
                                    .name("CENTER_FREQ")
                                    .optional(false)
                                    .type("DOUBLE")
                                    .units("hertz")
                                    .validValues(listOf("100.1", "444.1", "1000.1"))
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
        assertThat(body.updatedAt()).contains(OffsetDateTime.parse("2025-03-05T16:00:00.123Z"))
        assertThat(body.updatedBy()).contains("some.user")
        assertThat(body.urls().getOrNull()).containsExactly("TAG1", "TAG2")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            DetailUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(DetailUpdateParams.DataMode.TEST)
                .idRfEmitter("RFEMITTER-ID")
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(DetailUpdateParams.DataMode.TEST)
        assertThat(body.idRfEmitter()).isEqualTo("RFEMITTER-ID")
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
