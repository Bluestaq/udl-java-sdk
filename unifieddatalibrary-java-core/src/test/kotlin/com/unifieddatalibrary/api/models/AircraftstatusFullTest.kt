// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AircraftstatusFullTest {

    @Test
    fun create() {
        val aircraftstatusFull =
            AircraftstatusFull.builder()
                .classificationMarking("U")
                .dataMode(AircraftstatusFull.DataMode.TEST)
                .idAircraft("29232269-e4c2-45c9-aa21-039a33209340")
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .additionalSys(listOf("ATOMS", "TUDL", "BLOS1"))
                .airToAirStatus(AircraftstatusFull.AirToAirStatus.OPERATIONAL)
                .airToGroundStatus(AircraftstatusFull.AirToGroundStatus.OPERATIONAL)
                .alphaStatusCode("A2")
                .altAircraftId("ORIG-AIRCRAFT-ID")
                .contaminationStatus("CLEAR")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentIcao("KCHS")
                .currentState("AVAILABLE")
                .earliestTaEndTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .etic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .flightPhase("Landing")
                .fuel(10)
                .fuelFunction("Burn")
                .fuelStatus("DELIVERED")
                .geoLoc("AJJY")
                .groundStatus("ALERT")
                .gunCapable(true)
                .gunRdsMax(550)
                .gunRdsMin(150)
                .gunRdsType("7.62 MM")
                .idAirfield("b89430e3-97d9-408c-9c89-fd3840c4b84d")
                .idPoi("0e52f081-a2e3-4b73-b822-88b882232691")
                .addInventory("AIM-9 SIDEWINDER")
                .addInventory("AIM-120 AMRAAM")
                .addInventoryMax(2)
                .addInventoryMax(2)
                .addInventoryMin(1)
                .addInventoryMin(2)
                .lastInspectionDate(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
                .lastUpdatedBy("some.user")
                .maintPoc("PSUP NIGHT SHIFT 800-555-4412")
                .maintPriority("1")
                .maintStatus("maintenance status")
                .maintStatusDriver("SCREW STUCK IN LEFT NLG TIRE")
                .maintStatusUpdate(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .missionReadiness("ABLE")
                .mxRemark("COM2 INOP")
                .nextIcao("PHNL")
                .notes("Some notes for aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .parkLocation("B1")
                .parkLocationSystem("GDSS")
                .previousIcao("EGLL")
                .sourceDl("AXE")
                .taStartTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .troubleshootEtic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .addUnavailableSy("CMDS")
                .addUnavailableSy("AOC")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(aircraftstatusFull.classificationMarking()).isEqualTo("U")
        assertThat(aircraftstatusFull.dataMode()).isEqualTo(AircraftstatusFull.DataMode.TEST)
        assertThat(aircraftstatusFull.idAircraft())
            .isEqualTo("29232269-e4c2-45c9-aa21-039a33209340")
        assertThat(aircraftstatusFull.source()).isEqualTo("Bluestaq")
        assertThat(aircraftstatusFull.id()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(aircraftstatusFull.additionalSys().getOrNull())
            .containsExactly("ATOMS", "TUDL", "BLOS1")
        assertThat(aircraftstatusFull.airToAirStatus())
            .contains(AircraftstatusFull.AirToAirStatus.OPERATIONAL)
        assertThat(aircraftstatusFull.airToGroundStatus())
            .contains(AircraftstatusFull.AirToGroundStatus.OPERATIONAL)
        assertThat(aircraftstatusFull.alphaStatusCode()).contains("A2")
        assertThat(aircraftstatusFull.altAircraftId()).contains("ORIG-AIRCRAFT-ID")
        assertThat(aircraftstatusFull.contaminationStatus()).contains("CLEAR")
        assertThat(aircraftstatusFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.createdBy()).contains("some.user")
        assertThat(aircraftstatusFull.currentIcao()).contains("KCHS")
        assertThat(aircraftstatusFull.currentState()).contains("AVAILABLE")
        assertThat(aircraftstatusFull.earliestTaEndTime())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.etic())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.flightPhase()).contains("Landing")
        assertThat(aircraftstatusFull.fuel()).contains(10)
        assertThat(aircraftstatusFull.fuelFunction()).contains("Burn")
        assertThat(aircraftstatusFull.fuelStatus()).contains("DELIVERED")
        assertThat(aircraftstatusFull.geoLoc()).contains("AJJY")
        assertThat(aircraftstatusFull.groundStatus()).contains("ALERT")
        assertThat(aircraftstatusFull.gunCapable()).contains(true)
        assertThat(aircraftstatusFull.gunRdsMax()).contains(550)
        assertThat(aircraftstatusFull.gunRdsMin()).contains(150)
        assertThat(aircraftstatusFull.gunRdsType()).contains("7.62 MM")
        assertThat(aircraftstatusFull.idAirfield()).contains("b89430e3-97d9-408c-9c89-fd3840c4b84d")
        assertThat(aircraftstatusFull.idPoi()).contains("0e52f081-a2e3-4b73-b822-88b882232691")
        assertThat(aircraftstatusFull.inventory().getOrNull())
            .containsExactly("AIM-9 SIDEWINDER", "AIM-120 AMRAAM")
        assertThat(aircraftstatusFull.inventoryMax().getOrNull()).containsExactly(2, 2)
        assertThat(aircraftstatusFull.inventoryMin().getOrNull()).containsExactly(1, 2)
        assertThat(aircraftstatusFull.lastInspectionDate())
            .contains(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
        assertThat(aircraftstatusFull.lastUpdatedBy()).contains("some.user")
        assertThat(aircraftstatusFull.maintPoc()).contains("PSUP NIGHT SHIFT 800-555-4412")
        assertThat(aircraftstatusFull.maintPriority()).contains("1")
        assertThat(aircraftstatusFull.maintStatus()).contains("maintenance status")
        assertThat(aircraftstatusFull.maintStatusDriver()).contains("SCREW STUCK IN LEFT NLG TIRE")
        assertThat(aircraftstatusFull.maintStatusUpdate())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.missionReadiness()).contains("ABLE")
        assertThat(aircraftstatusFull.mxRemark()).contains("COM2 INOP")
        assertThat(aircraftstatusFull.nextIcao()).contains("PHNL")
        assertThat(aircraftstatusFull.notes()).contains("Some notes for aircraft A")
        assertThat(aircraftstatusFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(aircraftstatusFull.origNetwork()).contains("OPS1")
        assertThat(aircraftstatusFull.parkLocation()).contains("B1")
        assertThat(aircraftstatusFull.parkLocationSystem()).contains("GDSS")
        assertThat(aircraftstatusFull.previousIcao()).contains("EGLL")
        assertThat(aircraftstatusFull.sourceDl()).contains("AXE")
        assertThat(aircraftstatusFull.taStartTime())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.troubleshootEtic())
            .contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.unavailableSys().getOrNull()).containsExactly("CMDS", "AOC")
        assertThat(aircraftstatusFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(aircraftstatusFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val aircraftstatusFull =
            AircraftstatusFull.builder()
                .classificationMarking("U")
                .dataMode(AircraftstatusFull.DataMode.TEST)
                .idAircraft("29232269-e4c2-45c9-aa21-039a33209340")
                .source("Bluestaq")
                .id("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .additionalSys(listOf("ATOMS", "TUDL", "BLOS1"))
                .airToAirStatus(AircraftstatusFull.AirToAirStatus.OPERATIONAL)
                .airToGroundStatus(AircraftstatusFull.AirToGroundStatus.OPERATIONAL)
                .alphaStatusCode("A2")
                .altAircraftId("ORIG-AIRCRAFT-ID")
                .contaminationStatus("CLEAR")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .currentIcao("KCHS")
                .currentState("AVAILABLE")
                .earliestTaEndTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .etic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .flightPhase("Landing")
                .fuel(10)
                .fuelFunction("Burn")
                .fuelStatus("DELIVERED")
                .geoLoc("AJJY")
                .groundStatus("ALERT")
                .gunCapable(true)
                .gunRdsMax(550)
                .gunRdsMin(150)
                .gunRdsType("7.62 MM")
                .idAirfield("b89430e3-97d9-408c-9c89-fd3840c4b84d")
                .idPoi("0e52f081-a2e3-4b73-b822-88b882232691")
                .addInventory("AIM-9 SIDEWINDER")
                .addInventory("AIM-120 AMRAAM")
                .addInventoryMax(2)
                .addInventoryMax(2)
                .addInventoryMin(1)
                .addInventoryMin(2)
                .lastInspectionDate(OffsetDateTime.parse("2024-09-09T16:00:00.123Z"))
                .lastUpdatedBy("some.user")
                .maintPoc("PSUP NIGHT SHIFT 800-555-4412")
                .maintPriority("1")
                .maintStatus("maintenance status")
                .maintStatusDriver("SCREW STUCK IN LEFT NLG TIRE")
                .maintStatusUpdate(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .missionReadiness("ABLE")
                .mxRemark("COM2 INOP")
                .nextIcao("PHNL")
                .notes("Some notes for aircraft A")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .parkLocation("B1")
                .parkLocationSystem("GDSS")
                .previousIcao("EGLL")
                .sourceDl("AXE")
                .taStartTime(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .troubleshootEtic(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
                .addUnavailableSy("CMDS")
                .addUnavailableSy("AOC")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedAircraftstatusFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(aircraftstatusFull),
                jacksonTypeRef<AircraftstatusFull>(),
            )

        assertThat(roundtrippedAircraftstatusFull).isEqualTo(aircraftstatusFull)
    }
}
