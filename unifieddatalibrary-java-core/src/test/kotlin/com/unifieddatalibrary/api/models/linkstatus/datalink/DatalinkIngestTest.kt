// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.linkstatus.datalink

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.linkstatus.datalink.DatalinkIngest
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DatalinkIngestTest {

    @Test
    fun create() {
      val datalinkIngest = DatalinkIngest.builder()
          .classificationMarking("U")
          .dataMode(DatalinkIngest.DataMode.TEST)
          .opExName("DESERT WIND")
          .originator("USCENTCOM")
          .source("Bluestaq")
          .startTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .addAckInstUnit("AOC EXT 2345")
          .addAckInstUnit("317 AW")
          .ackReq(true)
          .altDiff(20)
          .canxId("ABSTAT")
          .canxOriginator("505 AOC")
          .canxSerialNum("ABC1234567")
          .addCanxSiC("RDU")
          .addCanxSiC("X234BS")
          .canxSpecialNotation("PASEP")
          .canxTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .addClassReason("15C")
          .addClassReason("15D")
          .classSource("USJFCOM EXORD SOLID WASTE 98")
          .consecDecorr(3)
          .courseDiff(60)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addDecExemptCode("X1")
          .addDecExemptCode("X2")
          .addDecInstDate("AT EXERCISE ENDEX")
          .addDecInstDate("DATE:25NOV1997")
          .decorrWinMult(1.7)
          .geoDatum("EUR-T")
          .jreCallSign("CHARLIE ONE")
          .jreDetails("JRE details")
          .jrePriAdd(71777)
          .jreSecAdd(77771)
          .jreUnitDes("CVN-72")
          .maxGeoPosQual(12)
          .maxTrackQual(12)
          .mgmtCode("VICTOR")
          .mgmtCodeMeaning("ORBIT AT POINT BRAVO")
          .minGeoPosQual(3)
          .minTrackQual(6)
          .month("OCT")
          .addMultiDuty(DatalinkIngest.MultiDuty.builder()
              .duty("SICO")
              .addDutyTeleFreqNum("TEL:804-555-4142")
              .addDutyTeleFreqNum("TEL:804-867-5309")
              .addMultiDutyVoiceCoord(DatalinkIngest.MultiDuty.MultiDutyVoiceCoord.builder()
                  .multiCommPri("P")
                  .multiFreqDes("ST300A")
                  .addMultiTeleFreqNum("TEL:804-555-4142")
                  .addMultiTeleFreqNum("TEL:804-867-5309")
                  .multiVoiceNetDes("VPN")
                  .build())
              .name("POPOVICH")
              .rank("LCDR")
              .unitDes("SHIP:STENNIS")
              .build())
          .addNonLinkUnitDe("CS:GRAY GHOST")
          .addNonLinkUnitDe("CS:WHITE WHALE")
          .opExInfo("CONTROL")
          .opExInfoAlt("ORANGE")
          .addOp(DatalinkIngest.Op.builder()
              .linkDetails("Link details")
              .linkName("Link-16")
              .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
              .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
              .linkStopTimeMod("AFTER")
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .planOrigNum("SACEUR 106")
          .pocCallSign("4077 MASH")
          .pocLat(45.23)
          .pocLocName("CAMP SWAMPY")
          .pocLon(179.1)
          .pocName("F. BURNS")
          .addPocNum("TEL:804-555-4142")
          .addPocNum("TEL:804-867-5309")
          .pocRank("MAJ")
          .qualifier("CHG")
          .qualSn(1)
          .rawFileUri("Example URI")
          .addReference(DatalinkIngest.Reference.builder()
              .refOriginator("CENTCOM")
              .refSerialId("A")
              .refSerialNum("1402001")
              .addRefSiC("RDU")
              .addRefSiC("C-123-92")
              .refSpecialNotation("NOTAL")
              .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
              .refType("ABSTAT")
              .build())
          .addRefPoint(DatalinkIngest.RefPoint.builder()
              .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
              .refDes("L5")
              .refLat(45.23)
              .refLocName("FORT BRAGG")
              .refLon(179.1)
              .refPointType("DLRP")
              .build())
          .addRemark(DatalinkIngest.Remark.builder()
              .text("Example data link remarks")
              .type("CONTINGENCY PROCEDURES")
              .build())
          .resTrackQual(3)
          .serialNum("1201003")
          .sourceDl("AXE")
          .addSpecTrack(DatalinkIngest.SpecTrack.builder()
              .specTrackNum("12345")
              .specTrackNumDesc("SAM SITE CHARLIE")
              .build())
          .speedDiff(50)
          .stopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
          .stopTimeMod("AFTER")
          .sysDefaultCode("MAN")
          .addTrackNumBlockLl(1234)
          .addTrackNumBlockLl(2345)
          .addTrackNumBlock("0200-0300")
          .addTrackNumBlock("0400-4412")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .addVoiceCoord(DatalinkIngest.VoiceCoord.builder()
              .commPri("P")
              .freqDes("ST300A")
              .addTeleFreqNum("TEL:804-555-4142")
              .addTeleFreqNum("TEL:804-867-5309")
              .voiceNetDes("VPN")
              .build())
          .winSizeMin(1.25)
          .winSizeMult(2.1)
          .build()

      assertThat(datalinkIngest.classificationMarking()).isEqualTo("U")
      assertThat(datalinkIngest.dataMode()).isEqualTo(DatalinkIngest.DataMode.TEST)
      assertThat(datalinkIngest.opExName()).isEqualTo("DESERT WIND")
      assertThat(datalinkIngest.originator()).isEqualTo("USCENTCOM")
      assertThat(datalinkIngest.source()).isEqualTo("Bluestaq")
      assertThat(datalinkIngest.startTime()).isEqualTo(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
      assertThat(datalinkIngest.id()).contains("026dd511-8ba5-47d3-9909-836149f87686")
      assertThat(datalinkIngest.ackInstUnits().getOrNull()).containsExactly("AOC EXT 2345", "317 AW")
      assertThat(datalinkIngest.ackReq()).contains(true)
      assertThat(datalinkIngest.altDiff()).contains(20)
      assertThat(datalinkIngest.canxId()).contains("ABSTAT")
      assertThat(datalinkIngest.canxOriginator()).contains("505 AOC")
      assertThat(datalinkIngest.canxSerialNum()).contains("ABC1234567")
      assertThat(datalinkIngest.canxSiCs().getOrNull()).containsExactly("RDU", "X234BS")
      assertThat(datalinkIngest.canxSpecialNotation()).contains("PASEP")
      assertThat(datalinkIngest.canxTs()).contains(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
      assertThat(datalinkIngest.classReasons().getOrNull()).containsExactly("15C", "15D")
      assertThat(datalinkIngest.classSource()).contains("USJFCOM EXORD SOLID WASTE 98")
      assertThat(datalinkIngest.consecDecorr()).contains(3)
      assertThat(datalinkIngest.courseDiff()).contains(60)
      assertThat(datalinkIngest.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(datalinkIngest.createdBy()).contains("some.user")
      assertThat(datalinkIngest.decExemptCodes().getOrNull()).containsExactly("X1", "X2")
      assertThat(datalinkIngest.decInstDates().getOrNull()).containsExactly("AT EXERCISE ENDEX", "DATE:25NOV1997")
      assertThat(datalinkIngest.decorrWinMult()).contains(1.7)
      assertThat(datalinkIngest.geoDatum()).contains("EUR-T")
      assertThat(datalinkIngest.jreCallSign()).contains("CHARLIE ONE")
      assertThat(datalinkIngest.jreDetails()).contains("JRE details")
      assertThat(datalinkIngest.jrePriAdd()).contains(71777)
      assertThat(datalinkIngest.jreSecAdd()).contains(77771)
      assertThat(datalinkIngest.jreUnitDes()).contains("CVN-72")
      assertThat(datalinkIngest.maxGeoPosQual()).contains(12)
      assertThat(datalinkIngest.maxTrackQual()).contains(12)
      assertThat(datalinkIngest.mgmtCode()).contains("VICTOR")
      assertThat(datalinkIngest.mgmtCodeMeaning()).contains("ORBIT AT POINT BRAVO")
      assertThat(datalinkIngest.minGeoPosQual()).contains(3)
      assertThat(datalinkIngest.minTrackQual()).contains(6)
      assertThat(datalinkIngest.month()).contains("OCT")
      assertThat(datalinkIngest.multiDuty().getOrNull()).containsExactly(DatalinkIngest.MultiDuty.builder()
          .duty("SICO")
          .addDutyTeleFreqNum("TEL:804-555-4142")
          .addDutyTeleFreqNum("TEL:804-867-5309")
          .addMultiDutyVoiceCoord(DatalinkIngest.MultiDuty.MultiDutyVoiceCoord.builder()
              .multiCommPri("P")
              .multiFreqDes("ST300A")
              .addMultiTeleFreqNum("TEL:804-555-4142")
              .addMultiTeleFreqNum("TEL:804-867-5309")
              .multiVoiceNetDes("VPN")
              .build())
          .name("POPOVICH")
          .rank("LCDR")
          .unitDes("SHIP:STENNIS")
          .build())
      assertThat(datalinkIngest.nonLinkUnitDes().getOrNull()).containsExactly("CS:GRAY GHOST", "CS:WHITE WHALE")
      assertThat(datalinkIngest.opExInfo()).contains("CONTROL")
      assertThat(datalinkIngest.opExInfoAlt()).contains("ORANGE")
      assertThat(datalinkIngest.ops().getOrNull()).containsExactly(DatalinkIngest.Op.builder()
          .linkDetails("Link details")
          .linkName("Link-16")
          .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
          .linkStopTimeMod("AFTER")
          .build())
      assertThat(datalinkIngest.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(datalinkIngest.origNetwork()).contains("OPS1")
      assertThat(datalinkIngest.planOrigNum()).contains("SACEUR 106")
      assertThat(datalinkIngest.pocCallSign()).contains("4077 MASH")
      assertThat(datalinkIngest.pocLat()).contains(45.23)
      assertThat(datalinkIngest.pocLocName()).contains("CAMP SWAMPY")
      assertThat(datalinkIngest.pocLon()).contains(179.1)
      assertThat(datalinkIngest.pocName()).contains("F. BURNS")
      assertThat(datalinkIngest.pocNums().getOrNull()).containsExactly("TEL:804-555-4142", "TEL:804-867-5309")
      assertThat(datalinkIngest.pocRank()).contains("MAJ")
      assertThat(datalinkIngest.qualifier()).contains("CHG")
      assertThat(datalinkIngest.qualSn()).contains(1)
      assertThat(datalinkIngest.rawFileUri()).contains("Example URI")
      assertThat(datalinkIngest.references().getOrNull()).containsExactly(DatalinkIngest.Reference.builder()
          .refOriginator("CENTCOM")
          .refSerialId("A")
          .refSerialNum("1402001")
          .addRefSiC("RDU")
          .addRefSiC("C-123-92")
          .refSpecialNotation("NOTAL")
          .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .refType("ABSTAT")
          .build())
      assertThat(datalinkIngest.refPoints().getOrNull()).containsExactly(DatalinkIngest.RefPoint.builder()
          .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
          .refDes("L5")
          .refLat(45.23)
          .refLocName("FORT BRAGG")
          .refLon(179.1)
          .refPointType("DLRP")
          .build())
      assertThat(datalinkIngest.remarks().getOrNull()).containsExactly(DatalinkIngest.Remark.builder()
          .text("Example data link remarks")
          .type("CONTINGENCY PROCEDURES")
          .build())
      assertThat(datalinkIngest.resTrackQual()).contains(3)
      assertThat(datalinkIngest.serialNum()).contains("1201003")
      assertThat(datalinkIngest.sourceDl()).contains("AXE")
      assertThat(datalinkIngest.specTracks().getOrNull()).containsExactly(DatalinkIngest.SpecTrack.builder()
          .specTrackNum("12345")
          .specTrackNumDesc("SAM SITE CHARLIE")
          .build())
      assertThat(datalinkIngest.speedDiff()).contains(50)
      assertThat(datalinkIngest.stopTime()).contains(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
      assertThat(datalinkIngest.stopTimeMod()).contains("AFTER")
      assertThat(datalinkIngest.sysDefaultCode()).contains("MAN")
      assertThat(datalinkIngest.trackNumBlockLLs().getOrNull()).containsExactly(1234, 2345)
      assertThat(datalinkIngest.trackNumBlocks().getOrNull()).containsExactly("0200-0300", "0400-4412")
      assertThat(datalinkIngest.updatedAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
      assertThat(datalinkIngest.updatedBy()).contains("some.user")
      assertThat(datalinkIngest.voiceCoord().getOrNull()).containsExactly(DatalinkIngest.VoiceCoord.builder()
          .commPri("P")
          .freqDes("ST300A")
          .addTeleFreqNum("TEL:804-555-4142")
          .addTeleFreqNum("TEL:804-867-5309")
          .voiceNetDes("VPN")
          .build())
      assertThat(datalinkIngest.winSizeMin()).contains(1.25)
      assertThat(datalinkIngest.winSizeMult()).contains(2.1)
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val datalinkIngest = DatalinkIngest.builder()
          .classificationMarking("U")
          .dataMode(DatalinkIngest.DataMode.TEST)
          .opExName("DESERT WIND")
          .originator("USCENTCOM")
          .source("Bluestaq")
          .startTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .id("026dd511-8ba5-47d3-9909-836149f87686")
          .addAckInstUnit("AOC EXT 2345")
          .addAckInstUnit("317 AW")
          .ackReq(true)
          .altDiff(20)
          .canxId("ABSTAT")
          .canxOriginator("505 AOC")
          .canxSerialNum("ABC1234567")
          .addCanxSiC("RDU")
          .addCanxSiC("X234BS")
          .canxSpecialNotation("PASEP")
          .canxTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
          .addClassReason("15C")
          .addClassReason("15D")
          .classSource("USJFCOM EXORD SOLID WASTE 98")
          .consecDecorr(3)
          .courseDiff(60)
          .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .addDecExemptCode("X1")
          .addDecExemptCode("X2")
          .addDecInstDate("AT EXERCISE ENDEX")
          .addDecInstDate("DATE:25NOV1997")
          .decorrWinMult(1.7)
          .geoDatum("EUR-T")
          .jreCallSign("CHARLIE ONE")
          .jreDetails("JRE details")
          .jrePriAdd(71777)
          .jreSecAdd(77771)
          .jreUnitDes("CVN-72")
          .maxGeoPosQual(12)
          .maxTrackQual(12)
          .mgmtCode("VICTOR")
          .mgmtCodeMeaning("ORBIT AT POINT BRAVO")
          .minGeoPosQual(3)
          .minTrackQual(6)
          .month("OCT")
          .addMultiDuty(DatalinkIngest.MultiDuty.builder()
              .duty("SICO")
              .addDutyTeleFreqNum("TEL:804-555-4142")
              .addDutyTeleFreqNum("TEL:804-867-5309")
              .addMultiDutyVoiceCoord(DatalinkIngest.MultiDuty.MultiDutyVoiceCoord.builder()
                  .multiCommPri("P")
                  .multiFreqDes("ST300A")
                  .addMultiTeleFreqNum("TEL:804-555-4142")
                  .addMultiTeleFreqNum("TEL:804-867-5309")
                  .multiVoiceNetDes("VPN")
                  .build())
              .name("POPOVICH")
              .rank("LCDR")
              .unitDes("SHIP:STENNIS")
              .build())
          .addNonLinkUnitDe("CS:GRAY GHOST")
          .addNonLinkUnitDe("CS:WHITE WHALE")
          .opExInfo("CONTROL")
          .opExInfoAlt("ORANGE")
          .addOp(DatalinkIngest.Op.builder()
              .linkDetails("Link details")
              .linkName("Link-16")
              .linkStartTime(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
              .linkStopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
              .linkStopTimeMod("AFTER")
              .build())
          .origin("THIRD_PARTY_DATASOURCE")
          .origNetwork("OPS1")
          .planOrigNum("SACEUR 106")
          .pocCallSign("4077 MASH")
          .pocLat(45.23)
          .pocLocName("CAMP SWAMPY")
          .pocLon(179.1)
          .pocName("F. BURNS")
          .addPocNum("TEL:804-555-4142")
          .addPocNum("TEL:804-867-5309")
          .pocRank("MAJ")
          .qualifier("CHG")
          .qualSn(1)
          .rawFileUri("Example URI")
          .addReference(DatalinkIngest.Reference.builder()
              .refOriginator("CENTCOM")
              .refSerialId("A")
              .refSerialNum("1402001")
              .addRefSiC("RDU")
              .addRefSiC("C-123-92")
              .refSpecialNotation("NOTAL")
              .refTs(OffsetDateTime.parse("2024-01-07T13:55:43.123Z"))
              .refType("ABSTAT")
              .build())
          .addRefPoint(DatalinkIngest.RefPoint.builder()
              .effEventTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
              .refDes("L5")
              .refLat(45.23)
              .refLocName("FORT BRAGG")
              .refLon(179.1)
              .refPointType("DLRP")
              .build())
          .addRemark(DatalinkIngest.Remark.builder()
              .text("Example data link remarks")
              .type("CONTINGENCY PROCEDURES")
              .build())
          .resTrackQual(3)
          .serialNum("1201003")
          .sourceDl("AXE")
          .addSpecTrack(DatalinkIngest.SpecTrack.builder()
              .specTrackNum("12345")
              .specTrackNumDesc("SAM SITE CHARLIE")
              .build())
          .speedDiff(50)
          .stopTime(OffsetDateTime.parse("2024-01-08T13:55:43.123Z"))
          .stopTimeMod("AFTER")
          .sysDefaultCode("MAN")
          .addTrackNumBlockLl(1234)
          .addTrackNumBlockLl(2345)
          .addTrackNumBlock("0200-0300")
          .addTrackNumBlock("0400-4412")
          .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .addVoiceCoord(DatalinkIngest.VoiceCoord.builder()
              .commPri("P")
              .freqDes("ST300A")
              .addTeleFreqNum("TEL:804-555-4142")
              .addTeleFreqNum("TEL:804-867-5309")
              .voiceNetDes("VPN")
              .build())
          .winSizeMin(1.25)
          .winSizeMult(2.1)
          .build()

      val roundtrippedDatalinkIngest = jsonMapper.readValue(jsonMapper.writeValueAsString(datalinkIngest), jacksonTypeRef<DatalinkIngest>())

      assertThat(roundtrippedDatalinkIngest).isEqualTo(datalinkIngest)
    }
}
