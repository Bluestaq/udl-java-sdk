// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.mti

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class MtiListResponseTest {

    @Test
    fun create() {
        val mtiListResponse =
            MtiListResponse.builder()
                .classificationMarking("U")
                .dataMode(MtiListResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("MTI-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDwell(
                    MtiListResponse.Dwell.builder()
                        .d10(1.2)
                        .d11(1.2)
                        .d12(12)
                        .d13(12)
                        .d14(12)
                        .d15(1.2)
                        .d16(12)
                        .d17(2L)
                        .d18(2L)
                        .d19(12)
                        .d2(12)
                        .d20(12)
                        .d21(1.2)
                        .d22(12.23)
                        .d23(12.23)
                        .d24(12.23)
                        .d25(12.23)
                        .d26(12.23)
                        .d27(12.23)
                        .d28(12.23)
                        .d29(12.23)
                        .d3(12)
                        .d30(12.23)
                        .d31(1L)
                        .addD32(
                            MtiListResponse.Dwell.D32.builder()
                                .d32_1(2)
                                .d32_10("vehicle")
                                .d32_11(90L)
                                .d32_12(2)
                                .d32_13(2)
                                .d32_14(2L)
                                .d32_15(2L)
                                .d32_16(2L)
                                .d32_17(1234567890L)
                                .d32_18(98L)
                                .d32_2(20.23)
                                .d32_3(20.23)
                                .d32_4(2L)
                                .d32_5(2L)
                                .d32_6(2L)
                                .d32_7(2L)
                                .d32_8(2)
                                .d32_9(17L)
                                .build()
                        )
                        .d4(false)
                        .d5(12)
                        .d6(1234567890L)
                        .d7(1.2)
                        .d8(12.0)
                        .d9(12)
                        .dwellts(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .build()
                )
                .addFreeText(
                    MtiListResponse.FreeText.builder()
                        .f1("ORIGINATOR")
                        .f2("RECIPIENT")
                        .f3("TEXT")
                        .build()
                )
                .addHrr(
                    MtiListResponse.Hrr.builder()
                        .h10(1L)
                        .h11(12.23)
                        .h12(12.23)
                        .h13(12.23)
                        .h14(12.23)
                        .h15(12.23)
                        .h16("TABLE")
                        .h17("TABLE")
                        .h18("TABLE")
                        .h19(12.23)
                        .h2(12)
                        .h20(117L)
                        .h21(1L)
                        .h22(1L)
                        .h23("FIELD")
                        .h24("FLAG")
                        .h27(1L)
                        .h28(1234567890L)
                        .h29(1L)
                        .h3(12)
                        .h30(22L)
                        .h31(55L)
                        .addH32(
                            MtiListResponse.Hrr.H32.builder()
                                .h32_1(1)
                                .h32_2(1)
                                .h32_3(1)
                                .h32_4(1)
                                .build()
                        )
                        .h4(true)
                        .h5(12)
                        .h6(12)
                        .h7(12)
                        .h8(12)
                        .h9(1L)
                        .build()
                )
                .addJobDef(
                    MtiListResponse.JobDef.builder()
                        .j10(10.23)
                        .j11(10.23)
                        .j12(10.23)
                        .j13(10.23)
                        .j14("MODE")
                        .j15(100)
                        .j16(100)
                        .j17(100)
                        .j18(100)
                        .j19(10L)
                        .j2("TYPE")
                        .j20(10)
                        .j21(10)
                        .j22(10.23)
                        .j23(10)
                        .j24(10L)
                        .j25(10L)
                        .j26(10L)
                        .j27("MODEL")
                        .j28("MODEL")
                        .j3("J3-ID")
                        .j4(3L)
                        .j5(1L)
                        .j6(10.23)
                        .j7(10.23)
                        .j8(10.23)
                        .j9(10.23)
                        .build()
                )
                .addJobRequest(
                    MtiListResponse.JobRequest.builder()
                        .jobReqEst(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .r1("REQUESTER")
                        .r10(10.23)
                        .r11(10.23)
                        .r12("MODE")
                        .r13(10)
                        .r14(100)
                        .r2("IDENTIFIER")
                        .r21(10)
                        .r22(10)
                        .r23(100)
                        .r24("TYPE")
                        .r25("VARIANT")
                        .r26(true)
                        .r3(15L)
                        .r4(10.23)
                        .r5(10.23)
                        .r6(10.23)
                        .r7(10.23)
                        .r8(10.23)
                        .r9(10.23)
                        .build()
                )
                .addMission(
                    MtiListResponse.Mission.builder()
                        .m1("M1-ID")
                        .m2("M2-ID")
                        .m3("PLATFORM")
                        .m4("IDENT")
                        .msnRefTs(LocalDate.parse("2018-01-01"))
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .p10(45)
                .p3("NATIONALITY")
                .p6("MARKING")
                .p7("INDICATOR")
                .p8("P8-ID")
                .p9(45)
                .addPlatformLoc(
                    MtiListResponse.PlatformLoc.builder()
                        .l1(1234567890L)
                        .l2(45.23)
                        .l3(45.23)
                        .l4(45)
                        .l5(45.23)
                        .l6(50)
                        .l7(82L)
                        .platlocts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                        .build()
                )
                .build()

        assertThat(mtiListResponse.classificationMarking()).isEqualTo("U")
        assertThat(mtiListResponse.dataMode()).isEqualTo(MtiListResponse.DataMode.TEST)
        assertThat(mtiListResponse.source()).isEqualTo("Bluestaq")
        assertThat(mtiListResponse.id()).contains("MTI-ID")
        assertThat(mtiListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(mtiListResponse.createdBy()).contains("some.user")
        assertThat(mtiListResponse.dwells().getOrNull())
            .containsExactly(
                MtiListResponse.Dwell.builder()
                    .d10(1.2)
                    .d11(1.2)
                    .d12(12)
                    .d13(12)
                    .d14(12)
                    .d15(1.2)
                    .d16(12)
                    .d17(2L)
                    .d18(2L)
                    .d19(12)
                    .d2(12)
                    .d20(12)
                    .d21(1.2)
                    .d22(12.23)
                    .d23(12.23)
                    .d24(12.23)
                    .d25(12.23)
                    .d26(12.23)
                    .d27(12.23)
                    .d28(12.23)
                    .d29(12.23)
                    .d3(12)
                    .d30(12.23)
                    .d31(1L)
                    .addD32(
                        MtiListResponse.Dwell.D32.builder()
                            .d32_1(2)
                            .d32_10("vehicle")
                            .d32_11(90L)
                            .d32_12(2)
                            .d32_13(2)
                            .d32_14(2L)
                            .d32_15(2L)
                            .d32_16(2L)
                            .d32_17(1234567890L)
                            .d32_18(98L)
                            .d32_2(20.23)
                            .d32_3(20.23)
                            .d32_4(2L)
                            .d32_5(2L)
                            .d32_6(2L)
                            .d32_7(2L)
                            .d32_8(2)
                            .d32_9(17L)
                            .build()
                    )
                    .d4(false)
                    .d5(12)
                    .d6(1234567890L)
                    .d7(1.2)
                    .d8(12.0)
                    .d9(12)
                    .dwellts(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .build()
            )
        assertThat(mtiListResponse.freeTexts().getOrNull())
            .containsExactly(
                MtiListResponse.FreeText.builder()
                    .f1("ORIGINATOR")
                    .f2("RECIPIENT")
                    .f3("TEXT")
                    .build()
            )
        assertThat(mtiListResponse.hrrs().getOrNull())
            .containsExactly(
                MtiListResponse.Hrr.builder()
                    .h10(1L)
                    .h11(12.23)
                    .h12(12.23)
                    .h13(12.23)
                    .h14(12.23)
                    .h15(12.23)
                    .h16("TABLE")
                    .h17("TABLE")
                    .h18("TABLE")
                    .h19(12.23)
                    .h2(12)
                    .h20(117L)
                    .h21(1L)
                    .h22(1L)
                    .h23("FIELD")
                    .h24("FLAG")
                    .h27(1L)
                    .h28(1234567890L)
                    .h29(1L)
                    .h3(12)
                    .h30(22L)
                    .h31(55L)
                    .addH32(
                        MtiListResponse.Hrr.H32.builder()
                            .h32_1(1)
                            .h32_2(1)
                            .h32_3(1)
                            .h32_4(1)
                            .build()
                    )
                    .h4(true)
                    .h5(12)
                    .h6(12)
                    .h7(12)
                    .h8(12)
                    .h9(1L)
                    .build()
            )
        assertThat(mtiListResponse.jobDefs().getOrNull())
            .containsExactly(
                MtiListResponse.JobDef.builder()
                    .j10(10.23)
                    .j11(10.23)
                    .j12(10.23)
                    .j13(10.23)
                    .j14("MODE")
                    .j15(100)
                    .j16(100)
                    .j17(100)
                    .j18(100)
                    .j19(10L)
                    .j2("TYPE")
                    .j20(10)
                    .j21(10)
                    .j22(10.23)
                    .j23(10)
                    .j24(10L)
                    .j25(10L)
                    .j26(10L)
                    .j27("MODEL")
                    .j28("MODEL")
                    .j3("J3-ID")
                    .j4(3L)
                    .j5(1L)
                    .j6(10.23)
                    .j7(10.23)
                    .j8(10.23)
                    .j9(10.23)
                    .build()
            )
        assertThat(mtiListResponse.jobRequests().getOrNull())
            .containsExactly(
                MtiListResponse.JobRequest.builder()
                    .jobReqEst(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .r1("REQUESTER")
                    .r10(10.23)
                    .r11(10.23)
                    .r12("MODE")
                    .r13(10)
                    .r14(100)
                    .r2("IDENTIFIER")
                    .r21(10)
                    .r22(10)
                    .r23(100)
                    .r24("TYPE")
                    .r25("VARIANT")
                    .r26(true)
                    .r3(15L)
                    .r4(10.23)
                    .r5(10.23)
                    .r6(10.23)
                    .r7(10.23)
                    .r8(10.23)
                    .r9(10.23)
                    .build()
            )
        assertThat(mtiListResponse.missions().getOrNull())
            .containsExactly(
                MtiListResponse.Mission.builder()
                    .m1("M1-ID")
                    .m2("M2-ID")
                    .m3("PLATFORM")
                    .m4("IDENT")
                    .msnRefTs(LocalDate.parse("2018-01-01"))
                    .build()
            )
        assertThat(mtiListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(mtiListResponse.origNetwork()).contains("OPS1")
        assertThat(mtiListResponse.p10()).contains(45)
        assertThat(mtiListResponse.p3()).contains("NATIONALITY")
        assertThat(mtiListResponse.p6()).contains("MARKING")
        assertThat(mtiListResponse.p7()).contains("INDICATOR")
        assertThat(mtiListResponse.p8()).contains("P8-ID")
        assertThat(mtiListResponse.p9()).contains(45)
        assertThat(mtiListResponse.platformLocs().getOrNull())
            .containsExactly(
                MtiListResponse.PlatformLoc.builder()
                    .l1(1234567890L)
                    .l2(45.23)
                    .l3(45.23)
                    .l4(45)
                    .l5(45.23)
                    .l6(50)
                    .l7(82L)
                    .platlocts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                    .build()
            )
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val mtiListResponse =
            MtiListResponse.builder()
                .classificationMarking("U")
                .dataMode(MtiListResponse.DataMode.TEST)
                .source("Bluestaq")
                .id("MTI-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addDwell(
                    MtiListResponse.Dwell.builder()
                        .d10(1.2)
                        .d11(1.2)
                        .d12(12)
                        .d13(12)
                        .d14(12)
                        .d15(1.2)
                        .d16(12)
                        .d17(2L)
                        .d18(2L)
                        .d19(12)
                        .d2(12)
                        .d20(12)
                        .d21(1.2)
                        .d22(12.23)
                        .d23(12.23)
                        .d24(12.23)
                        .d25(12.23)
                        .d26(12.23)
                        .d27(12.23)
                        .d28(12.23)
                        .d29(12.23)
                        .d3(12)
                        .d30(12.23)
                        .d31(1L)
                        .addD32(
                            MtiListResponse.Dwell.D32.builder()
                                .d32_1(2)
                                .d32_10("vehicle")
                                .d32_11(90L)
                                .d32_12(2)
                                .d32_13(2)
                                .d32_14(2L)
                                .d32_15(2L)
                                .d32_16(2L)
                                .d32_17(1234567890L)
                                .d32_18(98L)
                                .d32_2(20.23)
                                .d32_3(20.23)
                                .d32_4(2L)
                                .d32_5(2L)
                                .d32_6(2L)
                                .d32_7(2L)
                                .d32_8(2)
                                .d32_9(17L)
                                .build()
                        )
                        .d4(false)
                        .d5(12)
                        .d6(1234567890L)
                        .d7(1.2)
                        .d8(12.0)
                        .d9(12)
                        .dwellts(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .build()
                )
                .addFreeText(
                    MtiListResponse.FreeText.builder()
                        .f1("ORIGINATOR")
                        .f2("RECIPIENT")
                        .f3("TEXT")
                        .build()
                )
                .addHrr(
                    MtiListResponse.Hrr.builder()
                        .h10(1L)
                        .h11(12.23)
                        .h12(12.23)
                        .h13(12.23)
                        .h14(12.23)
                        .h15(12.23)
                        .h16("TABLE")
                        .h17("TABLE")
                        .h18("TABLE")
                        .h19(12.23)
                        .h2(12)
                        .h20(117L)
                        .h21(1L)
                        .h22(1L)
                        .h23("FIELD")
                        .h24("FLAG")
                        .h27(1L)
                        .h28(1234567890L)
                        .h29(1L)
                        .h3(12)
                        .h30(22L)
                        .h31(55L)
                        .addH32(
                            MtiListResponse.Hrr.H32.builder()
                                .h32_1(1)
                                .h32_2(1)
                                .h32_3(1)
                                .h32_4(1)
                                .build()
                        )
                        .h4(true)
                        .h5(12)
                        .h6(12)
                        .h7(12)
                        .h8(12)
                        .h9(1L)
                        .build()
                )
                .addJobDef(
                    MtiListResponse.JobDef.builder()
                        .j10(10.23)
                        .j11(10.23)
                        .j12(10.23)
                        .j13(10.23)
                        .j14("MODE")
                        .j15(100)
                        .j16(100)
                        .j17(100)
                        .j18(100)
                        .j19(10L)
                        .j2("TYPE")
                        .j20(10)
                        .j21(10)
                        .j22(10.23)
                        .j23(10)
                        .j24(10L)
                        .j25(10L)
                        .j26(10L)
                        .j27("MODEL")
                        .j28("MODEL")
                        .j3("J3-ID")
                        .j4(3L)
                        .j5(1L)
                        .j6(10.23)
                        .j7(10.23)
                        .j8(10.23)
                        .j9(10.23)
                        .build()
                )
                .addJobRequest(
                    MtiListResponse.JobRequest.builder()
                        .jobReqEst(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .r1("REQUESTER")
                        .r10(10.23)
                        .r11(10.23)
                        .r12("MODE")
                        .r13(10)
                        .r14(100)
                        .r2("IDENTIFIER")
                        .r21(10)
                        .r22(10)
                        .r23(100)
                        .r24("TYPE")
                        .r25("VARIANT")
                        .r26(true)
                        .r3(15L)
                        .r4(10.23)
                        .r5(10.23)
                        .r6(10.23)
                        .r7(10.23)
                        .r8(10.23)
                        .r9(10.23)
                        .build()
                )
                .addMission(
                    MtiListResponse.Mission.builder()
                        .m1("M1-ID")
                        .m2("M2-ID")
                        .m3("PLATFORM")
                        .m4("IDENT")
                        .msnRefTs(LocalDate.parse("2018-01-01"))
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .p10(45)
                .p3("NATIONALITY")
                .p6("MARKING")
                .p7("INDICATOR")
                .p8("P8-ID")
                .p9(45)
                .addPlatformLoc(
                    MtiListResponse.PlatformLoc.builder()
                        .l1(1234567890L)
                        .l2(45.23)
                        .l3(45.23)
                        .l4(45)
                        .l5(45.23)
                        .l6(50)
                        .l7(82L)
                        .platlocts(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                        .build()
                )
                .build()

        val roundtrippedMtiListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(mtiListResponse),
                jacksonTypeRef<MtiListResponse>(),
            )

        assertThat(roundtrippedMtiListResponse).isEqualTo(mtiListResponse)
    }
}
