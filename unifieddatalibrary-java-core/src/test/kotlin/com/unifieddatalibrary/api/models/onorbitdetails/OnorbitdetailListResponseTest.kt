// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.onorbitdetails

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbitdetailListResponseTest {

    @Test
    fun create() {
        val onorbitdetailListResponse =
            OnorbitdetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(OnorbitdetailListResponse.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .source("Bluestaq")
                .id("ONORBITDETAILS-ID")
                .additionalMass(10.23)
                .adeptRadius(10.23)
                .bolDeltaV(1000.1)
                .bolFuelMass(10.23)
                .busCrossSection(10.23)
                .busType("A2100")
                .colaRadius(10.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crossSection(10.23)
                .currentMass(500.0)
                .deltaVUnc(50.1)
                .addDepEstMass(20.0)
                .addDepEstMass(21.0)
                .addDepMassUnc(10.0)
                .addDepMassUnc(5.0)
                .addDepName("GOES-18A")
                .addDepName("GOES-18B")
                .driftRate(1.23)
                .dryMass(10.23)
                .estDeltaVDuration(10.23)
                .fuelRemaining(10.23)
                .geoSlot(90.23)
                .lastObSource("THIRD_PARTY_DATASOURCE")
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .launchMass(10.23)
                .launchMassMax(15.23)
                .launchMassMin(5.23)
                .maneuverable(false)
                .maxDeltaV(10.23)
                .maxRadius(10.23)
                .addMissionType("Weather")
                .addMissionType("Space Weather")
                .numDeployable(2)
                .numMission(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .rcs(10.23)
                .rcsMax(15.23)
                .rcsMean(10.23)
                .rcsMin(5.23)
                .refSource("Wikipedia")
                .solarArrayArea(10.23)
                .totalMassUnc(50.1)
                .vismag(10.23)
                .vismagMax(15.23)
                .vismagMean(10.23)
                .vismagMin(5.23)
                .build()

        assertThat(onorbitdetailListResponse.classificationMarking()).isEqualTo("U")
        assertThat(onorbitdetailListResponse.dataMode())
            .isEqualTo(OnorbitdetailListResponse.DataMode.TEST)
        assertThat(onorbitdetailListResponse.idOnOrbit()).isEqualTo("REF-ONORBIT-ID")
        assertThat(onorbitdetailListResponse.source()).isEqualTo("Bluestaq")
        assertThat(onorbitdetailListResponse.id()).contains("ONORBITDETAILS-ID")
        assertThat(onorbitdetailListResponse.additionalMass()).contains(10.23)
        assertThat(onorbitdetailListResponse.adeptRadius()).contains(10.23)
        assertThat(onorbitdetailListResponse.bolDeltaV()).contains(1000.1)
        assertThat(onorbitdetailListResponse.bolFuelMass()).contains(10.23)
        assertThat(onorbitdetailListResponse.busCrossSection()).contains(10.23)
        assertThat(onorbitdetailListResponse.busType()).contains("A2100")
        assertThat(onorbitdetailListResponse.colaRadius()).contains(10.23)
        assertThat(onorbitdetailListResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(onorbitdetailListResponse.createdBy()).contains("some.user")
        assertThat(onorbitdetailListResponse.crossSection()).contains(10.23)
        assertThat(onorbitdetailListResponse.currentMass()).contains(500.0)
        assertThat(onorbitdetailListResponse.deltaVUnc()).contains(50.1)
        assertThat(onorbitdetailListResponse.depEstMasses().getOrNull()).containsExactly(20.0, 21.0)
        assertThat(onorbitdetailListResponse.depMassUncs().getOrNull()).containsExactly(10.0, 5.0)
        assertThat(onorbitdetailListResponse.depNames().getOrNull())
            .containsExactly("GOES-18A", "GOES-18B")
        assertThat(onorbitdetailListResponse.driftRate()).contains(1.23)
        assertThat(onorbitdetailListResponse.dryMass()).contains(10.23)
        assertThat(onorbitdetailListResponse.estDeltaVDuration()).contains(10.23)
        assertThat(onorbitdetailListResponse.fuelRemaining()).contains(10.23)
        assertThat(onorbitdetailListResponse.geoSlot()).contains(90.23)
        assertThat(onorbitdetailListResponse.lastObSource()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(onorbitdetailListResponse.lastObTime())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
        assertThat(onorbitdetailListResponse.launchMass()).contains(10.23)
        assertThat(onorbitdetailListResponse.launchMassMax()).contains(15.23)
        assertThat(onorbitdetailListResponse.launchMassMin()).contains(5.23)
        assertThat(onorbitdetailListResponse.maneuverable()).contains(false)
        assertThat(onorbitdetailListResponse.maxDeltaV()).contains(10.23)
        assertThat(onorbitdetailListResponse.maxRadius()).contains(10.23)
        assertThat(onorbitdetailListResponse.missionTypes().getOrNull())
            .containsExactly("Weather", "Space Weather")
        assertThat(onorbitdetailListResponse.numDeployable()).contains(2)
        assertThat(onorbitdetailListResponse.numMission()).contains(2)
        assertThat(onorbitdetailListResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(onorbitdetailListResponse.origNetwork()).contains("OPS1")
        assertThat(onorbitdetailListResponse.rcs()).contains(10.23)
        assertThat(onorbitdetailListResponse.rcsMax()).contains(15.23)
        assertThat(onorbitdetailListResponse.rcsMean()).contains(10.23)
        assertThat(onorbitdetailListResponse.rcsMin()).contains(5.23)
        assertThat(onorbitdetailListResponse.refSource()).contains("Wikipedia")
        assertThat(onorbitdetailListResponse.solarArrayArea()).contains(10.23)
        assertThat(onorbitdetailListResponse.totalMassUnc()).contains(50.1)
        assertThat(onorbitdetailListResponse.vismag()).contains(10.23)
        assertThat(onorbitdetailListResponse.vismagMax()).contains(15.23)
        assertThat(onorbitdetailListResponse.vismagMean()).contains(10.23)
        assertThat(onorbitdetailListResponse.vismagMin()).contains(5.23)
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val onorbitdetailListResponse =
            OnorbitdetailListResponse.builder()
                .classificationMarking("U")
                .dataMode(OnorbitdetailListResponse.DataMode.TEST)
                .idOnOrbit("REF-ONORBIT-ID")
                .source("Bluestaq")
                .id("ONORBITDETAILS-ID")
                .additionalMass(10.23)
                .adeptRadius(10.23)
                .bolDeltaV(1000.1)
                .bolFuelMass(10.23)
                .busCrossSection(10.23)
                .busType("A2100")
                .colaRadius(10.23)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crossSection(10.23)
                .currentMass(500.0)
                .deltaVUnc(50.1)
                .addDepEstMass(20.0)
                .addDepEstMass(21.0)
                .addDepMassUnc(10.0)
                .addDepMassUnc(5.0)
                .addDepName("GOES-18A")
                .addDepName("GOES-18B")
                .driftRate(1.23)
                .dryMass(10.23)
                .estDeltaVDuration(10.23)
                .fuelRemaining(10.23)
                .geoSlot(90.23)
                .lastObSource("THIRD_PARTY_DATASOURCE")
                .lastObTime(OffsetDateTime.parse("2021-01-01T01:01:01.123456Z"))
                .launchMass(10.23)
                .launchMassMax(15.23)
                .launchMassMin(5.23)
                .maneuverable(false)
                .maxDeltaV(10.23)
                .maxRadius(10.23)
                .addMissionType("Weather")
                .addMissionType("Space Weather")
                .numDeployable(2)
                .numMission(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .rcs(10.23)
                .rcsMax(15.23)
                .rcsMean(10.23)
                .rcsMin(5.23)
                .refSource("Wikipedia")
                .solarArrayArea(10.23)
                .totalMassUnc(50.1)
                .vismag(10.23)
                .vismagMax(15.23)
                .vismagMean(10.23)
                .vismagMin(5.23)
                .build()

        val roundtrippedOnorbitdetailListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(onorbitdetailListResponse),
                jacksonTypeRef<OnorbitdetailListResponse>(),
            )

        assertThat(roundtrippedOnorbitdetailListResponse).isEqualTo(onorbitdetailListResponse)
    }
}
