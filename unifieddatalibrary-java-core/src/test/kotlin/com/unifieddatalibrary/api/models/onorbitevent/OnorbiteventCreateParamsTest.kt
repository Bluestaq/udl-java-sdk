// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.onorbitevent

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class OnorbiteventCreateParamsTest {

    @Test
    fun create() {
        OnorbiteventCreateParams.builder()
            .classificationMarking("U")
            .dataMode(OnorbiteventCreateParams.DataMode.TEST)
            .eventTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .source("Bluestaq")
            .id("ONORBITEVENT-ID")
            .achievedFlightPhase("Phase 2")
            .ageAtEvent(5.23)
            .capabilityLoss(0.5)
            .capabilityLossNotes("Example notes")
            .capacityLoss(0.5)
            .consequentialEquipmentFailure("Example Equipment")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
            .declassificationString("DECLASS_STRING")
            .derivedFrom("DERIVED_SOURCE")
            .description("Example notes")
            .equipmentAtFault("Example Equipment")
            .equipmentCausingLossNotes("Example notes")
            .equipmentPartAtFault("Example Equipment")
            .equipmentTypeAtFault("Example Equipment")
            .eventResult("Example results")
            .eventTimeNotes("Notes on validity")
            .eventType("Type1")
            .geoPosition(45.23)
            .idOnOrbit("ONORBIT-ID")
            .inclined(false)
            .injured(1)
            .insuranceCarriedNotes("Insurance notes")
            .insuranceLoss(0.5)
            .insuranceLossNotes("Insurance notes")
            .killed(23)
            .lesseeOrgId("LESSEEORG-ID")
            .lifeLost(0.5)
            .netAmount(10000.23)
            .objectStatus("Status1")
            .occurrenceFlightPhase("Phase 2")
            .officialLossDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .operatedOnBehalfOfOrgId("OPERATEDONBEHALFOFORG-ID")
            .operatorOrgId("OPERATORORG-ID")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .origObjectId("ORIGOBJECT-ID")
            .ownerOrgId("OWNERORG-ID")
            .planeNumber("PL_1")
            .planeSlot("example_slot")
            .positionStatus("Stable")
            .remarks("Example remarks")
            .satellitePosition("Example description")
            .satNo(1)
            .stageAtFault("Phase 2")
            .thirdPartyInsuranceLoss(10000.23)
            .underlyingCause("CAUSE_EXAMPLE")
            .untilTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
            .build()
    }

    @Test
    fun body() {
        val params =
            OnorbiteventCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OnorbiteventCreateParams.DataMode.TEST)
                .eventTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .id("ONORBITEVENT-ID")
                .achievedFlightPhase("Phase 2")
                .ageAtEvent(5.23)
                .capabilityLoss(0.5)
                .capabilityLossNotes("Example notes")
                .capacityLoss(0.5)
                .consequentialEquipmentFailure("Example Equipment")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .declassificationDate(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
                .declassificationString("DECLASS_STRING")
                .derivedFrom("DERIVED_SOURCE")
                .description("Example notes")
                .equipmentAtFault("Example Equipment")
                .equipmentCausingLossNotes("Example notes")
                .equipmentPartAtFault("Example Equipment")
                .equipmentTypeAtFault("Example Equipment")
                .eventResult("Example results")
                .eventTimeNotes("Notes on validity")
                .eventType("Type1")
                .geoPosition(45.23)
                .idOnOrbit("ONORBIT-ID")
                .inclined(false)
                .injured(1)
                .insuranceCarriedNotes("Insurance notes")
                .insuranceLoss(0.5)
                .insuranceLossNotes("Insurance notes")
                .killed(23)
                .lesseeOrgId("LESSEEORG-ID")
                .lifeLost(0.5)
                .netAmount(10000.23)
                .objectStatus("Status1")
                .occurrenceFlightPhase("Phase 2")
                .officialLossDate(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .operatedOnBehalfOfOrgId("OPERATEDONBEHALFOFORG-ID")
                .operatorOrgId("OPERATORORG-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .ownerOrgId("OWNERORG-ID")
                .planeNumber("PL_1")
                .planeSlot("example_slot")
                .positionStatus("Stable")
                .remarks("Example remarks")
                .satellitePosition("Example description")
                .satNo(1)
                .stageAtFault("Phase 2")
                .thirdPartyInsuranceLoss(10000.23)
                .underlyingCause("CAUSE_EXAMPLE")
                .untilTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OnorbiteventCreateParams.DataMode.TEST)
        assertThat(body.eventTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("ONORBITEVENT-ID")
        assertThat(body.achievedFlightPhase()).contains("Phase 2")
        assertThat(body.ageAtEvent()).contains(5.23)
        assertThat(body.capabilityLoss()).contains(0.5)
        assertThat(body.capabilityLossNotes()).contains("Example notes")
        assertThat(body.capacityLoss()).contains(0.5)
        assertThat(body.consequentialEquipmentFailure()).contains("Example Equipment")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.declassificationDate())
            .contains(OffsetDateTime.parse("2021-01-01T01:02:02.123Z"))
        assertThat(body.declassificationString()).contains("DECLASS_STRING")
        assertThat(body.derivedFrom()).contains("DERIVED_SOURCE")
        assertThat(body.description()).contains("Example notes")
        assertThat(body.equipmentAtFault()).contains("Example Equipment")
        assertThat(body.equipmentCausingLossNotes()).contains("Example notes")
        assertThat(body.equipmentPartAtFault()).contains("Example Equipment")
        assertThat(body.equipmentTypeAtFault()).contains("Example Equipment")
        assertThat(body.eventResult()).contains("Example results")
        assertThat(body.eventTimeNotes()).contains("Notes on validity")
        assertThat(body.eventType()).contains("Type1")
        assertThat(body.geoPosition()).contains(45.23)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.inclined()).contains(false)
        assertThat(body.injured()).contains(1)
        assertThat(body.insuranceCarriedNotes()).contains("Insurance notes")
        assertThat(body.insuranceLoss()).contains(0.5)
        assertThat(body.insuranceLossNotes()).contains("Insurance notes")
        assertThat(body.killed()).contains(23)
        assertThat(body.lesseeOrgId()).contains("LESSEEORG-ID")
        assertThat(body.lifeLost()).contains(0.5)
        assertThat(body.netAmount()).contains(10000.23)
        assertThat(body.objectStatus()).contains("Status1")
        assertThat(body.occurrenceFlightPhase()).contains("Phase 2")
        assertThat(body.officialLossDate())
            .contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
        assertThat(body.operatedOnBehalfOfOrgId()).contains("OPERATEDONBEHALFOFORG-ID")
        assertThat(body.operatorOrgId()).contains("OPERATORORG-ID")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.ownerOrgId()).contains("OWNERORG-ID")
        assertThat(body.planeNumber()).contains("PL_1")
        assertThat(body.planeSlot()).contains("example_slot")
        assertThat(body.positionStatus()).contains("Stable")
        assertThat(body.remarks()).contains("Example remarks")
        assertThat(body.satellitePosition()).contains("Example description")
        assertThat(body.satNo()).contains(1)
        assertThat(body.stageAtFault()).contains("Phase 2")
        assertThat(body.thirdPartyInsuranceLoss()).contains(10000.23)
        assertThat(body.underlyingCause()).contains("CAUSE_EXAMPLE")
        assertThat(body.untilTime()).contains(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            OnorbiteventCreateParams.builder()
                .classificationMarking("U")
                .dataMode(OnorbiteventCreateParams.DataMode.TEST)
                .eventTime(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(OnorbiteventCreateParams.DataMode.TEST)
        assertThat(body.eventTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
