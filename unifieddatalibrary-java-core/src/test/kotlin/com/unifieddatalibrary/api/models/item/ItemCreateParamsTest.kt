// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.item

import java.time.LocalDate
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ItemCreateParamsTest {

    @Test
    fun create() {
        ItemCreateParams.builder()
            .classificationMarking("U")
            .dataMode(ItemCreateParams.DataMode.TEST)
            .scanCode("12345ABCD")
            .source("Bluestaq")
            .type("CARGO")
            .id("22f1f6da-a568-655a-ea37-76d013d04853")
            .addAccSysKey("System key1")
            .addAccSysKey("System key2")
            .accSysNotes("Accepting System Notes")
            .accSystem("Accepting System")
            .addAccSysValue("System value1")
            .addAccSysValue("System value2")
            .airdrop(true)
            .altDataFormat("Alt Data Format")
            .cargoType("PALLET")
            .centerlineOffset(3.1)
            .cg(112.014)
            .commodityCode("2304116")
            .commoditySys("STCC")
            .container(true)
            .createdAt(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
            .createdBy("some.user")
            .departure("CHS")
            .destination("RMS")
            .dvCode("DV-2")
            .fs(412.1)
            .addHazCode(1.1)
            .addHazCode(1.2)
            .height(1.1)
            .idAirLoadPlan("1038c389-d38e-270f-51cc-6a12e905abe8")
            .addItemContain("2UJ8843K")
            .addItemContain("745YV1T65")
            .addKey("key1")
            .addKey("key2")
            .lastArrDate(LocalDate.parse("2023-03-13"))
            .length(1.1)
            .moment(4000.1)
            .name("Product Name")
            .netExpWt(51.437)
            .notes("Example notes")
            .numPalletPos(2)
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("OPS1")
            .productCode("530500234")
            .productSys("NSN")
            .receivingBranch("Air Force")
            .receivingUnit("50 SBN")
            .scGenTool("bID")
            .sourceDl("AXE")
            .tcn("M1358232245912XXX")
            .uln("T01ME01")
            .addValue("value1")
            .addValue("value2")
            .volume(7.8902)
            .weight(5443.335)
            .weightTs(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
            .width(1.1)
            .build()
    }

    @Test
    fun body() {
        val params =
            ItemCreateParams.builder()
                .classificationMarking("U")
                .dataMode(ItemCreateParams.DataMode.TEST)
                .scanCode("12345ABCD")
                .source("Bluestaq")
                .type("CARGO")
                .id("22f1f6da-a568-655a-ea37-76d013d04853")
                .addAccSysKey("System key1")
                .addAccSysKey("System key2")
                .accSysNotes("Accepting System Notes")
                .accSystem("Accepting System")
                .addAccSysValue("System value1")
                .addAccSysValue("System value2")
                .airdrop(true)
                .altDataFormat("Alt Data Format")
                .cargoType("PALLET")
                .centerlineOffset(3.1)
                .cg(112.014)
                .commodityCode("2304116")
                .commoditySys("STCC")
                .container(true)
                .createdAt(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
                .createdBy("some.user")
                .departure("CHS")
                .destination("RMS")
                .dvCode("DV-2")
                .fs(412.1)
                .addHazCode(1.1)
                .addHazCode(1.2)
                .height(1.1)
                .idAirLoadPlan("1038c389-d38e-270f-51cc-6a12e905abe8")
                .addItemContain("2UJ8843K")
                .addItemContain("745YV1T65")
                .addKey("key1")
                .addKey("key2")
                .lastArrDate(LocalDate.parse("2023-03-13"))
                .length(1.1)
                .moment(4000.1)
                .name("Product Name")
                .netExpWt(51.437)
                .notes("Example notes")
                .numPalletPos(2)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .productCode("530500234")
                .productSys("NSN")
                .receivingBranch("Air Force")
                .receivingUnit("50 SBN")
                .scGenTool("bID")
                .sourceDl("AXE")
                .tcn("M1358232245912XXX")
                .uln("T01ME01")
                .addValue("value1")
                .addValue("value2")
                .volume(7.8902)
                .weight(5443.335)
                .weightTs(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
                .width(1.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ItemCreateParams.DataMode.TEST)
        assertThat(body.scanCode()).isEqualTo("12345ABCD")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("CARGO")
        assertThat(body.id()).contains("22f1f6da-a568-655a-ea37-76d013d04853")
        assertThat(body.accSysKeys().getOrNull()).containsExactly("System key1", "System key2")
        assertThat(body.accSysNotes()).contains("Accepting System Notes")
        assertThat(body.accSystem()).contains("Accepting System")
        assertThat(body.accSysValues().getOrNull())
            .containsExactly("System value1", "System value2")
        assertThat(body.airdrop()).contains(true)
        assertThat(body.altDataFormat()).contains("Alt Data Format")
        assertThat(body.cargoType()).contains("PALLET")
        assertThat(body.centerlineOffset()).contains(3.1)
        assertThat(body.cg()).contains(112.014)
        assertThat(body.commodityCode()).contains("2304116")
        assertThat(body.commoditySys()).contains("STCC")
        assertThat(body.container()).contains(true)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2023-03-21T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.departure()).contains("CHS")
        assertThat(body.destination()).contains("RMS")
        assertThat(body.dvCode()).contains("DV-2")
        assertThat(body.fs()).contains(412.1)
        assertThat(body.hazCodes().getOrNull()).containsExactly(1.1, 1.2)
        assertThat(body.height()).contains(1.1)
        assertThat(body.idAirLoadPlan()).contains("1038c389-d38e-270f-51cc-6a12e905abe8")
        assertThat(body.itemContains().getOrNull()).containsExactly("2UJ8843K", "745YV1T65")
        assertThat(body.keys().getOrNull()).containsExactly("key1", "key2")
        assertThat(body.lastArrDate()).contains(LocalDate.parse("2023-03-13"))
        assertThat(body.length()).contains(1.1)
        assertThat(body.moment()).contains(4000.1)
        assertThat(body.name()).contains("Product Name")
        assertThat(body.netExpWt()).contains(51.437)
        assertThat(body.notes()).contains("Example notes")
        assertThat(body.numPalletPos()).contains(2)
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.productCode()).contains("530500234")
        assertThat(body.productSys()).contains("NSN")
        assertThat(body.receivingBranch()).contains("Air Force")
        assertThat(body.receivingUnit()).contains("50 SBN")
        assertThat(body.scGenTool()).contains("bID")
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tcn()).contains("M1358232245912XXX")
        assertThat(body.uln()).contains("T01ME01")
        assertThat(body.values().getOrNull()).containsExactly("value1", "value2")
        assertThat(body.volume()).contains(7.8902)
        assertThat(body.weight()).contains(5443.335)
        assertThat(body.weightTs()).contains(OffsetDateTime.parse("2023-03-13T16:06:00.123Z"))
        assertThat(body.width()).contains(1.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            ItemCreateParams.builder()
                .classificationMarking("U")
                .dataMode(ItemCreateParams.DataMode.TEST)
                .scanCode("12345ABCD")
                .source("Bluestaq")
                .type("CARGO")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(ItemCreateParams.DataMode.TEST)
        assertThat(body.scanCode()).isEqualTo("12345ABCD")
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.type()).isEqualTo("CARGO")
    }
}
