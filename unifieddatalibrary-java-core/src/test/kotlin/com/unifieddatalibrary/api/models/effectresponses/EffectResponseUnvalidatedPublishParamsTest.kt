// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.effectresponses

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class EffectResponseUnvalidatedPublishParamsTest {

    @Test
    fun create() {
        EffectResponseUnvalidatedPublishParams.builder()
            .addBody(
                EffectResponseUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EffectResponseUnvalidatedPublishParams.Body.DataMode.TEST)
                    .source("Bluestaq")
                    .type("COA")
                    .id("EFFECTRESPONSE-ID")
                    .addActionsList(
                        EffectResponseUnvalidatedPublishParams.Body.ActionsList.builder()
                            .actionActorSrcId("ACTIONACTORSRC-ID")
                            .actionActorSrcType("AIRCRAFT")
                            .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .actionId("ACTION-ID")
                            .addActionMetric(
                                EffectResponseUnvalidatedPublishParams.Body.ActionsList.ActionMetric
                                    .builder()
                                    .domainValue(10.1)
                                    .metricType("GoalAchievement")
                                    .provenance("Example metric")
                                    .relativeValue(10.1)
                                    .build()
                            )
                            .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .actorInterceptAlt(1.1)
                            .actorInterceptLat(45.1)
                            .actorInterceptLon(180.1)
                            .effector("SENSOR1")
                            .summary("Example summary")
                            .targetSrcId("TARGETSRC-ID")
                            .targetSrcType("POI")
                            .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .weaponInterceptAlt(1.1)
                            .weaponInterceptLat(45.1)
                            .weaponInterceptLon(180.1)
                            .build()
                    )
                    .actorSrcId("RC-ID")
                    .actorSrcType("AIRCRAFT")
                    .addCoaMetric(
                        EffectResponseUnvalidatedPublishParams.Body.CoaMetric.builder()
                            .domainValue(10.1)
                            .metricType("GoalAchievement")
                            .provenance("Example metric")
                            .relativeValue(10.1)
                            .build()
                    )
                    .collateralDamageEst(0.5)
                    .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .addExternalAction("ACTION1")
                    .addExternalAction("ACTION2")
                    .externalRequestId("EXTERNALREQUEST-ID")
                    .idEffectRequest("EFFECTREQUEST-ID")
                    .munitionId("MUNITION-ID")
                    .munitionType("Dummy")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .probabilityOfKill(0.7)
                    .redTargetSrcId("REDTARGETSRC-ID")
                    .redTargetSrcType("POI")
                    .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .shotsRequired(10)
                    .build()
            )
            .build()
    }

    @Test
    fun body() {
        val params =
            EffectResponseUnvalidatedPublishParams.builder()
                .addBody(
                    EffectResponseUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(EffectResponseUnvalidatedPublishParams.Body.DataMode.TEST)
                        .source("Bluestaq")
                        .type("COA")
                        .id("EFFECTRESPONSE-ID")
                        .addActionsList(
                            EffectResponseUnvalidatedPublishParams.Body.ActionsList.builder()
                                .actionActorSrcId("ACTIONACTORSRC-ID")
                                .actionActorSrcType("AIRCRAFT")
                                .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                                .actionId("ACTION-ID")
                                .addActionMetric(
                                    EffectResponseUnvalidatedPublishParams.Body.ActionsList
                                        .ActionMetric
                                        .builder()
                                        .domainValue(10.1)
                                        .metricType("GoalAchievement")
                                        .provenance("Example metric")
                                        .relativeValue(10.1)
                                        .build()
                                )
                                .actionStartTime(
                                    OffsetDateTime.parse("2021-01-01T00:00:00.123456Z")
                                )
                                .actorInterceptAlt(1.1)
                                .actorInterceptLat(45.1)
                                .actorInterceptLon(180.1)
                                .effector("SENSOR1")
                                .summary("Example summary")
                                .targetSrcId("TARGETSRC-ID")
                                .targetSrcType("POI")
                                .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                                .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                                .weaponInterceptAlt(1.1)
                                .weaponInterceptLat(45.1)
                                .weaponInterceptLon(180.1)
                                .build()
                        )
                        .actorSrcId("RC-ID")
                        .actorSrcType("AIRCRAFT")
                        .addCoaMetric(
                            EffectResponseUnvalidatedPublishParams.Body.CoaMetric.builder()
                                .domainValue(10.1)
                                .metricType("GoalAchievement")
                                .provenance("Example metric")
                                .relativeValue(10.1)
                                .build()
                        )
                        .collateralDamageEst(0.5)
                        .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .addExternalAction("ACTION1")
                        .addExternalAction("ACTION2")
                        .externalRequestId("EXTERNALREQUEST-ID")
                        .idEffectRequest("EFFECTREQUEST-ID")
                        .munitionId("MUNITION-ID")
                        .munitionType("Dummy")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .probabilityOfKill(0.7)
                        .redTargetSrcId("REDTARGETSRC-ID")
                        .redTargetSrcType("POI")
                        .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                        .shotsRequired(10)
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                EffectResponseUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EffectResponseUnvalidatedPublishParams.Body.DataMode.TEST)
                    .source("Bluestaq")
                    .type("COA")
                    .id("EFFECTRESPONSE-ID")
                    .addActionsList(
                        EffectResponseUnvalidatedPublishParams.Body.ActionsList.builder()
                            .actionActorSrcId("ACTIONACTORSRC-ID")
                            .actionActorSrcType("AIRCRAFT")
                            .actionEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .actionId("ACTION-ID")
                            .addActionMetric(
                                EffectResponseUnvalidatedPublishParams.Body.ActionsList.ActionMetric
                                    .builder()
                                    .domainValue(10.1)
                                    .metricType("GoalAchievement")
                                    .provenance("Example metric")
                                    .relativeValue(10.1)
                                    .build()
                            )
                            .actionStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .actorInterceptAlt(1.1)
                            .actorInterceptLat(45.1)
                            .actorInterceptLon(180.1)
                            .effector("SENSOR1")
                            .summary("Example summary")
                            .targetSrcId("TARGETSRC-ID")
                            .targetSrcType("POI")
                            .totEndTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .totStartTime(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                            .weaponInterceptAlt(1.1)
                            .weaponInterceptLat(45.1)
                            .weaponInterceptLon(180.1)
                            .build()
                    )
                    .actorSrcId("RC-ID")
                    .actorSrcType("AIRCRAFT")
                    .addCoaMetric(
                        EffectResponseUnvalidatedPublishParams.Body.CoaMetric.builder()
                            .domainValue(10.1)
                            .metricType("GoalAchievement")
                            .provenance("Example metric")
                            .relativeValue(10.1)
                            .build()
                    )
                    .collateralDamageEst(0.5)
                    .createdAt(OffsetDateTime.parse("2021-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .decisionDeadline(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .addExternalAction("ACTION1")
                    .addExternalAction("ACTION2")
                    .externalRequestId("EXTERNALREQUEST-ID")
                    .idEffectRequest("EFFECTREQUEST-ID")
                    .munitionId("MUNITION-ID")
                    .munitionType("Dummy")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .probabilityOfKill(0.7)
                    .redTargetSrcId("REDTARGETSRC-ID")
                    .redTargetSrcType("POI")
                    .redTimeToOverhead(OffsetDateTime.parse("2021-01-01T00:00:00.123456Z"))
                    .shotsRequired(10)
                    .build()
            )
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            EffectResponseUnvalidatedPublishParams.builder()
                .addBody(
                    EffectResponseUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(EffectResponseUnvalidatedPublishParams.Body.DataMode.TEST)
                        .source("Bluestaq")
                        .type("COA")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body)
            .containsExactly(
                EffectResponseUnvalidatedPublishParams.Body.builder()
                    .classificationMarking("U")
                    .dataMode(EffectResponseUnvalidatedPublishParams.Body.DataMode.TEST)
                    .source("Bluestaq")
                    .type("COA")
                    .build()
            )
    }
}
