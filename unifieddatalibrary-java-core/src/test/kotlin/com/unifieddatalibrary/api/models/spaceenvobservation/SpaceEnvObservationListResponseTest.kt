// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.spaceenvobservation

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SpaceEnvObservationListResponseTest {

    @Test
    fun create() {
        val spaceEnvObservationListResponse =
            SpaceEnvObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(SpaceEnvObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-06-07T14:17:39.653Z"))
                .source("Bluestaq")
                .id("f13f82b8-5d2a-407a-b3f3-1fe30ca79eae")
                .alt(35785.3732)
                .createdAt(OffsetDateTime.parse("2023-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataType("ECP")
                .derived(false)
                .description("Observation Data Description Text")
                .descriptor("energetic charged particle")
                .externalId("fe4ad5dc-0128-4ce8-b09c-0b404322025e")
                .forecast(true)
                .genSystem("System Name")
                .genTime(OffsetDateTime.parse("2023-02-10T19:48:09.934Z"))
                .idOnOrbit("41866")
                .idSensor("ECP-1")
                .instrumentType("MAGNETOMETER")
                .lat(38.8339)
                .lon(-104.8214)
                .measType("ENERGETIC PARTICLES")
                .msgType("SODM")
                .observatoryName("GOES-16")
                .observatoryNotes("Notes")
                .observatoryType("ONORBIT")
                .obSetId("ECPOBSET-478125")
                .origin("OPS1")
                .origNetwork("OPS1")
                .origObjectId("41866")
                .origSensorId("ECP-1")
                .particleType("PROTON")
                .quality("GOOD")
                .satNo(41866)
                .senEnergyLevel("0500-700 keV")
                .senPos(listOf(4174.78541785946, -9969.69867853067, 40733.9284531208))
                .senReferenceFrame(SpaceEnvObservationListResponse.SenReferenceFrame.J2000)
                .senVel(listOf(0.727059797295872, 0.298037087322647, 0.00157064850994095))
                .addSeoList(
                    SpaceEnvObservationListResponse.SeoList.builder()
                        .obType("INTEGRAL FLUX")
                        .obUoM("particles/cm^2/s/sr")
                        .obArray(listOf(1.7, 35.6, 21.2, 19.01))
                        .obBool(true)
                        .obDescription("Observation Description Text")
                        .obQuality("GOOD")
                        .obString("C1.3")
                        .obValue(0.487687826)
                        .build()
                )
                .addSrcId("615236d7-d464-4b8c-9b0b-45994e017d80")
                .addSrcId("8a38e3d6-35fd-4bda-b883-e3724e6bc6b9")
                .addSrcTyp("SPACEENVOB")
                .addSrcTyp("SGI")
                .build()

        assertThat(spaceEnvObservationListResponse.classificationMarking()).isEqualTo("U")
        assertThat(spaceEnvObservationListResponse.dataMode())
            .isEqualTo(SpaceEnvObservationListResponse.DataMode.TEST)
        assertThat(spaceEnvObservationListResponse.obTime())
            .isEqualTo(OffsetDateTime.parse("2023-06-07T14:17:39.653Z"))
        assertThat(spaceEnvObservationListResponse.source()).isEqualTo("Bluestaq")
        assertThat(spaceEnvObservationListResponse.id())
            .contains("f13f82b8-5d2a-407a-b3f3-1fe30ca79eae")
        assertThat(spaceEnvObservationListResponse.alt()).contains(35785.3732)
        assertThat(spaceEnvObservationListResponse.createdAt())
            .contains(OffsetDateTime.parse("2023-01-01T16:00:00.123Z"))
        assertThat(spaceEnvObservationListResponse.createdBy()).contains("some.user")
        assertThat(spaceEnvObservationListResponse.dataType()).contains("ECP")
        assertThat(spaceEnvObservationListResponse.derived()).contains(false)
        assertThat(spaceEnvObservationListResponse.description())
            .contains("Observation Data Description Text")
        assertThat(spaceEnvObservationListResponse.descriptor())
            .contains("energetic charged particle")
        assertThat(spaceEnvObservationListResponse.externalId())
            .contains("fe4ad5dc-0128-4ce8-b09c-0b404322025e")
        assertThat(spaceEnvObservationListResponse.forecast()).contains(true)
        assertThat(spaceEnvObservationListResponse.genSystem()).contains("System Name")
        assertThat(spaceEnvObservationListResponse.genTime())
            .contains(OffsetDateTime.parse("2023-02-10T19:48:09.934Z"))
        assertThat(spaceEnvObservationListResponse.idOnOrbit()).contains("41866")
        assertThat(spaceEnvObservationListResponse.idSensor()).contains("ECP-1")
        assertThat(spaceEnvObservationListResponse.instrumentType()).contains("MAGNETOMETER")
        assertThat(spaceEnvObservationListResponse.lat()).contains(38.8339)
        assertThat(spaceEnvObservationListResponse.lon()).contains(-104.8214)
        assertThat(spaceEnvObservationListResponse.measType()).contains("ENERGETIC PARTICLES")
        assertThat(spaceEnvObservationListResponse.msgType()).contains("SODM")
        assertThat(spaceEnvObservationListResponse.observatoryName()).contains("GOES-16")
        assertThat(spaceEnvObservationListResponse.observatoryNotes()).contains("Notes")
        assertThat(spaceEnvObservationListResponse.observatoryType()).contains("ONORBIT")
        assertThat(spaceEnvObservationListResponse.obSetId()).contains("ECPOBSET-478125")
        assertThat(spaceEnvObservationListResponse.origin()).contains("OPS1")
        assertThat(spaceEnvObservationListResponse.origNetwork()).contains("OPS1")
        assertThat(spaceEnvObservationListResponse.origObjectId()).contains("41866")
        assertThat(spaceEnvObservationListResponse.origSensorId()).contains("ECP-1")
        assertThat(spaceEnvObservationListResponse.particleType()).contains("PROTON")
        assertThat(spaceEnvObservationListResponse.quality()).contains("GOOD")
        assertThat(spaceEnvObservationListResponse.satNo()).contains(41866)
        assertThat(spaceEnvObservationListResponse.senEnergyLevel()).contains("0500-700 keV")
        assertThat(spaceEnvObservationListResponse.senPos().getOrNull())
            .containsExactly(4174.78541785946, -9969.69867853067, 40733.9284531208)
        assertThat(spaceEnvObservationListResponse.senReferenceFrame())
            .contains(SpaceEnvObservationListResponse.SenReferenceFrame.J2000)
        assertThat(spaceEnvObservationListResponse.senVel().getOrNull())
            .containsExactly(0.727059797295872, 0.298037087322647, 0.00157064850994095)
        assertThat(spaceEnvObservationListResponse.seoList().getOrNull())
            .containsExactly(
                SpaceEnvObservationListResponse.SeoList.builder()
                    .obType("INTEGRAL FLUX")
                    .obUoM("particles/cm^2/s/sr")
                    .obArray(listOf(1.7, 35.6, 21.2, 19.01))
                    .obBool(true)
                    .obDescription("Observation Description Text")
                    .obQuality("GOOD")
                    .obString("C1.3")
                    .obValue(0.487687826)
                    .build()
            )
        assertThat(spaceEnvObservationListResponse.srcIds().getOrNull())
            .containsExactly(
                "615236d7-d464-4b8c-9b0b-45994e017d80",
                "8a38e3d6-35fd-4bda-b883-e3724e6bc6b9",
            )
        assertThat(spaceEnvObservationListResponse.srcTyps().getOrNull())
            .containsExactly("SPACEENVOB", "SGI")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val spaceEnvObservationListResponse =
            SpaceEnvObservationListResponse.builder()
                .classificationMarking("U")
                .dataMode(SpaceEnvObservationListResponse.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2023-06-07T14:17:39.653Z"))
                .source("Bluestaq")
                .id("f13f82b8-5d2a-407a-b3f3-1fe30ca79eae")
                .alt(35785.3732)
                .createdAt(OffsetDateTime.parse("2023-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .dataType("ECP")
                .derived(false)
                .description("Observation Data Description Text")
                .descriptor("energetic charged particle")
                .externalId("fe4ad5dc-0128-4ce8-b09c-0b404322025e")
                .forecast(true)
                .genSystem("System Name")
                .genTime(OffsetDateTime.parse("2023-02-10T19:48:09.934Z"))
                .idOnOrbit("41866")
                .idSensor("ECP-1")
                .instrumentType("MAGNETOMETER")
                .lat(38.8339)
                .lon(-104.8214)
                .measType("ENERGETIC PARTICLES")
                .msgType("SODM")
                .observatoryName("GOES-16")
                .observatoryNotes("Notes")
                .observatoryType("ONORBIT")
                .obSetId("ECPOBSET-478125")
                .origin("OPS1")
                .origNetwork("OPS1")
                .origObjectId("41866")
                .origSensorId("ECP-1")
                .particleType("PROTON")
                .quality("GOOD")
                .satNo(41866)
                .senEnergyLevel("0500-700 keV")
                .senPos(listOf(4174.78541785946, -9969.69867853067, 40733.9284531208))
                .senReferenceFrame(SpaceEnvObservationListResponse.SenReferenceFrame.J2000)
                .senVel(listOf(0.727059797295872, 0.298037087322647, 0.00157064850994095))
                .addSeoList(
                    SpaceEnvObservationListResponse.SeoList.builder()
                        .obType("INTEGRAL FLUX")
                        .obUoM("particles/cm^2/s/sr")
                        .obArray(listOf(1.7, 35.6, 21.2, 19.01))
                        .obBool(true)
                        .obDescription("Observation Description Text")
                        .obQuality("GOOD")
                        .obString("C1.3")
                        .obValue(0.487687826)
                        .build()
                )
                .addSrcId("615236d7-d464-4b8c-9b0b-45994e017d80")
                .addSrcId("8a38e3d6-35fd-4bda-b883-e3724e6bc6b9")
                .addSrcTyp("SPACEENVOB")
                .addSrcTyp("SGI")
                .build()

        val roundtrippedSpaceEnvObservationListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(spaceEnvObservationListResponse),
                jacksonTypeRef<SpaceEnvObservationListResponse>(),
            )

        assertThat(roundtrippedSpaceEnvObservationListResponse)
            .isEqualTo(spaceEnvObservationListResponse)
    }
}
