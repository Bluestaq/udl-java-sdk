// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.buses

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class BusAbridgedTest {

    @Test
    fun create() {
        val busAbridged =
            BusAbridged.builder()
                .classificationMarking("U")
                .dataMode(BusAbridged.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .id("BUS-ID")
                .aocsNotes("Example notes")
                .avgDryMass(2879.1)
                .avgPayloadMass(10.1)
                .avgPayloadPower(10.1)
                .avgSpacecraftPower(10.1)
                .avgWetMass(5246.1)
                .bodyDimensionX(10.1)
                .bodyDimensionY(10.1)
                .bodyDimensionZ(10.1)
                .busKitDesignerOrgId("BUSKITDESIGNERORG-ID")
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Dedicated small spacecraft bus.")
                .generic(false)
                .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .launchEnvelopeDimensionX(10.1)
                .launchEnvelopeDimensionY(10.1)
                .launchEnvelopeDimensionZ(10.1)
                .mainComputerManufacturerOrgId("MAINCOMPUTERMANUFACTURERORG-ID")
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .massCategory("Nanosatellite")
                .maxBolPowerLower(10.1)
                .maxBolPowerUpper(10.1)
                .maxBolStationMass(10.1)
                .maxDryMass(2900.1)
                .maxEolPowerLower(10.1)
                .maxEolPowerUpper(10.1)
                .maxLaunchMassLower(10.1)
                .maxLaunchMassUpper(10.1)
                .maxPayloadMass(10.1)
                .maxPayloadPower(10.1)
                .maxSpacecraftPower(10.1)
                .maxWetMass(5300.0)
                .medianDryMass(2950.1)
                .medianWetMass(5260.1)
                .minDryMass(2858.1)
                .minWetMass(5192.1)
                .numOrbitType(3)
                .oapPayloadPower(10.1)
                .oapSpacecraftPower(10.1)
                .orbitTypes(listOf("LEO", "HEO", "GEO"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .payloadDimensionX(1.1)
                .payloadDimensionY(1.1)
                .payloadDimensionZ(1.1)
                .payloadVolume(1.1)
                .powerCategory("low power")
                .telemetryTrackingManufacturerOrgId("TELEMETRYTRACKINGMANUFACTURERORG-ID")
                .type("Example type")
                .build()

        assertThat(busAbridged.classificationMarking()).isEqualTo("U")
        assertThat(busAbridged.dataMode()).isEqualTo(BusAbridged.DataMode.TEST)
        assertThat(busAbridged.name()).isEqualTo("Example name")
        assertThat(busAbridged.source()).isEqualTo("Bluestaq")
        assertThat(busAbridged.id()).contains("BUS-ID")
        assertThat(busAbridged.aocsNotes()).contains("Example notes")
        assertThat(busAbridged.avgDryMass()).contains(2879.1)
        assertThat(busAbridged.avgPayloadMass()).contains(10.1)
        assertThat(busAbridged.avgPayloadPower()).contains(10.1)
        assertThat(busAbridged.avgSpacecraftPower()).contains(10.1)
        assertThat(busAbridged.avgWetMass()).contains(5246.1)
        assertThat(busAbridged.bodyDimensionX()).contains(10.1)
        assertThat(busAbridged.bodyDimensionY()).contains(10.1)
        assertThat(busAbridged.bodyDimensionZ()).contains(10.1)
        assertThat(busAbridged.busKitDesignerOrgId()).contains("BUSKITDESIGNERORG-ID")
        assertThat(busAbridged.countryCode()).contains("US")
        assertThat(busAbridged.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(busAbridged.createdBy()).contains("some.user")
        assertThat(busAbridged.description()).contains("Dedicated small spacecraft bus.")
        assertThat(busAbridged.generic()).contains(false)
        assertThat(busAbridged.idEntity()).contains("0167f577-e06c-358e-85aa-0a07a730bdd0")
        assertThat(busAbridged.launchEnvelopeDimensionX()).contains(10.1)
        assertThat(busAbridged.launchEnvelopeDimensionY()).contains(10.1)
        assertThat(busAbridged.launchEnvelopeDimensionZ()).contains(10.1)
        assertThat(busAbridged.mainComputerManufacturerOrgId())
            .contains("MAINCOMPUTERMANUFACTURERORG-ID")
        assertThat(busAbridged.manufacturerOrgId()).contains("MANUFACTURERORG-ID")
        assertThat(busAbridged.massCategory()).contains("Nanosatellite")
        assertThat(busAbridged.maxBolPowerLower()).contains(10.1)
        assertThat(busAbridged.maxBolPowerUpper()).contains(10.1)
        assertThat(busAbridged.maxBolStationMass()).contains(10.1)
        assertThat(busAbridged.maxDryMass()).contains(2900.1)
        assertThat(busAbridged.maxEolPowerLower()).contains(10.1)
        assertThat(busAbridged.maxEolPowerUpper()).contains(10.1)
        assertThat(busAbridged.maxLaunchMassLower()).contains(10.1)
        assertThat(busAbridged.maxLaunchMassUpper()).contains(10.1)
        assertThat(busAbridged.maxPayloadMass()).contains(10.1)
        assertThat(busAbridged.maxPayloadPower()).contains(10.1)
        assertThat(busAbridged.maxSpacecraftPower()).contains(10.1)
        assertThat(busAbridged.maxWetMass()).contains(5300.0)
        assertThat(busAbridged.medianDryMass()).contains(2950.1)
        assertThat(busAbridged.medianWetMass()).contains(5260.1)
        assertThat(busAbridged.minDryMass()).contains(2858.1)
        assertThat(busAbridged.minWetMass()).contains(5192.1)
        assertThat(busAbridged.numOrbitType()).contains(3)
        assertThat(busAbridged.oapPayloadPower()).contains(10.1)
        assertThat(busAbridged.oapSpacecraftPower()).contains(10.1)
        assertThat(busAbridged.orbitTypes().getOrNull()).containsExactly("LEO", "HEO", "GEO")
        assertThat(busAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(busAbridged.origNetwork()).contains("OPS1")
        assertThat(busAbridged.payloadDimensionX()).contains(1.1)
        assertThat(busAbridged.payloadDimensionY()).contains(1.1)
        assertThat(busAbridged.payloadDimensionZ()).contains(1.1)
        assertThat(busAbridged.payloadVolume()).contains(1.1)
        assertThat(busAbridged.powerCategory()).contains("low power")
        assertThat(busAbridged.telemetryTrackingManufacturerOrgId())
            .contains("TELEMETRYTRACKINGMANUFACTURERORG-ID")
        assertThat(busAbridged.type()).contains("Example type")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val busAbridged =
            BusAbridged.builder()
                .classificationMarking("U")
                .dataMode(BusAbridged.DataMode.TEST)
                .name("Example name")
                .source("Bluestaq")
                .id("BUS-ID")
                .aocsNotes("Example notes")
                .avgDryMass(2879.1)
                .avgPayloadMass(10.1)
                .avgPayloadPower(10.1)
                .avgSpacecraftPower(10.1)
                .avgWetMass(5246.1)
                .bodyDimensionX(10.1)
                .bodyDimensionY(10.1)
                .bodyDimensionZ(10.1)
                .busKitDesignerOrgId("BUSKITDESIGNERORG-ID")
                .countryCode("US")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .description("Dedicated small spacecraft bus.")
                .generic(false)
                .idEntity("0167f577-e06c-358e-85aa-0a07a730bdd0")
                .launchEnvelopeDimensionX(10.1)
                .launchEnvelopeDimensionY(10.1)
                .launchEnvelopeDimensionZ(10.1)
                .mainComputerManufacturerOrgId("MAINCOMPUTERMANUFACTURERORG-ID")
                .manufacturerOrgId("MANUFACTURERORG-ID")
                .massCategory("Nanosatellite")
                .maxBolPowerLower(10.1)
                .maxBolPowerUpper(10.1)
                .maxBolStationMass(10.1)
                .maxDryMass(2900.1)
                .maxEolPowerLower(10.1)
                .maxEolPowerUpper(10.1)
                .maxLaunchMassLower(10.1)
                .maxLaunchMassUpper(10.1)
                .maxPayloadMass(10.1)
                .maxPayloadPower(10.1)
                .maxSpacecraftPower(10.1)
                .maxWetMass(5300.0)
                .medianDryMass(2950.1)
                .medianWetMass(5260.1)
                .minDryMass(2858.1)
                .minWetMass(5192.1)
                .numOrbitType(3)
                .oapPayloadPower(10.1)
                .oapSpacecraftPower(10.1)
                .orbitTypes(listOf("LEO", "HEO", "GEO"))
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .payloadDimensionX(1.1)
                .payloadDimensionY(1.1)
                .payloadDimensionZ(1.1)
                .payloadVolume(1.1)
                .powerCategory("low power")
                .telemetryTrackingManufacturerOrgId("TELEMETRYTRACKINGMANUFACTURERORG-ID")
                .type("Example type")
                .build()

        val roundtrippedBusAbridged =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(busAbridged),
                jacksonTypeRef<BusAbridged>(),
            )

        assertThat(roundtrippedBusAbridged).isEqualTo(busAbridged)
    }
}
