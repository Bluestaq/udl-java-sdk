// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class BatteryFullTest {

    @Test
    fun create() {
        val batteryFull =
            BatteryFull.builder()
                .dataMode(BatteryFull.DataMode.TEST)
                .name("JAK-BATTERY-1479")
                .source("Bluestaq")
                .id("BATTERY-ID")
                .addBatteryDetail(
                    BatterydetailsFull.builder()
                        .classificationMarking("U")
                        .dataMode(BatterydetailsFull.DataMode.TEST)
                        .idBattery("BATTERY-ID")
                        .source("Bluestaq")
                        .id("BATTERYDETAILS-ID")
                        .capacity(10.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("example notes")
                        .dischargeDepth(0.2)
                        .manufacturerOrg(
                            OrganizationFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationFull.DataMode.TEST)
                                .name("some.user")
                                .source("some.user")
                                .type("GOVERNMENT")
                                .id("ORGANIZATION-ID")
                                .active(false)
                                .category("Private company")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example description")
                                .externalId("EXTERNAL-ID")
                                .nationality("US")
                                .addOrganizationDetail(
                                    OrganizationDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                        .idOrganization("ORGANIZATION-ID")
                                        .name("some.user")
                                        .source("some.user")
                                        .id("ORGANIZATIONDETAILS-ID")
                                        .address1("123 Main Street")
                                        .address2("Apt 4B")
                                        .address3("Colorado Springs CO, 80903")
                                        .broker("some.user")
                                        .ceo("some.user")
                                        .cfo("some.user")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cto("some.user")
                                        .description("Example description")
                                        .ebitda(123.4)
                                        .email("some_organization@organization.com")
                                        .financialNotes("Example notes")
                                        .financialYearEndDate(
                                            OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                        )
                                        .fleetPlanNotes("Example notes")
                                        .formerOrgId("FORMERORG-ID")
                                        .ftes(123)
                                        .geoAdminLevel1("Colorado")
                                        .geoAdminLevel2("El Paso County")
                                        .geoAdminLevel3("Colorado Springs")
                                        .massRanking(123)
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .parentOrgId("PARENTORG-ID")
                                        .postalCode("80903")
                                        .profit(123.4)
                                        .revenue(123.4)
                                        .revenueRanking(123)
                                        .riskManager("some.user")
                                        .servicesNotes("Example notes")
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .manufacturerOrgId("MANUFACTURERORG-ID")
                        .model("11212")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .technology("Ni-Cd")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(batteryFull.dataMode()).isEqualTo(BatteryFull.DataMode.TEST)
        assertThat(batteryFull.name()).isEqualTo("JAK-BATTERY-1479")
        assertThat(batteryFull.source()).isEqualTo("Bluestaq")
        assertThat(batteryFull.id()).contains("BATTERY-ID")
        assertThat(batteryFull.batteryDetails().getOrNull())
            .containsExactly(
                BatterydetailsFull.builder()
                    .classificationMarking("U")
                    .dataMode(BatterydetailsFull.DataMode.TEST)
                    .idBattery("BATTERY-ID")
                    .source("Bluestaq")
                    .id("BATTERYDETAILS-ID")
                    .capacity(10.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .description("example notes")
                    .dischargeDepth(0.2)
                    .manufacturerOrg(
                        OrganizationFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationFull.DataMode.TEST)
                            .name("some.user")
                            .source("some.user")
                            .type("GOVERNMENT")
                            .id("ORGANIZATION-ID")
                            .active(false)
                            .category("Private company")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .description("Example description")
                            .externalId("EXTERNAL-ID")
                            .nationality("US")
                            .addOrganizationDetail(
                                OrganizationDetailsFull.builder()
                                    .classificationMarking("U")
                                    .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                    .idOrganization("ORGANIZATION-ID")
                                    .name("some.user")
                                    .source("some.user")
                                    .id("ORGANIZATIONDETAILS-ID")
                                    .address1("123 Main Street")
                                    .address2("Apt 4B")
                                    .address3("Colorado Springs CO, 80903")
                                    .broker("some.user")
                                    .ceo("some.user")
                                    .cfo("some.user")
                                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .createdBy("some.user")
                                    .cto("some.user")
                                    .description("Example description")
                                    .ebitda(123.4)
                                    .email("some_organization@organization.com")
                                    .financialNotes("Example notes")
                                    .financialYearEndDate(
                                        OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                    )
                                    .fleetPlanNotes("Example notes")
                                    .formerOrgId("FORMERORG-ID")
                                    .ftes(123)
                                    .geoAdminLevel1("Colorado")
                                    .geoAdminLevel2("El Paso County")
                                    .geoAdminLevel3("Colorado Springs")
                                    .massRanking(123)
                                    .origin("some.user")
                                    .origNetwork("OPS1")
                                    .parentOrgId("PARENTORG-ID")
                                    .postalCode("80903")
                                    .profit(123.4)
                                    .revenue(123.4)
                                    .revenueRanking(123)
                                    .riskManager("some.user")
                                    .servicesNotes("Example notes")
                                    .addTag("PROVIDER_TAG1")
                                    .addTag("PROVIDER_TAG2")
                                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .updatedBy("some.user")
                                    .build()
                            )
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .manufacturerOrgId("MANUFACTURERORG-ID")
                    .model("11212")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .technology("Ni-Cd")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )
        assertThat(batteryFull.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(batteryFull.createdBy()).contains("some.user")
        assertThat(batteryFull.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(batteryFull.origNetwork()).contains("OPS1")
        assertThat(batteryFull.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(batteryFull.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val batteryFull =
            BatteryFull.builder()
                .dataMode(BatteryFull.DataMode.TEST)
                .name("JAK-BATTERY-1479")
                .source("Bluestaq")
                .id("BATTERY-ID")
                .addBatteryDetail(
                    BatterydetailsFull.builder()
                        .classificationMarking("U")
                        .dataMode(BatterydetailsFull.DataMode.TEST)
                        .idBattery("BATTERY-ID")
                        .source("Bluestaq")
                        .id("BATTERYDETAILS-ID")
                        .capacity(10.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .description("example notes")
                        .dischargeDepth(0.2)
                        .manufacturerOrg(
                            OrganizationFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationFull.DataMode.TEST)
                                .name("some.user")
                                .source("some.user")
                                .type("GOVERNMENT")
                                .id("ORGANIZATION-ID")
                                .active(false)
                                .category("Private company")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example description")
                                .externalId("EXTERNAL-ID")
                                .nationality("US")
                                .addOrganizationDetail(
                                    OrganizationDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                        .idOrganization("ORGANIZATION-ID")
                                        .name("some.user")
                                        .source("some.user")
                                        .id("ORGANIZATIONDETAILS-ID")
                                        .address1("123 Main Street")
                                        .address2("Apt 4B")
                                        .address3("Colorado Springs CO, 80903")
                                        .broker("some.user")
                                        .ceo("some.user")
                                        .cfo("some.user")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cto("some.user")
                                        .description("Example description")
                                        .ebitda(123.4)
                                        .email("some_organization@organization.com")
                                        .financialNotes("Example notes")
                                        .financialYearEndDate(
                                            OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                        )
                                        .fleetPlanNotes("Example notes")
                                        .formerOrgId("FORMERORG-ID")
                                        .ftes(123)
                                        .geoAdminLevel1("Colorado")
                                        .geoAdminLevel2("El Paso County")
                                        .geoAdminLevel3("Colorado Springs")
                                        .massRanking(123)
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .parentOrgId("PARENTORG-ID")
                                        .postalCode("80903")
                                        .profit(123.4)
                                        .revenue(123.4)
                                        .revenueRanking(123)
                                        .riskManager("some.user")
                                        .servicesNotes("Example notes")
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .manufacturerOrgId("MANUFACTURERORG-ID")
                        .model("11212")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .technology("Ni-Cd")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedBatteryFull =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(batteryFull),
                jacksonTypeRef<BatteryFull>(),
            )

        assertThat(roundtrippedBatteryFull).isEqualTo(batteryFull)
    }
}
