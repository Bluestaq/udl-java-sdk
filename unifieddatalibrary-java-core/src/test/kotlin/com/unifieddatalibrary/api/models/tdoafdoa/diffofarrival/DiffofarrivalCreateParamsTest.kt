// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.tdoafdoa.diffofarrival

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DiffofarrivalCreateParamsTest {

    @Test
    fun create() {
        DiffofarrivalCreateParams.builder()
            .classificationMarking("U")
            .dataMode(DiffofarrivalCreateParams.DataMode.TEST)
            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .source("Bluestaq")
            .id("DIFFOFARRIVAL-ID")
            .bandwidth(1.1)
            .collectionMode("SURVEY")
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .deltaRange(1.1)
            .deltaRangeRate(1.1)
            .deltaRangeRateUnc(1.1)
            .deltaRangeUnc(1.1)
            .descriptor("Example descriptor")
            .fdoa(1.1)
            .fdoaUnc(1.1)
            .frequency(1.1)
            .idOnOrbit("ONORBIT-ID")
            .idSensor1("SENSOR1-ID")
            .idSensor2("SENSOR2-ID")
            .origin("THIRD_PARTY_DATASOURCE")
            .origNetwork("ORIG")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId1("ORIGSENSOR1-ID")
            .origSensorId2("ORIGSENSOR2-ID")
            .rawFileUri("rawFileURI")
            .satNo(25544)
            .sen2alt(1.1)
            .sen2lat(1.1)
            .sen2lon(1.1)
            .senalt(1.1)
            .senlat(45.1)
            .senlon(120.1)
            .sensor1Delay(1.1)
            .sensor2Delay(1.1)
            .snr(1.1)
            .sourceDl("AXE")
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .taskId("TASK-ID")
            .tdoa(1.1)
            .tdoaUnc(1.1)
            .transactionId("TRANSACTION-ID")
            .uct(false)
            .build()
    }

    @Test
    fun body() {
        val params =
            DiffofarrivalCreateParams.builder()
                .classificationMarking("U")
                .dataMode(DiffofarrivalCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .id("DIFFOFARRIVAL-ID")
                .bandwidth(1.1)
                .collectionMode("SURVEY")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .deltaRange(1.1)
                .deltaRangeRate(1.1)
                .deltaRangeRateUnc(1.1)
                .deltaRangeUnc(1.1)
                .descriptor("Example descriptor")
                .fdoa(1.1)
                .fdoaUnc(1.1)
                .frequency(1.1)
                .idOnOrbit("ONORBIT-ID")
                .idSensor1("SENSOR1-ID")
                .idSensor2("SENSOR2-ID")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId1("ORIGSENSOR1-ID")
                .origSensorId2("ORIGSENSOR2-ID")
                .rawFileUri("rawFileURI")
                .satNo(25544)
                .sen2alt(1.1)
                .sen2lat(1.1)
                .sen2lon(1.1)
                .senalt(1.1)
                .senlat(45.1)
                .senlon(120.1)
                .sensor1Delay(1.1)
                .sensor2Delay(1.1)
                .snr(1.1)
                .sourceDl("AXE")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .taskId("TASK-ID")
                .tdoa(1.1)
                .tdoaUnc(1.1)
                .transactionId("TRANSACTION-ID")
                .uct(false)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(DiffofarrivalCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.id()).contains("DIFFOFARRIVAL-ID")
        assertThat(body.bandwidth()).contains(1.1)
        assertThat(body.collectionMode()).contains("SURVEY")
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.deltaRange()).contains(1.1)
        assertThat(body.deltaRangeRate()).contains(1.1)
        assertThat(body.deltaRangeRateUnc()).contains(1.1)
        assertThat(body.deltaRangeUnc()).contains(1.1)
        assertThat(body.descriptor()).contains("Example descriptor")
        assertThat(body.fdoa()).contains(1.1)
        assertThat(body.fdoaUnc()).contains(1.1)
        assertThat(body.frequency()).contains(1.1)
        assertThat(body.idOnOrbit()).contains("ONORBIT-ID")
        assertThat(body.idSensor1()).contains("SENSOR1-ID")
        assertThat(body.idSensor2()).contains("SENSOR2-ID")
        assertThat(body.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(body.origNetwork()).contains("ORIG")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId1()).contains("ORIGSENSOR1-ID")
        assertThat(body.origSensorId2()).contains("ORIGSENSOR2-ID")
        assertThat(body.rawFileUri()).contains("rawFileURI")
        assertThat(body.satNo()).contains(25544)
        assertThat(body.sen2alt()).contains(1.1)
        assertThat(body.sen2lat()).contains(1.1)
        assertThat(body.sen2lon()).contains(1.1)
        assertThat(body.senalt()).contains(1.1)
        assertThat(body.senlat()).contains(45.1)
        assertThat(body.senlon()).contains(120.1)
        assertThat(body.sensor1Delay()).contains(1.1)
        assertThat(body.sensor2Delay()).contains(1.1)
        assertThat(body.snr()).contains(1.1)
        assertThat(body.sourceDl()).contains("AXE")
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.tdoa()).contains(1.1)
        assertThat(body.tdoaUnc()).contains(1.1)
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.uct()).contains(false)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            DiffofarrivalCreateParams.builder()
                .classificationMarking("U")
                .dataMode(DiffofarrivalCreateParams.DataMode.TEST)
                .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .source("Bluestaq")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(DiffofarrivalCreateParams.DataMode.TEST)
        assertThat(body.obTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.source()).isEqualTo("Bluestaq")
    }
}
