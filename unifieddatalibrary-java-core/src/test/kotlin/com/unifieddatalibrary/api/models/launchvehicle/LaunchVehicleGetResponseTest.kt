// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.launchvehicle

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.Engine
import com.unifieddatalibrary.api.models.EngineDetailsFull
import com.unifieddatalibrary.api.models.OrganizationDetailsFull
import com.unifieddatalibrary.api.models.OrganizationFull
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class LaunchVehicleGetResponseTest {

    @Test
    fun create() {
        val launchVehicleGetResponse =
            LaunchVehicleGetResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleGetResponse.DataMode.TEST)
                .name("Example-name")
                .source("Bluestaq")
                .id("LAUNCHVEHICLE-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addLaunchVehicleDetail(
                    LaunchVehicleGetResponse.LaunchVehicleDetail.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchVehicleGetResponse.LaunchVehicleDetail.DataMode.TEST)
                        .idLaunchVehicle("LAUNCHVEHICLE-ID")
                        .source("Bluestaq")
                        .id("LAUNCHVEHICLEDETAILS-ID")
                        .attitudeAccuracy(10.23)
                        .category("Example-category")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .deploymentRotationRate(10.23)
                        .diameter(10.23)
                        .estLaunchPrice(10.23)
                        .estLaunchPriceTypical(10.23)
                        .fairingExternalDiameter(10.23)
                        .fairingInternalDiameter(10.23)
                        .fairingLength(10.23)
                        .fairingMass(10.23)
                        .fairingMaterial("Example-fairing-material")
                        .fairingName("Example-fairing-name")
                        .fairingNotes("Example notes")
                        .family("Example-family")
                        .geoPayloadMass(10.23)
                        .gtoInj3SigAccuracyApogeeMargin(10.23)
                        .gtoInj3SigAccuracyApogeeTarget(10.23)
                        .gtoInj3SigAccuracyInclinationMargin(10.23)
                        .gtoInj3SigAccuracyInclinationTarget(10.23)
                        .gtoInj3SigAccuracyPerigeeMargin(10.23)
                        .gtoInj3SigAccuracyPerigeeTarget(10.23)
                        .gtoPayloadMass(10.23)
                        .launchMass(10.23)
                        .launchPrefix("AX011")
                        .length(10.23)
                        .leoPayloadMass(10.23)
                        .manufacturerOrg(
                            OrganizationFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationFull.DataMode.TEST)
                                .name("some.user")
                                .source("some.user")
                                .type("GOVERNMENT")
                                .id("ORGANIZATION-ID")
                                .active(false)
                                .category("Private company")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example description")
                                .externalId("EXTERNAL-ID")
                                .nationality("US")
                                .addOrganizationDetail(
                                    OrganizationDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                        .idOrganization("ORGANIZATION-ID")
                                        .name("some.user")
                                        .source("some.user")
                                        .id("ORGANIZATIONDETAILS-ID")
                                        .address1("123 Main Street")
                                        .address2("Apt 4B")
                                        .address3("Colorado Springs CO, 80903")
                                        .broker("some.user")
                                        .ceo("some.user")
                                        .cfo("some.user")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cto("some.user")
                                        .description("Example description")
                                        .ebitda(123.4)
                                        .email("some_organization@organization.com")
                                        .financialNotes("Example notes")
                                        .financialYearEndDate(
                                            OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                        )
                                        .fleetPlanNotes("Example notes")
                                        .formerOrgId("FORMERORG-ID")
                                        .ftes(123)
                                        .geoAdminLevel1("Colorado")
                                        .geoAdminLevel2("El Paso County")
                                        .geoAdminLevel3("Colorado Springs")
                                        .massRanking(123)
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .parentOrgId("PARENTORG-ID")
                                        .postalCode("80903")
                                        .profit(123.4)
                                        .revenue(123.4)
                                        .revenueRanking(123)
                                        .riskManager("some.user")
                                        .servicesNotes("Example notes")
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .manufacturerOrgId("MANUFACTURERORG-ID")
                        .maxAccelLoad(10.23)
                        .maxAcousticLevel(10.23)
                        .maxAcousticLevelRange(10.23)
                        .maxFairingPressureChange(10.23)
                        .maxFlightShockForce(10.23)
                        .maxFlightShockFreq(10.23)
                        .maxPayloadFreqLat(10.23)
                        .maxPayloadFreqLon(10.23)
                        .minorVariant("Example-minor-variant")
                        .notes("Example notes")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .oxidizer("Bromine")
                        .payloadNotes("Example notes")
                        .payloadSeparationRate(10.23)
                        .propellant("Nitrogen")
                        .soundPressureLevel(10.23)
                        .sourceUrl("Example URL")
                        .ssoPayloadMass(10.23)
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .variant("Example-variant")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addStage(
                    LaunchVehicleGetResponse.Stage.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchVehicleGetResponse.Stage.DataMode.TEST)
                        .idEngine("ENGINE-ID")
                        .idLaunchVehicle("LAUNCHVEHICLE-ID")
                        .source("Bluestaq")
                        .id("STAGE-ID")
                        .avionicsNotes("Sample Notes")
                        .burnTime(256.3)
                        .controlThruster1("controlThruster1")
                        .controlThruster2("controlThruster2")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .diameter(3.95)
                        .engine(
                            Engine.builder()
                                .classificationMarking("U")
                                .dataMode(Engine.DataMode.TEST)
                                .name("ENGINE_VARIANT1")
                                .source("Bluestaq")
                                .id("ENGINE-ID")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .addEngineDetail(
                                    EngineDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(EngineDetailsFull.DataMode.TEST)
                                        .idEngine("ENGINE-ID")
                                        .source("Bluestaq")
                                        .id("ENGINEDETAILS-ID")
                                        .burnTime(1.1)
                                        .chamberPressure(1.1)
                                        .characteristicType("Electric")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cycleType("Pressure Fed")
                                        .family("ENGINE_TYPE1")
                                        .manufacturerOrgId("MANUFACTURERORG-ID")
                                        .maxFirings(5)
                                        .notes("Example notes")
                                        .nozzleExpansionRatio(1.1)
                                        .origin("THIRD_PARTY_DATASOURCE")
                                        .origNetwork("ORIG")
                                        .oxidizer("Liquid Oxygen")
                                        .propellant("Liquid")
                                        .seaLevelThrust(1.1)
                                        .specificImpulse(1.1)
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .vacuumThrust(1.1)
                                        .build()
                                )
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("ORIG")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .length(25.13)
                        .mainEngineThrustSeaLevel(733.4)
                        .mainEngineThrustVacuum(733.4)
                        .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                        .mass(9956.1)
                        .notes("Sample Notes")
                        .numBurns(1)
                        .numControlThruster1(1)
                        .numControlThruster2(1)
                        .numEngines(1)
                        .numStageElements(2)
                        .numVernier(3)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .addPhotoUrl("photoURL")
                        .restartable(true)
                        .reusable(true)
                        .stageNumber(2)
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .thrustSeaLevel(733.4)
                        .thrustVacuum(733.4)
                        .type("Electrostatic Ion")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .vernier("vernier")
                        .vernierBurnTime(1.1)
                        .vernierNumBurns(4)
                        .vernierThrustSeaLevel(4.1)
                        .vernierThrustVacuum(3.2)
                        .build()
                )
                .type("Example-vehicle-type")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        assertThat(launchVehicleGetResponse.classificationMarking()).isEqualTo("U")
        assertThat(launchVehicleGetResponse.dataMode())
            .isEqualTo(LaunchVehicleGetResponse.DataMode.TEST)
        assertThat(launchVehicleGetResponse.name()).isEqualTo("Example-name")
        assertThat(launchVehicleGetResponse.source()).isEqualTo("Bluestaq")
        assertThat(launchVehicleGetResponse.id()).contains("LAUNCHVEHICLE-ID")
        assertThat(launchVehicleGetResponse.createdAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchVehicleGetResponse.createdBy()).contains("some.user")
        assertThat(launchVehicleGetResponse.launchVehicleDetails().getOrNull())
            .containsExactly(
                LaunchVehicleGetResponse.LaunchVehicleDetail.builder()
                    .classificationMarking("U")
                    .dataMode(LaunchVehicleGetResponse.LaunchVehicleDetail.DataMode.TEST)
                    .idLaunchVehicle("LAUNCHVEHICLE-ID")
                    .source("Bluestaq")
                    .id("LAUNCHVEHICLEDETAILS-ID")
                    .attitudeAccuracy(10.23)
                    .category("Example-category")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .deploymentRotationRate(10.23)
                    .diameter(10.23)
                    .estLaunchPrice(10.23)
                    .estLaunchPriceTypical(10.23)
                    .fairingExternalDiameter(10.23)
                    .fairingInternalDiameter(10.23)
                    .fairingLength(10.23)
                    .fairingMass(10.23)
                    .fairingMaterial("Example-fairing-material")
                    .fairingName("Example-fairing-name")
                    .fairingNotes("Example notes")
                    .family("Example-family")
                    .geoPayloadMass(10.23)
                    .gtoInj3SigAccuracyApogeeMargin(10.23)
                    .gtoInj3SigAccuracyApogeeTarget(10.23)
                    .gtoInj3SigAccuracyInclinationMargin(10.23)
                    .gtoInj3SigAccuracyInclinationTarget(10.23)
                    .gtoInj3SigAccuracyPerigeeMargin(10.23)
                    .gtoInj3SigAccuracyPerigeeTarget(10.23)
                    .gtoPayloadMass(10.23)
                    .launchMass(10.23)
                    .launchPrefix("AX011")
                    .length(10.23)
                    .leoPayloadMass(10.23)
                    .manufacturerOrg(
                        OrganizationFull.builder()
                            .classificationMarking("U")
                            .dataMode(OrganizationFull.DataMode.TEST)
                            .name("some.user")
                            .source("some.user")
                            .type("GOVERNMENT")
                            .id("ORGANIZATION-ID")
                            .active(false)
                            .category("Private company")
                            .countryCode("US")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .description("Example description")
                            .externalId("EXTERNAL-ID")
                            .nationality("US")
                            .addOrganizationDetail(
                                OrganizationDetailsFull.builder()
                                    .classificationMarking("U")
                                    .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                    .idOrganization("ORGANIZATION-ID")
                                    .name("some.user")
                                    .source("some.user")
                                    .id("ORGANIZATIONDETAILS-ID")
                                    .address1("123 Main Street")
                                    .address2("Apt 4B")
                                    .address3("Colorado Springs CO, 80903")
                                    .broker("some.user")
                                    .ceo("some.user")
                                    .cfo("some.user")
                                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .createdBy("some.user")
                                    .cto("some.user")
                                    .description("Example description")
                                    .ebitda(123.4)
                                    .email("some_organization@organization.com")
                                    .financialNotes("Example notes")
                                    .financialYearEndDate(
                                        OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                    )
                                    .fleetPlanNotes("Example notes")
                                    .formerOrgId("FORMERORG-ID")
                                    .ftes(123)
                                    .geoAdminLevel1("Colorado")
                                    .geoAdminLevel2("El Paso County")
                                    .geoAdminLevel3("Colorado Springs")
                                    .massRanking(123)
                                    .origin("some.user")
                                    .origNetwork("OPS1")
                                    .parentOrgId("PARENTORG-ID")
                                    .postalCode("80903")
                                    .profit(123.4)
                                    .revenue(123.4)
                                    .revenueRanking(123)
                                    .riskManager("some.user")
                                    .servicesNotes("Example notes")
                                    .addTag("PROVIDER_TAG1")
                                    .addTag("PROVIDER_TAG2")
                                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .updatedBy("some.user")
                                    .build()
                            )
                            .origin("some.user")
                            .origNetwork("OPS1")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .manufacturerOrgId("MANUFACTURERORG-ID")
                    .maxAccelLoad(10.23)
                    .maxAcousticLevel(10.23)
                    .maxAcousticLevelRange(10.23)
                    .maxFairingPressureChange(10.23)
                    .maxFlightShockForce(10.23)
                    .maxFlightShockFreq(10.23)
                    .maxPayloadFreqLat(10.23)
                    .maxPayloadFreqLon(10.23)
                    .minorVariant("Example-minor-variant")
                    .notes("Example notes")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .oxidizer("Bromine")
                    .payloadNotes("Example notes")
                    .payloadSeparationRate(10.23)
                    .propellant("Nitrogen")
                    .soundPressureLevel(10.23)
                    .sourceUrl("Example URL")
                    .ssoPayloadMass(10.23)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .variant("Example-variant")
                    .build()
            )
        assertThat(launchVehicleGetResponse.origin()).contains("THIRD_PARTY_DATASOURCE")
        assertThat(launchVehicleGetResponse.origNetwork()).contains("ORIG")
        assertThat(launchVehicleGetResponse.stages().getOrNull())
            .containsExactly(
                LaunchVehicleGetResponse.Stage.builder()
                    .classificationMarking("U")
                    .dataMode(LaunchVehicleGetResponse.Stage.DataMode.TEST)
                    .idEngine("ENGINE-ID")
                    .idLaunchVehicle("LAUNCHVEHICLE-ID")
                    .source("Bluestaq")
                    .id("STAGE-ID")
                    .avionicsNotes("Sample Notes")
                    .burnTime(256.3)
                    .controlThruster1("controlThruster1")
                    .controlThruster2("controlThruster2")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .diameter(3.95)
                    .engine(
                        Engine.builder()
                            .classificationMarking("U")
                            .dataMode(Engine.DataMode.TEST)
                            .name("ENGINE_VARIANT1")
                            .source("Bluestaq")
                            .id("ENGINE-ID")
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .addEngineDetail(
                                EngineDetailsFull.builder()
                                    .classificationMarking("U")
                                    .dataMode(EngineDetailsFull.DataMode.TEST)
                                    .idEngine("ENGINE-ID")
                                    .source("Bluestaq")
                                    .id("ENGINEDETAILS-ID")
                                    .burnTime(1.1)
                                    .chamberPressure(1.1)
                                    .characteristicType("Electric")
                                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .createdBy("some.user")
                                    .cycleType("Pressure Fed")
                                    .family("ENGINE_TYPE1")
                                    .manufacturerOrgId("MANUFACTURERORG-ID")
                                    .maxFirings(5)
                                    .notes("Example notes")
                                    .nozzleExpansionRatio(1.1)
                                    .origin("THIRD_PARTY_DATASOURCE")
                                    .origNetwork("ORIG")
                                    .oxidizer("Liquid Oxygen")
                                    .propellant("Liquid")
                                    .seaLevelThrust(1.1)
                                    .specificImpulse(1.1)
                                    .addTag("PROVIDER_TAG1")
                                    .addTag("PROVIDER_TAG2")
                                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                    .updatedBy("some.user")
                                    .vacuumThrust(1.1)
                                    .build()
                            )
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("ORIG")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .length(25.13)
                    .mainEngineThrustSeaLevel(733.4)
                    .mainEngineThrustVacuum(733.4)
                    .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                    .mass(9956.1)
                    .notes("Sample Notes")
                    .numBurns(1)
                    .numControlThruster1(1)
                    .numControlThruster2(1)
                    .numEngines(1)
                    .numStageElements(2)
                    .numVernier(3)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .addPhotoUrl("photoURL")
                    .restartable(true)
                    .reusable(true)
                    .stageNumber(2)
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .thrustSeaLevel(733.4)
                    .thrustVacuum(733.4)
                    .type("Electrostatic Ion")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .vernier("vernier")
                    .vernierBurnTime(1.1)
                    .vernierNumBurns(4)
                    .vernierThrustSeaLevel(4.1)
                    .vernierThrustVacuum(3.2)
                    .build()
            )
        assertThat(launchVehicleGetResponse.type()).contains("Example-vehicle-type")
        assertThat(launchVehicleGetResponse.updatedAt())
            .contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(launchVehicleGetResponse.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val launchVehicleGetResponse =
            LaunchVehicleGetResponse.builder()
                .classificationMarking("U")
                .dataMode(LaunchVehicleGetResponse.DataMode.TEST)
                .name("Example-name")
                .source("Bluestaq")
                .id("LAUNCHVEHICLE-ID")
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .addLaunchVehicleDetail(
                    LaunchVehicleGetResponse.LaunchVehicleDetail.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchVehicleGetResponse.LaunchVehicleDetail.DataMode.TEST)
                        .idLaunchVehicle("LAUNCHVEHICLE-ID")
                        .source("Bluestaq")
                        .id("LAUNCHVEHICLEDETAILS-ID")
                        .attitudeAccuracy(10.23)
                        .category("Example-category")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .deploymentRotationRate(10.23)
                        .diameter(10.23)
                        .estLaunchPrice(10.23)
                        .estLaunchPriceTypical(10.23)
                        .fairingExternalDiameter(10.23)
                        .fairingInternalDiameter(10.23)
                        .fairingLength(10.23)
                        .fairingMass(10.23)
                        .fairingMaterial("Example-fairing-material")
                        .fairingName("Example-fairing-name")
                        .fairingNotes("Example notes")
                        .family("Example-family")
                        .geoPayloadMass(10.23)
                        .gtoInj3SigAccuracyApogeeMargin(10.23)
                        .gtoInj3SigAccuracyApogeeTarget(10.23)
                        .gtoInj3SigAccuracyInclinationMargin(10.23)
                        .gtoInj3SigAccuracyInclinationTarget(10.23)
                        .gtoInj3SigAccuracyPerigeeMargin(10.23)
                        .gtoInj3SigAccuracyPerigeeTarget(10.23)
                        .gtoPayloadMass(10.23)
                        .launchMass(10.23)
                        .launchPrefix("AX011")
                        .length(10.23)
                        .leoPayloadMass(10.23)
                        .manufacturerOrg(
                            OrganizationFull.builder()
                                .classificationMarking("U")
                                .dataMode(OrganizationFull.DataMode.TEST)
                                .name("some.user")
                                .source("some.user")
                                .type("GOVERNMENT")
                                .id("ORGANIZATION-ID")
                                .active(false)
                                .category("Private company")
                                .countryCode("US")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .description("Example description")
                                .externalId("EXTERNAL-ID")
                                .nationality("US")
                                .addOrganizationDetail(
                                    OrganizationDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(OrganizationDetailsFull.DataMode.TEST)
                                        .idOrganization("ORGANIZATION-ID")
                                        .name("some.user")
                                        .source("some.user")
                                        .id("ORGANIZATIONDETAILS-ID")
                                        .address1("123 Main Street")
                                        .address2("Apt 4B")
                                        .address3("Colorado Springs CO, 80903")
                                        .broker("some.user")
                                        .ceo("some.user")
                                        .cfo("some.user")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cto("some.user")
                                        .description("Example description")
                                        .ebitda(123.4)
                                        .email("some_organization@organization.com")
                                        .financialNotes("Example notes")
                                        .financialYearEndDate(
                                            OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                        )
                                        .fleetPlanNotes("Example notes")
                                        .formerOrgId("FORMERORG-ID")
                                        .ftes(123)
                                        .geoAdminLevel1("Colorado")
                                        .geoAdminLevel2("El Paso County")
                                        .geoAdminLevel3("Colorado Springs")
                                        .massRanking(123)
                                        .origin("some.user")
                                        .origNetwork("OPS1")
                                        .parentOrgId("PARENTORG-ID")
                                        .postalCode("80903")
                                        .profit(123.4)
                                        .revenue(123.4)
                                        .revenueRanking(123)
                                        .riskManager("some.user")
                                        .servicesNotes("Example notes")
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .build()
                                )
                                .origin("some.user")
                                .origNetwork("OPS1")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .manufacturerOrgId("MANUFACTURERORG-ID")
                        .maxAccelLoad(10.23)
                        .maxAcousticLevel(10.23)
                        .maxAcousticLevelRange(10.23)
                        .maxFairingPressureChange(10.23)
                        .maxFlightShockForce(10.23)
                        .maxFlightShockFreq(10.23)
                        .maxPayloadFreqLat(10.23)
                        .maxPayloadFreqLon(10.23)
                        .minorVariant("Example-minor-variant")
                        .notes("Example notes")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .oxidizer("Bromine")
                        .payloadNotes("Example notes")
                        .payloadSeparationRate(10.23)
                        .propellant("Nitrogen")
                        .soundPressureLevel(10.23)
                        .sourceUrl("Example URL")
                        .ssoPayloadMass(10.23)
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .variant("Example-variant")
                        .build()
                )
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("ORIG")
                .addStage(
                    LaunchVehicleGetResponse.Stage.builder()
                        .classificationMarking("U")
                        .dataMode(LaunchVehicleGetResponse.Stage.DataMode.TEST)
                        .idEngine("ENGINE-ID")
                        .idLaunchVehicle("LAUNCHVEHICLE-ID")
                        .source("Bluestaq")
                        .id("STAGE-ID")
                        .avionicsNotes("Sample Notes")
                        .burnTime(256.3)
                        .controlThruster1("controlThruster1")
                        .controlThruster2("controlThruster2")
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .diameter(3.95)
                        .engine(
                            Engine.builder()
                                .classificationMarking("U")
                                .dataMode(Engine.DataMode.TEST)
                                .name("ENGINE_VARIANT1")
                                .source("Bluestaq")
                                .id("ENGINE-ID")
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .addEngineDetail(
                                    EngineDetailsFull.builder()
                                        .classificationMarking("U")
                                        .dataMode(EngineDetailsFull.DataMode.TEST)
                                        .idEngine("ENGINE-ID")
                                        .source("Bluestaq")
                                        .id("ENGINEDETAILS-ID")
                                        .burnTime(1.1)
                                        .chamberPressure(1.1)
                                        .characteristicType("Electric")
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .cycleType("Pressure Fed")
                                        .family("ENGINE_TYPE1")
                                        .manufacturerOrgId("MANUFACTURERORG-ID")
                                        .maxFirings(5)
                                        .notes("Example notes")
                                        .nozzleExpansionRatio(1.1)
                                        .origin("THIRD_PARTY_DATASOURCE")
                                        .origNetwork("ORIG")
                                        .oxidizer("Liquid Oxygen")
                                        .propellant("Liquid")
                                        .seaLevelThrust(1.1)
                                        .specificImpulse(1.1)
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .updatedBy("some.user")
                                        .vacuumThrust(1.1)
                                        .build()
                                )
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("ORIG")
                                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .updatedBy("some.user")
                                .build()
                        )
                        .length(25.13)
                        .mainEngineThrustSeaLevel(733.4)
                        .mainEngineThrustVacuum(733.4)
                        .manufacturerOrgId("5feed5d7-d131-57e5-a3fd-acc173bca736")
                        .mass(9956.1)
                        .notes("Sample Notes")
                        .numBurns(1)
                        .numControlThruster1(1)
                        .numControlThruster2(1)
                        .numEngines(1)
                        .numStageElements(2)
                        .numVernier(3)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("ORIG")
                        .addPhotoUrl("photoURL")
                        .restartable(true)
                        .reusable(true)
                        .stageNumber(2)
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .thrustSeaLevel(733.4)
                        .thrustVacuum(733.4)
                        .type("Electrostatic Ion")
                        .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .updatedBy("some.user")
                        .vernier("vernier")
                        .vernierBurnTime(1.1)
                        .vernierNumBurns(4)
                        .vernierThrustSeaLevel(4.1)
                        .vernierThrustVacuum(3.2)
                        .build()
                )
                .type("Example-vehicle-type")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .build()

        val roundtrippedLaunchVehicleGetResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(launchVehicleGetResponse),
                jacksonTypeRef<LaunchVehicleGetResponse>(),
            )

        assertThat(roundtrippedLaunchVehicleGetResponse).isEqualTo(launchVehicleGetResponse)
    }
}
