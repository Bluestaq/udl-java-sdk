// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.collectrequests

import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class CollectRequestCreateParamsTest {

    @Test
    fun create() {
        CollectRequestCreateParams.builder()
            .classificationMarking("U")
            .dataMode(CollectRequestCreateParams.DataMode.TEST)
            .source("Bluestaq")
            .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .type("DWELL")
            .id("COLLECTREQUEST-ID")
            .alt(1.1)
            .argOfPerigee(1.1)
            .az(1.1)
            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
            .createdBy("some.user")
            .customer("Bluestaq")
            .dec(1.1)
            .duration(11)
            .dwellId("DWELL-ID")
            .eccentricity(1.1)
            .el(1.1)
            .elset(
                CollectRequestCreateParams.Elset.builder()
                    .classificationMarking("U")
                    .dataMode(CollectRequestCreateParams.Elset.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .agom(0.0126)
                    .algorithm("Example algorithm")
                    .apogee(1.1)
                    .argOfPerigee(1.1)
                    .ballisticCoeff(0.00815)
                    .bStar(1.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("Example description")
                    .eccentricity(0.333)
                    .ephemType(1L)
                    .idElset("ELSET-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .inclination(45.1)
                    .line1("Example line1")
                    .line2("Example line2")
                    .meanAnomaly(179.1)
                    .meanMotion(1.1)
                    .meanMotionDDot(1.1)
                    .meanMotionDot(1.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .perigee(1.1)
                    .period(1.1)
                    .raan(1.1)
                    .rawFileUri("Example URI")
                    .revNo(111)
                    .satNo(12)
                    .semiMajorAxis(1.1)
                    .addSourcedData("OBSERVATION_UUID1")
                    .addSourcedData("OBSERVATION_UUID2")
                    .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RADAR)
                    .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RF)
                    .sourceDl("AXE")
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .transactionId("TRANSACTION-ID")
                    .uct(false)
                    .build()
            )
            .endTime(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
            .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
            .esId("ES-ID")
            .extentAz(1.1)
            .extentEl(1.1)
            .extentRange(1.1)
            .externalId("EXTERNAL-ID")
            .frameRate(1.1)
            .freq(1.1)
            .freqMax(1.1)
            .freqMin(1.1)
            .idElset("REF-ELSET-ID")
            .idManifold("REF-MANIFOLD-ID")
            .idOnOrbit("REF-ONORBIT-ID")
            .idParentReq("da98671b-34db-47bf-8c8d-7c668b92c800")
            .idPlan("REF-PLAN-ID")
            .idSensor("REF-SENSOR-ID")
            .idStateVector("STATEVECTOR-ID")
            .inclination(1.1)
            .integrationTime(1.1)
            .iron(3)
            .irradiance(1.1)
            .lat(1.1)
            .lon(1.1)
            .msgCreateDate(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
            .msgType("SU67")
            .notes("Example notes")
            .numFrames(6)
            .numObs(9)
            .numTracks(3)
            .obType("RADAR")
            .orbitRegime("GEO")
            .orientAngle(1.1)
            .origin("Example source")
            .origNetwork("OPS1")
            .origObjectId("ORIGOBJECT-ID")
            .origSensorId("ORIGSENSOR-ID")
            .planIndex(8)
            .polarization("H")
            .priority("EMERGENCY")
            .ra(1.1)
            .raan(1.1)
            .range(1.1)
            .rcs(1.1)
            .rcsMax(1.1)
            .rcsMin(1.1)
            .reflectance(1.1)
            .satNo(101)
            .scenario("Example direction")
            .semiMajorAxis(1.1)
            .spectralModel("Example Model")
            .srchInc(1.1)
            .srchPattern("SCAN")
            .stateVector(
                CollectRequestCreateParams.StateVector.builder()
                    .classificationMarking("U")
                    .dataMode(CollectRequestCreateParams.StateVector.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .actualOdSpan(3.5)
                    .algorithm("SAMPLE_ALGORITHM")
                    .alt1ReferenceFrame("TEME")
                    .alt2ReferenceFrame("EFG/TDR")
                    .area(5.065)
                    .bDot(1.23)
                    .cmOffset(1.23)
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .covMethod("CALCULATED")
                    .covReferenceFrame(
                        CollectRequestCreateParams.StateVector.CovReferenceFrame.J2000
                    )
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .dragArea(4.739)
                    .dragCoeff(0.0224391269775)
                    .dragModel("JAC70")
                    .edr(1.23)
                    .addEqCov(1.1)
                    .addEqCov(2.2)
                    .errorControl(1.23)
                    .fixedStep(true)
                    .geopotentialModel("EGM-96")
                    .iau1980Terms(4)
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .idStateVector("STATEVECTOR-ID")
                    .integratorMode("integratorMode")
                    .inTrackThrust(true)
                    .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                    .lunarSolar(true)
                    .mass(164.5)
                    .obsAvailable(376)
                    .obsUsed(374)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .partials("ANALYTIC")
                    .pedigree("CONJUNCTION")
                    .polarMotionX(1.23)
                    .polarMotionY(1.23)
                    .posUnc(0.333399744452)
                    .rawFileUri("rawFileURI")
                    .recOdSpan(3.5)
                    .referenceFrame(CollectRequestCreateParams.StateVector.ReferenceFrame.J2000)
                    .residualsAcc(99.5)
                    .revNo(7205)
                    .rms(0.991)
                    .satNo(12)
                    .addSigmaPosUvw(1.23)
                    .addSigmaPosUvw(4.56)
                    .addSigmaVelUvw(1.23)
                    .addSigmaVelUvw(4.56)
                    .solarFluxApAvg(1.23)
                    .solarFluxF10(1.23)
                    .solarFluxF10Avg(1.23)
                    .solarRadPress(true)
                    .solarRadPressCoeff(0.0244394)
                    .solidEarthTides(true)
                    .addSourcedData("DATA1")
                    .addSourcedData("DATA2")
                    .addSourcedDataType(
                        CollectRequestCreateParams.StateVector.SourcedDataType.RADAR
                    )
                    .sourceDl("AXE")
                    .srpArea(4.311)
                    .stepMode("AUTO")
                    .stepSize(1.23)
                    .stepSizeSelection("AUTO")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taiUtc(1.23)
                    .thrustAccel(1.23)
                    .tracksAvail(163)
                    .tracksUsed(163)
                    .transactionId("transactionId")
                    .uct(true)
                    .ut1Rate(1.23)
                    .ut1Utc(1.23)
                    .velUnc(0.000004)
                    .xaccel(-2.12621392)
                    .xpos(-1118.577381)
                    .xposAlt1(-1145.688502)
                    .xposAlt2(-1456.915926)
                    .xvel(-4.25242784)
                    .xvelAlt1(-4.270832252)
                    .xvelAlt2(-1.219814294)
                    .yaccel(2.645553717)
                    .ypos(3026.231084)
                    .yposAlt1(3020.729572)
                    .yposAlt2(-2883.540406)
                    .yvel(5.291107434)
                    .yvelAlt1(5.27074276)
                    .yvelAlt2(-6.602080212)
                    .zaccel(-1.06310696)
                    .zpos(6167.831808)
                    .zposAlt1(6165.55187)
                    .zposAlt2(6165.55187)
                    .zvel(-3.356493869)
                    .zvelAlt1(-3.365155181)
                    .zvelAlt2(-3.365155181)
                    .build()
            )
            .stopAlt(1.1)
            .stopLat(1.1)
            .stopLon(1.1)
            .suffix("T")
            .addTag("PROVIDER_TAG1")
            .addTag("PROVIDER_TAG2")
            .targetSize(1.1)
            .taskCategory(4)
            .taskGroup("729")
            .taskId("TASK-ID")
            .transactionId("TRANSACTION-ID")
            .trueAnomoly(1.1)
            .uctFollowUp(false)
            .visMag(1.1)
            .visMagMax(1.1)
            .visMagMin(1.1)
            .xAngle(1.1)
            .yAngle(1.1)
            .build()
    }

    @Test
    fun body() {
        val params =
            CollectRequestCreateParams.builder()
                .classificationMarking("U")
                .dataMode(CollectRequestCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .type("DWELL")
                .id("COLLECTREQUEST-ID")
                .alt(1.1)
                .argOfPerigee(1.1)
                .az(1.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .customer("Bluestaq")
                .dec(1.1)
                .duration(11)
                .dwellId("DWELL-ID")
                .eccentricity(1.1)
                .el(1.1)
                .elset(
                    CollectRequestCreateParams.Elset.builder()
                        .classificationMarking("U")
                        .dataMode(CollectRequestCreateParams.Elset.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .agom(0.0126)
                        .algorithm("Example algorithm")
                        .apogee(1.1)
                        .argOfPerigee(1.1)
                        .ballisticCoeff(0.00815)
                        .bStar(1.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("Example description")
                        .eccentricity(0.333)
                        .ephemType(1L)
                        .idElset("ELSET-ID")
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .inclination(45.1)
                        .line1("Example line1")
                        .line2("Example line2")
                        .meanAnomaly(179.1)
                        .meanMotion(1.1)
                        .meanMotionDDot(1.1)
                        .meanMotionDot(1.1)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .perigee(1.1)
                        .period(1.1)
                        .raan(1.1)
                        .rawFileUri("Example URI")
                        .revNo(111)
                        .satNo(12)
                        .semiMajorAxis(1.1)
                        .addSourcedData("OBSERVATION_UUID1")
                        .addSourcedData("OBSERVATION_UUID2")
                        .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RADAR)
                        .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RF)
                        .sourceDl("AXE")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .transactionId("TRANSACTION-ID")
                        .uct(false)
                        .build()
                )
                .endTime(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .esId("ES-ID")
                .extentAz(1.1)
                .extentEl(1.1)
                .extentRange(1.1)
                .externalId("EXTERNAL-ID")
                .frameRate(1.1)
                .freq(1.1)
                .freqMax(1.1)
                .freqMin(1.1)
                .idElset("REF-ELSET-ID")
                .idManifold("REF-MANIFOLD-ID")
                .idOnOrbit("REF-ONORBIT-ID")
                .idParentReq("da98671b-34db-47bf-8c8d-7c668b92c800")
                .idPlan("REF-PLAN-ID")
                .idSensor("REF-SENSOR-ID")
                .idStateVector("STATEVECTOR-ID")
                .inclination(1.1)
                .integrationTime(1.1)
                .iron(3)
                .irradiance(1.1)
                .lat(1.1)
                .lon(1.1)
                .msgCreateDate(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
                .msgType("SU67")
                .notes("Example notes")
                .numFrames(6)
                .numObs(9)
                .numTracks(3)
                .obType("RADAR")
                .orbitRegime("GEO")
                .orientAngle(1.1)
                .origin("Example source")
                .origNetwork("OPS1")
                .origObjectId("ORIGOBJECT-ID")
                .origSensorId("ORIGSENSOR-ID")
                .planIndex(8)
                .polarization("H")
                .priority("EMERGENCY")
                .ra(1.1)
                .raan(1.1)
                .range(1.1)
                .rcs(1.1)
                .rcsMax(1.1)
                .rcsMin(1.1)
                .reflectance(1.1)
                .satNo(101)
                .scenario("Example direction")
                .semiMajorAxis(1.1)
                .spectralModel("Example Model")
                .srchInc(1.1)
                .srchPattern("SCAN")
                .stateVector(
                    CollectRequestCreateParams.StateVector.builder()
                        .classificationMarking("U")
                        .dataMode(CollectRequestCreateParams.StateVector.DataMode.TEST)
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .source("Bluestaq")
                        .actualOdSpan(3.5)
                        .algorithm("SAMPLE_ALGORITHM")
                        .alt1ReferenceFrame("TEME")
                        .alt2ReferenceFrame("EFG/TDR")
                        .area(5.065)
                        .bDot(1.23)
                        .cmOffset(1.23)
                        .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                        .covMethod("CALCULATED")
                        .covReferenceFrame(
                            CollectRequestCreateParams.StateVector.CovReferenceFrame.J2000
                        )
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .descriptor("descriptor")
                        .dragArea(4.739)
                        .dragCoeff(0.0224391269775)
                        .dragModel("JAC70")
                        .edr(1.23)
                        .addEqCov(1.1)
                        .addEqCov(2.2)
                        .errorControl(1.23)
                        .fixedStep(true)
                        .geopotentialModel("EGM-96")
                        .iau1980Terms(4)
                        .idOnOrbit("ONORBIT-ID")
                        .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                        .idStateVector("STATEVECTOR-ID")
                        .integratorMode("integratorMode")
                        .inTrackThrust(true)
                        .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                        .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                        .lunarSolar(true)
                        .mass(164.5)
                        .obsAvailable(376)
                        .obsUsed(374)
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .partials("ANALYTIC")
                        .pedigree("CONJUNCTION")
                        .polarMotionX(1.23)
                        .polarMotionY(1.23)
                        .posUnc(0.333399744452)
                        .rawFileUri("rawFileURI")
                        .recOdSpan(3.5)
                        .referenceFrame(CollectRequestCreateParams.StateVector.ReferenceFrame.J2000)
                        .residualsAcc(99.5)
                        .revNo(7205)
                        .rms(0.991)
                        .satNo(12)
                        .addSigmaPosUvw(1.23)
                        .addSigmaPosUvw(4.56)
                        .addSigmaVelUvw(1.23)
                        .addSigmaVelUvw(4.56)
                        .solarFluxApAvg(1.23)
                        .solarFluxF10(1.23)
                        .solarFluxF10Avg(1.23)
                        .solarRadPress(true)
                        .solarRadPressCoeff(0.0244394)
                        .solidEarthTides(true)
                        .addSourcedData("DATA1")
                        .addSourcedData("DATA2")
                        .addSourcedDataType(
                            CollectRequestCreateParams.StateVector.SourcedDataType.RADAR
                        )
                        .sourceDl("AXE")
                        .srpArea(4.311)
                        .stepMode("AUTO")
                        .stepSize(1.23)
                        .stepSizeSelection("AUTO")
                        .addTag("TAG1")
                        .addTag("TAG2")
                        .taiUtc(1.23)
                        .thrustAccel(1.23)
                        .tracksAvail(163)
                        .tracksUsed(163)
                        .transactionId("transactionId")
                        .uct(true)
                        .ut1Rate(1.23)
                        .ut1Utc(1.23)
                        .velUnc(0.000004)
                        .xaccel(-2.12621392)
                        .xpos(-1118.577381)
                        .xposAlt1(-1145.688502)
                        .xposAlt2(-1456.915926)
                        .xvel(-4.25242784)
                        .xvelAlt1(-4.270832252)
                        .xvelAlt2(-1.219814294)
                        .yaccel(2.645553717)
                        .ypos(3026.231084)
                        .yposAlt1(3020.729572)
                        .yposAlt2(-2883.540406)
                        .yvel(5.291107434)
                        .yvelAlt1(5.27074276)
                        .yvelAlt2(-6.602080212)
                        .zaccel(-1.06310696)
                        .zpos(6167.831808)
                        .zposAlt1(6165.55187)
                        .zposAlt2(6165.55187)
                        .zvel(-3.356493869)
                        .zvelAlt1(-3.365155181)
                        .zvelAlt2(-3.365155181)
                        .build()
                )
                .stopAlt(1.1)
                .stopLat(1.1)
                .stopLon(1.1)
                .suffix("T")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .targetSize(1.1)
                .taskCategory(4)
                .taskGroup("729")
                .taskId("TASK-ID")
                .transactionId("TRANSACTION-ID")
                .trueAnomoly(1.1)
                .uctFollowUp(false)
                .visMag(1.1)
                .visMagMax(1.1)
                .visMagMin(1.1)
                .xAngle(1.1)
                .yAngle(1.1)
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(CollectRequestCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.type()).isEqualTo("DWELL")
        assertThat(body.id()).contains("COLLECTREQUEST-ID")
        assertThat(body.alt()).contains(1.1)
        assertThat(body.argOfPerigee()).contains(1.1)
        assertThat(body.az()).contains(1.1)
        assertThat(body.createdAt()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
        assertThat(body.createdBy()).contains("some.user")
        assertThat(body.customer()).contains("Bluestaq")
        assertThat(body.dec()).contains(1.1)
        assertThat(body.duration()).contains(11)
        assertThat(body.dwellId()).contains("DWELL-ID")
        assertThat(body.eccentricity()).contains(1.1)
        assertThat(body.el()).contains(1.1)
        assertThat(body.elset())
            .contains(
                CollectRequestCreateParams.Elset.builder()
                    .classificationMarking("U")
                    .dataMode(CollectRequestCreateParams.Elset.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .agom(0.0126)
                    .algorithm("Example algorithm")
                    .apogee(1.1)
                    .argOfPerigee(1.1)
                    .ballisticCoeff(0.00815)
                    .bStar(1.1)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("Example description")
                    .eccentricity(0.333)
                    .ephemType(1L)
                    .idElset("ELSET-ID")
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .inclination(45.1)
                    .line1("Example line1")
                    .line2("Example line2")
                    .meanAnomaly(179.1)
                    .meanMotion(1.1)
                    .meanMotionDDot(1.1)
                    .meanMotionDot(1.1)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .perigee(1.1)
                    .period(1.1)
                    .raan(1.1)
                    .rawFileUri("Example URI")
                    .revNo(111)
                    .satNo(12)
                    .semiMajorAxis(1.1)
                    .addSourcedData("OBSERVATION_UUID1")
                    .addSourcedData("OBSERVATION_UUID2")
                    .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RADAR)
                    .addSourcedDataType(CollectRequestCreateParams.Elset.SourcedDataType.RF)
                    .sourceDl("AXE")
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .transactionId("TRANSACTION-ID")
                    .uct(false)
                    .build()
            )
        assertThat(body.endTime()).contains(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
        assertThat(body.epoch()).contains(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.esId()).contains("ES-ID")
        assertThat(body.extentAz()).contains(1.1)
        assertThat(body.extentEl()).contains(1.1)
        assertThat(body.extentRange()).contains(1.1)
        assertThat(body.externalId()).contains("EXTERNAL-ID")
        assertThat(body.frameRate()).contains(1.1)
        assertThat(body.freq()).contains(1.1)
        assertThat(body.freqMax()).contains(1.1)
        assertThat(body.freqMin()).contains(1.1)
        assertThat(body.idElset()).contains("REF-ELSET-ID")
        assertThat(body.idManifold()).contains("REF-MANIFOLD-ID")
        assertThat(body.idOnOrbit()).contains("REF-ONORBIT-ID")
        assertThat(body.idParentReq()).contains("da98671b-34db-47bf-8c8d-7c668b92c800")
        assertThat(body.idPlan()).contains("REF-PLAN-ID")
        assertThat(body.idSensor()).contains("REF-SENSOR-ID")
        assertThat(body.idStateVector()).contains("STATEVECTOR-ID")
        assertThat(body.inclination()).contains(1.1)
        assertThat(body.integrationTime()).contains(1.1)
        assertThat(body.iron()).contains(3)
        assertThat(body.irradiance()).contains(1.1)
        assertThat(body.lat()).contains(1.1)
        assertThat(body.lon()).contains(1.1)
        assertThat(body.msgCreateDate()).contains(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
        assertThat(body.msgType()).contains("SU67")
        assertThat(body.notes()).contains("Example notes")
        assertThat(body.numFrames()).contains(6)
        assertThat(body.numObs()).contains(9)
        assertThat(body.numTracks()).contains(3)
        assertThat(body.obType()).contains("RADAR")
        assertThat(body.orbitRegime()).contains("GEO")
        assertThat(body.orientAngle()).contains(1.1)
        assertThat(body.origin()).contains("Example source")
        assertThat(body.origNetwork()).contains("OPS1")
        assertThat(body.origObjectId()).contains("ORIGOBJECT-ID")
        assertThat(body.origSensorId()).contains("ORIGSENSOR-ID")
        assertThat(body.planIndex()).contains(8)
        assertThat(body.polarization()).contains("H")
        assertThat(body.priority()).contains("EMERGENCY")
        assertThat(body.ra()).contains(1.1)
        assertThat(body.raan()).contains(1.1)
        assertThat(body.range()).contains(1.1)
        assertThat(body.rcs()).contains(1.1)
        assertThat(body.rcsMax()).contains(1.1)
        assertThat(body.rcsMin()).contains(1.1)
        assertThat(body.reflectance()).contains(1.1)
        assertThat(body.satNo()).contains(101)
        assertThat(body.scenario()).contains("Example direction")
        assertThat(body.semiMajorAxis()).contains(1.1)
        assertThat(body.spectralModel()).contains("Example Model")
        assertThat(body.srchInc()).contains(1.1)
        assertThat(body.srchPattern()).contains("SCAN")
        assertThat(body.stateVector())
            .contains(
                CollectRequestCreateParams.StateVector.builder()
                    .classificationMarking("U")
                    .dataMode(CollectRequestCreateParams.StateVector.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .actualOdSpan(3.5)
                    .algorithm("SAMPLE_ALGORITHM")
                    .alt1ReferenceFrame("TEME")
                    .alt2ReferenceFrame("EFG/TDR")
                    .area(5.065)
                    .bDot(1.23)
                    .cmOffset(1.23)
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .covMethod("CALCULATED")
                    .covReferenceFrame(
                        CollectRequestCreateParams.StateVector.CovReferenceFrame.J2000
                    )
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .dragArea(4.739)
                    .dragCoeff(0.0224391269775)
                    .dragModel("JAC70")
                    .edr(1.23)
                    .addEqCov(1.1)
                    .addEqCov(2.2)
                    .errorControl(1.23)
                    .fixedStep(true)
                    .geopotentialModel("EGM-96")
                    .iau1980Terms(4)
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .idStateVector("STATEVECTOR-ID")
                    .integratorMode("integratorMode")
                    .inTrackThrust(true)
                    .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                    .lunarSolar(true)
                    .mass(164.5)
                    .obsAvailable(376)
                    .obsUsed(374)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .partials("ANALYTIC")
                    .pedigree("CONJUNCTION")
                    .polarMotionX(1.23)
                    .polarMotionY(1.23)
                    .posUnc(0.333399744452)
                    .rawFileUri("rawFileURI")
                    .recOdSpan(3.5)
                    .referenceFrame(CollectRequestCreateParams.StateVector.ReferenceFrame.J2000)
                    .residualsAcc(99.5)
                    .revNo(7205)
                    .rms(0.991)
                    .satNo(12)
                    .addSigmaPosUvw(1.23)
                    .addSigmaPosUvw(4.56)
                    .addSigmaVelUvw(1.23)
                    .addSigmaVelUvw(4.56)
                    .solarFluxApAvg(1.23)
                    .solarFluxF10(1.23)
                    .solarFluxF10Avg(1.23)
                    .solarRadPress(true)
                    .solarRadPressCoeff(0.0244394)
                    .solidEarthTides(true)
                    .addSourcedData("DATA1")
                    .addSourcedData("DATA2")
                    .addSourcedDataType(
                        CollectRequestCreateParams.StateVector.SourcedDataType.RADAR
                    )
                    .sourceDl("AXE")
                    .srpArea(4.311)
                    .stepMode("AUTO")
                    .stepSize(1.23)
                    .stepSizeSelection("AUTO")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taiUtc(1.23)
                    .thrustAccel(1.23)
                    .tracksAvail(163)
                    .tracksUsed(163)
                    .transactionId("transactionId")
                    .uct(true)
                    .ut1Rate(1.23)
                    .ut1Utc(1.23)
                    .velUnc(0.000004)
                    .xaccel(-2.12621392)
                    .xpos(-1118.577381)
                    .xposAlt1(-1145.688502)
                    .xposAlt2(-1456.915926)
                    .xvel(-4.25242784)
                    .xvelAlt1(-4.270832252)
                    .xvelAlt2(-1.219814294)
                    .yaccel(2.645553717)
                    .ypos(3026.231084)
                    .yposAlt1(3020.729572)
                    .yposAlt2(-2883.540406)
                    .yvel(5.291107434)
                    .yvelAlt1(5.27074276)
                    .yvelAlt2(-6.602080212)
                    .zaccel(-1.06310696)
                    .zpos(6167.831808)
                    .zposAlt1(6165.55187)
                    .zposAlt2(6165.55187)
                    .zvel(-3.356493869)
                    .zvelAlt1(-3.365155181)
                    .zvelAlt2(-3.365155181)
                    .build()
            )
        assertThat(body.stopAlt()).contains(1.1)
        assertThat(body.stopLat()).contains(1.1)
        assertThat(body.stopLon()).contains(1.1)
        assertThat(body.suffix()).contains("T")
        assertThat(body.tags().getOrNull()).containsExactly("PROVIDER_TAG1", "PROVIDER_TAG2")
        assertThat(body.targetSize()).contains(1.1)
        assertThat(body.taskCategory()).contains(4)
        assertThat(body.taskGroup()).contains("729")
        assertThat(body.taskId()).contains("TASK-ID")
        assertThat(body.transactionId()).contains("TRANSACTION-ID")
        assertThat(body.trueAnomoly()).contains(1.1)
        assertThat(body.uctFollowUp()).contains(false)
        assertThat(body.visMag()).contains(1.1)
        assertThat(body.visMagMax()).contains(1.1)
        assertThat(body.visMagMin()).contains(1.1)
        assertThat(body.xAngle()).contains(1.1)
        assertThat(body.yAngle()).contains(1.1)
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            CollectRequestCreateParams.builder()
                .classificationMarking("U")
                .dataMode(CollectRequestCreateParams.DataMode.TEST)
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .type("DWELL")
                .build()

        val body = params._body()

        assertThat(body.classificationMarking()).isEqualTo("U")
        assertThat(body.dataMode()).isEqualTo(CollectRequestCreateParams.DataMode.TEST)
        assertThat(body.source()).isEqualTo("Bluestaq")
        assertThat(body.startTime()).isEqualTo(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
        assertThat(body.type()).isEqualTo("DWELL")
    }
}
