// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airtransportmissions

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.unifieddatalibrary.api.core.jsonMapper
import com.unifieddatalibrary.api.models.airtransportmissions.AirTransportMissionAbridged
import java.time.OffsetDateTime
import kotlin.jvm.optionals.getOrNull
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AirTransportMissionAbridgedTest {

    @Test
    fun create() {
      val airTransportMissionAbridged = AirTransportMissionAbridged.builder()
          .classificationMarking("U")
          .dataMode(AirTransportMissionAbridged.DataMode.TEST)
          .source("Bluestaq")
          .id("bdad6945-c9e4-b829-f7be-1ad075541921")
          .abp("ZZ12")
          .alias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
          .allocatedUnit("437 AEW")
          .amcMissionId("AJM7939B1123")
          .apacsId("1083034")
          .atoCallSign("CHARLIE")
          .atoMissionId("8900")
          .callSign("RCH123")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cw(true)
          .dipWorksheetName("G2-182402-AB")
          .firstPickUp("KFAY")
          .gdssMissionId("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
          .addHazMat(AirTransportMissionAbridged.HazMat.builder()
              .applicableNotes("11,12")
              .cgc("A")
              .cgn("4,5,7,8")
              .classDiv(1.1)
              .extHazMatId("cb6289e0f38534e01291ab6421d42724")
              .itemName("LITHIUM METAL BATTERIES")
              .netExpWt(12.1)
              .offIcao("MBPV")
              .offItin(300)
              .onIcao("LIRQ")
              .onItin(50)
              .pieces(29)
              .planned("P")
              .unNum("0181")
              .weight(22.1)
              .build())
          .jcsPriority("1A3")
          .lastDropOff("PGUA")
          .loadCategoryType("MIXED")
          .m1("11")
          .m2("3214")
          .m3a("6655")
          .naf("18AF")
          .nextAmcMissionId("AJM7939B1124")
          .nextMissionId("186e5658-1079-45c0-bccc-02d2fa31b663")
          .node("45TEST")
          .objective("Deliver water to island X.")
          .operation("Golden Eye")
          .origin("THIRD_PARTY_DATASOURCE")
          .origMissionId("614bebb6-a62e-053c-ca51-e79f8a402b28")
          .origNetwork("OPS1")
          .prevAmcMissionId("AJM7939B1122")
          .prevMissionId("a77055df-edc3-4047-a5fa-604f80b9fe3c")
          .purpose("People at island X need water ASAP. Two previous attempts failed due to weather.")
          .addRemark(AirTransportMissionAbridged.Remark.builder()
              .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
              .gdssRemarkId("GDSSREMARK-ID")
              .itineraryNum(825)
              .text("Example mission remarks.")
              .type("MP")
              .user("John Doe")
              .build())
          .addRequirement(AirTransportMissionAbridged.Requirement.builder()
              .bulkWeight(1.3)
              .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
              .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .numAmbulatory(10)
              .numAttendant(10)
              .numLitter(10)
              .numPax(44)
              .offloadId(300)
              .offloadLoCode("KHOP")
              .onloadId(200)
              .onloadLoCode("KCHS")
              .oplan("5027")
              .outsizeWeight(1.3)
              .oversizeWeight(1.3)
              .projName("CENTINTRA21")
              .transReqNum("T01ME01")
              .uln("T01ME01")
              .build())
          .sourceDl("AXE")
          .sourceSysDeviation(-90.12)
          .state("EXECUTION")
          .type("SAAM")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      assertThat(airTransportMissionAbridged.classificationMarking()).isEqualTo("U")
      assertThat(airTransportMissionAbridged.dataMode()).isEqualTo(AirTransportMissionAbridged.DataMode.TEST)
      assertThat(airTransportMissionAbridged.source()).isEqualTo("Bluestaq")
      assertThat(airTransportMissionAbridged.id()).contains("bdad6945-c9e4-b829-f7be-1ad075541921")
      assertThat(airTransportMissionAbridged.abp()).contains("ZZ12")
      assertThat(airTransportMissionAbridged.alias()).contains("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
      assertThat(airTransportMissionAbridged.allocatedUnit()).contains("437 AEW")
      assertThat(airTransportMissionAbridged.amcMissionId()).contains("AJM7939B1123")
      assertThat(airTransportMissionAbridged.apacsId()).contains("1083034")
      assertThat(airTransportMissionAbridged.atoCallSign()).contains("CHARLIE")
      assertThat(airTransportMissionAbridged.atoMissionId()).contains("8900")
      assertThat(airTransportMissionAbridged.callSign()).contains("RCH123")
      assertThat(airTransportMissionAbridged.createdAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(airTransportMissionAbridged.createdBy()).contains("some.user")
      assertThat(airTransportMissionAbridged.cw()).contains(true)
      assertThat(airTransportMissionAbridged.dipWorksheetName()).contains("G2-182402-AB")
      assertThat(airTransportMissionAbridged.firstPickUp()).contains("KFAY")
      assertThat(airTransportMissionAbridged.gdssMissionId()).contains("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
      assertThat(airTransportMissionAbridged.hazMat().getOrNull()).containsExactly(AirTransportMissionAbridged.HazMat.builder()
          .applicableNotes("11,12")
          .cgc("A")
          .cgn("4,5,7,8")
          .classDiv(1.1)
          .extHazMatId("cb6289e0f38534e01291ab6421d42724")
          .itemName("LITHIUM METAL BATTERIES")
          .netExpWt(12.1)
          .offIcao("MBPV")
          .offItin(300)
          .onIcao("LIRQ")
          .onItin(50)
          .pieces(29)
          .planned("P")
          .unNum("0181")
          .weight(22.1)
          .build())
      assertThat(airTransportMissionAbridged.jcsPriority()).contains("1A3")
      assertThat(airTransportMissionAbridged.lastDropOff()).contains("PGUA")
      assertThat(airTransportMissionAbridged.loadCategoryType()).contains("MIXED")
      assertThat(airTransportMissionAbridged.m1()).contains("11")
      assertThat(airTransportMissionAbridged.m2()).contains("3214")
      assertThat(airTransportMissionAbridged.m3a()).contains("6655")
      assertThat(airTransportMissionAbridged.naf()).contains("18AF")
      assertThat(airTransportMissionAbridged.nextAmcMissionId()).contains("AJM7939B1124")
      assertThat(airTransportMissionAbridged.nextMissionId()).contains("186e5658-1079-45c0-bccc-02d2fa31b663")
      assertThat(airTransportMissionAbridged.node()).contains("45TEST")
      assertThat(airTransportMissionAbridged.objective()).contains("Deliver water to island X.")
      assertThat(airTransportMissionAbridged.operation()).contains("Golden Eye")
      assertThat(airTransportMissionAbridged.origin()).contains("THIRD_PARTY_DATASOURCE")
      assertThat(airTransportMissionAbridged.origMissionId()).contains("614bebb6-a62e-053c-ca51-e79f8a402b28")
      assertThat(airTransportMissionAbridged.origNetwork()).contains("OPS1")
      assertThat(airTransportMissionAbridged.prevAmcMissionId()).contains("AJM7939B1122")
      assertThat(airTransportMissionAbridged.prevMissionId()).contains("a77055df-edc3-4047-a5fa-604f80b9fe3c")
      assertThat(airTransportMissionAbridged.purpose()).contains("People at island X need water ASAP. Two previous attempts failed due to weather.")
      assertThat(airTransportMissionAbridged.remarks().getOrNull()).containsExactly(AirTransportMissionAbridged.Remark.builder()
          .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .gdssRemarkId("GDSSREMARK-ID")
          .itineraryNum(825)
          .text("Example mission remarks.")
          .type("MP")
          .user("John Doe")
          .build())
      assertThat(airTransportMissionAbridged.requirements().getOrNull()).containsExactly(AirTransportMissionAbridged.Requirement.builder()
          .bulkWeight(1.3)
          .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
          .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
          .numAmbulatory(10)
          .numAttendant(10)
          .numLitter(10)
          .numPax(44)
          .offloadId(300)
          .offloadLoCode("KHOP")
          .onloadId(200)
          .onloadLoCode("KCHS")
          .oplan("5027")
          .outsizeWeight(1.3)
          .oversizeWeight(1.3)
          .projName("CENTINTRA21")
          .transReqNum("T01ME01")
          .uln("T01ME01")
          .build())
      assertThat(airTransportMissionAbridged.sourceDl()).contains("AXE")
      assertThat(airTransportMissionAbridged.sourceSysDeviation()).contains(-90.12)
      assertThat(airTransportMissionAbridged.state()).contains("EXECUTION")
      assertThat(airTransportMissionAbridged.type()).contains("SAAM")
      assertThat(airTransportMissionAbridged.updatedAt()).contains(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
      assertThat(airTransportMissionAbridged.updatedBy()).contains("some.user")
    }

    @Test
    fun roundtrip() {
      val jsonMapper = jsonMapper()
      val airTransportMissionAbridged = AirTransportMissionAbridged.builder()
          .classificationMarking("U")
          .dataMode(AirTransportMissionAbridged.DataMode.TEST)
          .source("Bluestaq")
          .id("bdad6945-c9e4-b829-f7be-1ad075541921")
          .abp("ZZ12")
          .alias("PACIFIC DEPLOY / CHAP 3 MOVEMENT")
          .allocatedUnit("437 AEW")
          .amcMissionId("AJM7939B1123")
          .apacsId("1083034")
          .atoCallSign("CHARLIE")
          .atoMissionId("8900")
          .callSign("RCH123")
          .createdAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .createdBy("some.user")
          .cw(true)
          .dipWorksheetName("G2-182402-AB")
          .firstPickUp("KFAY")
          .gdssMissionId("1e6edeec-72e9-aaec-d33c-51147cb5ffdd")
          .addHazMat(AirTransportMissionAbridged.HazMat.builder()
              .applicableNotes("11,12")
              .cgc("A")
              .cgn("4,5,7,8")
              .classDiv(1.1)
              .extHazMatId("cb6289e0f38534e01291ab6421d42724")
              .itemName("LITHIUM METAL BATTERIES")
              .netExpWt(12.1)
              .offIcao("MBPV")
              .offItin(300)
              .onIcao("LIRQ")
              .onItin(50)
              .pieces(29)
              .planned("P")
              .unNum("0181")
              .weight(22.1)
              .build())
          .jcsPriority("1A3")
          .lastDropOff("PGUA")
          .loadCategoryType("MIXED")
          .m1("11")
          .m2("3214")
          .m3a("6655")
          .naf("18AF")
          .nextAmcMissionId("AJM7939B1124")
          .nextMissionId("186e5658-1079-45c0-bccc-02d2fa31b663")
          .node("45TEST")
          .objective("Deliver water to island X.")
          .operation("Golden Eye")
          .origin("THIRD_PARTY_DATASOURCE")
          .origMissionId("614bebb6-a62e-053c-ca51-e79f8a402b28")
          .origNetwork("OPS1")
          .prevAmcMissionId("AJM7939B1122")
          .prevMissionId("a77055df-edc3-4047-a5fa-604f80b9fe3c")
          .purpose("People at island X need water ASAP. Two previous attempts failed due to weather.")
          .addRemark(AirTransportMissionAbridged.Remark.builder()
              .date(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
              .gdssRemarkId("GDSSREMARK-ID")
              .itineraryNum(825)
              .text("Example mission remarks.")
              .type("MP")
              .user("John Doe")
              .build())
          .addRequirement(AirTransportMissionAbridged.Requirement.builder()
              .bulkWeight(1.3)
              .ead(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .gdssReqId("23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c")
              .lad(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
              .numAmbulatory(10)
              .numAttendant(10)
              .numLitter(10)
              .numPax(44)
              .offloadId(300)
              .offloadLoCode("KHOP")
              .onloadId(200)
              .onloadLoCode("KCHS")
              .oplan("5027")
              .outsizeWeight(1.3)
              .oversizeWeight(1.3)
              .projName("CENTINTRA21")
              .transReqNum("T01ME01")
              .uln("T01ME01")
              .build())
          .sourceDl("AXE")
          .sourceSysDeviation(-90.12)
          .state("EXECUTION")
          .type("SAAM")
          .updatedAt(OffsetDateTime.parse("2022-01-01T16:00:00.123Z"))
          .updatedBy("some.user")
          .build()

      val roundtrippedAirTransportMissionAbridged = jsonMapper.readValue(jsonMapper.writeValueAsString(airTransportMissionAbridged), jacksonTypeRef<AirTransportMissionAbridged>())

      assertThat(roundtrippedAirTransportMissionAbridged).isEqualTo(airTransportMissionAbridged)
    }
}
