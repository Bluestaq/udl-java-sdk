// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.services.async.diplomaticclearance

import com.unifieddatalibrary.api.TestServerExtension
import com.unifieddatalibrary.api.client.okhttp.UnifieddatalibraryOkHttpClientAsync
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryCountParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryCreateBulkParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryCreateParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryRetrieveParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryTupleParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryUnvalidatedPublishParams
import com.unifieddatalibrary.api.models.diplomaticclearance.country.CountryUpdateParams
import java.time.OffsetDateTime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(TestServerExtension::class)
internal class CountryServiceAsyncTest {

    @Test
    fun create() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val future =
            countryServiceAsync.create(
                CountryCreateParams.builder()
                    .classificationMarking("U")
                    .countryCode("NL")
                    .dataMode(CountryCreateParams.DataMode.TEST)
                    .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                    .acceptsDms(true)
                    .acceptsEmail(true)
                    .acceptsFax(true)
                    .acceptsSiprNet(false)
                    .agency("TACC")
                    .altCountryCode("IZ")
                    .closeTime("16:00")
                    .countryId("GDSSBL010412140742262246")
                    .countryName("NETHERLANDS")
                    .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addDiplomaticClearanceCountryContact(
                        CountryCreateParams.DiplomaticClearanceCountryContact.builder()
                            .ahNum("256039858")
                            .ahSpdDialCode("75")
                            .commNum("904716104")
                            .commSpdDialCode("74")
                            .contactId("GDSSMC112108191329534522")
                            .contactName("John Smith")
                            .contactRemark("Contact remark")
                            .dsnNum("513827215")
                            .dsnSpdDialCode("94")
                            .faxNum("571654897")
                            .niprNum("525574441")
                            .siprNum("546144352")
                            .build()
                    )
                    .addDiplomaticClearanceCountryEntryExitPoint(
                        CountryCreateParams.DiplomaticClearanceCountryEntryExitPoint.builder()
                            .isEntry(true)
                            .isExit(true)
                            .pointName("BATEL")
                            .build()
                    )
                    .addDiplomaticClearanceCountryProfile(
                        CountryCreateParams.DiplomaticClearanceCountryProfile.builder()
                            .cargoPaxRemark("Cargo passenger remark")
                            .clearanceId("MDCNPER231360050AAR")
                            .crewInfoRemark("Crew info remark")
                            .defClearanceStatus("R")
                            .defEntryRemark("Default entry remark")
                            .defEntryTime("15:00")
                            .defExitRemark("Default exit remark")
                            .defExitTime("17:00")
                            .fltInfoRemark("Flight info remark")
                            .hazInfoRemark("Hazmat remark")
                            .landDefProf(true)
                            .landLeadTime(7)
                            .landLeadTimeRemark("Landing lead time remark")
                            .landLeadTimeUnit("Day")
                            .landValidPeriodMinus(0)
                            .landValidPeriodPlus(72)
                            .landValidPeriodRemark("Landing valid period remark")
                            .landValidPeriodUnit("Hour")
                            .overflyDefProf(true)
                            .overflyLeadTime(7)
                            .overflyLeadTimeRemark("Overfly remark")
                            .overflyLeadTimeUnit("Day")
                            .overflyValidPeriodMinus(0)
                            .overflyValidPeriodPlus(72)
                            .overflyValidPeriodRemark("Overfly valid period remark")
                            .overflyValidPeriodUnit("Hour")
                            .profile("Netherlands Non Haz Landing")
                            .profileAgency("USAFE")
                            .profileId("GDSSBL010412140742262247")
                            .profileRemark("Profile remark")
                            .reqAcAltName(false)
                            .reqAllHazInfo(false)
                            .reqAmcStdInfo(false)
                            .reqCargoList(false)
                            .reqCargoPax(false)
                            .reqClass1Info(false)
                            .reqClass9Info(false)
                            .reqCrewComp(false)
                            .reqCrewDetail(false)
                            .reqCrewInfo(false)
                            .reqDiv1Info(false)
                            .reqDv(false)
                            .reqEntryExitCoord(false)
                            .reqFltInfo(false)
                            .reqFltPlanRoute(false)
                            .reqFundSource(false)
                            .reqHazInfo(false)
                            .reqIcao(false)
                            .reqPassportInfo(false)
                            .reqRaven(false)
                            .reqRepChange(false)
                            .reqTailNum(false)
                            .reqWeaponsInfo(false)
                            .undefinedCrewReporting(false)
                            .build()
                    )
                    .existingProfile(true)
                    .gmtOffset("-04:30")
                    .officeName("DAO.EU")
                    .officePoc("John Smith")
                    .officeRemark("Diplomatic clearance office remark")
                    .openFri(true)
                    .openMon(true)
                    .openSat(false)
                    .openSun(false)
                    .openThu(true)
                    .openTime("07:00")
                    .openTue(true)
                    .openWed(true)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .sourceDl("AXE")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun retrieve() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val countryFuture =
            countryServiceAsync.retrieve(
                CountryRetrieveParams.builder().id("id").firstResult(0L).maxResults(0L).build()
            )

        val country = countryFuture.get()
        country.validate()
    }

    @Test
    fun update() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val future =
            countryServiceAsync.update(
                CountryUpdateParams.builder()
                    .pathId("id")
                    .classificationMarking("U")
                    .countryCode("NL")
                    .dataMode(CountryUpdateParams.DataMode.TEST)
                    .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                    .source("Bluestaq")
                    .bodyId("25059135-4afc-45c2-b78b-d6e843dbd96d")
                    .acceptsDms(true)
                    .acceptsEmail(true)
                    .acceptsFax(true)
                    .acceptsSiprNet(false)
                    .agency("TACC")
                    .altCountryCode("IZ")
                    .closeTime("16:00")
                    .countryId("GDSSBL010412140742262246")
                    .countryName("NETHERLANDS")
                    .countryRemark("Amsterdam airport EHAM will not accept hazardous cargo.")
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .addDiplomaticClearanceCountryContact(
                        CountryUpdateParams.DiplomaticClearanceCountryContact.builder()
                            .ahNum("256039858")
                            .ahSpdDialCode("75")
                            .commNum("904716104")
                            .commSpdDialCode("74")
                            .contactId("GDSSMC112108191329534522")
                            .contactName("John Smith")
                            .contactRemark("Contact remark")
                            .dsnNum("513827215")
                            .dsnSpdDialCode("94")
                            .faxNum("571654897")
                            .niprNum("525574441")
                            .siprNum("546144352")
                            .build()
                    )
                    .addDiplomaticClearanceCountryEntryExitPoint(
                        CountryUpdateParams.DiplomaticClearanceCountryEntryExitPoint.builder()
                            .isEntry(true)
                            .isExit(true)
                            .pointName("BATEL")
                            .build()
                    )
                    .addDiplomaticClearanceCountryProfile(
                        CountryUpdateParams.DiplomaticClearanceCountryProfile.builder()
                            .cargoPaxRemark("Cargo passenger remark")
                            .clearanceId("MDCNPER231360050AAR")
                            .crewInfoRemark("Crew info remark")
                            .defClearanceStatus("R")
                            .defEntryRemark("Default entry remark")
                            .defEntryTime("15:00")
                            .defExitRemark("Default exit remark")
                            .defExitTime("17:00")
                            .fltInfoRemark("Flight info remark")
                            .hazInfoRemark("Hazmat remark")
                            .landDefProf(true)
                            .landLeadTime(7)
                            .landLeadTimeRemark("Landing lead time remark")
                            .landLeadTimeUnit("Day")
                            .landValidPeriodMinus(0)
                            .landValidPeriodPlus(72)
                            .landValidPeriodRemark("Landing valid period remark")
                            .landValidPeriodUnit("Hour")
                            .overflyDefProf(true)
                            .overflyLeadTime(7)
                            .overflyLeadTimeRemark("Overfly remark")
                            .overflyLeadTimeUnit("Day")
                            .overflyValidPeriodMinus(0)
                            .overflyValidPeriodPlus(72)
                            .overflyValidPeriodRemark("Overfly valid period remark")
                            .overflyValidPeriodUnit("Hour")
                            .profile("Netherlands Non Haz Landing")
                            .profileAgency("USAFE")
                            .profileId("GDSSBL010412140742262247")
                            .profileRemark("Profile remark")
                            .reqAcAltName(false)
                            .reqAllHazInfo(false)
                            .reqAmcStdInfo(false)
                            .reqCargoList(false)
                            .reqCargoPax(false)
                            .reqClass1Info(false)
                            .reqClass9Info(false)
                            .reqCrewComp(false)
                            .reqCrewDetail(false)
                            .reqCrewInfo(false)
                            .reqDiv1Info(false)
                            .reqDv(false)
                            .reqEntryExitCoord(false)
                            .reqFltInfo(false)
                            .reqFltPlanRoute(false)
                            .reqFundSource(false)
                            .reqHazInfo(false)
                            .reqIcao(false)
                            .reqPassportInfo(false)
                            .reqRaven(false)
                            .reqRepChange(false)
                            .reqTailNum(false)
                            .reqWeaponsInfo(false)
                            .undefinedCrewReporting(false)
                            .build()
                    )
                    .existingProfile(true)
                    .gmtOffset("-04:30")
                    .officeName("DAO.EU")
                    .officePoc("John Smith")
                    .officeRemark("Diplomatic clearance office remark")
                    .openFri(true)
                    .openMon(true)
                    .openSat(false)
                    .openSun(false)
                    .openThu(true)
                    .openTime("07:00")
                    .openTue(true)
                    .openWed(true)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("ORIG")
                    .sourceDl("AXE")
                    .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .updatedBy("some.user")
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun list() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val pageFuture = countryServiceAsync.list()

        val page = pageFuture.get()
        page.items().forEach { it.validate() }
    }

    @Test
    fun delete() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val future = countryServiceAsync.delete("id")

        val response = future.get()
    }

    @Test
    fun count() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val responseFuture =
            countryServiceAsync.count(
                CountryCountParams.builder().firstResult(0L).maxResults(0L).build()
            )

        val response = responseFuture.get()
    }

    @Test
    fun createBulk() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val future =
            countryServiceAsync.createBulk(
                CountryCreateBulkParams.builder()
                    .addBody(
                        CountryCreateBulkParams.Body.builder()
                            .classificationMarking("U")
                            .countryCode("NL")
                            .dataMode(CountryCreateBulkParams.Body.DataMode.TEST)
                            .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .source("Bluestaq")
                            .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                            .acceptsDms(true)
                            .acceptsEmail(true)
                            .acceptsFax(true)
                            .acceptsSiprNet(false)
                            .agency("TACC")
                            .altCountryCode("IZ")
                            .closeTime("16:00")
                            .countryId("GDSSBL010412140742262246")
                            .countryName("NETHERLANDS")
                            .countryRemark(
                                "Amsterdam airport EHAM will not accept hazardous cargo."
                            )
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .addDiplomaticClearanceCountryContact(
                                CountryCreateBulkParams.Body.DiplomaticClearanceCountryContact
                                    .builder()
                                    .ahNum("256039858")
                                    .ahSpdDialCode("75")
                                    .commNum("904716104")
                                    .commSpdDialCode("74")
                                    .contactId("GDSSMC112108191329534522")
                                    .contactName("John Smith")
                                    .contactRemark("Contact remark")
                                    .dsnNum("513827215")
                                    .dsnSpdDialCode("94")
                                    .faxNum("571654897")
                                    .niprNum("525574441")
                                    .siprNum("546144352")
                                    .build()
                            )
                            .addDiplomaticClearanceCountryEntryExitPoint(
                                CountryCreateBulkParams.Body
                                    .DiplomaticClearanceCountryEntryExitPoint
                                    .builder()
                                    .isEntry(true)
                                    .isExit(true)
                                    .pointName("BATEL")
                                    .build()
                            )
                            .addDiplomaticClearanceCountryProfile(
                                CountryCreateBulkParams.Body.DiplomaticClearanceCountryProfile
                                    .builder()
                                    .cargoPaxRemark("Cargo passenger remark")
                                    .clearanceId("MDCNPER231360050AAR")
                                    .crewInfoRemark("Crew info remark")
                                    .defClearanceStatus("R")
                                    .defEntryRemark("Default entry remark")
                                    .defEntryTime("15:00")
                                    .defExitRemark("Default exit remark")
                                    .defExitTime("17:00")
                                    .fltInfoRemark("Flight info remark")
                                    .hazInfoRemark("Hazmat remark")
                                    .landDefProf(true)
                                    .landLeadTime(7)
                                    .landLeadTimeRemark("Landing lead time remark")
                                    .landLeadTimeUnit("Day")
                                    .landValidPeriodMinus(0)
                                    .landValidPeriodPlus(72)
                                    .landValidPeriodRemark("Landing valid period remark")
                                    .landValidPeriodUnit("Hour")
                                    .overflyDefProf(true)
                                    .overflyLeadTime(7)
                                    .overflyLeadTimeRemark("Overfly remark")
                                    .overflyLeadTimeUnit("Day")
                                    .overflyValidPeriodMinus(0)
                                    .overflyValidPeriodPlus(72)
                                    .overflyValidPeriodRemark("Overfly valid period remark")
                                    .overflyValidPeriodUnit("Hour")
                                    .profile("Netherlands Non Haz Landing")
                                    .profileAgency("USAFE")
                                    .profileId("GDSSBL010412140742262247")
                                    .profileRemark("Profile remark")
                                    .reqAcAltName(false)
                                    .reqAllHazInfo(false)
                                    .reqAmcStdInfo(false)
                                    .reqCargoList(false)
                                    .reqCargoPax(false)
                                    .reqClass1Info(false)
                                    .reqClass9Info(false)
                                    .reqCrewComp(false)
                                    .reqCrewDetail(false)
                                    .reqCrewInfo(false)
                                    .reqDiv1Info(false)
                                    .reqDv(false)
                                    .reqEntryExitCoord(false)
                                    .reqFltInfo(false)
                                    .reqFltPlanRoute(false)
                                    .reqFundSource(false)
                                    .reqHazInfo(false)
                                    .reqIcao(false)
                                    .reqPassportInfo(false)
                                    .reqRaven(false)
                                    .reqRepChange(false)
                                    .reqTailNum(false)
                                    .reqWeaponsInfo(false)
                                    .undefinedCrewReporting(false)
                                    .build()
                            )
                            .existingProfile(true)
                            .gmtOffset("-04:30")
                            .officeName("DAO.EU")
                            .officePoc("John Smith")
                            .officeRemark("Diplomatic clearance office remark")
                            .openFri(true)
                            .openMon(true)
                            .openSat(false)
                            .openSun(false)
                            .openThu(true)
                            .openTime("07:00")
                            .openTue(true)
                            .openWed(true)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("ORIG")
                            .sourceDl("AXE")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun queryHelp() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val responseFuture = countryServiceAsync.queryHelp()

        val response = responseFuture.get()
        response.validate()
    }

    @Test
    fun tuple() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val responseFuture =
            countryServiceAsync.tuple(
                CountryTupleParams.builder()
                    .columns("columns")
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        val response = responseFuture.get()
        response.forEach { it.validate() }
    }

    @Test
    fun unvalidatedPublish() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val countryServiceAsync = client.diplomaticClearance().country()

        val future =
            countryServiceAsync.unvalidatedPublish(
                CountryUnvalidatedPublishParams.builder()
                    .addBody(
                        CountryUnvalidatedPublishParams.Body.builder()
                            .classificationMarking("U")
                            .countryCode("NL")
                            .dataMode(CountryUnvalidatedPublishParams.Body.DataMode.TEST)
                            .lastChangedDate(OffsetDateTime.parse("2024-01-01T16:00:00.123Z"))
                            .source("Bluestaq")
                            .id("25059135-4afc-45c2-b78b-d6e843dbd96d")
                            .acceptsDms(true)
                            .acceptsEmail(true)
                            .acceptsFax(true)
                            .acceptsSiprNet(false)
                            .agency("TACC")
                            .altCountryCode("IZ")
                            .closeTime("16:00")
                            .countryId("GDSSBL010412140742262246")
                            .countryName("NETHERLANDS")
                            .countryRemark(
                                "Amsterdam airport EHAM will not accept hazardous cargo."
                            )
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .addDiplomaticClearanceCountryContact(
                                CountryUnvalidatedPublishParams.Body
                                    .DiplomaticClearanceCountryContact
                                    .builder()
                                    .ahNum("256039858")
                                    .ahSpdDialCode("75")
                                    .commNum("904716104")
                                    .commSpdDialCode("74")
                                    .contactId("GDSSMC112108191329534522")
                                    .contactName("John Smith")
                                    .contactRemark("Contact remark")
                                    .dsnNum("513827215")
                                    .dsnSpdDialCode("94")
                                    .faxNum("571654897")
                                    .niprNum("525574441")
                                    .siprNum("546144352")
                                    .build()
                            )
                            .addDiplomaticClearanceCountryEntryExitPoint(
                                CountryUnvalidatedPublishParams.Body
                                    .DiplomaticClearanceCountryEntryExitPoint
                                    .builder()
                                    .isEntry(true)
                                    .isExit(true)
                                    .pointName("BATEL")
                                    .build()
                            )
                            .addDiplomaticClearanceCountryProfile(
                                CountryUnvalidatedPublishParams.Body
                                    .DiplomaticClearanceCountryProfile
                                    .builder()
                                    .cargoPaxRemark("Cargo passenger remark")
                                    .clearanceId("MDCNPER231360050AAR")
                                    .crewInfoRemark("Crew info remark")
                                    .defClearanceStatus("R")
                                    .defEntryRemark("Default entry remark")
                                    .defEntryTime("15:00")
                                    .defExitRemark("Default exit remark")
                                    .defExitTime("17:00")
                                    .fltInfoRemark("Flight info remark")
                                    .hazInfoRemark("Hazmat remark")
                                    .landDefProf(true)
                                    .landLeadTime(7)
                                    .landLeadTimeRemark("Landing lead time remark")
                                    .landLeadTimeUnit("Day")
                                    .landValidPeriodMinus(0)
                                    .landValidPeriodPlus(72)
                                    .landValidPeriodRemark("Landing valid period remark")
                                    .landValidPeriodUnit("Hour")
                                    .overflyDefProf(true)
                                    .overflyLeadTime(7)
                                    .overflyLeadTimeRemark("Overfly remark")
                                    .overflyLeadTimeUnit("Day")
                                    .overflyValidPeriodMinus(0)
                                    .overflyValidPeriodPlus(72)
                                    .overflyValidPeriodRemark("Overfly valid period remark")
                                    .overflyValidPeriodUnit("Hour")
                                    .profile("Netherlands Non Haz Landing")
                                    .profileAgency("USAFE")
                                    .profileId("GDSSBL010412140742262247")
                                    .profileRemark("Profile remark")
                                    .reqAcAltName(false)
                                    .reqAllHazInfo(false)
                                    .reqAmcStdInfo(false)
                                    .reqCargoList(false)
                                    .reqCargoPax(false)
                                    .reqClass1Info(false)
                                    .reqClass9Info(false)
                                    .reqCrewComp(false)
                                    .reqCrewDetail(false)
                                    .reqCrewInfo(false)
                                    .reqDiv1Info(false)
                                    .reqDv(false)
                                    .reqEntryExitCoord(false)
                                    .reqFltInfo(false)
                                    .reqFltPlanRoute(false)
                                    .reqFundSource(false)
                                    .reqHazInfo(false)
                                    .reqIcao(false)
                                    .reqPassportInfo(false)
                                    .reqRaven(false)
                                    .reqRepChange(false)
                                    .reqTailNum(false)
                                    .reqWeaponsInfo(false)
                                    .undefinedCrewReporting(false)
                                    .build()
                            )
                            .existingProfile(true)
                            .gmtOffset("-04:30")
                            .officeName("DAO.EU")
                            .officePoc("John Smith")
                            .officeRemark("Diplomatic clearance office remark")
                            .openFri(true)
                            .openMon(true)
                            .openSat(false)
                            .openSun(false)
                            .openThu(true)
                            .openTime("07:00")
                            .openTue(true)
                            .openWed(true)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("ORIG")
                            .sourceDl("AXE")
                            .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .updatedBy("some.user")
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }
}
