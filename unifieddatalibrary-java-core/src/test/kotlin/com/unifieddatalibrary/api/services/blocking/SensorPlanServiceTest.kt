// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.services.blocking

import com.unifieddatalibrary.api.TestServerExtension
import com.unifieddatalibrary.api.client.okhttp.UnifieddatalibraryOkHttpClient
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanCountParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanCreateParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanGetParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanListParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanTupleParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanUnvalidatedPublishParams
import com.unifieddatalibrary.api.models.sensorplan.SensorPlanUpdateParams
import java.time.OffsetDateTime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(TestServerExtension::class)
internal class SensorPlanServiceTest {

    @Test
    fun create() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        sensorPlanService.create(
            SensorPlanCreateParams.builder()
                .classificationMarking("U")
                .dataMode(SensorPlanCreateParams.DataMode.TEST)
                .recType("COLLECT")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .type("PLAN")
                .id("SENSORPLAN-ID")
                .addCollectRequest(
                    SensorPlanCreateParams.CollectRequest.builder()
                        .classificationMarking("U")
                        .dataMode(SensorPlanCreateParams.CollectRequest.DataMode.TEST)
                        .source("Bluestaq")
                        .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .type("DWELL")
                        .id("COLLECTREQUEST-ID")
                        .alt(1.1)
                        .argOfPerigee(1.1)
                        .az(1.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .customer("Bluestaq")
                        .dec(1.1)
                        .duration(11)
                        .dwellId("DWELL-ID")
                        .eccentricity(1.1)
                        .el(1.1)
                        .elset(
                            SensorPlanCreateParams.CollectRequest.Elset.builder()
                                .classificationMarking("U")
                                .dataMode(SensorPlanCreateParams.CollectRequest.Elset.DataMode.TEST)
                                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .source("Bluestaq")
                                .agom(0.0126)
                                .algorithm("Example algorithm")
                                .apogee(1.1)
                                .argOfPerigee(1.1)
                                .ballisticCoeff(0.00815)
                                .bStar(1.1)
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .descriptor("Example description")
                                .eccentricity(0.333)
                                .ephemType(1L)
                                .idElset("ELSET-ID")
                                .idOnOrbit("ONORBIT-ID")
                                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                                .inclination(45.1)
                                .line1("Example line1")
                                .line2("Example line2")
                                .meanAnomaly(179.1)
                                .meanMotion(1.1)
                                .meanMotionDDot(1.1)
                                .meanMotionDot(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .origObjectId("ORIGOBJECT-ID")
                                .perigee(1.1)
                                .period(1.1)
                                .raan(1.1)
                                .rawFileUri("Example URI")
                                .revNo(111)
                                .satNo(12)
                                .semiMajorAxis(1.1)
                                .addSourcedData("OBSERVATION_UUID1")
                                .addSourcedData("OBSERVATION_UUID2")
                                .addSourcedDataType(
                                    SensorPlanCreateParams.CollectRequest.Elset.SourcedDataType
                                        .RADAR
                                )
                                .addSourcedDataType(
                                    SensorPlanCreateParams.CollectRequest.Elset.SourcedDataType.RF
                                )
                                .sourceDl("AXE")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .transactionId("TRANSACTION-ID")
                                .uct(false)
                                .build()
                        )
                        .endTime(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .esId("ES-ID")
                        .extentAz(1.1)
                        .extentEl(1.1)
                        .extentRange(1.1)
                        .externalId("EXTERNAL-ID")
                        .frameRate(1.1)
                        .freq(1.1)
                        .freqMax(1.1)
                        .freqMin(1.1)
                        .idElset("REF-ELSET-ID")
                        .idManifold("REF-MANIFOLD-ID")
                        .idOnOrbit("REF-ONORBIT-ID")
                        .idParentReq("da98671b-34db-47bf-8c8d-7c668b92c800")
                        .idPlan("REF-PLAN-ID")
                        .idSensor("REF-SENSOR-ID")
                        .idStateVector("STATEVECTOR-ID")
                        .inclination(1.1)
                        .integrationTime(1.1)
                        .iron(3)
                        .irradiance(1.1)
                        .lat(1.1)
                        .lon(1.1)
                        .msgCreateDate(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
                        .msgType("SU67")
                        .notes("Example notes")
                        .numFrames(6)
                        .numObs(9)
                        .numTracks(3)
                        .obType("RADAR")
                        .orbitRegime("GEO")
                        .orientAngle(1.1)
                        .origin("Example source")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .origSensorId("ORIGSENSOR-ID")
                        .planIndex(8)
                        .polarization("H")
                        .priority("EMERGENCY")
                        .ra(1.1)
                        .raan(1.1)
                        .range(1.1)
                        .rcs(1.1)
                        .rcsMax(1.1)
                        .rcsMin(1.1)
                        .reflectance(1.1)
                        .satNo(101)
                        .scenario("Example direction")
                        .semiMajorAxis(1.1)
                        .spectralModel("Example Model")
                        .srchInc(1.1)
                        .srchPattern("SCAN")
                        .stateVector(
                            SensorPlanCreateParams.CollectRequest.StateVector.builder()
                                .classificationMarking("U")
                                .dataMode(
                                    SensorPlanCreateParams.CollectRequest.StateVector.DataMode.TEST
                                )
                                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .source("Bluestaq")
                                .actualOdSpan(3.5)
                                .algorithm("SAMPLE_ALGORITHM")
                                .alt1ReferenceFrame("TEME")
                                .alt2ReferenceFrame("EFG/TDR")
                                .area(5.065)
                                .bDot(1.23)
                                .cmOffset(1.23)
                                .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                                .covMethod("CALCULATED")
                                .covReferenceFrame(
                                    SensorPlanCreateParams.CollectRequest.StateVector
                                        .CovReferenceFrame
                                        .J2000
                                )
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .descriptor("descriptor")
                                .dragArea(4.739)
                                .dragCoeff(0.0224391269775)
                                .dragModel("JAC70")
                                .edr(1.23)
                                .addEqCov(1.1)
                                .addEqCov(2.2)
                                .errorControl(1.23)
                                .fixedStep(true)
                                .geopotentialModel("EGM-96")
                                .iau1980Terms(4)
                                .idOnOrbit("ONORBIT-ID")
                                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                                .idStateVector("STATEVECTOR-ID")
                                .integratorMode("integratorMode")
                                .inTrackThrust(true)
                                .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                                .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                                .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                .lunarSolar(true)
                                .mass(164.5)
                                .obsAvailable(376)
                                .obsUsed(374)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .origObjectId("ORIGOBJECT-ID")
                                .partials("ANALYTIC")
                                .pedigree("CONJUNCTION")
                                .polarMotionX(1.23)
                                .polarMotionY(1.23)
                                .posUnc(0.333399744452)
                                .rawFileUri("rawFileURI")
                                .recOdSpan(3.5)
                                .referenceFrame(
                                    SensorPlanCreateParams.CollectRequest.StateVector.ReferenceFrame
                                        .J2000
                                )
                                .residualsAcc(99.5)
                                .revNo(7205)
                                .rms(0.991)
                                .satNo(12)
                                .addSigmaPosUvw(1.23)
                                .addSigmaPosUvw(4.56)
                                .addSigmaVelUvw(1.23)
                                .addSigmaVelUvw(4.56)
                                .solarFluxApAvg(1.23)
                                .solarFluxF10(1.23)
                                .solarFluxF10Avg(1.23)
                                .solarRadPress(true)
                                .solarRadPressCoeff(0.0244394)
                                .solidEarthTides(true)
                                .addSourcedData("DATA1")
                                .addSourcedData("DATA2")
                                .addSourcedDataType(
                                    SensorPlanCreateParams.CollectRequest.StateVector
                                        .SourcedDataType
                                        .RADAR
                                )
                                .sourceDl("AXE")
                                .srpArea(4.311)
                                .stepMode("AUTO")
                                .stepSize(1.23)
                                .stepSizeSelection("AUTO")
                                .addTag("TAG1")
                                .addTag("TAG2")
                                .taiUtc(1.23)
                                .thrustAccel(1.23)
                                .tracksAvail(163)
                                .tracksUsed(163)
                                .transactionId("transactionId")
                                .uct(true)
                                .ut1Rate(1.23)
                                .ut1Utc(1.23)
                                .velUnc(0.000004)
                                .xaccel(-2.12621392)
                                .xpos(-1118.577381)
                                .xposAlt1(-1145.688502)
                                .xposAlt2(-1456.915926)
                                .xvel(-4.25242784)
                                .xvelAlt1(-4.270832252)
                                .xvelAlt2(-1.219814294)
                                .yaccel(2.645553717)
                                .ypos(3026.231084)
                                .yposAlt1(3020.729572)
                                .yposAlt2(-2883.540406)
                                .yvel(5.291107434)
                                .yvelAlt1(5.27074276)
                                .yvelAlt2(-6.602080212)
                                .zaccel(-1.06310696)
                                .zpos(6167.831808)
                                .zposAlt1(6165.55187)
                                .zposAlt2(6165.55187)
                                .zvel(-3.356493869)
                                .zvelAlt1(-3.365155181)
                                .zvelAlt2(-3.365155181)
                                .build()
                        )
                        .stopAlt(1.1)
                        .stopLat(1.1)
                        .stopLon(1.1)
                        .suffix("T")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .targetSize(1.1)
                        .taskCategory(4)
                        .taskGroup("729")
                        .taskId("TASK-ID")
                        .transactionId("TRANSACTION-ID")
                        .trueAnomoly(1.1)
                        .uctFollowUp(false)
                        .visMag(1.1)
                        .visMagMax(1.1)
                        .visMagMin(1.1)
                        .xAngle(1.1)
                        .yAngle(1.1)
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .customer("CUSTOMER")
                .endTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .idSensor("REF-SENSOR-ID")
                .name("EXAMPLE NAME")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .purpose("Example purpose")
                .reqTotal(2)
                .senNetwork("NETWORK")
                .status("ACCEPTED")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .build()
        )
    }

    @Test
    fun update() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        sensorPlanService.update(
            SensorPlanUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(SensorPlanUpdateParams.DataMode.TEST)
                .recType("COLLECT")
                .source("Bluestaq")
                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .type("PLAN")
                .bodyId("SENSORPLAN-ID")
                .addCollectRequest(
                    SensorPlanUpdateParams.CollectRequest.builder()
                        .classificationMarking("U")
                        .dataMode(SensorPlanUpdateParams.CollectRequest.DataMode.TEST)
                        .source("Bluestaq")
                        .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .type("DWELL")
                        .bodyId("COLLECTREQUEST-ID")
                        .alt(1.1)
                        .argOfPerigee(1.1)
                        .az(1.1)
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .customer("Bluestaq")
                        .dec(1.1)
                        .duration(11)
                        .dwellId("DWELL-ID")
                        .eccentricity(1.1)
                        .el(1.1)
                        .elset(
                            SensorPlanUpdateParams.CollectRequest.Elset.builder()
                                .classificationMarking("U")
                                .dataMode(SensorPlanUpdateParams.CollectRequest.Elset.DataMode.TEST)
                                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .source("Bluestaq")
                                .agom(0.0126)
                                .algorithm("Example algorithm")
                                .apogee(1.1)
                                .argOfPerigee(1.1)
                                .ballisticCoeff(0.00815)
                                .bStar(1.1)
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .descriptor("Example description")
                                .eccentricity(0.333)
                                .ephemType(1L)
                                .idElset("ELSET-ID")
                                .idOnOrbit("ONORBIT-ID")
                                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                                .inclination(45.1)
                                .line1("Example line1")
                                .line2("Example line2")
                                .meanAnomaly(179.1)
                                .meanMotion(1.1)
                                .meanMotionDDot(1.1)
                                .meanMotionDot(1.1)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .origObjectId("ORIGOBJECT-ID")
                                .perigee(1.1)
                                .period(1.1)
                                .raan(1.1)
                                .rawFileUri("Example URI")
                                .revNo(111)
                                .satNo(12)
                                .semiMajorAxis(1.1)
                                .addSourcedData("OBSERVATION_UUID1")
                                .addSourcedData("OBSERVATION_UUID2")
                                .addSourcedDataType(
                                    SensorPlanUpdateParams.CollectRequest.Elset.SourcedDataType
                                        .RADAR
                                )
                                .addSourcedDataType(
                                    SensorPlanUpdateParams.CollectRequest.Elset.SourcedDataType.RF
                                )
                                .sourceDl("AXE")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .transactionId("TRANSACTION-ID")
                                .uct(false)
                                .build()
                        )
                        .endTime(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .esId("ES-ID")
                        .extentAz(1.1)
                        .extentEl(1.1)
                        .extentRange(1.1)
                        .externalId("EXTERNAL-ID")
                        .frameRate(1.1)
                        .freq(1.1)
                        .freqMax(1.1)
                        .freqMin(1.1)
                        .idElset("REF-ELSET-ID")
                        .idManifold("REF-MANIFOLD-ID")
                        .idOnOrbit("REF-ONORBIT-ID")
                        .idParentReq("da98671b-34db-47bf-8c8d-7c668b92c800")
                        .idPlan("REF-PLAN-ID")
                        .idSensor("REF-SENSOR-ID")
                        .idStateVector("STATEVECTOR-ID")
                        .inclination(1.1)
                        .integrationTime(1.1)
                        .iron(3)
                        .irradiance(1.1)
                        .lat(1.1)
                        .lon(1.1)
                        .msgCreateDate(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
                        .msgType("SU67")
                        .notes("Example notes")
                        .numFrames(6)
                        .numObs(9)
                        .numTracks(3)
                        .obType("RADAR")
                        .orbitRegime("GEO")
                        .orientAngle(1.1)
                        .origin("Example source")
                        .origNetwork("OPS1")
                        .origObjectId("ORIGOBJECT-ID")
                        .origSensorId("ORIGSENSOR-ID")
                        .planIndex(8)
                        .polarization("H")
                        .priority("EMERGENCY")
                        .ra(1.1)
                        .raan(1.1)
                        .range(1.1)
                        .rcs(1.1)
                        .rcsMax(1.1)
                        .rcsMin(1.1)
                        .reflectance(1.1)
                        .satNo(101)
                        .scenario("Example direction")
                        .semiMajorAxis(1.1)
                        .spectralModel("Example Model")
                        .srchInc(1.1)
                        .srchPattern("SCAN")
                        .stateVector(
                            SensorPlanUpdateParams.CollectRequest.StateVector.builder()
                                .classificationMarking("U")
                                .dataMode(
                                    SensorPlanUpdateParams.CollectRequest.StateVector.DataMode.TEST
                                )
                                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .source("Bluestaq")
                                .actualOdSpan(3.5)
                                .algorithm("SAMPLE_ALGORITHM")
                                .alt1ReferenceFrame("TEME")
                                .alt2ReferenceFrame("EFG/TDR")
                                .area(5.065)
                                .bDot(1.23)
                                .cmOffset(1.23)
                                .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                                .covMethod("CALCULATED")
                                .covReferenceFrame(
                                    SensorPlanUpdateParams.CollectRequest.StateVector
                                        .CovReferenceFrame
                                        .J2000
                                )
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .descriptor("descriptor")
                                .dragArea(4.739)
                                .dragCoeff(0.0224391269775)
                                .dragModel("JAC70")
                                .edr(1.23)
                                .addEqCov(1.1)
                                .addEqCov(2.2)
                                .errorControl(1.23)
                                .fixedStep(true)
                                .geopotentialModel("EGM-96")
                                .iau1980Terms(4)
                                .idOnOrbit("ONORBIT-ID")
                                .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                                .idStateVector("STATEVECTOR-ID")
                                .integratorMode("integratorMode")
                                .inTrackThrust(true)
                                .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                                .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                                .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                                .lunarSolar(true)
                                .mass(164.5)
                                .obsAvailable(376)
                                .obsUsed(374)
                                .origin("THIRD_PARTY_DATASOURCE")
                                .origNetwork("OPS1")
                                .origObjectId("ORIGOBJECT-ID")
                                .partials("ANALYTIC")
                                .pedigree("CONJUNCTION")
                                .polarMotionX(1.23)
                                .polarMotionY(1.23)
                                .posUnc(0.333399744452)
                                .rawFileUri("rawFileURI")
                                .recOdSpan(3.5)
                                .referenceFrame(
                                    SensorPlanUpdateParams.CollectRequest.StateVector.ReferenceFrame
                                        .J2000
                                )
                                .residualsAcc(99.5)
                                .revNo(7205)
                                .rms(0.991)
                                .satNo(12)
                                .addSigmaPosUvw(1.23)
                                .addSigmaPosUvw(4.56)
                                .addSigmaVelUvw(1.23)
                                .addSigmaVelUvw(4.56)
                                .solarFluxApAvg(1.23)
                                .solarFluxF10(1.23)
                                .solarFluxF10Avg(1.23)
                                .solarRadPress(true)
                                .solarRadPressCoeff(0.0244394)
                                .solidEarthTides(true)
                                .addSourcedData("DATA1")
                                .addSourcedData("DATA2")
                                .addSourcedDataType(
                                    SensorPlanUpdateParams.CollectRequest.StateVector
                                        .SourcedDataType
                                        .RADAR
                                )
                                .sourceDl("AXE")
                                .srpArea(4.311)
                                .stepMode("AUTO")
                                .stepSize(1.23)
                                .stepSizeSelection("AUTO")
                                .addTag("TAG1")
                                .addTag("TAG2")
                                .taiUtc(1.23)
                                .thrustAccel(1.23)
                                .tracksAvail(163)
                                .tracksUsed(163)
                                .transactionId("transactionId")
                                .uct(true)
                                .ut1Rate(1.23)
                                .ut1Utc(1.23)
                                .velUnc(0.000004)
                                .xaccel(-2.12621392)
                                .xpos(-1118.577381)
                                .xposAlt1(-1145.688502)
                                .xposAlt2(-1456.915926)
                                .xvel(-4.25242784)
                                .xvelAlt1(-4.270832252)
                                .xvelAlt2(-1.219814294)
                                .yaccel(2.645553717)
                                .ypos(3026.231084)
                                .yposAlt1(3020.729572)
                                .yposAlt2(-2883.540406)
                                .yvel(5.291107434)
                                .yvelAlt1(5.27074276)
                                .yvelAlt2(-6.602080212)
                                .zaccel(-1.06310696)
                                .zpos(6167.831808)
                                .zposAlt1(6165.55187)
                                .zposAlt2(6165.55187)
                                .zvel(-3.356493869)
                                .zvelAlt1(-3.365155181)
                                .zvelAlt2(-3.365155181)
                                .build()
                        )
                        .stopAlt(1.1)
                        .stopLat(1.1)
                        .stopLon(1.1)
                        .suffix("T")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .targetSize(1.1)
                        .taskCategory(4)
                        .taskGroup("729")
                        .taskId("TASK-ID")
                        .transactionId("TRANSACTION-ID")
                        .trueAnomoly(1.1)
                        .uctFollowUp(false)
                        .visMag(1.1)
                        .visMagMax(1.1)
                        .visMagMin(1.1)
                        .xAngle(1.1)
                        .yAngle(1.1)
                        .build()
                )
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .customer("CUSTOMER")
                .endTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                .idSensor("REF-SENSOR-ID")
                .name("EXAMPLE NAME")
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .origSensorId("ORIGSENSOR-ID")
                .purpose("Example purpose")
                .reqTotal(2)
                .senNetwork("NETWORK")
                .status("ACCEPTED")
                .addTag("PROVIDER_TAG1")
                .addTag("PROVIDER_TAG2")
                .build()
        )
    }

    @Test
    fun list() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        val page =
            sensorPlanService.list(
                SensorPlanListParams.builder()
                    .startTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )

        page.items().forEach { it.validate() }
    }

    @Test
    fun count() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        sensorPlanService.count(
            SensorPlanCountParams.builder()
                .startTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .firstResult(0L)
                .maxResults(0L)
                .build()
        )
    }

    @Test
    fun get() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        val sensorPlan =
            sensorPlanService.get(
                SensorPlanGetParams.builder().id("id").firstResult(0L).maxResults(0L).build()
            )

        sensorPlan.validate()
    }

    @Test
    fun queryhelp() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        val response = sensorPlanService.queryhelp()

        response.validate()
    }

    @Test
    fun tuple() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        val response =
            sensorPlanService.tuple(
                SensorPlanTupleParams.builder()
                    .columns("columns")
                    .startTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        response.forEach { it.validate() }
    }

    @Test
    fun unvalidatedPublish() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val sensorPlanService = client.sensorPlan()

        sensorPlanService.unvalidatedPublish(
            SensorPlanUnvalidatedPublishParams.builder()
                .addBody(
                    SensorPlanUnvalidatedPublishParams.Body.builder()
                        .classificationMarking("U")
                        .dataMode(SensorPlanUnvalidatedPublishParams.Body.DataMode.TEST)
                        .recType("COLLECT")
                        .source("Bluestaq")
                        .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .type("PLAN")
                        .id("SENSORPLAN-ID")
                        .addCollectRequest(
                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest.builder()
                                .classificationMarking("U")
                                .dataMode(
                                    SensorPlanUnvalidatedPublishParams.Body.CollectRequest.DataMode
                                        .TEST
                                )
                                .source("Bluestaq")
                                .startTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .type("DWELL")
                                .id("COLLECTREQUEST-ID")
                                .alt(1.1)
                                .argOfPerigee(1.1)
                                .az(1.1)
                                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                .createdBy("some.user")
                                .customer("Bluestaq")
                                .dec(1.1)
                                .duration(11)
                                .dwellId("DWELL-ID")
                                .eccentricity(1.1)
                                .el(1.1)
                                .elset(
                                    SensorPlanUnvalidatedPublishParams.Body.CollectRequest.Elset
                                        .builder()
                                        .classificationMarking("U")
                                        .dataMode(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .Elset
                                                .DataMode
                                                .TEST
                                        )
                                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                        .source("Bluestaq")
                                        .agom(0.0126)
                                        .algorithm("Example algorithm")
                                        .apogee(1.1)
                                        .argOfPerigee(1.1)
                                        .ballisticCoeff(0.00815)
                                        .bStar(1.1)
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .descriptor("Example description")
                                        .eccentricity(0.333)
                                        .ephemType(1L)
                                        .idElset("ELSET-ID")
                                        .idOnOrbit("ONORBIT-ID")
                                        .idOrbitDetermination(
                                            "026dd511-8ba5-47d3-9909-836149f87686"
                                        )
                                        .inclination(45.1)
                                        .line1("Example line1")
                                        .line2("Example line2")
                                        .meanAnomaly(179.1)
                                        .meanMotion(1.1)
                                        .meanMotionDDot(1.1)
                                        .meanMotionDot(1.1)
                                        .origin("THIRD_PARTY_DATASOURCE")
                                        .origNetwork("OPS1")
                                        .origObjectId("ORIGOBJECT-ID")
                                        .perigee(1.1)
                                        .period(1.1)
                                        .raan(1.1)
                                        .rawFileUri("Example URI")
                                        .revNo(111)
                                        .satNo(12)
                                        .semiMajorAxis(1.1)
                                        .addSourcedData("OBSERVATION_UUID1")
                                        .addSourcedData("OBSERVATION_UUID2")
                                        .addSourcedDataType(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .Elset
                                                .SourcedDataType
                                                .RADAR
                                        )
                                        .addSourcedDataType(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .Elset
                                                .SourcedDataType
                                                .RF
                                        )
                                        .sourceDl("AXE")
                                        .addTag("PROVIDER_TAG1")
                                        .addTag("PROVIDER_TAG2")
                                        .transactionId("TRANSACTION-ID")
                                        .uct(false)
                                        .build()
                                )
                                .endTime(OffsetDateTime.parse("2018-01-01T18:00:00.123456Z"))
                                .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                .esId("ES-ID")
                                .extentAz(1.1)
                                .extentEl(1.1)
                                .extentRange(1.1)
                                .externalId("EXTERNAL-ID")
                                .frameRate(1.1)
                                .freq(1.1)
                                .freqMax(1.1)
                                .freqMin(1.1)
                                .idElset("REF-ELSET-ID")
                                .idManifold("REF-MANIFOLD-ID")
                                .idOnOrbit("REF-ONORBIT-ID")
                                .idParentReq("da98671b-34db-47bf-8c8d-7c668b92c800")
                                .idPlan("REF-PLAN-ID")
                                .idSensor("REF-SENSOR-ID")
                                .idStateVector("STATEVECTOR-ID")
                                .inclination(1.1)
                                .integrationTime(1.1)
                                .iron(3)
                                .irradiance(1.1)
                                .lat(1.1)
                                .lon(1.1)
                                .msgCreateDate(OffsetDateTime.parse("2024-04-25T08:17:01.346Z"))
                                .msgType("SU67")
                                .notes("Example notes")
                                .numFrames(6)
                                .numObs(9)
                                .numTracks(3)
                                .obType("RADAR")
                                .orbitRegime("GEO")
                                .orientAngle(1.1)
                                .origin("Example source")
                                .origNetwork("OPS1")
                                .origObjectId("ORIGOBJECT-ID")
                                .origSensorId("ORIGSENSOR-ID")
                                .planIndex(8)
                                .polarization("H")
                                .priority("EMERGENCY")
                                .ra(1.1)
                                .raan(1.1)
                                .range(1.1)
                                .rcs(1.1)
                                .rcsMax(1.1)
                                .rcsMin(1.1)
                                .reflectance(1.1)
                                .satNo(101)
                                .scenario("Example direction")
                                .semiMajorAxis(1.1)
                                .spectralModel("Example Model")
                                .srchInc(1.1)
                                .srchPattern("SCAN")
                                .stateVector(
                                    SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                        .StateVector
                                        .builder()
                                        .classificationMarking("U")
                                        .dataMode(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .StateVector
                                                .DataMode
                                                .TEST
                                        )
                                        .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                                        .source("Bluestaq")
                                        .actualOdSpan(3.5)
                                        .algorithm("SAMPLE_ALGORITHM")
                                        .alt1ReferenceFrame("TEME")
                                        .alt2ReferenceFrame("EFG/TDR")
                                        .area(5.065)
                                        .bDot(1.23)
                                        .cmOffset(1.23)
                                        .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                                        .covMethod("CALCULATED")
                                        .covReferenceFrame(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .StateVector
                                                .CovReferenceFrame
                                                .J2000
                                        )
                                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                                        .createdBy("some.user")
                                        .descriptor("descriptor")
                                        .dragArea(4.739)
                                        .dragCoeff(0.0224391269775)
                                        .dragModel("JAC70")
                                        .edr(1.23)
                                        .addEqCov(1.1)
                                        .addEqCov(2.2)
                                        .errorControl(1.23)
                                        .fixedStep(true)
                                        .geopotentialModel("EGM-96")
                                        .iau1980Terms(4)
                                        .idOnOrbit("ONORBIT-ID")
                                        .idOrbitDetermination(
                                            "026dd511-8ba5-47d3-9909-836149f87686"
                                        )
                                        .idStateVector("STATEVECTOR-ID")
                                        .integratorMode("integratorMode")
                                        .inTrackThrust(true)
                                        .lastObEnd(
                                            OffsetDateTime.parse("2022-11-09T11:20:21.247192Z")
                                        )
                                        .lastObStart(
                                            OffsetDateTime.parse("2022-11-09T11:20:21.247192Z")
                                        )
                                        .leapSecondTime(
                                            OffsetDateTime.parse("2021-01-01T01:01:01.123Z")
                                        )
                                        .lunarSolar(true)
                                        .mass(164.5)
                                        .obsAvailable(376)
                                        .obsUsed(374)
                                        .origin("THIRD_PARTY_DATASOURCE")
                                        .origNetwork("OPS1")
                                        .origObjectId("ORIGOBJECT-ID")
                                        .partials("ANALYTIC")
                                        .pedigree("CONJUNCTION")
                                        .polarMotionX(1.23)
                                        .polarMotionY(1.23)
                                        .posUnc(0.333399744452)
                                        .rawFileUri("rawFileURI")
                                        .recOdSpan(3.5)
                                        .referenceFrame(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .StateVector
                                                .ReferenceFrame
                                                .J2000
                                        )
                                        .residualsAcc(99.5)
                                        .revNo(7205)
                                        .rms(0.991)
                                        .satNo(12)
                                        .addSigmaPosUvw(1.23)
                                        .addSigmaPosUvw(4.56)
                                        .addSigmaVelUvw(1.23)
                                        .addSigmaVelUvw(4.56)
                                        .solarFluxApAvg(1.23)
                                        .solarFluxF10(1.23)
                                        .solarFluxF10Avg(1.23)
                                        .solarRadPress(true)
                                        .solarRadPressCoeff(0.0244394)
                                        .solidEarthTides(true)
                                        .addSourcedData("DATA1")
                                        .addSourcedData("DATA2")
                                        .addSourcedDataType(
                                            SensorPlanUnvalidatedPublishParams.Body.CollectRequest
                                                .StateVector
                                                .SourcedDataType
                                                .RADAR
                                        )
                                        .sourceDl("AXE")
                                        .srpArea(4.311)
                                        .stepMode("AUTO")
                                        .stepSize(1.23)
                                        .stepSizeSelection("AUTO")
                                        .addTag("TAG1")
                                        .addTag("TAG2")
                                        .taiUtc(1.23)
                                        .thrustAccel(1.23)
                                        .tracksAvail(163)
                                        .tracksUsed(163)
                                        .transactionId("transactionId")
                                        .uct(true)
                                        .ut1Rate(1.23)
                                        .ut1Utc(1.23)
                                        .velUnc(0.000004)
                                        .xaccel(-2.12621392)
                                        .xpos(-1118.577381)
                                        .xposAlt1(-1145.688502)
                                        .xposAlt2(-1456.915926)
                                        .xvel(-4.25242784)
                                        .xvelAlt1(-4.270832252)
                                        .xvelAlt2(-1.219814294)
                                        .yaccel(2.645553717)
                                        .ypos(3026.231084)
                                        .yposAlt1(3020.729572)
                                        .yposAlt2(-2883.540406)
                                        .yvel(5.291107434)
                                        .yvelAlt1(5.27074276)
                                        .yvelAlt2(-6.602080212)
                                        .zaccel(-1.06310696)
                                        .zpos(6167.831808)
                                        .zposAlt1(6165.55187)
                                        .zposAlt2(6165.55187)
                                        .zvel(-3.356493869)
                                        .zvelAlt1(-3.365155181)
                                        .zvelAlt2(-3.365155181)
                                        .build()
                                )
                                .stopAlt(1.1)
                                .stopLat(1.1)
                                .stopLon(1.1)
                                .suffix("T")
                                .addTag("PROVIDER_TAG1")
                                .addTag("PROVIDER_TAG2")
                                .targetSize(1.1)
                                .taskCategory(4)
                                .taskGroup("729")
                                .taskId("TASK-ID")
                                .transactionId("TRANSACTION-ID")
                                .trueAnomoly(1.1)
                                .uctFollowUp(false)
                                .visMag(1.1)
                                .visMagMax(1.1)
                                .visMagMin(1.1)
                                .xAngle(1.1)
                                .yAngle(1.1)
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                        .createdBy("some.user")
                        .customer("CUSTOMER")
                        .endTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                        .idSensor("REF-SENSOR-ID")
                        .name("EXAMPLE NAME")
                        .origin("THIRD_PARTY_DATASOURCE")
                        .origNetwork("OPS1")
                        .origSensorId("ORIGSENSOR-ID")
                        .purpose("Example purpose")
                        .reqTotal(2)
                        .senNetwork("NETWORK")
                        .status("ACCEPTED")
                        .addTag("PROVIDER_TAG1")
                        .addTag("PROVIDER_TAG2")
                        .build()
                )
                .build()
        )
    }
}
