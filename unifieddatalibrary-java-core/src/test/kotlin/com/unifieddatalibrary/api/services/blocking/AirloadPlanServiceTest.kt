// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.services.blocking

import com.unifieddatalibrary.api.TestServerExtension
import com.unifieddatalibrary.api.client.okhttp.UnifieddatalibraryOkHttpClient
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanCountParams
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanCreateParams
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanListParams
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanRetrieveParams
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanTupleParams
import com.unifieddatalibrary.api.models.airloadplans.AirloadPlanUpdateParams
import java.time.OffsetDateTime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(TestServerExtension::class)
internal class AirloadPlanServiceTest {

    @Test
    fun create() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        airloadPlanService.create(
            AirloadPlanCreateParams.builder()
                .classificationMarking("U")
                .dataMode(AirloadPlanCreateParams.DataMode.TEST)
                .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .source("source")
                .id("0457f578-e29c-312e-85aa-0a04a430bdd0")
                .aclOnboard(500.1)
                .aclReleased(200.1)
                .aircraftMds("C17A")
                .addAirLoadPlanHazmatActual(
                    AirloadPlanCreateParams.AirLoadPlanHazmatActual.builder()
                        .ashc("RFL")
                        .cgc("A")
                        .classDiv("1.1")
                        .hazDescription("CORROSIVE OXIDIZER")
                        .hazmatRemarks("Hazmat remarks")
                        .hazNum("2031")
                        .hazNumType("UN")
                        .hazOffIcao("MBPV")
                        .hazOffItin(300)
                        .hazOnIcao("LIRQ")
                        .hazOnItin(50)
                        .hazPieces(29)
                        .hazTcn("M1358232245912XXX")
                        .hazWeight(22.1)
                        .itemName("NITRIC ACID")
                        .lotNum("1234A")
                        .netExpWt(12.1)
                        .build()
                )
                .addAirLoadPlanHr(
                    AirloadPlanCreateParams.AirLoadPlanHr.builder()
                        .container("Metal")
                        .escort("Jane Doe")
                        .hrEstArrTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                        .hrOffIcao("KDEN")
                        .hrOffItin(200)
                        .hrOnIcao("KCOS")
                        .hrOnItin(100)
                        .hrRemarks("HR remarks")
                        .name("John Doe")
                        .rank("Captain")
                        .recAgency("Agency name")
                        .service("Air Force")
                        .viewable(true)
                        .build()
                )
                .addAirLoadPlanPalletDetail(
                    AirloadPlanCreateParams.AirLoadPlanPalletDetail.builder()
                        .category("AMCMICAP")
                        .pp("2")
                        .ppDescription("Ammunition")
                        .ppOffIcao("MBPV")
                        .ppPieces(3)
                        .ppRemarks("Pallet remarks")
                        .ppTcn("M1358232245912XXX")
                        .ppWeight(100.1)
                        .specialInterest(true)
                        .build()
                )
                .addAirLoadPlanPaxCargo(
                    AirloadPlanCreateParams.AirLoadPlanPaxCargo.builder()
                        .ambPax(5)
                        .attPax(6)
                        .availablePax(20)
                        .bagWeight(2000.1)
                        .civPax(3)
                        .dvPax(2)
                        .fnPax(1)
                        .groupCargoWeight(5000.1)
                        .groupType("OFFTHIS")
                        .litPax(4)
                        .mailWeight(200.1)
                        .numPallet(20)
                        .palletWeight(400.1)
                        .paxWeight(8000.1)
                        .requiredPax(20)
                        .build()
                )
                .addAirLoadPlanUlnActual(
                    AirloadPlanCreateParams.AirLoadPlanUlnActual.builder()
                        .numAmbulatory(10)
                        .numAttendant(10)
                        .numLitter(10)
                        .numPax(44)
                        .offloadId(300)
                        .offloadLoCode("KHOP")
                        .onloadId(200)
                        .onloadLoCode("KCHS")
                        .oplan("5027A")
                        .projName("CENTINTRA21")
                        .uln("T01ME01")
                        .ulnCargoWeight(1000.1)
                        .ulnRemarks("ULN actuals remark")
                        .build()
                )
                .arrAirfield("W99")
                .arrIcao("ETAR")
                .availableTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .basicMoment(2500.1)
                .basicWeight(100.1)
                .briefTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .callSign("RCH1234")
                .cargoBayFsMax(20.1)
                .cargoBayFsMin(10.1)
                .cargoBayWidth(3.1)
                .cargoConfig("C-1")
                .cargoMoment(2500.1)
                .cargoVolume(50.1)
                .cargoWeight(100.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crewSize(5)
                .depAirfield("W99")
                .depIcao("KCHS")
                .equipConfig("Standard")
                .estArrTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .estLandingFuelMoment(2500.1)
                .estLandingFuelWeight(100.1)
                .externalId("dec7a61a-cd97-4af0-b7bc-f4c3bb33341b")
                .fuelMoment(2500.1)
                .fuelWeight(100.1)
                .grossCg(38.8)
                .grossMoment(2500.1)
                .grossWeight(100.1)
                .idMission("412bebb6-a45e-029c-ca51-e29f8a442b12")
                .idSortie("823acfbe6-f36a-157b-ef32-b47c9b589c4")
                .landingCg(38.2)
                .landingMoment(2500.1)
                .landingWeight(100.1)
                .legNum(200)
                .loadmasterName("John Smith")
                .loadmasterRank("Staff Sergeant")
                .loadRemarks("Load remarks")
                .missionNumber("AJM123456123")
                .operatingMoment(2500.1)
                .operatingWeight(100.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ppOnboard(18)
                .ppReleased(5)
                .schedTime(OffsetDateTime.parse("2024-01-01T02:30:00.123Z"))
                .seatsOnboard(20)
                .seatsReleased(15)
                .sourceDl("AXE")
                .tailNumber("77187")
                .tankConfig("ER")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utilCode("AD")
                .zeroFuelCg(39.5)
                .zeroFuelMoment(2500.1)
                .zeroFuelWeight(100.1)
                .build()
        )
    }

    @Test
    fun retrieve() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        val airloadplanFull =
            airloadPlanService.retrieve(
                AirloadPlanRetrieveParams.builder().id("id").firstResult(0L).maxResults(0L).build()
            )

        airloadplanFull.validate()
    }

    @Test
    fun update() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        airloadPlanService.update(
            AirloadPlanUpdateParams.builder()
                .pathId("id")
                .classificationMarking("U")
                .dataMode(AirloadPlanUpdateParams.DataMode.TEST)
                .estDepTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .source("source")
                .bodyId("0457f578-e29c-312e-85aa-0a04a430bdd0")
                .aclOnboard(500.1)
                .aclReleased(200.1)
                .aircraftMds("C17A")
                .addAirLoadPlanHazmatActual(
                    AirloadPlanUpdateParams.AirLoadPlanHazmatActual.builder()
                        .ashc("RFL")
                        .cgc("A")
                        .classDiv("1.1")
                        .hazDescription("CORROSIVE OXIDIZER")
                        .hazmatRemarks("Hazmat remarks")
                        .hazNum("2031")
                        .hazNumType("UN")
                        .hazOffIcao("MBPV")
                        .hazOffItin(300)
                        .hazOnIcao("LIRQ")
                        .hazOnItin(50)
                        .hazPieces(29)
                        .hazTcn("M1358232245912XXX")
                        .hazWeight(22.1)
                        .itemName("NITRIC ACID")
                        .lotNum("1234A")
                        .netExpWt(12.1)
                        .build()
                )
                .addAirLoadPlanHr(
                    AirloadPlanUpdateParams.AirLoadPlanHr.builder()
                        .container("Metal")
                        .escort("Jane Doe")
                        .hrEstArrTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                        .hrOffIcao("KDEN")
                        .hrOffItin(200)
                        .hrOnIcao("KCOS")
                        .hrOnItin(100)
                        .hrRemarks("HR remarks")
                        .name("John Doe")
                        .rank("Captain")
                        .recAgency("Agency name")
                        .service("Air Force")
                        .viewable(true)
                        .build()
                )
                .addAirLoadPlanPalletDetail(
                    AirloadPlanUpdateParams.AirLoadPlanPalletDetail.builder()
                        .category("AMCMICAP")
                        .pp("2")
                        .ppDescription("Ammunition")
                        .ppOffIcao("MBPV")
                        .ppPieces(3)
                        .ppRemarks("Pallet remarks")
                        .ppTcn("M1358232245912XXX")
                        .ppWeight(100.1)
                        .specialInterest(true)
                        .build()
                )
                .addAirLoadPlanPaxCargo(
                    AirloadPlanUpdateParams.AirLoadPlanPaxCargo.builder()
                        .ambPax(5)
                        .attPax(6)
                        .availablePax(20)
                        .bagWeight(2000.1)
                        .civPax(3)
                        .dvPax(2)
                        .fnPax(1)
                        .groupCargoWeight(5000.1)
                        .groupType("OFFTHIS")
                        .litPax(4)
                        .mailWeight(200.1)
                        .numPallet(20)
                        .palletWeight(400.1)
                        .paxWeight(8000.1)
                        .requiredPax(20)
                        .build()
                )
                .addAirLoadPlanUlnActual(
                    AirloadPlanUpdateParams.AirLoadPlanUlnActual.builder()
                        .numAmbulatory(10)
                        .numAttendant(10)
                        .numLitter(10)
                        .numPax(44)
                        .offloadId(300)
                        .offloadLoCode("KHOP")
                        .onloadId(200)
                        .onloadLoCode("KCHS")
                        .oplan("5027A")
                        .projName("CENTINTRA21")
                        .uln("T01ME01")
                        .ulnCargoWeight(1000.1)
                        .ulnRemarks("ULN actuals remark")
                        .build()
                )
                .arrAirfield("W99")
                .arrIcao("ETAR")
                .availableTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .basicMoment(2500.1)
                .basicWeight(100.1)
                .briefTime(OffsetDateTime.parse("2024-01-01T01:00:00.123Z"))
                .callSign("RCH1234")
                .cargoBayFsMax(20.1)
                .cargoBayFsMin(10.1)
                .cargoBayWidth(3.1)
                .cargoConfig("C-1")
                .cargoMoment(2500.1)
                .cargoVolume(50.1)
                .cargoWeight(100.1)
                .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .createdBy("some.user")
                .crewSize(5)
                .depAirfield("W99")
                .depIcao("KCHS")
                .equipConfig("Standard")
                .estArrTime(OffsetDateTime.parse("2024-01-01T02:00:00.123Z"))
                .estLandingFuelMoment(2500.1)
                .estLandingFuelWeight(100.1)
                .externalId("dec7a61a-cd97-4af0-b7bc-f4c3bb33341b")
                .fuelMoment(2500.1)
                .fuelWeight(100.1)
                .grossCg(38.8)
                .grossMoment(2500.1)
                .grossWeight(100.1)
                .idMission("412bebb6-a45e-029c-ca51-e29f8a442b12")
                .idSortie("823acfbe6-f36a-157b-ef32-b47c9b589c4")
                .landingCg(38.2)
                .landingMoment(2500.1)
                .landingWeight(100.1)
                .legNum(200)
                .loadmasterName("John Smith")
                .loadmasterRank("Staff Sergeant")
                .loadRemarks("Load remarks")
                .missionNumber("AJM123456123")
                .operatingMoment(2500.1)
                .operatingWeight(100.1)
                .origin("THIRD_PARTY_DATASOURCE")
                .origNetwork("OPS1")
                .ppOnboard(18)
                .ppReleased(5)
                .schedTime(OffsetDateTime.parse("2024-01-01T02:30:00.123Z"))
                .seatsOnboard(20)
                .seatsReleased(15)
                .sourceDl("AXE")
                .tailNumber("77187")
                .tankConfig("ER")
                .updatedAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                .updatedBy("some.user")
                .utilCode("AD")
                .zeroFuelCg(39.5)
                .zeroFuelMoment(2500.1)
                .zeroFuelWeight(100.1)
                .build()
        )
    }

    @Test
    fun list() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        val page =
            airloadPlanService.list(
                AirloadPlanListParams.builder()
                    .estDepTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )

        page.items().forEach { it.validate() }
    }

    @Test
    fun delete() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        airloadPlanService.delete("id")
    }

    @Test
    fun count() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        airloadPlanService.count(
            AirloadPlanCountParams.builder()
                .estDepTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .firstResult(0L)
                .maxResults(0L)
                .build()
        )
    }

    @Test
    fun queryhelp() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        val response = airloadPlanService.queryhelp()

        response.validate()
    }

    @Test
    fun tuple() {
        val client =
            UnifieddatalibraryOkHttpClient.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val airloadPlanService = client.airloadPlans()

        val airloadplanFulls =
            airloadPlanService.tuple(
                AirloadPlanTupleParams.builder()
                    .columns("columns")
                    .estDepTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        airloadplanFulls.forEach { it.validate() }
    }
}
