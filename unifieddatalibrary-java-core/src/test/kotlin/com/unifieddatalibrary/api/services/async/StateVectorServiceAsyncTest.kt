// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.services.async

import com.unifieddatalibrary.api.TestServerExtension
import com.unifieddatalibrary.api.client.okhttp.UnifieddatalibraryOkHttpClientAsync
import com.unifieddatalibrary.api.models.statevector.StateVectorCountParams
import com.unifieddatalibrary.api.models.statevector.StateVectorCreateBulkParams
import com.unifieddatalibrary.api.models.statevector.StateVectorGetParams
import com.unifieddatalibrary.api.models.statevector.StateVectorIngest
import com.unifieddatalibrary.api.models.statevector.StateVectorListParams
import com.unifieddatalibrary.api.models.statevector.StateVectorTupleParams
import com.unifieddatalibrary.api.models.statevector.StateVectorUnvalidatedPublishParams
import java.time.OffsetDateTime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(TestServerExtension::class)
internal class StateVectorServiceAsyncTest {

    @Test
    fun create() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val future =
            stateVectorServiceAsync.create(
                StateVectorIngest.builder()
                    .classificationMarking("U")
                    .dataMode(StateVectorIngest.DataMode.TEST)
                    .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .actualOdSpan(3.5)
                    .algorithm("SAMPLE_ALGORITHM")
                    .alt1ReferenceFrame("TEME")
                    .alt2ReferenceFrame("EFG/TDR")
                    .area(5.065)
                    .bDot(1.23)
                    .cmOffset(1.23)
                    .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                    .covMethod("CALCULATED")
                    .covReferenceFrame(StateVectorIngest.CovReferenceFrame.J2000)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .dragArea(4.739)
                    .dragCoeff(0.0224391269775)
                    .dragModel("JAC70")
                    .edr(1.23)
                    .addEqCov(1.1)
                    .addEqCov(2.2)
                    .errorControl(1.23)
                    .fixedStep(true)
                    .geopotentialModel("EGM-96")
                    .iau1980Terms(4)
                    .idOnOrbit("ONORBIT-ID")
                    .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                    .idStateVector("STATEVECTOR-ID")
                    .integratorMode("integratorMode")
                    .inTrackThrust(true)
                    .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                    .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                    .lunarSolar(true)
                    .mass(164.5)
                    .msgTs(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .obsAvailable(376)
                    .obsUsed(374)
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origNetwork("OPS1")
                    .origObjectId("ORIGOBJECT-ID")
                    .partials("ANALYTIC")
                    .pedigree("CONJUNCTION")
                    .polarMotionX(1.23)
                    .polarMotionY(1.23)
                    .posUnc(0.333399744452)
                    .rawFileUri("rawFileURI")
                    .recOdSpan(3.5)
                    .referenceFrame(StateVectorIngest.ReferenceFrame.J2000)
                    .residualsAcc(99.5)
                    .revNo(7205)
                    .rms(0.991)
                    .satNo(12)
                    .addSigmaPosUvw(1.23)
                    .addSigmaPosUvw(4.56)
                    .addSigmaVelUvw(1.23)
                    .addSigmaVelUvw(4.56)
                    .solarFluxApAvg(1.23)
                    .solarFluxF10(1.23)
                    .solarFluxF10Avg(1.23)
                    .solarRadPress(true)
                    .solarRadPressCoeff(0.0244394)
                    .solidEarthTides(true)
                    .addSourcedData("DATA1")
                    .addSourcedData("DATA2")
                    .addSourcedDataType(StateVectorIngest.SourcedDataType.RADAR)
                    .sourceDl("AXE")
                    .srpArea(4.311)
                    .stepMode("AUTO")
                    .stepSize(1.23)
                    .stepSizeSelection("AUTO")
                    .addTag("TAG1")
                    .addTag("TAG2")
                    .taiUtc(1.23)
                    .thrustAccel(1.23)
                    .tracksAvail(163)
                    .tracksUsed(163)
                    .transactionId("transactionId")
                    .uct(true)
                    .ut1Rate(1.23)
                    .ut1Utc(1.23)
                    .velUnc(0.000004)
                    .xaccel(-2.12621392)
                    .xpos(-1118.577381)
                    .xposAlt1(-1145.688502)
                    .xposAlt2(-1456.915926)
                    .xvel(-4.25242784)
                    .xvelAlt1(-4.270832252)
                    .xvelAlt2(-1.219814294)
                    .yaccel(2.645553717)
                    .ypos(3026.231084)
                    .yposAlt1(3020.729572)
                    .yposAlt2(-2883.540406)
                    .yvel(5.291107434)
                    .yvelAlt1(5.27074276)
                    .yvelAlt2(-6.602080212)
                    .zaccel(-1.06310696)
                    .zpos(6167.831808)
                    .zposAlt1(6165.55187)
                    .zposAlt2(6165.55187)
                    .zvel(-3.356493869)
                    .zvelAlt1(-3.365155181)
                    .zvelAlt2(-3.365155181)
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun list() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val pageFuture =
            stateVectorServiceAsync.list(
                StateVectorListParams.builder()
                    .epoch(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )

        val page = pageFuture.get()
        page.items().forEach { it.validate() }
    }

    @Test
    fun count() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val responseFuture =
            stateVectorServiceAsync.count(
                StateVectorCountParams.builder()
                    .epoch(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        val response = responseFuture.get()
    }

    @Test
    fun createBulk() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val future =
            stateVectorServiceAsync.createBulk(
                StateVectorCreateBulkParams.builder()
                    .addBody(
                        StateVectorIngest.builder()
                            .classificationMarking("U")
                            .dataMode(StateVectorIngest.DataMode.TEST)
                            .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .source("Bluestaq")
                            .actualOdSpan(3.5)
                            .algorithm("SAMPLE_ALGORITHM")
                            .alt1ReferenceFrame("TEME")
                            .alt2ReferenceFrame("EFG/TDR")
                            .area(5.065)
                            .bDot(1.23)
                            .cmOffset(1.23)
                            .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                            .covMethod("CALCULATED")
                            .covReferenceFrame(StateVectorIngest.CovReferenceFrame.J2000)
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .descriptor("descriptor")
                            .dragArea(4.739)
                            .dragCoeff(0.0224391269775)
                            .dragModel("JAC70")
                            .edr(1.23)
                            .addEqCov(1.1)
                            .addEqCov(2.2)
                            .errorControl(1.23)
                            .fixedStep(true)
                            .geopotentialModel("EGM-96")
                            .iau1980Terms(4)
                            .idOnOrbit("ONORBIT-ID")
                            .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                            .idStateVector("STATEVECTOR-ID")
                            .integratorMode("integratorMode")
                            .inTrackThrust(true)
                            .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                            .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                            .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .lunarSolar(true)
                            .mass(164.5)
                            .msgTs(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .obsAvailable(376)
                            .obsUsed(374)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .origObjectId("ORIGOBJECT-ID")
                            .partials("ANALYTIC")
                            .pedigree("CONJUNCTION")
                            .polarMotionX(1.23)
                            .polarMotionY(1.23)
                            .posUnc(0.333399744452)
                            .rawFileUri("rawFileURI")
                            .recOdSpan(3.5)
                            .referenceFrame(StateVectorIngest.ReferenceFrame.J2000)
                            .residualsAcc(99.5)
                            .revNo(7205)
                            .rms(0.991)
                            .satNo(12)
                            .addSigmaPosUvw(1.23)
                            .addSigmaPosUvw(4.56)
                            .addSigmaVelUvw(1.23)
                            .addSigmaVelUvw(4.56)
                            .solarFluxApAvg(1.23)
                            .solarFluxF10(1.23)
                            .solarFluxF10Avg(1.23)
                            .solarRadPress(true)
                            .solarRadPressCoeff(0.0244394)
                            .solidEarthTides(true)
                            .addSourcedData("DATA1")
                            .addSourcedData("DATA2")
                            .addSourcedDataType(StateVectorIngest.SourcedDataType.RADAR)
                            .sourceDl("AXE")
                            .srpArea(4.311)
                            .stepMode("AUTO")
                            .stepSize(1.23)
                            .stepSizeSelection("AUTO")
                            .addTag("TAG1")
                            .addTag("TAG2")
                            .taiUtc(1.23)
                            .thrustAccel(1.23)
                            .tracksAvail(163)
                            .tracksUsed(163)
                            .transactionId("transactionId")
                            .uct(true)
                            .ut1Rate(1.23)
                            .ut1Utc(1.23)
                            .velUnc(0.000004)
                            .xaccel(-2.12621392)
                            .xpos(-1118.577381)
                            .xposAlt1(-1145.688502)
                            .xposAlt2(-1456.915926)
                            .xvel(-4.25242784)
                            .xvelAlt1(-4.270832252)
                            .xvelAlt2(-1.219814294)
                            .yaccel(2.645553717)
                            .ypos(3026.231084)
                            .yposAlt1(3020.729572)
                            .yposAlt2(-2883.540406)
                            .yvel(5.291107434)
                            .yvelAlt1(5.27074276)
                            .yvelAlt2(-6.602080212)
                            .zaccel(-1.06310696)
                            .zpos(6167.831808)
                            .zposAlt1(6165.55187)
                            .zposAlt2(6165.55187)
                            .zvel(-3.356493869)
                            .zvelAlt1(-3.365155181)
                            .zvelAlt2(-3.365155181)
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun get() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val stateVectorFullFuture =
            stateVectorServiceAsync.get(
                StateVectorGetParams.builder().id("id").firstResult(0L).maxResults(0L).build()
            )

        val stateVectorFull = stateVectorFullFuture.get()
        stateVectorFull.validate()
    }

    @Test
    fun queryhelp() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val responseFuture = stateVectorServiceAsync.queryhelp()

        val response = responseFuture.get()
        response.validate()
    }

    @Test
    fun tuple() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val stateVectorFullsFuture =
            stateVectorServiceAsync.tuple(
                StateVectorTupleParams.builder()
                    .columns("columns")
                    .epoch(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        val stateVectorFulls = stateVectorFullsFuture.get()
        stateVectorFulls.forEach { it.validate() }
    }

    @Test
    fun unvalidatedPublish() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val stateVectorServiceAsync = client.stateVector()

        val future =
            stateVectorServiceAsync.unvalidatedPublish(
                StateVectorUnvalidatedPublishParams.builder()
                    .addBody(
                        StateVectorIngest.builder()
                            .classificationMarking("U")
                            .dataMode(StateVectorIngest.DataMode.TEST)
                            .epoch(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .source("Bluestaq")
                            .actualOdSpan(3.5)
                            .algorithm("SAMPLE_ALGORITHM")
                            .alt1ReferenceFrame("TEME")
                            .alt2ReferenceFrame("EFG/TDR")
                            .area(5.065)
                            .bDot(1.23)
                            .cmOffset(1.23)
                            .cov(listOf(1.1, 2.4, 3.8, 4.2, 5.5, 6.0))
                            .covMethod("CALCULATED")
                            .covReferenceFrame(StateVectorIngest.CovReferenceFrame.J2000)
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .descriptor("descriptor")
                            .dragArea(4.739)
                            .dragCoeff(0.0224391269775)
                            .dragModel("JAC70")
                            .edr(1.23)
                            .addEqCov(1.1)
                            .addEqCov(2.2)
                            .errorControl(1.23)
                            .fixedStep(true)
                            .geopotentialModel("EGM-96")
                            .iau1980Terms(4)
                            .idOnOrbit("ONORBIT-ID")
                            .idOrbitDetermination("026dd511-8ba5-47d3-9909-836149f87686")
                            .idStateVector("STATEVECTOR-ID")
                            .integratorMode("integratorMode")
                            .inTrackThrust(true)
                            .lastObEnd(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                            .lastObStart(OffsetDateTime.parse("2022-11-09T11:20:21.247192Z"))
                            .leapSecondTime(OffsetDateTime.parse("2021-01-01T01:01:01.123Z"))
                            .lunarSolar(true)
                            .mass(164.5)
                            .msgTs(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .obsAvailable(376)
                            .obsUsed(374)
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origNetwork("OPS1")
                            .origObjectId("ORIGOBJECT-ID")
                            .partials("ANALYTIC")
                            .pedigree("CONJUNCTION")
                            .polarMotionX(1.23)
                            .polarMotionY(1.23)
                            .posUnc(0.333399744452)
                            .rawFileUri("rawFileURI")
                            .recOdSpan(3.5)
                            .referenceFrame(StateVectorIngest.ReferenceFrame.J2000)
                            .residualsAcc(99.5)
                            .revNo(7205)
                            .rms(0.991)
                            .satNo(12)
                            .addSigmaPosUvw(1.23)
                            .addSigmaPosUvw(4.56)
                            .addSigmaVelUvw(1.23)
                            .addSigmaVelUvw(4.56)
                            .solarFluxApAvg(1.23)
                            .solarFluxF10(1.23)
                            .solarFluxF10Avg(1.23)
                            .solarRadPress(true)
                            .solarRadPressCoeff(0.0244394)
                            .solidEarthTides(true)
                            .addSourcedData("DATA1")
                            .addSourcedData("DATA2")
                            .addSourcedDataType(StateVectorIngest.SourcedDataType.RADAR)
                            .sourceDl("AXE")
                            .srpArea(4.311)
                            .stepMode("AUTO")
                            .stepSize(1.23)
                            .stepSizeSelection("AUTO")
                            .addTag("TAG1")
                            .addTag("TAG2")
                            .taiUtc(1.23)
                            .thrustAccel(1.23)
                            .tracksAvail(163)
                            .tracksUsed(163)
                            .transactionId("transactionId")
                            .uct(true)
                            .ut1Rate(1.23)
                            .ut1Utc(1.23)
                            .velUnc(0.000004)
                            .xaccel(-2.12621392)
                            .xpos(-1118.577381)
                            .xposAlt1(-1145.688502)
                            .xposAlt2(-1456.915926)
                            .xvel(-4.25242784)
                            .xvelAlt1(-4.270832252)
                            .xvelAlt2(-1.219814294)
                            .yaccel(2.645553717)
                            .ypos(3026.231084)
                            .yposAlt1(3020.729572)
                            .yposAlt2(-2883.540406)
                            .yvel(5.291107434)
                            .yvelAlt1(5.27074276)
                            .yvelAlt2(-6.602080212)
                            .zaccel(-1.06310696)
                            .zpos(6167.831808)
                            .zposAlt1(6165.55187)
                            .zposAlt2(6165.55187)
                            .zvel(-3.356493869)
                            .zvelAlt1(-3.365155181)
                            .zvelAlt2(-3.365155181)
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }
}
