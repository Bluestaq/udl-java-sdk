// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.services.async.observations

import com.unifieddatalibrary.api.TestServerExtension
import com.unifieddatalibrary.api.client.okhttp.UnifieddatalibraryOkHttpClientAsync
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationCountParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationCreateBulkParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationCreateParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationGetParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationListParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationTupleParams
import com.unifieddatalibrary.api.models.observations.rfobservation.RfObservationUnvalidatedPublishParams
import java.time.OffsetDateTime
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(TestServerExtension::class)
internal class RfObservationServiceAsyncTest {

    @Test
    fun create() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val future =
            rfObservationServiceAsync.create(
                RfObservationCreateParams.builder()
                    .classificationMarking("U")
                    .dataMode(RfObservationCreateParams.DataMode.TEST)
                    .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                    .source("Bluestaq")
                    .type("RF")
                    .id("RFOBSERVATION-ID")
                    .antennaName("Antenna1")
                    .azimuth(10.1)
                    .azimuthMeasured(true)
                    .azimuthRate(1.1)
                    .azimuthUnc(2.1)
                    .bandwidth(10.1)
                    .baudRate(10.1)
                    .addBaudRate(1.1)
                    .addBaudRate(2.2)
                    .bitErrorRate(10.1)
                    .carrierStandard("DVB-S2")
                    .channel(10)
                    .addChipRate(1.1)
                    .addChipRate(2.2)
                    .addCodeFill("TAG1")
                    .addCodeFill("TAG2")
                    .addCodeLength(1.1)
                    .addCodeLength(2.2)
                    .addCodeTap("TAG1")
                    .addCodeTap("TAG2")
                    .collectionMode("SURVEY")
                    .confidence(10.1)
                    .addConfidence(1.1)
                    .addConfidence(2.2)
                    .addConstellationXPoint(1.1)
                    .addConstellationXPoint(2.2)
                    .addConstellationYPoint(1.1)
                    .addConstellationYPoint(2.2)
                    .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                    .createdBy("some.user")
                    .descriptor("descriptor")
                    .detectionStatus("DETECTED")
                    .addDetectionStatus("DETECTED")
                    .eirp(10.1)
                    .elevation(10.1)
                    .elevationMeasured(true)
                    .elevationRate(10.1)
                    .elevationUnc(10.1)
                    .elnot("Ex. ELINT")
                    .endFrequency(10.1)
                    .addFrequency(1.1)
                    .addFrequency(2.2)
                    .frequency(10.1)
                    .frequencyShift(10.1)
                    .idOnOrbit("ONORBIT-ID")
                    .idSensor("SENSOR-ID")
                    .incoming(false)
                    .innerCodingRate(7)
                    .maxPsd(10.1)
                    .minPsd(10.1)
                    .modulation("Auto")
                    .noisePwrDensity(10.1)
                    .nominalBandwidth(10.1)
                    .nominalEirp(10.1)
                    .nominalFrequency(10.1)
                    .nominalPowerOverNoise(10.1)
                    .nominalSnr(10.1)
                    .origCountry("AU")
                    .origin("THIRD_PARTY_DATASOURCE")
                    .origMarking("U")
                    .origNetwork("OPS1")
                    .origObjectId("ORIG-OBJECT-ID")
                    .origSensorId("ORIG-SENSOR-ID")
                    .outerCodingRate(4)
                    .peak(false)
                    .pgri(10.1)
                    .addPnOrder(1)
                    .addPnOrder(2)
                    .polarity(10.1)
                    .polarityType(RfObservationCreateParams.PolarityType.H)
                    .powerOverNoise(10.1)
                    .addPower(1.1)
                    .addPower(2.2)
                    .range(10.1)
                    .rangeMeasured(true)
                    .rangeRate(10.1)
                    .rangeRateMeasured(true)
                    .rangeRateUnc(10.1)
                    .rangeUnc(10.1)
                    .rawFileUri("Example URI")
                    .referenceLevel(10.1)
                    .relativeCarrierPower(10.1)
                    .relativeNoiseFloor(10.1)
                    .resolutionBandwidth(10.1)
                    .satNo(32258)
                    .senalt(10.1)
                    .senlat(45.2)
                    .senlon(80.3)
                    .addSignalId("ID1")
                    .addSignalId("ID2")
                    .snr(10.1)
                    .addSnr(1.1)
                    .addSnr(2.2)
                    .sourceDl("AXE")
                    .spectrumAnalyzerPower(10.1)
                    .startFrequency(10.1)
                    .switchPoint(10)
                    .symbolToNoiseRatio(10.1)
                    .addTag("PROVIDER_TAG1")
                    .addTag("PROVIDER_TAG2")
                    .taskId("TASK-ID")
                    .addTelemetryId("ID1")
                    .addTelemetryId("ID2")
                    .trackId("TRACK-ID")
                    .trackRange(10.1)
                    .transactionId("TRANSACTION-ID")
                    .transmitFilterRollOff(10.1)
                    .transmitFilterType("RRC")
                    .transponder("TRANSPONDER-A")
                    .uct(false)
                    .url("https://some-url")
                    .videoBandwidth(10.1)
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun list() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val pageFuture =
            rfObservationServiceAsync.list(
                RfObservationListParams.builder()
                    .obTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )

        val page = pageFuture.get()
        page.items().forEach { it.validate() }
    }

    @Test
    fun count() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val responseFuture =
            rfObservationServiceAsync.count(
                RfObservationCountParams.builder()
                    .obTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        val response = responseFuture.get()
    }

    @Test
    fun createBulk() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val future =
            rfObservationServiceAsync.createBulk(
                RfObservationCreateBulkParams.builder()
                    .addBody(
                        RfObservationCreateBulkParams.Body.builder()
                            .classificationMarking("U")
                            .dataMode(RfObservationCreateBulkParams.Body.DataMode.TEST)
                            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .source("Bluestaq")
                            .type("RF")
                            .id("RFOBSERVATION-ID")
                            .antennaName("Antenna1")
                            .azimuth(10.1)
                            .azimuthMeasured(true)
                            .azimuthRate(1.1)
                            .azimuthUnc(2.1)
                            .bandwidth(10.1)
                            .baudRate(10.1)
                            .addBaudRate(1.1)
                            .addBaudRate(2.2)
                            .bitErrorRate(10.1)
                            .carrierStandard("DVB-S2")
                            .channel(10)
                            .addChipRate(1.1)
                            .addChipRate(2.2)
                            .addCodeFill("TAG1")
                            .addCodeFill("TAG2")
                            .addCodeLength(1.1)
                            .addCodeLength(2.2)
                            .addCodeTap("TAG1")
                            .addCodeTap("TAG2")
                            .collectionMode("SURVEY")
                            .confidence(10.1)
                            .addConfidence(1.1)
                            .addConfidence(2.2)
                            .addConstellationXPoint(1.1)
                            .addConstellationXPoint(2.2)
                            .addConstellationYPoint(1.1)
                            .addConstellationYPoint(2.2)
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .descriptor("descriptor")
                            .detectionStatus("DETECTED")
                            .addDetectionStatus("DETECTED")
                            .eirp(10.1)
                            .elevation(10.1)
                            .elevationMeasured(true)
                            .elevationRate(10.1)
                            .elevationUnc(10.1)
                            .elnot("Ex. ELINT")
                            .endFrequency(10.1)
                            .addFrequency(1.1)
                            .addFrequency(2.2)
                            .frequency(10.1)
                            .frequencyShift(10.1)
                            .idOnOrbit("ONORBIT-ID")
                            .idSensor("SENSOR-ID")
                            .incoming(false)
                            .innerCodingRate(7)
                            .maxPsd(10.1)
                            .minPsd(10.1)
                            .modulation("Auto")
                            .noisePwrDensity(10.1)
                            .nominalBandwidth(10.1)
                            .nominalEirp(10.1)
                            .nominalFrequency(10.1)
                            .nominalPowerOverNoise(10.1)
                            .nominalSnr(10.1)
                            .origCountry("AU")
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origMarking("U")
                            .origNetwork("OPS1")
                            .origObjectId("ORIG-OBJECT-ID")
                            .origSensorId("ORIG-SENSOR-ID")
                            .outerCodingRate(4)
                            .peak(false)
                            .pgri(10.1)
                            .addPnOrder(1)
                            .addPnOrder(2)
                            .polarity(10.1)
                            .polarityType(RfObservationCreateBulkParams.Body.PolarityType.H)
                            .powerOverNoise(10.1)
                            .addPower(1.1)
                            .addPower(2.2)
                            .range(10.1)
                            .rangeMeasured(true)
                            .rangeRate(10.1)
                            .rangeRateMeasured(true)
                            .rangeRateUnc(10.1)
                            .rangeUnc(10.1)
                            .rawFileUri("Example URI")
                            .referenceLevel(10.1)
                            .relativeCarrierPower(10.1)
                            .relativeNoiseFloor(10.1)
                            .resolutionBandwidth(10.1)
                            .satNo(32258)
                            .senalt(10.1)
                            .senlat(45.2)
                            .senlon(80.3)
                            .addSignalId("ID1")
                            .addSignalId("ID2")
                            .snr(10.1)
                            .addSnr(1.1)
                            .addSnr(2.2)
                            .sourceDl("AXE")
                            .spectrumAnalyzerPower(10.1)
                            .startFrequency(10.1)
                            .switchPoint(10)
                            .symbolToNoiseRatio(10.1)
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .taskId("TASK-ID")
                            .addTelemetryId("ID1")
                            .addTelemetryId("ID2")
                            .trackId("TRACK-ID")
                            .trackRange(10.1)
                            .transactionId("TRANSACTION-ID")
                            .transmitFilterRollOff(10.1)
                            .transmitFilterType("RRC")
                            .transponder("TRANSPONDER-A")
                            .uct(false)
                            .url("https://some-url")
                            .videoBandwidth(10.1)
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }

    @Test
    fun get() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val rfObservationFuture =
            rfObservationServiceAsync.get(
                RfObservationGetParams.builder().id("id").firstResult(0L).maxResults(0L).build()
            )

        val rfObservation = rfObservationFuture.get()
        rfObservation.validate()
    }

    @Test
    fun queryhelp() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val responseFuture = rfObservationServiceAsync.queryhelp()

        val response = responseFuture.get()
        response.validate()
    }

    @Test
    fun tuple() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val responseFuture =
            rfObservationServiceAsync.tuple(
                RfObservationTupleParams.builder()
                    .columns("columns")
                    .obTime(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .firstResult(0L)
                    .maxResults(0L)
                    .build()
            )

        val response = responseFuture.get()
        response.forEach { it.validate() }
    }

    @Test
    fun unvalidatedPublish() {
        val client =
            UnifieddatalibraryOkHttpClientAsync.builder()
                .baseUrl(TestServerExtension.BASE_URL)
                .password("My Password")
                .username("My Username")
                .build()
        val rfObservationServiceAsync = client.observations().rfObservation()

        val future =
            rfObservationServiceAsync.unvalidatedPublish(
                RfObservationUnvalidatedPublishParams.builder()
                    .addBody(
                        RfObservationUnvalidatedPublishParams.Body.builder()
                            .classificationMarking("U")
                            .dataMode(RfObservationUnvalidatedPublishParams.Body.DataMode.TEST)
                            .obTime(OffsetDateTime.parse("2018-01-01T16:00:00.123456Z"))
                            .source("Bluestaq")
                            .type("RF")
                            .id("RFOBSERVATION-ID")
                            .antennaName("Antenna1")
                            .azimuth(10.1)
                            .azimuthMeasured(true)
                            .azimuthRate(1.1)
                            .azimuthUnc(2.1)
                            .bandwidth(10.1)
                            .baudRate(10.1)
                            .addBaudRate(1.1)
                            .addBaudRate(2.2)
                            .bitErrorRate(10.1)
                            .carrierStandard("DVB-S2")
                            .channel(10)
                            .addChipRate(1.1)
                            .addChipRate(2.2)
                            .addCodeFill("TAG1")
                            .addCodeFill("TAG2")
                            .addCodeLength(1.1)
                            .addCodeLength(2.2)
                            .addCodeTap("TAG1")
                            .addCodeTap("TAG2")
                            .collectionMode("SURVEY")
                            .confidence(10.1)
                            .addConfidence(1.1)
                            .addConfidence(2.2)
                            .addConstellationXPoint(1.1)
                            .addConstellationXPoint(2.2)
                            .addConstellationYPoint(1.1)
                            .addConstellationYPoint(2.2)
                            .createdAt(OffsetDateTime.parse("2018-01-01T16:00:00.123Z"))
                            .createdBy("some.user")
                            .descriptor("descriptor")
                            .detectionStatus("DETECTED")
                            .addDetectionStatus("DETECTED")
                            .eirp(10.1)
                            .elevation(10.1)
                            .elevationMeasured(true)
                            .elevationRate(10.1)
                            .elevationUnc(10.1)
                            .elnot("Ex. ELINT")
                            .endFrequency(10.1)
                            .addFrequency(1.1)
                            .addFrequency(2.2)
                            .frequency(10.1)
                            .frequencyShift(10.1)
                            .idOnOrbit("ONORBIT-ID")
                            .idSensor("SENSOR-ID")
                            .incoming(false)
                            .innerCodingRate(7)
                            .maxPsd(10.1)
                            .minPsd(10.1)
                            .modulation("Auto")
                            .noisePwrDensity(10.1)
                            .nominalBandwidth(10.1)
                            .nominalEirp(10.1)
                            .nominalFrequency(10.1)
                            .nominalPowerOverNoise(10.1)
                            .nominalSnr(10.1)
                            .origCountry("AU")
                            .origin("THIRD_PARTY_DATASOURCE")
                            .origMarking("U")
                            .origNetwork("OPS1")
                            .origObjectId("ORIG-OBJECT-ID")
                            .origSensorId("ORIG-SENSOR-ID")
                            .outerCodingRate(4)
                            .peak(false)
                            .pgri(10.1)
                            .addPnOrder(1)
                            .addPnOrder(2)
                            .polarity(10.1)
                            .polarityType(RfObservationUnvalidatedPublishParams.Body.PolarityType.H)
                            .powerOverNoise(10.1)
                            .addPower(1.1)
                            .addPower(2.2)
                            .range(10.1)
                            .rangeMeasured(true)
                            .rangeRate(10.1)
                            .rangeRateMeasured(true)
                            .rangeRateUnc(10.1)
                            .rangeUnc(10.1)
                            .rawFileUri("Example URI")
                            .referenceLevel(10.1)
                            .relativeCarrierPower(10.1)
                            .relativeNoiseFloor(10.1)
                            .resolutionBandwidth(10.1)
                            .satNo(32258)
                            .senalt(10.1)
                            .senlat(45.2)
                            .senlon(80.3)
                            .addSignalId("ID1")
                            .addSignalId("ID2")
                            .snr(10.1)
                            .addSnr(1.1)
                            .addSnr(2.2)
                            .sourceDl("AXE")
                            .spectrumAnalyzerPower(10.1)
                            .startFrequency(10.1)
                            .switchPoint(10)
                            .symbolToNoiseRatio(10.1)
                            .addTag("PROVIDER_TAG1")
                            .addTag("PROVIDER_TAG2")
                            .taskId("TASK-ID")
                            .addTelemetryId("ID1")
                            .addTelemetryId("ID2")
                            .trackId("TRACK-ID")
                            .trackRange(10.1)
                            .transactionId("TRANSACTION-ID")
                            .transmitFilterRollOff(10.1)
                            .transmitFilterType("RRC")
                            .transponder("TRANSPONDER-A")
                            .uct(false)
                            .url("https://some-url")
                            .videoBandwidth(10.1)
                            .build()
                    )
                    .build()
            )

        val response = future.get()
    }
}
