// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.isrcollections

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

class IsrCollectionExploitationRequirementFull
private constructor(
    private val id: JsonField<String>,
    private val amplification: JsonField<String>,
    private val dissemination: JsonField<String>,
    private val eei: JsonField<String>,
    private val poc: JsonField<IsrCollectionPocFull>,
    private val reportingCriteria: JsonField<String>,
    private val additionalProperties: MutableMap<String, JsonValue>,
) {

    @JsonCreator
    private constructor(
        @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
        @JsonProperty("amplification")
        @ExcludeMissing
        amplification: JsonField<String> = JsonMissing.of(),
        @JsonProperty("dissemination")
        @ExcludeMissing
        dissemination: JsonField<String> = JsonMissing.of(),
        @JsonProperty("eei") @ExcludeMissing eei: JsonField<String> = JsonMissing.of(),
        @JsonProperty("poc")
        @ExcludeMissing
        poc: JsonField<IsrCollectionPocFull> = JsonMissing.of(),
        @JsonProperty("reportingCriteria")
        @ExcludeMissing
        reportingCriteria: JsonField<String> = JsonMissing.of(),
    ) : this(id, amplification, dissemination, eei, poc, reportingCriteria, mutableMapOf())

    /**
     * Exploitation requirement id.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun id(): Optional<String> = id.getOptional("id")

    /**
     * Amplifying data for the exploitation requirement.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun amplification(): Optional<String> = amplification.getOptional("amplification")

    /**
     * List of e-mails to disseminate collection verification information.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun dissemination(): Optional<String> = dissemination.getOptional("dissemination")

    /**
     * Essential Elements of Information.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun eei(): Optional<String> = eei.getOptional("eei")

    /**
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun poc(): Optional<IsrCollectionPocFull> = poc.getOptional("poc")

    /**
     * The reporting criteria of the collection requirement.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun reportingCriteria(): Optional<String> = reportingCriteria.getOptional("reportingCriteria")

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

    /**
     * Returns the raw JSON value of [amplification].
     *
     * Unlike [amplification], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("amplification")
    @ExcludeMissing
    fun _amplification(): JsonField<String> = amplification

    /**
     * Returns the raw JSON value of [dissemination].
     *
     * Unlike [dissemination], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("dissemination")
    @ExcludeMissing
    fun _dissemination(): JsonField<String> = dissemination

    /**
     * Returns the raw JSON value of [eei].
     *
     * Unlike [eei], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("eei") @ExcludeMissing fun _eei(): JsonField<String> = eei

    /**
     * Returns the raw JSON value of [poc].
     *
     * Unlike [poc], this method doesn't throw if the JSON field has an unexpected type.
     */
    @JsonProperty("poc") @ExcludeMissing fun _poc(): JsonField<IsrCollectionPocFull> = poc

    /**
     * Returns the raw JSON value of [reportingCriteria].
     *
     * Unlike [reportingCriteria], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    @JsonProperty("reportingCriteria")
    @ExcludeMissing
    fun _reportingCriteria(): JsonField<String> = reportingCriteria

    @JsonAnySetter
    private fun putAdditionalProperty(key: String, value: JsonValue) {
        additionalProperties.put(key, value)
    }

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> =
        Collections.unmodifiableMap(additionalProperties)

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [IsrCollectionExploitationRequirementFull].
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [IsrCollectionExploitationRequirementFull]. */
    class Builder internal constructor() {

        private var id: JsonField<String> = JsonMissing.of()
        private var amplification: JsonField<String> = JsonMissing.of()
        private var dissemination: JsonField<String> = JsonMissing.of()
        private var eei: JsonField<String> = JsonMissing.of()
        private var poc: JsonField<IsrCollectionPocFull> = JsonMissing.of()
        private var reportingCriteria: JsonField<String> = JsonMissing.of()
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        @JvmSynthetic
        internal fun from(
            isrCollectionExploitationRequirementFull: IsrCollectionExploitationRequirementFull
        ) = apply {
            id = isrCollectionExploitationRequirementFull.id
            amplification = isrCollectionExploitationRequirementFull.amplification
            dissemination = isrCollectionExploitationRequirementFull.dissemination
            eei = isrCollectionExploitationRequirementFull.eei
            poc = isrCollectionExploitationRequirementFull.poc
            reportingCriteria = isrCollectionExploitationRequirementFull.reportingCriteria
            additionalProperties =
                isrCollectionExploitationRequirementFull.additionalProperties.toMutableMap()
        }

        /** Exploitation requirement id. */
        fun id(id: String) = id(JsonField.of(id))

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { this.id = id }

        /** Amplifying data for the exploitation requirement. */
        fun amplification(amplification: String) = amplification(JsonField.of(amplification))

        /**
         * Sets [Builder.amplification] to an arbitrary JSON value.
         *
         * You should usually call [Builder.amplification] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun amplification(amplification: JsonField<String>) = apply {
            this.amplification = amplification
        }

        /** List of e-mails to disseminate collection verification information. */
        fun dissemination(dissemination: String) = dissemination(JsonField.of(dissemination))

        /**
         * Sets [Builder.dissemination] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dissemination] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dissemination(dissemination: JsonField<String>) = apply {
            this.dissemination = dissemination
        }

        /** Essential Elements of Information. */
        fun eei(eei: String) = eei(JsonField.of(eei))

        /**
         * Sets [Builder.eei] to an arbitrary JSON value.
         *
         * You should usually call [Builder.eei] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun eei(eei: JsonField<String>) = apply { this.eei = eei }

        fun poc(poc: IsrCollectionPocFull) = poc(JsonField.of(poc))

        /**
         * Sets [Builder.poc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.poc] with a well-typed [IsrCollectionPocFull] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun poc(poc: JsonField<IsrCollectionPocFull>) = apply { this.poc = poc }

        /** The reporting criteria of the collection requirement. */
        fun reportingCriteria(reportingCriteria: String) =
            reportingCriteria(JsonField.of(reportingCriteria))

        /**
         * Sets [Builder.reportingCriteria] to an arbitrary JSON value.
         *
         * You should usually call [Builder.reportingCriteria] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun reportingCriteria(reportingCriteria: JsonField<String>) = apply {
            this.reportingCriteria = reportingCriteria
        }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            putAllAdditionalProperties(additionalProperties)
        }

        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalProperty)
        }

        /**
         * Returns an immutable instance of [IsrCollectionExploitationRequirementFull].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         */
        fun build(): IsrCollectionExploitationRequirementFull =
            IsrCollectionExploitationRequirementFull(
                id,
                amplification,
                dissemination,
                eei,
                poc,
                reportingCriteria,
                additionalProperties.toMutableMap(),
            )
    }

    private var validated: Boolean = false

    fun validate(): IsrCollectionExploitationRequirementFull = apply {
        if (validated) {
            return@apply
        }

        id()
        amplification()
        dissemination()
        eei()
        poc().ifPresent { it.validate() }
        reportingCriteria()
        validated = true
    }

    fun isValid(): Boolean =
        try {
            validate()
            true
        } catch (e: UnifieddatalibraryInvalidDataException) {
            false
        }

    /**
     * Returns a score indicating how many valid values are contained in this object recursively.
     *
     * Used for best match union deserialization.
     */
    @JvmSynthetic
    internal fun validity(): Int =
        (if (id.asKnown().isPresent) 1 else 0) +
            (if (amplification.asKnown().isPresent) 1 else 0) +
            (if (dissemination.asKnown().isPresent) 1 else 0) +
            (if (eei.asKnown().isPresent) 1 else 0) +
            (poc.asKnown().getOrNull()?.validity() ?: 0) +
            (if (reportingCriteria.asKnown().isPresent) 1 else 0)

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is IsrCollectionExploitationRequirementFull && id == other.id && amplification == other.amplification && dissemination == other.dissemination && eei == other.eei && poc == other.poc && reportingCriteria == other.reportingCriteria && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, amplification, dissemination, eei, poc, reportingCriteria, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "IsrCollectionExploitationRequirementFull{id=$id, amplification=$amplification, dissemination=$dissemination, eei=$eei, poc=$poc, reportingCriteria=$reportingCriteria, additionalProperties=$additionalProperties}"
}
