// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.notification

import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.core.toImmutable
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to push a Notification/Alert message into the UDL. This operation uses query
 * parameters to pass UDL-required fields such as classificationMarking, msgType, etc and takes a
 * raw string payload which can be XML, JSON, or plain text. The preferred mechanism for posting
 * notifications is to use the standard POST which takes the proper UDL JSON Notification schema as
 * this service may convert the message in an undesirable manner. The service will wrap the passed
 * payload with the appropriate UDL JSON schema, using escape characters as necessary for the
 * payload to produce a valid JSON document. XML payloads (not recommended) are automatically
 * converted to JSON. Messages pushed through this service may be pulled via Secure Messaging and
 * historical REST services. A specific role is required to perform this service operation. Please
 * contact the UDL team for assistance.
 */
class NotificationCreateRawParams
private constructor(
    private val classificationMarking: String,
    private val dataMode: String,
    private val msgType: String,
    private val origin: String,
    private val source: String,
    private val msgId: String?,
    private val tags: List<String>?,
    private val body: String,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /** Classification marking of the data in IC/CAPCO Portion-marked format. */
    fun classificationMarking(): String = classificationMarking

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE: Data pertaining to a government or military exercise. The data may include both
     * real and simulated data.
     *
     * REAL: Data collected or produced that pertains to real-world objects, events, and analysis.
     *
     * SIMULATED: Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST: Specific datasets used to evaluate compliance with specifications and requirements, and
     * for validating technical, functional, and performance characteristics.
     */
    fun dataMode(): String = dataMode

    /** Source provided message type. */
    fun msgType(): String = msgType

    /** Origin of the data. */
    fun origin(): String = origin

    /** Source of the data. */
    fun source(): String = source

    /** Optional message identifier...if not provided an id will be automatically created. */
    fun msgId(): Optional<String> = Optional.ofNullable(msgId)

    /** Optional list of provider/source specific tags for this data. */
    fun tags(): Optional<List<String>> = Optional.ofNullable(tags)

    fun body(): String = body

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [NotificationCreateRawParams].
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .msgType()
         * .origin()
         * .source()
         * .body()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [NotificationCreateRawParams]. */
    class Builder internal constructor() {

        private var classificationMarking: String? = null
        private var dataMode: String? = null
        private var msgType: String? = null
        private var origin: String? = null
        private var source: String? = null
        private var msgId: String? = null
        private var tags: MutableList<String>? = null
        private var body: String? = null
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(notificationCreateRawParams: NotificationCreateRawParams) = apply {
            classificationMarking = notificationCreateRawParams.classificationMarking
            dataMode = notificationCreateRawParams.dataMode
            msgType = notificationCreateRawParams.msgType
            origin = notificationCreateRawParams.origin
            source = notificationCreateRawParams.source
            msgId = notificationCreateRawParams.msgId
            tags = notificationCreateRawParams.tags?.toMutableList()
            body = notificationCreateRawParams.body
            additionalHeaders = notificationCreateRawParams.additionalHeaders.toBuilder()
            additionalQueryParams = notificationCreateRawParams.additionalQueryParams.toBuilder()
        }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            this.classificationMarking = classificationMarking
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE: Data pertaining to a government or military exercise. The data may include both
         * real and simulated data.
         *
         * REAL: Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED: Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST: Specific datasets used to evaluate compliance with specifications and requirements,
         * and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: String) = apply { this.dataMode = dataMode }

        /** Source provided message type. */
        fun msgType(msgType: String) = apply { this.msgType = msgType }

        /** Origin of the data. */
        fun origin(origin: String) = apply { this.origin = origin }

        /** Source of the data. */
        fun source(source: String) = apply { this.source = source }

        /** Optional message identifier...if not provided an id will be automatically created. */
        fun msgId(msgId: String?) = apply { this.msgId = msgId }

        /** Alias for calling [Builder.msgId] with `msgId.orElse(null)`. */
        fun msgId(msgId: Optional<String>) = msgId(msgId.getOrNull())

        /** Optional list of provider/source specific tags for this data. */
        fun tags(tags: List<String>?) = apply { this.tags = tags?.toMutableList() }

        /** Alias for calling [Builder.tags] with `tags.orElse(null)`. */
        fun tags(tags: Optional<List<String>>) = tags(tags.getOrNull())

        /**
         * Adds a single [String] to [tags].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addTag(tag: String) = apply { tags = (tags ?: mutableListOf()).apply { add(tag) } }

        fun body(body: String) = apply { this.body = body }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceadditional_headers(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeadditional_headers(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAlladditional_headers(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAlladditional_query_params(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceadditional_query_params(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAlladditional_query_params(
            additionalQueryParams: Map<String, Iterable<String>>
        ) = apply { this.additionalQueryParams.replaceAll(additionalQueryParams) }

        fun removeadditional_query_params(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAlladditional_query_params(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [NotificationCreateRawParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .msgType()
         * .origin()
         * .source()
         * .body()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): NotificationCreateRawParams =
            NotificationCreateRawParams(
                checkRequired("classificationMarking", classificationMarking),
                checkRequired("dataMode", dataMode),
                checkRequired("msgType", msgType),
                checkRequired("origin", origin),
                checkRequired("source", source),
                msgId,
                tags?.toImmutable(),
                checkRequired("body", body),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): String = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams =
        QueryParams.builder()
            .apply {
                put("classificationMarking", classificationMarking)
                put("dataMode", dataMode)
                put("msgType", msgType)
                put("origin", origin)
                put("source", source)
                msgId?.let { put("msgId", it) }
                tags?.let { put("tags", it.joinToString(",")) }
                putAll(additionalQueryParams)
            }
            .build()

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is NotificationCreateRawParams &&
            classificationMarking == other.classificationMarking &&
            dataMode == other.dataMode &&
            msgType == other.msgType &&
            origin == other.origin &&
            source == other.source &&
            msgId == other.msgId &&
            tags == other.tags &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int =
        Objects.hash(
            classificationMarking,
            dataMode,
            msgType,
            origin,
            source,
            msgId,
            tags,
            body,
            additionalHeaders,
            additionalQueryParams,
        )

    override fun toString() =
        "NotificationCreateRawParams{classificationMarking=$classificationMarking, dataMode=$dataMode, msgType=$msgType, origin=$origin, source=$source, msgId=$msgId, tags=$tags, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
