// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.aircraftstatuses

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkKnown
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.core.toImmutable
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to take a single AircraftStatus as a POST body and ingest into the database. A
 * specific role is required to perform this service operation. Please contact the UDL team for
 * assistance.
 */
class AircraftStatusCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * Unique identifier of the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun idAircraft(): String = body.idAircraft()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun id(): Optional<String> = body.id()

    /**
     * List of additional operational systems on this aircraft beyond what is normally available.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun additionalSys(): Optional<List<String>> = body.additionalSys()

    /**
     * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airToAirStatus(): Optional<AirToAirStatus> = body.airToAirStatus()

    /**
     * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airToGroundStatus(): Optional<AirToGroundStatus> = body.airToGroundStatus()

    /**
     * Aircraft alpha status code that indicates the aircraft maintenance status estimated by the
     * pilot.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun alphaStatusCode(): Optional<String> = body.alphaStatusCode()

    /**
     * Alternate Aircraft Identifier provided by source.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun altAircraftId(): Optional<String> = body.altAircraftId()

    /**
     * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN,
     * etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun contaminationStatus(): Optional<String> = body.contaminationStatus()

    /**
     * Time the row was created in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * The International Civil Aviation Organization (ICAO) code at which this aircraft is currently
     * located or has most recently departed, if airborne.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun currentIcao(): Optional<String> = body.currentIcao()

    /**
     * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE,
     * BATTLESTATION, RUNWAY ALERT, SUITUP).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun currentState(): Optional<String> = body.currentState()

    /**
     * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with
     * millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun earliestTaEndTime(): Optional<OffsetDateTime> = body.earliestTaEndTime()

    /**
     * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with
     * millisecond precision. This is the estimated time when the issue will be resolved.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun etic(): Optional<OffsetDateTime> = body.etic()

    /**
     * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun flightPhase(): Optional<String> = body.flightPhase()

    /**
     * The mass of fuel remaining on the aircraft, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun fuel(): Optional<Int> = body.fuel()

    /**
     * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun fuelFunction(): Optional<String> = body.fuelFunction()

    /**
     * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED,
     * etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun fuelStatus(): Optional<String> = body.fuelStatus()

    /**
     * US Air Force geographic location code of the airfield where the aircraft is located.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun geoLoc(): Optional<String> = body.geoLoc()

    /**
     * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun groundStatus(): Optional<String> = body.groundStatus()

    /**
     * Flag indicating that the aircraft is capable of making at least one gun pass.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun gunCapable(): Optional<Boolean> = body.gunCapable()

    /**
     * The upper bound of the estimated number of gun rounds available.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun gunRdsMax(): Optional<Int> = body.gunRdsMax()

    /**
     * The lower bound of the estimated number of gun rounds available.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun gunRdsMin(): Optional<Int> = body.gunRdsMin()

    /**
     * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun gunRdsType(): Optional<String> = body.gunRdsType()

    /**
     * If not airborne, the unique identifier of the installation currently hosting the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idAirfield(): Optional<String> = body.idAirfield()

    /**
     * Unique identifier of the Point of Interest (POI) record related to this aircraft status. This
     * will generally represent the location of an aircraft on the ground.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idPoi(): Optional<String> = body.idPoi()

    /**
     * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER,
     * AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.). Intended as, but not
     * constrained to, MIL-STD-6016 environment dependent specific/store type designations. This
     * array must be the same length as inventoryMin and inventoryMax.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun inventory(): Optional<List<String>> = body.inventory()

    /**
     * Array of the upper bound quantity for each of the inventory items. The values in this array
     * must correspond to position index in the inventory array. This array must be the same length
     * as inventory and inventoryMin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun inventoryMax(): Optional<List<Int>> = body.inventoryMax()

    /**
     * Array of the lower bound quantity for each of the inventory items. The values in this array
     * must correspond to position index in the inventory array. This array must be the same length
     * as inventory and inventoryMax.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun inventoryMin(): Optional<List<Int>> = body.inventoryMin()

    /**
     * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with
     * millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lastInspectionDate(): Optional<OffsetDateTime> = body.lastInspectionDate()

    /**
     * The name or ID of the external user that updated this status.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lastUpdatedBy(): Optional<String> = body.lastUpdatedBy()

    /**
     * Military aircraft maintenance point of contact for this aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maintPoc(): Optional<String> = body.maintPoc()

    /**
     * Indicates the priority of the maintenance effort.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maintPriority(): Optional<String> = body.maintPriority()

    /**
     * The maintenance status of the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maintStatus(): Optional<String> = body.maintStatus()

    /**
     * Indicates the maintenance discrepancy that drives the current maintenance status.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maintStatusDriver(): Optional<String> = body.maintStatusDriver()

    /**
     * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond
     * precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maintStatusUpdate(): Optional<OffsetDateTime> = body.maintStatusUpdate()

    /**
     * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun missionReadiness(): Optional<String> = body.missionReadiness()

    /**
     * Maintenance pacing remarks assocociated with this aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun mxRemark(): Optional<String> = body.mxRemark()

    /**
     * The International Civil Aviation Organization (ICAO) code of the next destination of this
     * aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun nextIcao(): Optional<String> = body.nextIcao()

    /**
     * Optional notes/comments concerning this aircraft status.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun notes(): Optional<String> = body.notes()

    /**
     * Originating system or organization which produced the data, if different from the source. The
     * origin may be different than the source if the source was a mediating system which forwarded
     * the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the
     * system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * The parking location of this aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun parkLocation(): Optional<String> = body.parkLocation()

    /**
     * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun parkLocationSystem(): Optional<String> = body.parkLocationSystem()

    /**
     * The International Civil Aviation Organization (ICAO) code at which this aircraft was
     * previously located.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun previousIcao(): Optional<String> = body.previousIcao()

    /**
     * The source data library from which this record was received. This could be a remote or
     * tactical UDL or another data library. If null, the record should be assumed to have
     * originated from the primary Enterprise UDL.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun sourceDl(): Optional<String> = body.sourceDl()

    /**
     * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun taStartTime(): Optional<OffsetDateTime> = body.taStartTime()

    /**
     * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with
     * millisecond precision. This is the estimated time when the course of action to resolve the
     * issue will be determined.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun troubleshootEtic(): Optional<OffsetDateTime> = body.troubleshootEtic()

    /**
     * List of unavailable systems that would normally be on this aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun unavailableSys(): Optional<List<String>> = body.unavailableSys()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [idAircraft].
     *
     * Unlike [idAircraft], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idAircraft(): JsonField<String> = body._idAircraft()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _id(): JsonField<String> = body._id()

    /**
     * Returns the raw JSON value of [additionalSys].
     *
     * Unlike [additionalSys], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _additionalSys(): JsonField<List<String>> = body._additionalSys()

    /**
     * Returns the raw JSON value of [airToAirStatus].
     *
     * Unlike [airToAirStatus], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _airToAirStatus(): JsonField<AirToAirStatus> = body._airToAirStatus()

    /**
     * Returns the raw JSON value of [airToGroundStatus].
     *
     * Unlike [airToGroundStatus], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _airToGroundStatus(): JsonField<AirToGroundStatus> = body._airToGroundStatus()

    /**
     * Returns the raw JSON value of [alphaStatusCode].
     *
     * Unlike [alphaStatusCode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _alphaStatusCode(): JsonField<String> = body._alphaStatusCode()

    /**
     * Returns the raw JSON value of [altAircraftId].
     *
     * Unlike [altAircraftId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _altAircraftId(): JsonField<String> = body._altAircraftId()

    /**
     * Returns the raw JSON value of [contaminationStatus].
     *
     * Unlike [contaminationStatus], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _contaminationStatus(): JsonField<String> = body._contaminationStatus()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [currentIcao].
     *
     * Unlike [currentIcao], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _currentIcao(): JsonField<String> = body._currentIcao()

    /**
     * Returns the raw JSON value of [currentState].
     *
     * Unlike [currentState], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _currentState(): JsonField<String> = body._currentState()

    /**
     * Returns the raw JSON value of [earliestTaEndTime].
     *
     * Unlike [earliestTaEndTime], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _earliestTaEndTime(): JsonField<OffsetDateTime> = body._earliestTaEndTime()

    /**
     * Returns the raw JSON value of [etic].
     *
     * Unlike [etic], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _etic(): JsonField<OffsetDateTime> = body._etic()

    /**
     * Returns the raw JSON value of [flightPhase].
     *
     * Unlike [flightPhase], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _flightPhase(): JsonField<String> = body._flightPhase()

    /**
     * Returns the raw JSON value of [fuel].
     *
     * Unlike [fuel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fuel(): JsonField<Int> = body._fuel()

    /**
     * Returns the raw JSON value of [fuelFunction].
     *
     * Unlike [fuelFunction], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fuelFunction(): JsonField<String> = body._fuelFunction()

    /**
     * Returns the raw JSON value of [fuelStatus].
     *
     * Unlike [fuelStatus], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fuelStatus(): JsonField<String> = body._fuelStatus()

    /**
     * Returns the raw JSON value of [geoLoc].
     *
     * Unlike [geoLoc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _geoLoc(): JsonField<String> = body._geoLoc()

    /**
     * Returns the raw JSON value of [groundStatus].
     *
     * Unlike [groundStatus], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _groundStatus(): JsonField<String> = body._groundStatus()

    /**
     * Returns the raw JSON value of [gunCapable].
     *
     * Unlike [gunCapable], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _gunCapable(): JsonField<Boolean> = body._gunCapable()

    /**
     * Returns the raw JSON value of [gunRdsMax].
     *
     * Unlike [gunRdsMax], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _gunRdsMax(): JsonField<Int> = body._gunRdsMax()

    /**
     * Returns the raw JSON value of [gunRdsMin].
     *
     * Unlike [gunRdsMin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _gunRdsMin(): JsonField<Int> = body._gunRdsMin()

    /**
     * Returns the raw JSON value of [gunRdsType].
     *
     * Unlike [gunRdsType], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _gunRdsType(): JsonField<String> = body._gunRdsType()

    /**
     * Returns the raw JSON value of [idAirfield].
     *
     * Unlike [idAirfield], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idAirfield(): JsonField<String> = body._idAirfield()

    /**
     * Returns the raw JSON value of [idPoi].
     *
     * Unlike [idPoi], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idPoi(): JsonField<String> = body._idPoi()

    /**
     * Returns the raw JSON value of [inventory].
     *
     * Unlike [inventory], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _inventory(): JsonField<List<String>> = body._inventory()

    /**
     * Returns the raw JSON value of [inventoryMax].
     *
     * Unlike [inventoryMax], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _inventoryMax(): JsonField<List<Int>> = body._inventoryMax()

    /**
     * Returns the raw JSON value of [inventoryMin].
     *
     * Unlike [inventoryMin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _inventoryMin(): JsonField<List<Int>> = body._inventoryMin()

    /**
     * Returns the raw JSON value of [lastInspectionDate].
     *
     * Unlike [lastInspectionDate], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _lastInspectionDate(): JsonField<OffsetDateTime> = body._lastInspectionDate()

    /**
     * Returns the raw JSON value of [lastUpdatedBy].
     *
     * Unlike [lastUpdatedBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _lastUpdatedBy(): JsonField<String> = body._lastUpdatedBy()

    /**
     * Returns the raw JSON value of [maintPoc].
     *
     * Unlike [maintPoc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _maintPoc(): JsonField<String> = body._maintPoc()

    /**
     * Returns the raw JSON value of [maintPriority].
     *
     * Unlike [maintPriority], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _maintPriority(): JsonField<String> = body._maintPriority()

    /**
     * Returns the raw JSON value of [maintStatus].
     *
     * Unlike [maintStatus], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _maintStatus(): JsonField<String> = body._maintStatus()

    /**
     * Returns the raw JSON value of [maintStatusDriver].
     *
     * Unlike [maintStatusDriver], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _maintStatusDriver(): JsonField<String> = body._maintStatusDriver()

    /**
     * Returns the raw JSON value of [maintStatusUpdate].
     *
     * Unlike [maintStatusUpdate], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _maintStatusUpdate(): JsonField<OffsetDateTime> = body._maintStatusUpdate()

    /**
     * Returns the raw JSON value of [missionReadiness].
     *
     * Unlike [missionReadiness], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _missionReadiness(): JsonField<String> = body._missionReadiness()

    /**
     * Returns the raw JSON value of [mxRemark].
     *
     * Unlike [mxRemark], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _mxRemark(): JsonField<String> = body._mxRemark()

    /**
     * Returns the raw JSON value of [nextIcao].
     *
     * Unlike [nextIcao], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _nextIcao(): JsonField<String> = body._nextIcao()

    /**
     * Returns the raw JSON value of [notes].
     *
     * Unlike [notes], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _notes(): JsonField<String> = body._notes()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [parkLocation].
     *
     * Unlike [parkLocation], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _parkLocation(): JsonField<String> = body._parkLocation()

    /**
     * Returns the raw JSON value of [parkLocationSystem].
     *
     * Unlike [parkLocationSystem], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _parkLocationSystem(): JsonField<String> = body._parkLocationSystem()

    /**
     * Returns the raw JSON value of [previousIcao].
     *
     * Unlike [previousIcao], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _previousIcao(): JsonField<String> = body._previousIcao()

    /**
     * Returns the raw JSON value of [sourceDl].
     *
     * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _sourceDl(): JsonField<String> = body._sourceDl()

    /**
     * Returns the raw JSON value of [taStartTime].
     *
     * Unlike [taStartTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _taStartTime(): JsonField<OffsetDateTime> = body._taStartTime()

    /**
     * Returns the raw JSON value of [troubleshootEtic].
     *
     * Unlike [troubleshootEtic], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _troubleshootEtic(): JsonField<OffsetDateTime> = body._troubleshootEtic()

    /**
     * Returns the raw JSON value of [unavailableSys].
     *
     * Unlike [unavailableSys], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _unavailableSys(): JsonField<List<String>> = body._unavailableSys()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [AircraftStatusCreateParams].
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .idAircraft()
         * .source()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [AircraftStatusCreateParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(aircraftStatusCreateParams: AircraftStatusCreateParams) = apply {
            body = aircraftStatusCreateParams.body.toBuilder()
            additionalHeaders = aircraftStatusCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = aircraftStatusCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [classificationMarking]
         * - [dataMode]
         * - [idAircraft]
         * - [source]
         * - [id]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) = apply { body.dataMode(dataMode) }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) = apply { body.dataMode(dataMode) }

        /** Unique identifier of the aircraft. */
        fun idAircraft(idAircraft: String) = apply { body.idAircraft(idAircraft) }

        /**
         * Sets [Builder.idAircraft] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idAircraft] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idAircraft(idAircraft: JsonField<String>) = apply { body.idAircraft(idAircraft) }

        /** Source of the data. */
        fun source(source: String) = apply { body.source(source) }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun source(source: JsonField<String>) = apply { body.source(source) }

        /** Unique identifier of the record, auto-generated by the system. */
        fun id(id: String) = apply { body.id(id) }

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { body.id(id) }

        /**
         * List of additional operational systems on this aircraft beyond what is normally
         * available.
         */
        fun additionalSys(additionalSys: List<String>) = apply { body.additionalSys(additionalSys) }

        /**
         * Sets [Builder.additionalSys] to an arbitrary JSON value.
         *
         * You should usually call [Builder.additionalSys] with a well-typed `List<String>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun additionalSys(additionalSys: JsonField<List<String>>) = apply {
            body.additionalSys(additionalSys)
        }

        /**
         * Adds a single [String] to [additionalSys].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAdditionalSy(additionalSy: String) = apply { body.addAdditionalSy(additionalSy) }

        /**
         * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
         */
        fun airToAirStatus(airToAirStatus: AirToAirStatus) = apply {
            body.airToAirStatus(airToAirStatus)
        }

        /**
         * Sets [Builder.airToAirStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airToAirStatus] with a well-typed [AirToAirStatus] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun airToAirStatus(airToAirStatus: JsonField<AirToAirStatus>) = apply {
            body.airToAirStatus(airToAirStatus)
        }

        /**
         * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL,
         * OFF).
         */
        fun airToGroundStatus(airToGroundStatus: AirToGroundStatus) = apply {
            body.airToGroundStatus(airToGroundStatus)
        }

        /**
         * Sets [Builder.airToGroundStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airToGroundStatus] with a well-typed [AirToGroundStatus]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun airToGroundStatus(airToGroundStatus: JsonField<AirToGroundStatus>) = apply {
            body.airToGroundStatus(airToGroundStatus)
        }

        /**
         * Aircraft alpha status code that indicates the aircraft maintenance status estimated by
         * the pilot.
         */
        fun alphaStatusCode(alphaStatusCode: String) = apply {
            body.alphaStatusCode(alphaStatusCode)
        }

        /**
         * Sets [Builder.alphaStatusCode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.alphaStatusCode] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun alphaStatusCode(alphaStatusCode: JsonField<String>) = apply {
            body.alphaStatusCode(alphaStatusCode)
        }

        /** Alternate Aircraft Identifier provided by source. */
        fun altAircraftId(altAircraftId: String) = apply { body.altAircraftId(altAircraftId) }

        /**
         * Sets [Builder.altAircraftId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.altAircraftId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun altAircraftId(altAircraftId: JsonField<String>) = apply {
            body.altAircraftId(altAircraftId)
        }

        /**
         * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED,
         * UNKNOWN, etc.).
         */
        fun contaminationStatus(contaminationStatus: String) = apply {
            body.contaminationStatus(contaminationStatus)
        }

        /**
         * Sets [Builder.contaminationStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.contaminationStatus] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun contaminationStatus(contaminationStatus: JsonField<String>) = apply {
            body.contaminationStatus(contaminationStatus)
        }

        /** Time the row was created in the database, auto-populated by the system. */
        fun createdAt(createdAt: OffsetDateTime) = apply { body.createdAt(createdAt) }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { body.createdAt(createdAt) }

        /** Application user who created the row in the database, auto-populated by the system. */
        fun createdBy(createdBy: String) = apply { body.createdBy(createdBy) }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun createdBy(createdBy: JsonField<String>) = apply { body.createdBy(createdBy) }

        /**
         * The International Civil Aviation Organization (ICAO) code at which this aircraft is
         * currently located or has most recently departed, if airborne.
         */
        fun currentIcao(currentIcao: String) = apply { body.currentIcao(currentIcao) }

        /**
         * Sets [Builder.currentIcao] to an arbitrary JSON value.
         *
         * You should usually call [Builder.currentIcao] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun currentIcao(currentIcao: JsonField<String>) = apply { body.currentIcao(currentIcao) }

        /**
         * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE,
         * BATTLESTATION, RUNWAY ALERT, SUITUP).
         */
        fun currentState(currentState: String) = apply { body.currentState(currentState) }

        /**
         * Sets [Builder.currentState] to an arbitrary JSON value.
         *
         * You should usually call [Builder.currentState] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun currentState(currentState: JsonField<String>) = apply {
            body.currentState(currentState)
        }

        /**
         * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format
         * with millisecond precision.
         */
        fun earliestTaEndTime(earliestTaEndTime: OffsetDateTime) = apply {
            body.earliestTaEndTime(earliestTaEndTime)
        }

        /**
         * Sets [Builder.earliestTaEndTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.earliestTaEndTime] with a well-typed [OffsetDateTime]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun earliestTaEndTime(earliestTaEndTime: JsonField<OffsetDateTime>) = apply {
            body.earliestTaEndTime(earliestTaEndTime)
        }

        /**
         * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with
         * millisecond precision. This is the estimated time when the issue will be resolved.
         */
        fun etic(etic: OffsetDateTime) = apply { body.etic(etic) }

        /**
         * Sets [Builder.etic] to an arbitrary JSON value.
         *
         * You should usually call [Builder.etic] with a well-typed [OffsetDateTime] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun etic(etic: JsonField<OffsetDateTime>) = apply { body.etic(etic) }

        /** Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft. */
        fun flightPhase(flightPhase: String) = apply { body.flightPhase(flightPhase) }

        /**
         * Sets [Builder.flightPhase] to an arbitrary JSON value.
         *
         * You should usually call [Builder.flightPhase] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun flightPhase(flightPhase: JsonField<String>) = apply { body.flightPhase(flightPhase) }

        /** The mass of fuel remaining on the aircraft, in kilograms. */
        fun fuel(fuel: Int) = apply { body.fuel(fuel) }

        /**
         * Sets [Builder.fuel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fuel] with a well-typed [Int] value instead. This method
         * is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun fuel(fuel: JsonField<Int>) = apply { body.fuel(fuel) }

        /** Used in conjunction with the fuel field to indicate either burnable or offload fuel. */
        fun fuelFunction(fuelFunction: String) = apply { body.fuelFunction(fuelFunction) }

        /**
         * Sets [Builder.fuelFunction] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fuelFunction] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun fuelFunction(fuelFunction: JsonField<String>) = apply {
            body.fuelFunction(fuelFunction)
        }

        /**
         * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER,
         * REQUESTED, etc.).
         */
        fun fuelStatus(fuelStatus: String) = apply { body.fuelStatus(fuelStatus) }

        /**
         * Sets [Builder.fuelStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fuelStatus] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun fuelStatus(fuelStatus: JsonField<String>) = apply { body.fuelStatus(fuelStatus) }

        /** US Air Force geographic location code of the airfield where the aircraft is located. */
        fun geoLoc(geoLoc: String) = apply { body.geoLoc(geoLoc) }

        /**
         * Sets [Builder.geoLoc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.geoLoc] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun geoLoc(geoLoc: JsonField<String>) = apply { body.geoLoc(geoLoc) }

        /**
         * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
         */
        fun groundStatus(groundStatus: String) = apply { body.groundStatus(groundStatus) }

        /**
         * Sets [Builder.groundStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.groundStatus] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun groundStatus(groundStatus: JsonField<String>) = apply {
            body.groundStatus(groundStatus)
        }

        /** Flag indicating that the aircraft is capable of making at least one gun pass. */
        fun gunCapable(gunCapable: Boolean) = apply { body.gunCapable(gunCapable) }

        /**
         * Sets [Builder.gunCapable] to an arbitrary JSON value.
         *
         * You should usually call [Builder.gunCapable] with a well-typed [Boolean] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun gunCapable(gunCapable: JsonField<Boolean>) = apply { body.gunCapable(gunCapable) }

        /** The upper bound of the estimated number of gun rounds available. */
        fun gunRdsMax(gunRdsMax: Int) = apply { body.gunRdsMax(gunRdsMax) }

        /**
         * Sets [Builder.gunRdsMax] to an arbitrary JSON value.
         *
         * You should usually call [Builder.gunRdsMax] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun gunRdsMax(gunRdsMax: JsonField<Int>) = apply { body.gunRdsMax(gunRdsMax) }

        /** The lower bound of the estimated number of gun rounds available. */
        fun gunRdsMin(gunRdsMin: Int) = apply { body.gunRdsMin(gunRdsMin) }

        /**
         * Sets [Builder.gunRdsMin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.gunRdsMin] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun gunRdsMin(gunRdsMin: JsonField<Int>) = apply { body.gunRdsMin(gunRdsMin) }

        /** The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.). */
        fun gunRdsType(gunRdsType: String) = apply { body.gunRdsType(gunRdsType) }

        /**
         * Sets [Builder.gunRdsType] to an arbitrary JSON value.
         *
         * You should usually call [Builder.gunRdsType] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun gunRdsType(gunRdsType: JsonField<String>) = apply { body.gunRdsType(gunRdsType) }

        /**
         * If not airborne, the unique identifier of the installation currently hosting the
         * aircraft.
         */
        fun idAirfield(idAirfield: String) = apply { body.idAirfield(idAirfield) }

        /**
         * Sets [Builder.idAirfield] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idAirfield] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idAirfield(idAirfield: JsonField<String>) = apply { body.idAirfield(idAirfield) }

        /**
         * Unique identifier of the Point of Interest (POI) record related to this aircraft status.
         * This will generally represent the location of an aircraft on the ground.
         */
        fun idPoi(idPoi: String) = apply { body.idPoi(idPoi) }

        /**
         * Sets [Builder.idPoi] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idPoi] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun idPoi(idPoi: JsonField<String>) = apply { body.idPoi(idPoi) }

        /**
         * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER,
         * AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.). Intended as, but not
         * constrained to, MIL-STD-6016 environment dependent specific/store type designations. This
         * array must be the same length as inventoryMin and inventoryMax.
         */
        fun inventory(inventory: List<String>) = apply { body.inventory(inventory) }

        /**
         * Sets [Builder.inventory] to an arbitrary JSON value.
         *
         * You should usually call [Builder.inventory] with a well-typed `List<String>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun inventory(inventory: JsonField<List<String>>) = apply { body.inventory(inventory) }

        /**
         * Adds a single [String] to [Builder.inventory].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addInventory(inventory: String) = apply { body.addInventory(inventory) }

        /**
         * Array of the upper bound quantity for each of the inventory items. The values in this
         * array must correspond to position index in the inventory array. This array must be the
         * same length as inventory and inventoryMin.
         */
        fun inventoryMax(inventoryMax: List<Int>) = apply { body.inventoryMax(inventoryMax) }

        /**
         * Sets [Builder.inventoryMax] to an arbitrary JSON value.
         *
         * You should usually call [Builder.inventoryMax] with a well-typed `List<Int>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun inventoryMax(inventoryMax: JsonField<List<Int>>) = apply {
            body.inventoryMax(inventoryMax)
        }

        /**
         * Adds a single [Int] to [Builder.inventoryMax].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addInventoryMax(inventoryMax: Int) = apply { body.addInventoryMax(inventoryMax) }

        /**
         * Array of the lower bound quantity for each of the inventory items. The values in this
         * array must correspond to position index in the inventory array. This array must be the
         * same length as inventory and inventoryMax.
         */
        fun inventoryMin(inventoryMin: List<Int>) = apply { body.inventoryMin(inventoryMin) }

        /**
         * Sets [Builder.inventoryMin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.inventoryMin] with a well-typed `List<Int>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun inventoryMin(inventoryMin: JsonField<List<Int>>) = apply {
            body.inventoryMin(inventoryMin)
        }

        /**
         * Adds a single [Int] to [Builder.inventoryMin].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addInventoryMin(inventoryMin: Int) = apply { body.addInventoryMin(inventoryMin) }

        /**
         * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format
         * with millisecond precision.
         */
        fun lastInspectionDate(lastInspectionDate: OffsetDateTime) = apply {
            body.lastInspectionDate(lastInspectionDate)
        }

        /**
         * Sets [Builder.lastInspectionDate] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lastInspectionDate] with a well-typed [OffsetDateTime]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun lastInspectionDate(lastInspectionDate: JsonField<OffsetDateTime>) = apply {
            body.lastInspectionDate(lastInspectionDate)
        }

        /** The name or ID of the external user that updated this status. */
        fun lastUpdatedBy(lastUpdatedBy: String) = apply { body.lastUpdatedBy(lastUpdatedBy) }

        /**
         * Sets [Builder.lastUpdatedBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lastUpdatedBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun lastUpdatedBy(lastUpdatedBy: JsonField<String>) = apply {
            body.lastUpdatedBy(lastUpdatedBy)
        }

        /** Military aircraft maintenance point of contact for this aircraft. */
        fun maintPoc(maintPoc: String) = apply { body.maintPoc(maintPoc) }

        /**
         * Sets [Builder.maintPoc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maintPoc] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun maintPoc(maintPoc: JsonField<String>) = apply { body.maintPoc(maintPoc) }

        /** Indicates the priority of the maintenance effort. */
        fun maintPriority(maintPriority: String) = apply { body.maintPriority(maintPriority) }

        /**
         * Sets [Builder.maintPriority] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maintPriority] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun maintPriority(maintPriority: JsonField<String>) = apply {
            body.maintPriority(maintPriority)
        }

        /** The maintenance status of the aircraft. */
        fun maintStatus(maintStatus: String) = apply { body.maintStatus(maintStatus) }

        /**
         * Sets [Builder.maintStatus] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maintStatus] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun maintStatus(maintStatus: JsonField<String>) = apply { body.maintStatus(maintStatus) }

        /** Indicates the maintenance discrepancy that drives the current maintenance status. */
        fun maintStatusDriver(maintStatusDriver: String) = apply {
            body.maintStatusDriver(maintStatusDriver)
        }

        /**
         * Sets [Builder.maintStatusDriver] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maintStatusDriver] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun maintStatusDriver(maintStatusDriver: JsonField<String>) = apply {
            body.maintStatusDriver(maintStatusDriver)
        }

        /**
         * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond
         * precision.
         */
        fun maintStatusUpdate(maintStatusUpdate: OffsetDateTime) = apply {
            body.maintStatusUpdate(maintStatusUpdate)
        }

        /**
         * Sets [Builder.maintStatusUpdate] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maintStatusUpdate] with a well-typed [OffsetDateTime]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun maintStatusUpdate(maintStatusUpdate: JsonField<OffsetDateTime>) = apply {
            body.maintStatusUpdate(maintStatusUpdate)
        }

        /** The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE). */
        fun missionReadiness(missionReadiness: String) = apply {
            body.missionReadiness(missionReadiness)
        }

        /**
         * Sets [Builder.missionReadiness] to an arbitrary JSON value.
         *
         * You should usually call [Builder.missionReadiness] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun missionReadiness(missionReadiness: JsonField<String>) = apply {
            body.missionReadiness(missionReadiness)
        }

        /** Maintenance pacing remarks assocociated with this aircraft. */
        fun mxRemark(mxRemark: String) = apply { body.mxRemark(mxRemark) }

        /**
         * Sets [Builder.mxRemark] to an arbitrary JSON value.
         *
         * You should usually call [Builder.mxRemark] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun mxRemark(mxRemark: JsonField<String>) = apply { body.mxRemark(mxRemark) }

        /**
         * The International Civil Aviation Organization (ICAO) code of the next destination of this
         * aircraft.
         */
        fun nextIcao(nextIcao: String) = apply { body.nextIcao(nextIcao) }

        /**
         * Sets [Builder.nextIcao] to an arbitrary JSON value.
         *
         * You should usually call [Builder.nextIcao] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun nextIcao(nextIcao: JsonField<String>) = apply { body.nextIcao(nextIcao) }

        /** Optional notes/comments concerning this aircraft status. */
        fun notes(notes: String) = apply { body.notes(notes) }

        /**
         * Sets [Builder.notes] to an arbitrary JSON value.
         *
         * You should usually call [Builder.notes] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun notes(notes: JsonField<String>) = apply { body.notes(notes) }

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         */
        fun origin(origin: String) = apply { body.origin(origin) }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun origin(origin: JsonField<String>) = apply { body.origin(origin) }

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         */
        fun origNetwork(origNetwork: String) = apply { body.origNetwork(origNetwork) }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origNetwork(origNetwork: JsonField<String>) = apply { body.origNetwork(origNetwork) }

        /** The parking location of this aircraft. */
        fun parkLocation(parkLocation: String) = apply { body.parkLocation(parkLocation) }

        /**
         * Sets [Builder.parkLocation] to an arbitrary JSON value.
         *
         * You should usually call [Builder.parkLocation] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun parkLocation(parkLocation: JsonField<String>) = apply {
            body.parkLocation(parkLocation)
        }

        /** The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.). */
        fun parkLocationSystem(parkLocationSystem: String) = apply {
            body.parkLocationSystem(parkLocationSystem)
        }

        /**
         * Sets [Builder.parkLocationSystem] to an arbitrary JSON value.
         *
         * You should usually call [Builder.parkLocationSystem] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun parkLocationSystem(parkLocationSystem: JsonField<String>) = apply {
            body.parkLocationSystem(parkLocationSystem)
        }

        /**
         * The International Civil Aviation Organization (ICAO) code at which this aircraft was
         * previously located.
         */
        fun previousIcao(previousIcao: String) = apply { body.previousIcao(previousIcao) }

        /**
         * Sets [Builder.previousIcao] to an arbitrary JSON value.
         *
         * You should usually call [Builder.previousIcao] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun previousIcao(previousIcao: JsonField<String>) = apply {
            body.previousIcao(previousIcao)
        }

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         */
        fun sourceDl(sourceDl: String) = apply { body.sourceDl(sourceDl) }

        /**
         * Sets [Builder.sourceDl] to an arbitrary JSON value.
         *
         * You should usually call [Builder.sourceDl] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun sourceDl(sourceDl: JsonField<String>) = apply { body.sourceDl(sourceDl) }

        /** The turnaround start time, in ISO 8601 UTC format with millisecond precision. */
        fun taStartTime(taStartTime: OffsetDateTime) = apply { body.taStartTime(taStartTime) }

        /**
         * Sets [Builder.taStartTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.taStartTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun taStartTime(taStartTime: JsonField<OffsetDateTime>) = apply {
            body.taStartTime(taStartTime)
        }

        /**
         * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with
         * millisecond precision. This is the estimated time when the course of action to resolve
         * the issue will be determined.
         */
        fun troubleshootEtic(troubleshootEtic: OffsetDateTime) = apply {
            body.troubleshootEtic(troubleshootEtic)
        }

        /**
         * Sets [Builder.troubleshootEtic] to an arbitrary JSON value.
         *
         * You should usually call [Builder.troubleshootEtic] with a well-typed [OffsetDateTime]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun troubleshootEtic(troubleshootEtic: JsonField<OffsetDateTime>) = apply {
            body.troubleshootEtic(troubleshootEtic)
        }

        /** List of unavailable systems that would normally be on this aircraft. */
        fun unavailableSys(unavailableSys: List<String>) = apply {
            body.unavailableSys(unavailableSys)
        }

        /**
         * Sets [Builder.unavailableSys] to an arbitrary JSON value.
         *
         * You should usually call [Builder.unavailableSys] with a well-typed `List<String>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun unavailableSys(unavailableSys: JsonField<List<String>>) = apply {
            body.unavailableSys(unavailableSys)
        }

        /**
         * Adds a single [String] to [unavailableSys].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addUnavailableSy(unavailableSy: String) = apply { body.addUnavailableSy(unavailableSy) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [AircraftStatusCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .idAircraft()
         * .source()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): AircraftStatusCreateParams =
            AircraftStatusCreateParams(
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /**
     * Aircraft readiness and status data. Contains the dynamic data associated with the specific
     * aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness,
     * and inventory, etc.
     */
    class Body
    private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val idAircraft: JsonField<String>,
        private val source: JsonField<String>,
        private val id: JsonField<String>,
        private val additionalSys: JsonField<List<String>>,
        private val airToAirStatus: JsonField<AirToAirStatus>,
        private val airToGroundStatus: JsonField<AirToGroundStatus>,
        private val alphaStatusCode: JsonField<String>,
        private val altAircraftId: JsonField<String>,
        private val contaminationStatus: JsonField<String>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val currentIcao: JsonField<String>,
        private val currentState: JsonField<String>,
        private val earliestTaEndTime: JsonField<OffsetDateTime>,
        private val etic: JsonField<OffsetDateTime>,
        private val flightPhase: JsonField<String>,
        private val fuel: JsonField<Int>,
        private val fuelFunction: JsonField<String>,
        private val fuelStatus: JsonField<String>,
        private val geoLoc: JsonField<String>,
        private val groundStatus: JsonField<String>,
        private val gunCapable: JsonField<Boolean>,
        private val gunRdsMax: JsonField<Int>,
        private val gunRdsMin: JsonField<Int>,
        private val gunRdsType: JsonField<String>,
        private val idAirfield: JsonField<String>,
        private val idPoi: JsonField<String>,
        private val inventory: JsonField<List<String>>,
        private val inventoryMax: JsonField<List<Int>>,
        private val inventoryMin: JsonField<List<Int>>,
        private val lastInspectionDate: JsonField<OffsetDateTime>,
        private val lastUpdatedBy: JsonField<String>,
        private val maintPoc: JsonField<String>,
        private val maintPriority: JsonField<String>,
        private val maintStatus: JsonField<String>,
        private val maintStatusDriver: JsonField<String>,
        private val maintStatusUpdate: JsonField<OffsetDateTime>,
        private val missionReadiness: JsonField<String>,
        private val mxRemark: JsonField<String>,
        private val nextIcao: JsonField<String>,
        private val notes: JsonField<String>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val parkLocation: JsonField<String>,
        private val parkLocationSystem: JsonField<String>,
        private val previousIcao: JsonField<String>,
        private val sourceDl: JsonField<String>,
        private val taStartTime: JsonField<OffsetDateTime>,
        private val troubleshootEtic: JsonField<OffsetDateTime>,
        private val unavailableSys: JsonField<List<String>>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("idAircraft")
            @ExcludeMissing
            idAircraft: JsonField<String> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("additionalSys")
            @ExcludeMissing
            additionalSys: JsonField<List<String>> = JsonMissing.of(),
            @JsonProperty("airToAirStatus")
            @ExcludeMissing
            airToAirStatus: JsonField<AirToAirStatus> = JsonMissing.of(),
            @JsonProperty("airToGroundStatus")
            @ExcludeMissing
            airToGroundStatus: JsonField<AirToGroundStatus> = JsonMissing.of(),
            @JsonProperty("alphaStatusCode")
            @ExcludeMissing
            alphaStatusCode: JsonField<String> = JsonMissing.of(),
            @JsonProperty("altAircraftId")
            @ExcludeMissing
            altAircraftId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("contaminationStatus")
            @ExcludeMissing
            contaminationStatus: JsonField<String> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("currentICAO")
            @ExcludeMissing
            currentIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("currentState")
            @ExcludeMissing
            currentState: JsonField<String> = JsonMissing.of(),
            @JsonProperty("earliestTAEndTime")
            @ExcludeMissing
            earliestTaEndTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("etic")
            @ExcludeMissing
            etic: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("flightPhase")
            @ExcludeMissing
            flightPhase: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fuel") @ExcludeMissing fuel: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("fuelFunction")
            @ExcludeMissing
            fuelFunction: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fuelStatus")
            @ExcludeMissing
            fuelStatus: JsonField<String> = JsonMissing.of(),
            @JsonProperty("geoLoc") @ExcludeMissing geoLoc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("groundStatus")
            @ExcludeMissing
            groundStatus: JsonField<String> = JsonMissing.of(),
            @JsonProperty("gunCapable")
            @ExcludeMissing
            gunCapable: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("gunRdsMax") @ExcludeMissing gunRdsMax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("gunRdsMin") @ExcludeMissing gunRdsMin: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("gunRdsType")
            @ExcludeMissing
            gunRdsType: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idAirfield")
            @ExcludeMissing
            idAirfield: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idPOI") @ExcludeMissing idPoi: JsonField<String> = JsonMissing.of(),
            @JsonProperty("inventory")
            @ExcludeMissing
            inventory: JsonField<List<String>> = JsonMissing.of(),
            @JsonProperty("inventoryMax")
            @ExcludeMissing
            inventoryMax: JsonField<List<Int>> = JsonMissing.of(),
            @JsonProperty("inventoryMin")
            @ExcludeMissing
            inventoryMin: JsonField<List<Int>> = JsonMissing.of(),
            @JsonProperty("lastInspectionDate")
            @ExcludeMissing
            lastInspectionDate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("lastUpdatedBy")
            @ExcludeMissing
            lastUpdatedBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maintPoc")
            @ExcludeMissing
            maintPoc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maintPriority")
            @ExcludeMissing
            maintPriority: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maintStatus")
            @ExcludeMissing
            maintStatus: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maintStatusDriver")
            @ExcludeMissing
            maintStatusDriver: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maintStatusUpdate")
            @ExcludeMissing
            maintStatusUpdate: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("missionReadiness")
            @ExcludeMissing
            missionReadiness: JsonField<String> = JsonMissing.of(),
            @JsonProperty("mxRemark")
            @ExcludeMissing
            mxRemark: JsonField<String> = JsonMissing.of(),
            @JsonProperty("nextICAO")
            @ExcludeMissing
            nextIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("notes") @ExcludeMissing notes: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork")
            @ExcludeMissing
            origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("parkLocation")
            @ExcludeMissing
            parkLocation: JsonField<String> = JsonMissing.of(),
            @JsonProperty("parkLocationSystem")
            @ExcludeMissing
            parkLocationSystem: JsonField<String> = JsonMissing.of(),
            @JsonProperty("previousICAO")
            @ExcludeMissing
            previousIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("sourceDL")
            @ExcludeMissing
            sourceDl: JsonField<String> = JsonMissing.of(),
            @JsonProperty("taStartTime")
            @ExcludeMissing
            taStartTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("troubleshootEtic")
            @ExcludeMissing
            troubleshootEtic: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("unavailableSys")
            @ExcludeMissing
            unavailableSys: JsonField<List<String>> = JsonMissing.of(),
        ) : this(
            classificationMarking,
            dataMode,
            idAircraft,
            source,
            id,
            additionalSys,
            airToAirStatus,
            airToGroundStatus,
            alphaStatusCode,
            altAircraftId,
            contaminationStatus,
            createdAt,
            createdBy,
            currentIcao,
            currentState,
            earliestTaEndTime,
            etic,
            flightPhase,
            fuel,
            fuelFunction,
            fuelStatus,
            geoLoc,
            groundStatus,
            gunCapable,
            gunRdsMax,
            gunRdsMin,
            gunRdsType,
            idAirfield,
            idPoi,
            inventory,
            inventoryMax,
            inventoryMin,
            lastInspectionDate,
            lastUpdatedBy,
            maintPoc,
            maintPriority,
            maintStatus,
            maintStatusDriver,
            maintStatusUpdate,
            missionReadiness,
            mxRemark,
            nextIcao,
            notes,
            origin,
            origNetwork,
            parkLocation,
            parkLocationSystem,
            previousIcao,
            sourceDl,
            taStartTime,
            troubleshootEtic,
            unavailableSys,
            mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * Unique identifier of the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun idAircraft(): String = idAircraft.getRequired("idAircraft")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun id(): Optional<String> = id.getOptional("id")

        /**
         * List of additional operational systems on this aircraft beyond what is normally
         * available.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun additionalSys(): Optional<List<String>> = additionalSys.getOptional("additionalSys")

        /**
         * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airToAirStatus(): Optional<AirToAirStatus> =
            airToAirStatus.getOptional("airToAirStatus")

        /**
         * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL,
         * OFF).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airToGroundStatus(): Optional<AirToGroundStatus> =
            airToGroundStatus.getOptional("airToGroundStatus")

        /**
         * Aircraft alpha status code that indicates the aircraft maintenance status estimated by
         * the pilot.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun alphaStatusCode(): Optional<String> = alphaStatusCode.getOptional("alphaStatusCode")

        /**
         * Alternate Aircraft Identifier provided by source.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun altAircraftId(): Optional<String> = altAircraftId.getOptional("altAircraftId")

        /**
         * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED,
         * UNKNOWN, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun contaminationStatus(): Optional<String> =
            contaminationStatus.getOptional("contaminationStatus")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * The International Civil Aviation Organization (ICAO) code at which this aircraft is
         * currently located or has most recently departed, if airborne.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun currentIcao(): Optional<String> = currentIcao.getOptional("currentICAO")

        /**
         * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE,
         * BATTLESTATION, RUNWAY ALERT, SUITUP).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun currentState(): Optional<String> = currentState.getOptional("currentState")

        /**
         * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format
         * with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun earliestTaEndTime(): Optional<OffsetDateTime> =
            earliestTaEndTime.getOptional("earliestTAEndTime")

        /**
         * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with
         * millisecond precision. This is the estimated time when the issue will be resolved.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun etic(): Optional<OffsetDateTime> = etic.getOptional("etic")

        /**
         * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun flightPhase(): Optional<String> = flightPhase.getOptional("flightPhase")

        /**
         * The mass of fuel remaining on the aircraft, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fuel(): Optional<Int> = fuel.getOptional("fuel")

        /**
         * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fuelFunction(): Optional<String> = fuelFunction.getOptional("fuelFunction")

        /**
         * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER,
         * REQUESTED, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fuelStatus(): Optional<String> = fuelStatus.getOptional("fuelStatus")

        /**
         * US Air Force geographic location code of the airfield where the aircraft is located.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun geoLoc(): Optional<String> = geoLoc.getOptional("geoLoc")

        /**
         * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun groundStatus(): Optional<String> = groundStatus.getOptional("groundStatus")

        /**
         * Flag indicating that the aircraft is capable of making at least one gun pass.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun gunCapable(): Optional<Boolean> = gunCapable.getOptional("gunCapable")

        /**
         * The upper bound of the estimated number of gun rounds available.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun gunRdsMax(): Optional<Int> = gunRdsMax.getOptional("gunRdsMax")

        /**
         * The lower bound of the estimated number of gun rounds available.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun gunRdsMin(): Optional<Int> = gunRdsMin.getOptional("gunRdsMin")

        /**
         * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun gunRdsType(): Optional<String> = gunRdsType.getOptional("gunRdsType")

        /**
         * If not airborne, the unique identifier of the installation currently hosting the
         * aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idAirfield(): Optional<String> = idAirfield.getOptional("idAirfield")

        /**
         * Unique identifier of the Point of Interest (POI) record related to this aircraft status.
         * This will generally represent the location of an aircraft on the ground.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idPoi(): Optional<String> = idPoi.getOptional("idPOI")

        /**
         * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER,
         * AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.). Intended as, but not
         * constrained to, MIL-STD-6016 environment dependent specific/store type designations. This
         * array must be the same length as inventoryMin and inventoryMax.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun inventory(): Optional<List<String>> = inventory.getOptional("inventory")

        /**
         * Array of the upper bound quantity for each of the inventory items. The values in this
         * array must correspond to position index in the inventory array. This array must be the
         * same length as inventory and inventoryMin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun inventoryMax(): Optional<List<Int>> = inventoryMax.getOptional("inventoryMax")

        /**
         * Array of the lower bound quantity for each of the inventory items. The values in this
         * array must correspond to position index in the inventory array. This array must be the
         * same length as inventory and inventoryMax.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun inventoryMin(): Optional<List<Int>> = inventoryMin.getOptional("inventoryMin")

        /**
         * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format
         * with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lastInspectionDate(): Optional<OffsetDateTime> =
            lastInspectionDate.getOptional("lastInspectionDate")

        /**
         * The name or ID of the external user that updated this status.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lastUpdatedBy(): Optional<String> = lastUpdatedBy.getOptional("lastUpdatedBy")

        /**
         * Military aircraft maintenance point of contact for this aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maintPoc(): Optional<String> = maintPoc.getOptional("maintPoc")

        /**
         * Indicates the priority of the maintenance effort.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maintPriority(): Optional<String> = maintPriority.getOptional("maintPriority")

        /**
         * The maintenance status of the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maintStatus(): Optional<String> = maintStatus.getOptional("maintStatus")

        /**
         * Indicates the maintenance discrepancy that drives the current maintenance status.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maintStatusDriver(): Optional<String> =
            maintStatusDriver.getOptional("maintStatusDriver")

        /**
         * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond
         * precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maintStatusUpdate(): Optional<OffsetDateTime> =
            maintStatusUpdate.getOptional("maintStatusUpdate")

        /**
         * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun missionReadiness(): Optional<String> = missionReadiness.getOptional("missionReadiness")

        /**
         * Maintenance pacing remarks assocociated with this aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun mxRemark(): Optional<String> = mxRemark.getOptional("mxRemark")

        /**
         * The International Civil Aviation Organization (ICAO) code of the next destination of this
         * aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun nextIcao(): Optional<String> = nextIcao.getOptional("nextICAO")

        /**
         * Optional notes/comments concerning this aircraft status.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun notes(): Optional<String> = notes.getOptional("notes")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * The parking location of this aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun parkLocation(): Optional<String> = parkLocation.getOptional("parkLocation")

        /**
         * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun parkLocationSystem(): Optional<String> =
            parkLocationSystem.getOptional("parkLocationSystem")

        /**
         * The International Civil Aviation Organization (ICAO) code at which this aircraft was
         * previously located.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun previousIcao(): Optional<String> = previousIcao.getOptional("previousICAO")

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun sourceDl(): Optional<String> = sourceDl.getOptional("sourceDL")

        /**
         * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun taStartTime(): Optional<OffsetDateTime> = taStartTime.getOptional("taStartTime")

        /**
         * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with
         * millisecond precision. This is the estimated time when the course of action to resolve
         * the issue will be determined.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun troubleshootEtic(): Optional<OffsetDateTime> =
            troubleshootEtic.getOptional("troubleshootEtic")

        /**
         * List of unavailable systems that would normally be on this aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun unavailableSys(): Optional<List<String>> = unavailableSys.getOptional("unavailableSys")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [idAircraft].
         *
         * Unlike [idAircraft], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idAircraft")
        @ExcludeMissing
        fun _idAircraft(): JsonField<String> = idAircraft

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [id].
         *
         * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

        /**
         * Returns the raw JSON value of [additionalSys].
         *
         * Unlike [additionalSys], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("additionalSys")
        @ExcludeMissing
        fun _additionalSys(): JsonField<List<String>> = additionalSys

        /**
         * Returns the raw JSON value of [airToAirStatus].
         *
         * Unlike [airToAirStatus], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("airToAirStatus")
        @ExcludeMissing
        fun _airToAirStatus(): JsonField<AirToAirStatus> = airToAirStatus

        /**
         * Returns the raw JSON value of [airToGroundStatus].
         *
         * Unlike [airToGroundStatus], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("airToGroundStatus")
        @ExcludeMissing
        fun _airToGroundStatus(): JsonField<AirToGroundStatus> = airToGroundStatus

        /**
         * Returns the raw JSON value of [alphaStatusCode].
         *
         * Unlike [alphaStatusCode], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("alphaStatusCode")
        @ExcludeMissing
        fun _alphaStatusCode(): JsonField<String> = alphaStatusCode

        /**
         * Returns the raw JSON value of [altAircraftId].
         *
         * Unlike [altAircraftId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("altAircraftId")
        @ExcludeMissing
        fun _altAircraftId(): JsonField<String> = altAircraftId

        /**
         * Returns the raw JSON value of [contaminationStatus].
         *
         * Unlike [contaminationStatus], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("contaminationStatus")
        @ExcludeMissing
        fun _contaminationStatus(): JsonField<String> = contaminationStatus

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [currentIcao].
         *
         * Unlike [currentIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("currentICAO")
        @ExcludeMissing
        fun _currentIcao(): JsonField<String> = currentIcao

        /**
         * Returns the raw JSON value of [currentState].
         *
         * Unlike [currentState], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("currentState")
        @ExcludeMissing
        fun _currentState(): JsonField<String> = currentState

        /**
         * Returns the raw JSON value of [earliestTaEndTime].
         *
         * Unlike [earliestTaEndTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("earliestTAEndTime")
        @ExcludeMissing
        fun _earliestTaEndTime(): JsonField<OffsetDateTime> = earliestTaEndTime

        /**
         * Returns the raw JSON value of [etic].
         *
         * Unlike [etic], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("etic") @ExcludeMissing fun _etic(): JsonField<OffsetDateTime> = etic

        /**
         * Returns the raw JSON value of [flightPhase].
         *
         * Unlike [flightPhase], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("flightPhase")
        @ExcludeMissing
        fun _flightPhase(): JsonField<String> = flightPhase

        /**
         * Returns the raw JSON value of [fuel].
         *
         * Unlike [fuel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fuel") @ExcludeMissing fun _fuel(): JsonField<Int> = fuel

        /**
         * Returns the raw JSON value of [fuelFunction].
         *
         * Unlike [fuelFunction], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("fuelFunction")
        @ExcludeMissing
        fun _fuelFunction(): JsonField<String> = fuelFunction

        /**
         * Returns the raw JSON value of [fuelStatus].
         *
         * Unlike [fuelStatus], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fuelStatus")
        @ExcludeMissing
        fun _fuelStatus(): JsonField<String> = fuelStatus

        /**
         * Returns the raw JSON value of [geoLoc].
         *
         * Unlike [geoLoc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("geoLoc") @ExcludeMissing fun _geoLoc(): JsonField<String> = geoLoc

        /**
         * Returns the raw JSON value of [groundStatus].
         *
         * Unlike [groundStatus], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("groundStatus")
        @ExcludeMissing
        fun _groundStatus(): JsonField<String> = groundStatus

        /**
         * Returns the raw JSON value of [gunCapable].
         *
         * Unlike [gunCapable], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("gunCapable")
        @ExcludeMissing
        fun _gunCapable(): JsonField<Boolean> = gunCapable

        /**
         * Returns the raw JSON value of [gunRdsMax].
         *
         * Unlike [gunRdsMax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("gunRdsMax") @ExcludeMissing fun _gunRdsMax(): JsonField<Int> = gunRdsMax

        /**
         * Returns the raw JSON value of [gunRdsMin].
         *
         * Unlike [gunRdsMin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("gunRdsMin") @ExcludeMissing fun _gunRdsMin(): JsonField<Int> = gunRdsMin

        /**
         * Returns the raw JSON value of [gunRdsType].
         *
         * Unlike [gunRdsType], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("gunRdsType")
        @ExcludeMissing
        fun _gunRdsType(): JsonField<String> = gunRdsType

        /**
         * Returns the raw JSON value of [idAirfield].
         *
         * Unlike [idAirfield], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idAirfield")
        @ExcludeMissing
        fun _idAirfield(): JsonField<String> = idAirfield

        /**
         * Returns the raw JSON value of [idPoi].
         *
         * Unlike [idPoi], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idPOI") @ExcludeMissing fun _idPoi(): JsonField<String> = idPoi

        /**
         * Returns the raw JSON value of [inventory].
         *
         * Unlike [inventory], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("inventory")
        @ExcludeMissing
        fun _inventory(): JsonField<List<String>> = inventory

        /**
         * Returns the raw JSON value of [inventoryMax].
         *
         * Unlike [inventoryMax], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("inventoryMax")
        @ExcludeMissing
        fun _inventoryMax(): JsonField<List<Int>> = inventoryMax

        /**
         * Returns the raw JSON value of [inventoryMin].
         *
         * Unlike [inventoryMin], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("inventoryMin")
        @ExcludeMissing
        fun _inventoryMin(): JsonField<List<Int>> = inventoryMin

        /**
         * Returns the raw JSON value of [lastInspectionDate].
         *
         * Unlike [lastInspectionDate], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("lastInspectionDate")
        @ExcludeMissing
        fun _lastInspectionDate(): JsonField<OffsetDateTime> = lastInspectionDate

        /**
         * Returns the raw JSON value of [lastUpdatedBy].
         *
         * Unlike [lastUpdatedBy], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("lastUpdatedBy")
        @ExcludeMissing
        fun _lastUpdatedBy(): JsonField<String> = lastUpdatedBy

        /**
         * Returns the raw JSON value of [maintPoc].
         *
         * Unlike [maintPoc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("maintPoc") @ExcludeMissing fun _maintPoc(): JsonField<String> = maintPoc

        /**
         * Returns the raw JSON value of [maintPriority].
         *
         * Unlike [maintPriority], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("maintPriority")
        @ExcludeMissing
        fun _maintPriority(): JsonField<String> = maintPriority

        /**
         * Returns the raw JSON value of [maintStatus].
         *
         * Unlike [maintStatus], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("maintStatus")
        @ExcludeMissing
        fun _maintStatus(): JsonField<String> = maintStatus

        /**
         * Returns the raw JSON value of [maintStatusDriver].
         *
         * Unlike [maintStatusDriver], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("maintStatusDriver")
        @ExcludeMissing
        fun _maintStatusDriver(): JsonField<String> = maintStatusDriver

        /**
         * Returns the raw JSON value of [maintStatusUpdate].
         *
         * Unlike [maintStatusUpdate], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("maintStatusUpdate")
        @ExcludeMissing
        fun _maintStatusUpdate(): JsonField<OffsetDateTime> = maintStatusUpdate

        /**
         * Returns the raw JSON value of [missionReadiness].
         *
         * Unlike [missionReadiness], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("missionReadiness")
        @ExcludeMissing
        fun _missionReadiness(): JsonField<String> = missionReadiness

        /**
         * Returns the raw JSON value of [mxRemark].
         *
         * Unlike [mxRemark], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("mxRemark") @ExcludeMissing fun _mxRemark(): JsonField<String> = mxRemark

        /**
         * Returns the raw JSON value of [nextIcao].
         *
         * Unlike [nextIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("nextICAO") @ExcludeMissing fun _nextIcao(): JsonField<String> = nextIcao

        /**
         * Returns the raw JSON value of [notes].
         *
         * Unlike [notes], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("notes") @ExcludeMissing fun _notes(): JsonField<String> = notes

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [parkLocation].
         *
         * Unlike [parkLocation], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("parkLocation")
        @ExcludeMissing
        fun _parkLocation(): JsonField<String> = parkLocation

        /**
         * Returns the raw JSON value of [parkLocationSystem].
         *
         * Unlike [parkLocationSystem], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("parkLocationSystem")
        @ExcludeMissing
        fun _parkLocationSystem(): JsonField<String> = parkLocationSystem

        /**
         * Returns the raw JSON value of [previousIcao].
         *
         * Unlike [previousIcao], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("previousICAO")
        @ExcludeMissing
        fun _previousIcao(): JsonField<String> = previousIcao

        /**
         * Returns the raw JSON value of [sourceDl].
         *
         * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("sourceDL") @ExcludeMissing fun _sourceDl(): JsonField<String> = sourceDl

        /**
         * Returns the raw JSON value of [taStartTime].
         *
         * Unlike [taStartTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("taStartTime")
        @ExcludeMissing
        fun _taStartTime(): JsonField<OffsetDateTime> = taStartTime

        /**
         * Returns the raw JSON value of [troubleshootEtic].
         *
         * Unlike [troubleshootEtic], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("troubleshootEtic")
        @ExcludeMissing
        fun _troubleshootEtic(): JsonField<OffsetDateTime> = troubleshootEtic

        /**
         * Returns the raw JSON value of [unavailableSys].
         *
         * Unlike [unavailableSys], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("unavailableSys")
        @ExcludeMissing
        fun _unavailableSys(): JsonField<List<String>> = unavailableSys

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .idAircraft()
             * .source()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var idAircraft: JsonField<String>? = null
            private var source: JsonField<String>? = null
            private var id: JsonField<String> = JsonMissing.of()
            private var additionalSys: JsonField<MutableList<String>>? = null
            private var airToAirStatus: JsonField<AirToAirStatus> = JsonMissing.of()
            private var airToGroundStatus: JsonField<AirToGroundStatus> = JsonMissing.of()
            private var alphaStatusCode: JsonField<String> = JsonMissing.of()
            private var altAircraftId: JsonField<String> = JsonMissing.of()
            private var contaminationStatus: JsonField<String> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var currentIcao: JsonField<String> = JsonMissing.of()
            private var currentState: JsonField<String> = JsonMissing.of()
            private var earliestTaEndTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var etic: JsonField<OffsetDateTime> = JsonMissing.of()
            private var flightPhase: JsonField<String> = JsonMissing.of()
            private var fuel: JsonField<Int> = JsonMissing.of()
            private var fuelFunction: JsonField<String> = JsonMissing.of()
            private var fuelStatus: JsonField<String> = JsonMissing.of()
            private var geoLoc: JsonField<String> = JsonMissing.of()
            private var groundStatus: JsonField<String> = JsonMissing.of()
            private var gunCapable: JsonField<Boolean> = JsonMissing.of()
            private var gunRdsMax: JsonField<Int> = JsonMissing.of()
            private var gunRdsMin: JsonField<Int> = JsonMissing.of()
            private var gunRdsType: JsonField<String> = JsonMissing.of()
            private var idAirfield: JsonField<String> = JsonMissing.of()
            private var idPoi: JsonField<String> = JsonMissing.of()
            private var inventory: JsonField<MutableList<String>>? = null
            private var inventoryMax: JsonField<MutableList<Int>>? = null
            private var inventoryMin: JsonField<MutableList<Int>>? = null
            private var lastInspectionDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var lastUpdatedBy: JsonField<String> = JsonMissing.of()
            private var maintPoc: JsonField<String> = JsonMissing.of()
            private var maintPriority: JsonField<String> = JsonMissing.of()
            private var maintStatus: JsonField<String> = JsonMissing.of()
            private var maintStatusDriver: JsonField<String> = JsonMissing.of()
            private var maintStatusUpdate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var missionReadiness: JsonField<String> = JsonMissing.of()
            private var mxRemark: JsonField<String> = JsonMissing.of()
            private var nextIcao: JsonField<String> = JsonMissing.of()
            private var notes: JsonField<String> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var parkLocation: JsonField<String> = JsonMissing.of()
            private var parkLocationSystem: JsonField<String> = JsonMissing.of()
            private var previousIcao: JsonField<String> = JsonMissing.of()
            private var sourceDl: JsonField<String> = JsonMissing.of()
            private var taStartTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var troubleshootEtic: JsonField<OffsetDateTime> = JsonMissing.of()
            private var unavailableSys: JsonField<MutableList<String>>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                classificationMarking = body.classificationMarking
                dataMode = body.dataMode
                idAircraft = body.idAircraft
                source = body.source
                id = body.id
                additionalSys = body.additionalSys.map { it.toMutableList() }
                airToAirStatus = body.airToAirStatus
                airToGroundStatus = body.airToGroundStatus
                alphaStatusCode = body.alphaStatusCode
                altAircraftId = body.altAircraftId
                contaminationStatus = body.contaminationStatus
                createdAt = body.createdAt
                createdBy = body.createdBy
                currentIcao = body.currentIcao
                currentState = body.currentState
                earliestTaEndTime = body.earliestTaEndTime
                etic = body.etic
                flightPhase = body.flightPhase
                fuel = body.fuel
                fuelFunction = body.fuelFunction
                fuelStatus = body.fuelStatus
                geoLoc = body.geoLoc
                groundStatus = body.groundStatus
                gunCapable = body.gunCapable
                gunRdsMax = body.gunRdsMax
                gunRdsMin = body.gunRdsMin
                gunRdsType = body.gunRdsType
                idAirfield = body.idAirfield
                idPoi = body.idPoi
                inventory = body.inventory.map { it.toMutableList() }
                inventoryMax = body.inventoryMax.map { it.toMutableList() }
                inventoryMin = body.inventoryMin.map { it.toMutableList() }
                lastInspectionDate = body.lastInspectionDate
                lastUpdatedBy = body.lastUpdatedBy
                maintPoc = body.maintPoc
                maintPriority = body.maintPriority
                maintStatus = body.maintStatus
                maintStatusDriver = body.maintStatusDriver
                maintStatusUpdate = body.maintStatusUpdate
                missionReadiness = body.missionReadiness
                mxRemark = body.mxRemark
                nextIcao = body.nextIcao
                notes = body.notes
                origin = body.origin
                origNetwork = body.origNetwork
                parkLocation = body.parkLocation
                parkLocationSystem = body.parkLocationSystem
                previousIcao = body.previousIcao
                sourceDl = body.sourceDl
                taStartTime = body.taStartTime
                troubleshootEtic = body.troubleshootEtic
                unavailableSys = body.unavailableSys.map { it.toMutableList() }
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /** Unique identifier of the aircraft. */
            fun idAircraft(idAircraft: String) = idAircraft(JsonField.of(idAircraft))

            /**
             * Sets [Builder.idAircraft] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idAircraft] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idAircraft(idAircraft: JsonField<String>) = apply { this.idAircraft = idAircraft }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /** Unique identifier of the record, auto-generated by the system. */
            fun id(id: String) = id(JsonField.of(id))

            /**
             * Sets [Builder.id] to an arbitrary JSON value.
             *
             * You should usually call [Builder.id] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun id(id: JsonField<String>) = apply { this.id = id }

            /**
             * List of additional operational systems on this aircraft beyond what is normally
             * available.
             */
            fun additionalSys(additionalSys: List<String>) =
                additionalSys(JsonField.of(additionalSys))

            /**
             * Sets [Builder.additionalSys] to an arbitrary JSON value.
             *
             * You should usually call [Builder.additionalSys] with a well-typed `List<String>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun additionalSys(additionalSys: JsonField<List<String>>) = apply {
                this.additionalSys = additionalSys.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [additionalSys].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAdditionalSy(additionalSy: String) = apply {
                additionalSys =
                    (additionalSys ?: JsonField.of(mutableListOf())).also {
                        checkKnown("additionalSys", it).add(additionalSy)
                    }
            }

            /**
             * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL,
             * OFF).
             */
            fun airToAirStatus(airToAirStatus: AirToAirStatus) =
                airToAirStatus(JsonField.of(airToAirStatus))

            /**
             * Sets [Builder.airToAirStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airToAirStatus] with a well-typed [AirToAirStatus]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun airToAirStatus(airToAirStatus: JsonField<AirToAirStatus>) = apply {
                this.airToAirStatus = airToAirStatus
            }

            /**
             * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL,
             * OFF).
             */
            fun airToGroundStatus(airToGroundStatus: AirToGroundStatus) =
                airToGroundStatus(JsonField.of(airToGroundStatus))

            /**
             * Sets [Builder.airToGroundStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airToGroundStatus] with a well-typed
             * [AirToGroundStatus] value instead. This method is primarily for setting the field to
             * an undocumented or not yet supported value.
             */
            fun airToGroundStatus(airToGroundStatus: JsonField<AirToGroundStatus>) = apply {
                this.airToGroundStatus = airToGroundStatus
            }

            /**
             * Aircraft alpha status code that indicates the aircraft maintenance status estimated
             * by the pilot.
             */
            fun alphaStatusCode(alphaStatusCode: String) =
                alphaStatusCode(JsonField.of(alphaStatusCode))

            /**
             * Sets [Builder.alphaStatusCode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.alphaStatusCode] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun alphaStatusCode(alphaStatusCode: JsonField<String>) = apply {
                this.alphaStatusCode = alphaStatusCode
            }

            /** Alternate Aircraft Identifier provided by source. */
            fun altAircraftId(altAircraftId: String) = altAircraftId(JsonField.of(altAircraftId))

            /**
             * Sets [Builder.altAircraftId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.altAircraftId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun altAircraftId(altAircraftId: JsonField<String>) = apply {
                this.altAircraftId = altAircraftId
            }

            /**
             * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED,
             * UNKNOWN, etc.).
             */
            fun contaminationStatus(contaminationStatus: String) =
                contaminationStatus(JsonField.of(contaminationStatus))

            /**
             * Sets [Builder.contaminationStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.contaminationStatus] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun contaminationStatus(contaminationStatus: JsonField<String>) = apply {
                this.contaminationStatus = contaminationStatus
            }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /**
             * Application user who created the row in the database, auto-populated by the system.
             */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /**
             * The International Civil Aviation Organization (ICAO) code at which this aircraft is
             * currently located or has most recently departed, if airborne.
             */
            fun currentIcao(currentIcao: String) = currentIcao(JsonField.of(currentIcao))

            /**
             * Sets [Builder.currentIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.currentIcao] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun currentIcao(currentIcao: JsonField<String>) = apply {
                this.currentIcao = currentIcao
            }

            /**
             * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE,
             * BATTLESTATION, RUNWAY ALERT, SUITUP).
             */
            fun currentState(currentState: String) = currentState(JsonField.of(currentState))

            /**
             * Sets [Builder.currentState] to an arbitrary JSON value.
             *
             * You should usually call [Builder.currentState] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun currentState(currentState: JsonField<String>) = apply {
                this.currentState = currentState
            }

            /**
             * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC
             * format with millisecond precision.
             */
            fun earliestTaEndTime(earliestTaEndTime: OffsetDateTime) =
                earliestTaEndTime(JsonField.of(earliestTaEndTime))

            /**
             * Sets [Builder.earliestTaEndTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.earliestTaEndTime] with a well-typed
             * [OffsetDateTime] value instead. This method is primarily for setting the field to an
             * undocumented or not yet supported value.
             */
            fun earliestTaEndTime(earliestTaEndTime: JsonField<OffsetDateTime>) = apply {
                this.earliestTaEndTime = earliestTaEndTime
            }

            /**
             * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with
             * millisecond precision. This is the estimated time when the issue will be resolved.
             */
            fun etic(etic: OffsetDateTime) = etic(JsonField.of(etic))

            /**
             * Sets [Builder.etic] to an arbitrary JSON value.
             *
             * You should usually call [Builder.etic] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun etic(etic: JsonField<OffsetDateTime>) = apply { this.etic = etic }

            /** Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft. */
            fun flightPhase(flightPhase: String) = flightPhase(JsonField.of(flightPhase))

            /**
             * Sets [Builder.flightPhase] to an arbitrary JSON value.
             *
             * You should usually call [Builder.flightPhase] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun flightPhase(flightPhase: JsonField<String>) = apply {
                this.flightPhase = flightPhase
            }

            /** The mass of fuel remaining on the aircraft, in kilograms. */
            fun fuel(fuel: Int) = fuel(JsonField.of(fuel))

            /**
             * Sets [Builder.fuel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fuel] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun fuel(fuel: JsonField<Int>) = apply { this.fuel = fuel }

            /**
             * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
             */
            fun fuelFunction(fuelFunction: String) = fuelFunction(JsonField.of(fuelFunction))

            /**
             * Sets [Builder.fuelFunction] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fuelFunction] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fuelFunction(fuelFunction: JsonField<String>) = apply {
                this.fuelFunction = fuelFunction
            }

            /**
             * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER,
             * REQUESTED, etc.).
             */
            fun fuelStatus(fuelStatus: String) = fuelStatus(JsonField.of(fuelStatus))

            /**
             * Sets [Builder.fuelStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fuelStatus] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fuelStatus(fuelStatus: JsonField<String>) = apply { this.fuelStatus = fuelStatus }

            /**
             * US Air Force geographic location code of the airfield where the aircraft is located.
             */
            fun geoLoc(geoLoc: String) = geoLoc(JsonField.of(geoLoc))

            /**
             * Sets [Builder.geoLoc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.geoLoc] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun geoLoc(geoLoc: JsonField<String>) = apply { this.geoLoc = geoLoc }

            /**
             * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR,
             * etc.).
             */
            fun groundStatus(groundStatus: String) = groundStatus(JsonField.of(groundStatus))

            /**
             * Sets [Builder.groundStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.groundStatus] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun groundStatus(groundStatus: JsonField<String>) = apply {
                this.groundStatus = groundStatus
            }

            /** Flag indicating that the aircraft is capable of making at least one gun pass. */
            fun gunCapable(gunCapable: Boolean) = gunCapable(JsonField.of(gunCapable))

            /**
             * Sets [Builder.gunCapable] to an arbitrary JSON value.
             *
             * You should usually call [Builder.gunCapable] with a well-typed [Boolean] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun gunCapable(gunCapable: JsonField<Boolean>) = apply { this.gunCapable = gunCapable }

            /** The upper bound of the estimated number of gun rounds available. */
            fun gunRdsMax(gunRdsMax: Int) = gunRdsMax(JsonField.of(gunRdsMax))

            /**
             * Sets [Builder.gunRdsMax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.gunRdsMax] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun gunRdsMax(gunRdsMax: JsonField<Int>) = apply { this.gunRdsMax = gunRdsMax }

            /** The lower bound of the estimated number of gun rounds available. */
            fun gunRdsMin(gunRdsMin: Int) = gunRdsMin(JsonField.of(gunRdsMin))

            /**
             * Sets [Builder.gunRdsMin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.gunRdsMin] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun gunRdsMin(gunRdsMin: JsonField<Int>) = apply { this.gunRdsMin = gunRdsMin }

            /** The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.). */
            fun gunRdsType(gunRdsType: String) = gunRdsType(JsonField.of(gunRdsType))

            /**
             * Sets [Builder.gunRdsType] to an arbitrary JSON value.
             *
             * You should usually call [Builder.gunRdsType] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun gunRdsType(gunRdsType: JsonField<String>) = apply { this.gunRdsType = gunRdsType }

            /**
             * If not airborne, the unique identifier of the installation currently hosting the
             * aircraft.
             */
            fun idAirfield(idAirfield: String) = idAirfield(JsonField.of(idAirfield))

            /**
             * Sets [Builder.idAirfield] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idAirfield] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idAirfield(idAirfield: JsonField<String>) = apply { this.idAirfield = idAirfield }

            /**
             * Unique identifier of the Point of Interest (POI) record related to this aircraft
             * status. This will generally represent the location of an aircraft on the ground.
             */
            fun idPoi(idPoi: String) = idPoi(JsonField.of(idPoi))

            /**
             * Sets [Builder.idPoi] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idPoi] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idPoi(idPoi: JsonField<String>) = apply { this.idPoi = idPoi }

            /**
             * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9
             * SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).
             * Intended as, but not constrained to, MIL-STD-6016 environment dependent
             * specific/store type designations. This array must be the same length as inventoryMin
             * and inventoryMax.
             */
            fun inventory(inventory: List<String>) = inventory(JsonField.of(inventory))

            /**
             * Sets [Builder.inventory] to an arbitrary JSON value.
             *
             * You should usually call [Builder.inventory] with a well-typed `List<String>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun inventory(inventory: JsonField<List<String>>) = apply {
                this.inventory = inventory.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [Builder.inventory].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addInventory(inventory: String) = apply {
                this.inventory =
                    (this.inventory ?: JsonField.of(mutableListOf())).also {
                        checkKnown("inventory", it).add(inventory)
                    }
            }

            /**
             * Array of the upper bound quantity for each of the inventory items. The values in this
             * array must correspond to position index in the inventory array. This array must be
             * the same length as inventory and inventoryMin.
             */
            fun inventoryMax(inventoryMax: List<Int>) = inventoryMax(JsonField.of(inventoryMax))

            /**
             * Sets [Builder.inventoryMax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.inventoryMax] with a well-typed `List<Int>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun inventoryMax(inventoryMax: JsonField<List<Int>>) = apply {
                this.inventoryMax = inventoryMax.map { it.toMutableList() }
            }

            /**
             * Adds a single [Int] to [Builder.inventoryMax].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addInventoryMax(inventoryMax: Int) = apply {
                this.inventoryMax =
                    (this.inventoryMax ?: JsonField.of(mutableListOf())).also {
                        checkKnown("inventoryMax", it).add(inventoryMax)
                    }
            }

            /**
             * Array of the lower bound quantity for each of the inventory items. The values in this
             * array must correspond to position index in the inventory array. This array must be
             * the same length as inventory and inventoryMax.
             */
            fun inventoryMin(inventoryMin: List<Int>) = inventoryMin(JsonField.of(inventoryMin))

            /**
             * Sets [Builder.inventoryMin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.inventoryMin] with a well-typed `List<Int>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun inventoryMin(inventoryMin: JsonField<List<Int>>) = apply {
                this.inventoryMin = inventoryMin.map { it.toMutableList() }
            }

            /**
             * Adds a single [Int] to [Builder.inventoryMin].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addInventoryMin(inventoryMin: Int) = apply {
                this.inventoryMin =
                    (this.inventoryMin ?: JsonField.of(mutableListOf())).also {
                        checkKnown("inventoryMin", it).add(inventoryMin)
                    }
            }

            /**
             * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format
             * with millisecond precision.
             */
            fun lastInspectionDate(lastInspectionDate: OffsetDateTime) =
                lastInspectionDate(JsonField.of(lastInspectionDate))

            /**
             * Sets [Builder.lastInspectionDate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lastInspectionDate] with a well-typed
             * [OffsetDateTime] value instead. This method is primarily for setting the field to an
             * undocumented or not yet supported value.
             */
            fun lastInspectionDate(lastInspectionDate: JsonField<OffsetDateTime>) = apply {
                this.lastInspectionDate = lastInspectionDate
            }

            /** The name or ID of the external user that updated this status. */
            fun lastUpdatedBy(lastUpdatedBy: String) = lastUpdatedBy(JsonField.of(lastUpdatedBy))

            /**
             * Sets [Builder.lastUpdatedBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lastUpdatedBy] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun lastUpdatedBy(lastUpdatedBy: JsonField<String>) = apply {
                this.lastUpdatedBy = lastUpdatedBy
            }

            /** Military aircraft maintenance point of contact for this aircraft. */
            fun maintPoc(maintPoc: String) = maintPoc(JsonField.of(maintPoc))

            /**
             * Sets [Builder.maintPoc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maintPoc] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maintPoc(maintPoc: JsonField<String>) = apply { this.maintPoc = maintPoc }

            /** Indicates the priority of the maintenance effort. */
            fun maintPriority(maintPriority: String) = maintPriority(JsonField.of(maintPriority))

            /**
             * Sets [Builder.maintPriority] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maintPriority] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maintPriority(maintPriority: JsonField<String>) = apply {
                this.maintPriority = maintPriority
            }

            /** The maintenance status of the aircraft. */
            fun maintStatus(maintStatus: String) = maintStatus(JsonField.of(maintStatus))

            /**
             * Sets [Builder.maintStatus] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maintStatus] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maintStatus(maintStatus: JsonField<String>) = apply {
                this.maintStatus = maintStatus
            }

            /** Indicates the maintenance discrepancy that drives the current maintenance status. */
            fun maintStatusDriver(maintStatusDriver: String) =
                maintStatusDriver(JsonField.of(maintStatusDriver))

            /**
             * Sets [Builder.maintStatusDriver] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maintStatusDriver] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maintStatusDriver(maintStatusDriver: JsonField<String>) = apply {
                this.maintStatusDriver = maintStatusDriver
            }

            /**
             * The time of the last maintenance status update, in ISO 8601 UTC format with
             * millisecond precision.
             */
            fun maintStatusUpdate(maintStatusUpdate: OffsetDateTime) =
                maintStatusUpdate(JsonField.of(maintStatusUpdate))

            /**
             * Sets [Builder.maintStatusUpdate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maintStatusUpdate] with a well-typed
             * [OffsetDateTime] value instead. This method is primarily for setting the field to an
             * undocumented or not yet supported value.
             */
            fun maintStatusUpdate(maintStatusUpdate: JsonField<OffsetDateTime>) = apply {
                this.maintStatusUpdate = maintStatusUpdate
            }

            /** The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE). */
            fun missionReadiness(missionReadiness: String) =
                missionReadiness(JsonField.of(missionReadiness))

            /**
             * Sets [Builder.missionReadiness] to an arbitrary JSON value.
             *
             * You should usually call [Builder.missionReadiness] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun missionReadiness(missionReadiness: JsonField<String>) = apply {
                this.missionReadiness = missionReadiness
            }

            /** Maintenance pacing remarks assocociated with this aircraft. */
            fun mxRemark(mxRemark: String) = mxRemark(JsonField.of(mxRemark))

            /**
             * Sets [Builder.mxRemark] to an arbitrary JSON value.
             *
             * You should usually call [Builder.mxRemark] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun mxRemark(mxRemark: JsonField<String>) = apply { this.mxRemark = mxRemark }

            /**
             * The International Civil Aviation Organization (ICAO) code of the next destination of
             * this aircraft.
             */
            fun nextIcao(nextIcao: String) = nextIcao(JsonField.of(nextIcao))

            /**
             * Sets [Builder.nextIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.nextIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun nextIcao(nextIcao: JsonField<String>) = apply { this.nextIcao = nextIcao }

            /** Optional notes/comments concerning this aircraft status. */
            fun notes(notes: String) = notes(JsonField.of(notes))

            /**
             * Sets [Builder.notes] to an arbitrary JSON value.
             *
             * You should usually call [Builder.notes] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun notes(notes: JsonField<String>) = apply { this.notes = notes }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * The originating source network on which this record was created, auto-populated by
             * the system.
             */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) = apply {
                this.origNetwork = origNetwork
            }

            /** The parking location of this aircraft. */
            fun parkLocation(parkLocation: String) = parkLocation(JsonField.of(parkLocation))

            /**
             * Sets [Builder.parkLocation] to an arbitrary JSON value.
             *
             * You should usually call [Builder.parkLocation] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun parkLocation(parkLocation: JsonField<String>) = apply {
                this.parkLocation = parkLocation
            }

            /** The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.). */
            fun parkLocationSystem(parkLocationSystem: String) =
                parkLocationSystem(JsonField.of(parkLocationSystem))

            /**
             * Sets [Builder.parkLocationSystem] to an arbitrary JSON value.
             *
             * You should usually call [Builder.parkLocationSystem] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun parkLocationSystem(parkLocationSystem: JsonField<String>) = apply {
                this.parkLocationSystem = parkLocationSystem
            }

            /**
             * The International Civil Aviation Organization (ICAO) code at which this aircraft was
             * previously located.
             */
            fun previousIcao(previousIcao: String) = previousIcao(JsonField.of(previousIcao))

            /**
             * Sets [Builder.previousIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.previousIcao] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun previousIcao(previousIcao: JsonField<String>) = apply {
                this.previousIcao = previousIcao
            }

            /**
             * The source data library from which this record was received. This could be a remote
             * or tactical UDL or another data library. If null, the record should be assumed to
             * have originated from the primary Enterprise UDL.
             */
            fun sourceDl(sourceDl: String) = sourceDl(JsonField.of(sourceDl))

            /**
             * Sets [Builder.sourceDl] to an arbitrary JSON value.
             *
             * You should usually call [Builder.sourceDl] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun sourceDl(sourceDl: JsonField<String>) = apply { this.sourceDl = sourceDl }

            /** The turnaround start time, in ISO 8601 UTC format with millisecond precision. */
            fun taStartTime(taStartTime: OffsetDateTime) = taStartTime(JsonField.of(taStartTime))

            /**
             * Sets [Builder.taStartTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.taStartTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun taStartTime(taStartTime: JsonField<OffsetDateTime>) = apply {
                this.taStartTime = taStartTime
            }

            /**
             * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format
             * with millisecond precision. This is the estimated time when the course of action to
             * resolve the issue will be determined.
             */
            fun troubleshootEtic(troubleshootEtic: OffsetDateTime) =
                troubleshootEtic(JsonField.of(troubleshootEtic))

            /**
             * Sets [Builder.troubleshootEtic] to an arbitrary JSON value.
             *
             * You should usually call [Builder.troubleshootEtic] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun troubleshootEtic(troubleshootEtic: JsonField<OffsetDateTime>) = apply {
                this.troubleshootEtic = troubleshootEtic
            }

            /** List of unavailable systems that would normally be on this aircraft. */
            fun unavailableSys(unavailableSys: List<String>) =
                unavailableSys(JsonField.of(unavailableSys))

            /**
             * Sets [Builder.unavailableSys] to an arbitrary JSON value.
             *
             * You should usually call [Builder.unavailableSys] with a well-typed `List<String>`
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun unavailableSys(unavailableSys: JsonField<List<String>>) = apply {
                this.unavailableSys = unavailableSys.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [unavailableSys].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addUnavailableSy(unavailableSy: String) = apply {
                unavailableSys =
                    (unavailableSys ?: JsonField.of(mutableListOf())).also {
                        checkKnown("unavailableSys", it).add(unavailableSy)
                    }
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .idAircraft()
             * .source()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("idAircraft", idAircraft),
                    checkRequired("source", source),
                    id,
                    (additionalSys ?: JsonMissing.of()).map { it.toImmutable() },
                    airToAirStatus,
                    airToGroundStatus,
                    alphaStatusCode,
                    altAircraftId,
                    contaminationStatus,
                    createdAt,
                    createdBy,
                    currentIcao,
                    currentState,
                    earliestTaEndTime,
                    etic,
                    flightPhase,
                    fuel,
                    fuelFunction,
                    fuelStatus,
                    geoLoc,
                    groundStatus,
                    gunCapable,
                    gunRdsMax,
                    gunRdsMin,
                    gunRdsType,
                    idAirfield,
                    idPoi,
                    (inventory ?: JsonMissing.of()).map { it.toImmutable() },
                    (inventoryMax ?: JsonMissing.of()).map { it.toImmutable() },
                    (inventoryMin ?: JsonMissing.of()).map { it.toImmutable() },
                    lastInspectionDate,
                    lastUpdatedBy,
                    maintPoc,
                    maintPriority,
                    maintStatus,
                    maintStatusDriver,
                    maintStatusUpdate,
                    missionReadiness,
                    mxRemark,
                    nextIcao,
                    notes,
                    origin,
                    origNetwork,
                    parkLocation,
                    parkLocationSystem,
                    previousIcao,
                    sourceDl,
                    taStartTime,
                    troubleshootEtic,
                    (unavailableSys ?: JsonMissing.of()).map { it.toImmutable() },
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            classificationMarking()
            dataMode().validate()
            idAircraft()
            source()
            id()
            additionalSys()
            airToAirStatus().ifPresent { it.validate() }
            airToGroundStatus().ifPresent { it.validate() }
            alphaStatusCode()
            altAircraftId()
            contaminationStatus()
            createdAt()
            createdBy()
            currentIcao()
            currentState()
            earliestTaEndTime()
            etic()
            flightPhase()
            fuel()
            fuelFunction()
            fuelStatus()
            geoLoc()
            groundStatus()
            gunCapable()
            gunRdsMax()
            gunRdsMin()
            gunRdsType()
            idAirfield()
            idPoi()
            inventory()
            inventoryMax()
            inventoryMin()
            lastInspectionDate()
            lastUpdatedBy()
            maintPoc()
            maintPriority()
            maintStatus()
            maintStatusDriver()
            maintStatusUpdate()
            missionReadiness()
            mxRemark()
            nextIcao()
            notes()
            origin()
            origNetwork()
            parkLocation()
            parkLocationSystem()
            previousIcao()
            sourceDl()
            taStartTime()
            troubleshootEtic()
            unavailableSys()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (idAircraft.asKnown().isPresent) 1 else 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (id.asKnown().isPresent) 1 else 0) +
                (additionalSys.asKnown().getOrNull()?.size ?: 0) +
                (airToAirStatus.asKnown().getOrNull()?.validity() ?: 0) +
                (airToGroundStatus.asKnown().getOrNull()?.validity() ?: 0) +
                (if (alphaStatusCode.asKnown().isPresent) 1 else 0) +
                (if (altAircraftId.asKnown().isPresent) 1 else 0) +
                (if (contaminationStatus.asKnown().isPresent) 1 else 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (currentIcao.asKnown().isPresent) 1 else 0) +
                (if (currentState.asKnown().isPresent) 1 else 0) +
                (if (earliestTaEndTime.asKnown().isPresent) 1 else 0) +
                (if (etic.asKnown().isPresent) 1 else 0) +
                (if (flightPhase.asKnown().isPresent) 1 else 0) +
                (if (fuel.asKnown().isPresent) 1 else 0) +
                (if (fuelFunction.asKnown().isPresent) 1 else 0) +
                (if (fuelStatus.asKnown().isPresent) 1 else 0) +
                (if (geoLoc.asKnown().isPresent) 1 else 0) +
                (if (groundStatus.asKnown().isPresent) 1 else 0) +
                (if (gunCapable.asKnown().isPresent) 1 else 0) +
                (if (gunRdsMax.asKnown().isPresent) 1 else 0) +
                (if (gunRdsMin.asKnown().isPresent) 1 else 0) +
                (if (gunRdsType.asKnown().isPresent) 1 else 0) +
                (if (idAirfield.asKnown().isPresent) 1 else 0) +
                (if (idPoi.asKnown().isPresent) 1 else 0) +
                (inventory.asKnown().getOrNull()?.size ?: 0) +
                (inventoryMax.asKnown().getOrNull()?.size ?: 0) +
                (inventoryMin.asKnown().getOrNull()?.size ?: 0) +
                (if (lastInspectionDate.asKnown().isPresent) 1 else 0) +
                (if (lastUpdatedBy.asKnown().isPresent) 1 else 0) +
                (if (maintPoc.asKnown().isPresent) 1 else 0) +
                (if (maintPriority.asKnown().isPresent) 1 else 0) +
                (if (maintStatus.asKnown().isPresent) 1 else 0) +
                (if (maintStatusDriver.asKnown().isPresent) 1 else 0) +
                (if (maintStatusUpdate.asKnown().isPresent) 1 else 0) +
                (if (missionReadiness.asKnown().isPresent) 1 else 0) +
                (if (mxRemark.asKnown().isPresent) 1 else 0) +
                (if (nextIcao.asKnown().isPresent) 1 else 0) +
                (if (notes.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origNetwork.asKnown().isPresent) 1 else 0) +
                (if (parkLocation.asKnown().isPresent) 1 else 0) +
                (if (parkLocationSystem.asKnown().isPresent) 1 else 0) +
                (if (previousIcao.asKnown().isPresent) 1 else 0) +
                (if (sourceDl.asKnown().isPresent) 1 else 0) +
                (if (taStartTime.asKnown().isPresent) 1 else 0) +
                (if (troubleshootEtic.asKnown().isPresent) 1 else 0) +
                (unavailableSys.asKnown().getOrNull()?.size ?: 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is Body &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                idAircraft == other.idAircraft &&
                source == other.source &&
                id == other.id &&
                additionalSys == other.additionalSys &&
                airToAirStatus == other.airToAirStatus &&
                airToGroundStatus == other.airToGroundStatus &&
                alphaStatusCode == other.alphaStatusCode &&
                altAircraftId == other.altAircraftId &&
                contaminationStatus == other.contaminationStatus &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                currentIcao == other.currentIcao &&
                currentState == other.currentState &&
                earliestTaEndTime == other.earliestTaEndTime &&
                etic == other.etic &&
                flightPhase == other.flightPhase &&
                fuel == other.fuel &&
                fuelFunction == other.fuelFunction &&
                fuelStatus == other.fuelStatus &&
                geoLoc == other.geoLoc &&
                groundStatus == other.groundStatus &&
                gunCapable == other.gunCapable &&
                gunRdsMax == other.gunRdsMax &&
                gunRdsMin == other.gunRdsMin &&
                gunRdsType == other.gunRdsType &&
                idAirfield == other.idAirfield &&
                idPoi == other.idPoi &&
                inventory == other.inventory &&
                inventoryMax == other.inventoryMax &&
                inventoryMin == other.inventoryMin &&
                lastInspectionDate == other.lastInspectionDate &&
                lastUpdatedBy == other.lastUpdatedBy &&
                maintPoc == other.maintPoc &&
                maintPriority == other.maintPriority &&
                maintStatus == other.maintStatus &&
                maintStatusDriver == other.maintStatusDriver &&
                maintStatusUpdate == other.maintStatusUpdate &&
                missionReadiness == other.missionReadiness &&
                mxRemark == other.mxRemark &&
                nextIcao == other.nextIcao &&
                notes == other.notes &&
                origin == other.origin &&
                origNetwork == other.origNetwork &&
                parkLocation == other.parkLocation &&
                parkLocationSystem == other.parkLocationSystem &&
                previousIcao == other.previousIcao &&
                sourceDl == other.sourceDl &&
                taStartTime == other.taStartTime &&
                troubleshootEtic == other.troubleshootEtic &&
                unavailableSys == other.unavailableSys &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                classificationMarking,
                dataMode,
                idAircraft,
                source,
                id,
                additionalSys,
                airToAirStatus,
                airToGroundStatus,
                alphaStatusCode,
                altAircraftId,
                contaminationStatus,
                createdAt,
                createdBy,
                currentIcao,
                currentState,
                earliestTaEndTime,
                etic,
                flightPhase,
                fuel,
                fuelFunction,
                fuelStatus,
                geoLoc,
                groundStatus,
                gunCapable,
                gunRdsMax,
                gunRdsMin,
                gunRdsType,
                idAirfield,
                idPoi,
                inventory,
                inventoryMax,
                inventoryMin,
                lastInspectionDate,
                lastUpdatedBy,
                maintPoc,
                maintPriority,
                maintStatus,
                maintStatusDriver,
                maintStatusUpdate,
                missionReadiness,
                mxRemark,
                nextIcao,
                notes,
                origin,
                origNetwork,
                parkLocation,
                parkLocationSystem,
                previousIcao,
                sourceDl,
                taStartTime,
                troubleshootEtic,
                unavailableSys,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{classificationMarking=$classificationMarking, dataMode=$dataMode, idAircraft=$idAircraft, source=$source, id=$id, additionalSys=$additionalSys, airToAirStatus=$airToAirStatus, airToGroundStatus=$airToGroundStatus, alphaStatusCode=$alphaStatusCode, altAircraftId=$altAircraftId, contaminationStatus=$contaminationStatus, createdAt=$createdAt, createdBy=$createdBy, currentIcao=$currentIcao, currentState=$currentState, earliestTaEndTime=$earliestTaEndTime, etic=$etic, flightPhase=$flightPhase, fuel=$fuel, fuelFunction=$fuelFunction, fuelStatus=$fuelStatus, geoLoc=$geoLoc, groundStatus=$groundStatus, gunCapable=$gunCapable, gunRdsMax=$gunRdsMax, gunRdsMin=$gunRdsMin, gunRdsType=$gunRdsType, idAirfield=$idAirfield, idPoi=$idPoi, inventory=$inventory, inventoryMax=$inventoryMax, inventoryMin=$inventoryMin, lastInspectionDate=$lastInspectionDate, lastUpdatedBy=$lastUpdatedBy, maintPoc=$maintPoc, maintPriority=$maintPriority, maintStatus=$maintStatus, maintStatusDriver=$maintStatusDriver, maintStatusUpdate=$maintStatusUpdate, missionReadiness=$missionReadiness, mxRemark=$mxRemark, nextIcao=$nextIcao, notes=$notes, origin=$origin, origNetwork=$origNetwork, parkLocation=$parkLocation, parkLocationSystem=$parkLocationSystem, previousIcao=$previousIcao, sourceDl=$sourceDl, taStartTime=$taStartTime, troubleshootEtic=$troubleshootEtic, unavailableSys=$unavailableSys, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): DataMode = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is DataMode && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /** The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF). */
    class AirToAirStatus @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val OPERATIONAL = of("OPERATIONAL")

            @JvmField val NON_OPERATIONAL = of("NON-OPERATIONAL")

            @JvmField val OFF = of("OFF")

            @JvmStatic fun of(value: String) = AirToAirStatus(JsonField.of(value))
        }

        /** An enum containing [AirToAirStatus]'s known values. */
        enum class Known {
            OPERATIONAL,
            NON_OPERATIONAL,
            OFF,
        }

        /**
         * An enum containing [AirToAirStatus]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [AirToAirStatus] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            OPERATIONAL,
            NON_OPERATIONAL,
            OFF,
            /**
             * An enum member indicating that [AirToAirStatus] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                OPERATIONAL -> Value.OPERATIONAL
                NON_OPERATIONAL -> Value.NON_OPERATIONAL
                OFF -> Value.OFF
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                OPERATIONAL -> Known.OPERATIONAL
                NON_OPERATIONAL -> Known.NON_OPERATIONAL
                OFF -> Known.OFF
                else ->
                    throw UnifieddatalibraryInvalidDataException("Unknown AirToAirStatus: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): AirToAirStatus = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirToAirStatus && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /**
     * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
     */
    class AirToGroundStatus @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val OPERATIONAL = of("OPERATIONAL")

            @JvmField val NON_OPERATIONAL = of("NON-OPERATIONAL")

            @JvmField val OFF = of("OFF")

            @JvmStatic fun of(value: String) = AirToGroundStatus(JsonField.of(value))
        }

        /** An enum containing [AirToGroundStatus]'s known values. */
        enum class Known {
            OPERATIONAL,
            NON_OPERATIONAL,
            OFF,
        }

        /**
         * An enum containing [AirToGroundStatus]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [AirToGroundStatus] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            OPERATIONAL,
            NON_OPERATIONAL,
            OFF,
            /**
             * An enum member indicating that [AirToGroundStatus] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                OPERATIONAL -> Value.OPERATIONAL
                NON_OPERATIONAL -> Value.NON_OPERATIONAL
                OFF -> Value.OFF
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                OPERATIONAL -> Known.OPERATIONAL
                NON_OPERATIONAL -> Known.NON_OPERATIONAL
                OFF -> Known.OFF
                else ->
                    throw UnifieddatalibraryInvalidDataException(
                        "Unknown AirToGroundStatus: $value"
                    )
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): AirToGroundStatus = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirToGroundStatus && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is AircraftStatusCreateParams &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int = Objects.hash(body, additionalHeaders, additionalQueryParams)

    override fun toString() =
        "AircraftStatusCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
