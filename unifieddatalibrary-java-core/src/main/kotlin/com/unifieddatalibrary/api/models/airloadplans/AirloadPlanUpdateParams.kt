// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.airloadplans

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkKnown
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.core.toImmutable
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to update a single airloadplan record. A specific role is required to perform
 * this service operation. Please contact the UDL team for assistance.
 */
class AirloadPlanUpdateParams
private constructor(
    private val pathId: String?,
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    fun pathId(): Optional<String> = Optional.ofNullable(pathId)

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * The current estimated time that the aircraft is planned to depart, in ISO 8601 UTC format
     * with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun estDepTime(): OffsetDateTime = body.estDepTime()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bodyId(): Optional<String> = body.bodyId()

    /**
     * Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of passengers, baggage,
     * and cargo that can be safely transported in the aircraft cabin, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun aclOnboard(): Optional<Double> = body.aclOnboard()

    /**
     * Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage, and cargo
     * released from the aircraft cabin, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun aclReleased(): Optional<Double> = body.aclReleased()

    /**
     * The Model Design Series designation of the aircraft supporting this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun aircraftMds(): Optional<String> = body.aircraftMds()

    /**
     * Collection of hazmat actuals associated with this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airLoadPlanHazmatActuals(): Optional<List<AirLoadPlanHazmatActual>> =
        body.airLoadPlanHazmatActuals()

    /**
     * Collection of human remains transport information associated with this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airLoadPlanHr(): Optional<List<AirLoadPlanHr>> = body.airLoadPlanHr()

    /**
     * Collection of cargo information located at the pallet positions associated with this load
     * plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airLoadPlanPalletDetails(): Optional<List<AirLoadPlanPalletDetail>> =
        body.airLoadPlanPalletDetails()

    /**
     * Collection of passenger and cargo details associated with this load plan for this leg of the
     * mission.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airLoadPlanPaxCargo(): Optional<List<AirLoadPlanPaxCargo>> = body.airLoadPlanPaxCargo()

    /**
     * Collection of unit line number actuals associated with this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun airLoadPlanUlnActuals(): Optional<List<AirLoadPlanUlnActual>> = body.airLoadPlanUlnActuals()

    /**
     * Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun arrAirfield(): Optional<String> = body.arrAirfield()

    /**
     * The arrival International Civil Organization (ICAO) code of the landing airfield.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun arrIcao(): Optional<String> = body.arrIcao()

    /**
     * Time the loadmaster or boom operator is available for cargo loading/unloading, in ISO 8601
     * UTC format with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun availableTime(): Optional<OffsetDateTime> = body.availableTime()

    /**
     * The basic weight of the aircraft multiplied by the distance between the reference datum and
     * the aircraft's center of gravity, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun basicMoment(): Optional<Double> = body.basicMoment()

    /**
     * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in
     * kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun basicWeight(): Optional<Double> = body.basicWeight()

    /**
     * Time the cargo briefing was given to the loadmaster or boom operator, in ISO 8601 UTC format
     * with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun briefTime(): Optional<OffsetDateTime> = body.briefTime()

    /**
     * The call sign of the mission supporting this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun callSign(): Optional<String> = body.callSign()

    /**
     * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the
     * reference datum, in meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoBayFsMax(): Optional<Double> = body.cargoBayFsMax()

    /**
     * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the
     * reference datum, in meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoBayFsMin(): Optional<Double> = body.cargoBayFsMin()

    /**
     * Width of the cargo bay, in meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoBayWidth(): Optional<Double> = body.cargoBayWidth()

    /**
     * The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.).
     * Configuration meanings are determined by the data source.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoConfig(): Optional<String> = body.cargoConfig()

    /**
     * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each
     * individual cargo moment is the weight of the cargo multiplied by the distance between the
     * reference datum and the cargo's center of gravity.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoMoment(): Optional<Double> = body.cargoMoment()

    /**
     * Volume of cargo space in the aircraft, in cubic meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoVolume(): Optional<Double> = body.cargoVolume()

    /**
     * The weight of the cargo on board the aircraft, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun cargoWeight(): Optional<Double> = body.cargoWeight()

    /**
     * Time the row was created in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * The number of crew members on the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun crewSize(): Optional<Int> = body.crewSize()

    /**
     * Optional identifier of departure airfield with no International Civil Organization (ICAO)
     * code.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun depAirfield(): Optional<String> = body.depAirfield()

    /**
     * The departure International Civil Organization (ICAO) code of the departure airfield.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun depIcao(): Optional<String> = body.depIcao()

    /**
     * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.).
     * Configuration meanings are determined by the data source.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun equipConfig(): Optional<String> = body.equipConfig()

    /**
     * The current estimated time that the aircraft is planned to arrive, in ISO 8601 UTC format
     * with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun estArrTime(): Optional<OffsetDateTime> = body.estArrTime()

    /**
     * The estimated weight of usable fuel upon landing multiplied by the distance between the
     * reference datum and the fuel's center of gravity, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun estLandingFuelMoment(): Optional<Double> = body.estLandingFuelMoment()

    /**
     * The estimated weight of usable fuel upon landing, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun estLandingFuelWeight(): Optional<Double> = body.estLandingFuelWeight()

    /**
     * Optional ID from external systems. This field has no meaning within UDL and is provided as a
     * convenience for systems that require tracking of an internal system generated ID.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun externalId(): Optional<String> = body.externalId()

    /**
     * The fuel weight on board the aircraft multiplied by the distance between the reference datum
     * and the fuel's center of gravity, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun fuelMoment(): Optional<Double> = body.fuelMoment()

    /**
     * The weight of usable fuel on board the aircraft, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun fuelWeight(): Optional<Double> = body.fuelWeight()

    /**
     * The center of gravity of the aircraft using the gross weight and gross moment, as a
     * percentage of the mean aerodynamic chord (%MAC).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun grossCg(): Optional<Double> = body.grossCg()

    /**
     * The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun grossMoment(): Optional<Double> = body.grossMoment()

    /**
     * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and
     * usable fuel, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun grossWeight(): Optional<Double> = body.grossWeight()

    /**
     * The UDL ID of the mission this record is associated with.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idMission(): Optional<String> = body.idMission()

    /**
     * The UDL ID of the aircraft sortie this record is associated with.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idSortie(): Optional<String> = body.idSortie()

    /**
     * The center of gravity of the aircraft using the landing weight and landing moment, as a
     * percentage of the mean aerodynamic chord (%MAC).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun landingCg(): Optional<Double> = body.landingCg()

    /**
     * The sum of moments of all items making up the gross weight of the aircraft upon landing, in
     * Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun landingMoment(): Optional<Double> = body.landingMoment()

    /**
     * The gross weight of the aircraft upon landing, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun landingWeight(): Optional<Double> = body.landingWeight()

    /**
     * The leg number of the mission supporting this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun legNum(): Optional<Int> = body.legNum()

    /**
     * Name of the loadmaster or boom operator who received the cargo briefing.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun loadmasterName(): Optional<String> = body.loadmasterName()

    /**
     * Rank of the loadmaster or boom operator overseeing cargo loading/unloading.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun loadmasterRank(): Optional<String> = body.loadmasterRank()

    /**
     * Remarks concerning this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun loadRemarks(): Optional<String> = body.loadRemarks()

    /**
     * The mission number of the mission supporting this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun missionNumber(): Optional<String> = body.missionNumber()

    /**
     * The operating weight of the aircraft multiplied by the distance between the reference datum
     * and the aircraft's center of gravity, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun operatingMoment(): Optional<Double> = body.operatingMoment()

    /**
     * The basic weight of the aircraft including passengers and equipment, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun operatingWeight(): Optional<Double> = body.operatingWeight()

    /**
     * Originating system or organization which produced the data, if different from the source. The
     * origin may be different than the source if the source was a mediating system which forwarded
     * the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the
     * system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * Number of pallet positions on the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun ppOnboard(): Optional<Int> = body.ppOnboard()

    /**
     * Number of pallet positions released this leg.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun ppReleased(): Optional<Int> = body.ppReleased()

    /**
     * Time the loadmaster or boom operator is scheduled to begin overseeing cargo
     * loading/unloading, in ISO 8601 UTC format with millisecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun schedTime(): Optional<OffsetDateTime> = body.schedTime()

    /**
     * Number of passenger seats on the aircraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun seatsOnboard(): Optional<Int> = body.seatsOnboard()

    /**
     * Number of passenger seats released this leg.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun seatsReleased(): Optional<Int> = body.seatsReleased()

    /**
     * The source data library from which this record was received. This could be a remote or
     * tactical UDL or another data library. If null, the record should be assumed to have
     * originated from the primary Enterprise UDL.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun sourceDl(): Optional<String> = body.sourceDl()

    /**
     * The tail number of the aircraft supporting this load plan.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tailNumber(): Optional<String> = body.tailNumber()

    /**
     * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings
     * are determined by the data source.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tankConfig(): Optional<String> = body.tankConfig()

    /**
     * Time the row was updated in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun updatedAt(): Optional<OffsetDateTime> = body.updatedAt()

    /**
     * Application user who updated the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun updatedBy(): Optional<String> = body.updatedBy()

    /**
     * Alphanumeric code that describes general cargo-related utilization and characteristics for an
     * itinerary point.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun utilCode(): Optional<String> = body.utilCode()

    /**
     * The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment,
     * as a percentage of the mean aerodynamic chord (%MAC).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun zeroFuelCg(): Optional<Double> = body.zeroFuelCg()

    /**
     * The zero fuel weight of the aircraft multiplied by the distance between the reference datum
     * and the aircraft's center of gravity, in Newton-meters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun zeroFuelMoment(): Optional<Double> = body.zeroFuelMoment()

    /**
     * The operating weight of the aircraft including cargo, mail, baggage, and passengers, but
     * without usable fuel, in kilograms.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun zeroFuelWeight(): Optional<Double> = body.zeroFuelWeight()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [estDepTime].
     *
     * Unlike [estDepTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _estDepTime(): JsonField<OffsetDateTime> = body._estDepTime()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [bodyId].
     *
     * Unlike [bodyId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _bodyId(): JsonField<String> = body._bodyId()

    /**
     * Returns the raw JSON value of [aclOnboard].
     *
     * Unlike [aclOnboard], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _aclOnboard(): JsonField<Double> = body._aclOnboard()

    /**
     * Returns the raw JSON value of [aclReleased].
     *
     * Unlike [aclReleased], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _aclReleased(): JsonField<Double> = body._aclReleased()

    /**
     * Returns the raw JSON value of [aircraftMds].
     *
     * Unlike [aircraftMds], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _aircraftMds(): JsonField<String> = body._aircraftMds()

    /**
     * Returns the raw JSON value of [airLoadPlanHazmatActuals].
     *
     * Unlike [airLoadPlanHazmatActuals], this method doesn't throw if the JSON field has an
     * unexpected type.
     */
    fun _airLoadPlanHazmatActuals(): JsonField<List<AirLoadPlanHazmatActual>> =
        body._airLoadPlanHazmatActuals()

    /**
     * Returns the raw JSON value of [airLoadPlanHr].
     *
     * Unlike [airLoadPlanHr], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _airLoadPlanHr(): JsonField<List<AirLoadPlanHr>> = body._airLoadPlanHr()

    /**
     * Returns the raw JSON value of [airLoadPlanPalletDetails].
     *
     * Unlike [airLoadPlanPalletDetails], this method doesn't throw if the JSON field has an
     * unexpected type.
     */
    fun _airLoadPlanPalletDetails(): JsonField<List<AirLoadPlanPalletDetail>> =
        body._airLoadPlanPalletDetails()

    /**
     * Returns the raw JSON value of [airLoadPlanPaxCargo].
     *
     * Unlike [airLoadPlanPaxCargo], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _airLoadPlanPaxCargo(): JsonField<List<AirLoadPlanPaxCargo>> = body._airLoadPlanPaxCargo()

    /**
     * Returns the raw JSON value of [airLoadPlanUlnActuals].
     *
     * Unlike [airLoadPlanUlnActuals], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _airLoadPlanUlnActuals(): JsonField<List<AirLoadPlanUlnActual>> =
        body._airLoadPlanUlnActuals()

    /**
     * Returns the raw JSON value of [arrAirfield].
     *
     * Unlike [arrAirfield], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _arrAirfield(): JsonField<String> = body._arrAirfield()

    /**
     * Returns the raw JSON value of [arrIcao].
     *
     * Unlike [arrIcao], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _arrIcao(): JsonField<String> = body._arrIcao()

    /**
     * Returns the raw JSON value of [availableTime].
     *
     * Unlike [availableTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _availableTime(): JsonField<OffsetDateTime> = body._availableTime()

    /**
     * Returns the raw JSON value of [basicMoment].
     *
     * Unlike [basicMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _basicMoment(): JsonField<Double> = body._basicMoment()

    /**
     * Returns the raw JSON value of [basicWeight].
     *
     * Unlike [basicWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _basicWeight(): JsonField<Double> = body._basicWeight()

    /**
     * Returns the raw JSON value of [briefTime].
     *
     * Unlike [briefTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _briefTime(): JsonField<OffsetDateTime> = body._briefTime()

    /**
     * Returns the raw JSON value of [callSign].
     *
     * Unlike [callSign], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _callSign(): JsonField<String> = body._callSign()

    /**
     * Returns the raw JSON value of [cargoBayFsMax].
     *
     * Unlike [cargoBayFsMax], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoBayFsMax(): JsonField<Double> = body._cargoBayFsMax()

    /**
     * Returns the raw JSON value of [cargoBayFsMin].
     *
     * Unlike [cargoBayFsMin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoBayFsMin(): JsonField<Double> = body._cargoBayFsMin()

    /**
     * Returns the raw JSON value of [cargoBayWidth].
     *
     * Unlike [cargoBayWidth], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoBayWidth(): JsonField<Double> = body._cargoBayWidth()

    /**
     * Returns the raw JSON value of [cargoConfig].
     *
     * Unlike [cargoConfig], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoConfig(): JsonField<String> = body._cargoConfig()

    /**
     * Returns the raw JSON value of [cargoMoment].
     *
     * Unlike [cargoMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoMoment(): JsonField<Double> = body._cargoMoment()

    /**
     * Returns the raw JSON value of [cargoVolume].
     *
     * Unlike [cargoVolume], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoVolume(): JsonField<Double> = body._cargoVolume()

    /**
     * Returns the raw JSON value of [cargoWeight].
     *
     * Unlike [cargoWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _cargoWeight(): JsonField<Double> = body._cargoWeight()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [crewSize].
     *
     * Unlike [crewSize], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _crewSize(): JsonField<Int> = body._crewSize()

    /**
     * Returns the raw JSON value of [depAirfield].
     *
     * Unlike [depAirfield], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _depAirfield(): JsonField<String> = body._depAirfield()

    /**
     * Returns the raw JSON value of [depIcao].
     *
     * Unlike [depIcao], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _depIcao(): JsonField<String> = body._depIcao()

    /**
     * Returns the raw JSON value of [equipConfig].
     *
     * Unlike [equipConfig], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _equipConfig(): JsonField<String> = body._equipConfig()

    /**
     * Returns the raw JSON value of [estArrTime].
     *
     * Unlike [estArrTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _estArrTime(): JsonField<OffsetDateTime> = body._estArrTime()

    /**
     * Returns the raw JSON value of [estLandingFuelMoment].
     *
     * Unlike [estLandingFuelMoment], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _estLandingFuelMoment(): JsonField<Double> = body._estLandingFuelMoment()

    /**
     * Returns the raw JSON value of [estLandingFuelWeight].
     *
     * Unlike [estLandingFuelWeight], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _estLandingFuelWeight(): JsonField<Double> = body._estLandingFuelWeight()

    /**
     * Returns the raw JSON value of [externalId].
     *
     * Unlike [externalId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _externalId(): JsonField<String> = body._externalId()

    /**
     * Returns the raw JSON value of [fuelMoment].
     *
     * Unlike [fuelMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fuelMoment(): JsonField<Double> = body._fuelMoment()

    /**
     * Returns the raw JSON value of [fuelWeight].
     *
     * Unlike [fuelWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fuelWeight(): JsonField<Double> = body._fuelWeight()

    /**
     * Returns the raw JSON value of [grossCg].
     *
     * Unlike [grossCg], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _grossCg(): JsonField<Double> = body._grossCg()

    /**
     * Returns the raw JSON value of [grossMoment].
     *
     * Unlike [grossMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _grossMoment(): JsonField<Double> = body._grossMoment()

    /**
     * Returns the raw JSON value of [grossWeight].
     *
     * Unlike [grossWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _grossWeight(): JsonField<Double> = body._grossWeight()

    /**
     * Returns the raw JSON value of [idMission].
     *
     * Unlike [idMission], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idMission(): JsonField<String> = body._idMission()

    /**
     * Returns the raw JSON value of [idSortie].
     *
     * Unlike [idSortie], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idSortie(): JsonField<String> = body._idSortie()

    /**
     * Returns the raw JSON value of [landingCg].
     *
     * Unlike [landingCg], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _landingCg(): JsonField<Double> = body._landingCg()

    /**
     * Returns the raw JSON value of [landingMoment].
     *
     * Unlike [landingMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _landingMoment(): JsonField<Double> = body._landingMoment()

    /**
     * Returns the raw JSON value of [landingWeight].
     *
     * Unlike [landingWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _landingWeight(): JsonField<Double> = body._landingWeight()

    /**
     * Returns the raw JSON value of [legNum].
     *
     * Unlike [legNum], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _legNum(): JsonField<Int> = body._legNum()

    /**
     * Returns the raw JSON value of [loadmasterName].
     *
     * Unlike [loadmasterName], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _loadmasterName(): JsonField<String> = body._loadmasterName()

    /**
     * Returns the raw JSON value of [loadmasterRank].
     *
     * Unlike [loadmasterRank], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _loadmasterRank(): JsonField<String> = body._loadmasterRank()

    /**
     * Returns the raw JSON value of [loadRemarks].
     *
     * Unlike [loadRemarks], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _loadRemarks(): JsonField<String> = body._loadRemarks()

    /**
     * Returns the raw JSON value of [missionNumber].
     *
     * Unlike [missionNumber], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _missionNumber(): JsonField<String> = body._missionNumber()

    /**
     * Returns the raw JSON value of [operatingMoment].
     *
     * Unlike [operatingMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _operatingMoment(): JsonField<Double> = body._operatingMoment()

    /**
     * Returns the raw JSON value of [operatingWeight].
     *
     * Unlike [operatingWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _operatingWeight(): JsonField<Double> = body._operatingWeight()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [ppOnboard].
     *
     * Unlike [ppOnboard], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _ppOnboard(): JsonField<Int> = body._ppOnboard()

    /**
     * Returns the raw JSON value of [ppReleased].
     *
     * Unlike [ppReleased], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _ppReleased(): JsonField<Int> = body._ppReleased()

    /**
     * Returns the raw JSON value of [schedTime].
     *
     * Unlike [schedTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _schedTime(): JsonField<OffsetDateTime> = body._schedTime()

    /**
     * Returns the raw JSON value of [seatsOnboard].
     *
     * Unlike [seatsOnboard], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _seatsOnboard(): JsonField<Int> = body._seatsOnboard()

    /**
     * Returns the raw JSON value of [seatsReleased].
     *
     * Unlike [seatsReleased], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _seatsReleased(): JsonField<Int> = body._seatsReleased()

    /**
     * Returns the raw JSON value of [sourceDl].
     *
     * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _sourceDl(): JsonField<String> = body._sourceDl()

    /**
     * Returns the raw JSON value of [tailNumber].
     *
     * Unlike [tailNumber], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tailNumber(): JsonField<String> = body._tailNumber()

    /**
     * Returns the raw JSON value of [tankConfig].
     *
     * Unlike [tankConfig], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tankConfig(): JsonField<String> = body._tankConfig()

    /**
     * Returns the raw JSON value of [updatedAt].
     *
     * Unlike [updatedAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _updatedAt(): JsonField<OffsetDateTime> = body._updatedAt()

    /**
     * Returns the raw JSON value of [updatedBy].
     *
     * Unlike [updatedBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _updatedBy(): JsonField<String> = body._updatedBy()

    /**
     * Returns the raw JSON value of [utilCode].
     *
     * Unlike [utilCode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _utilCode(): JsonField<String> = body._utilCode()

    /**
     * Returns the raw JSON value of [zeroFuelCg].
     *
     * Unlike [zeroFuelCg], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _zeroFuelCg(): JsonField<Double> = body._zeroFuelCg()

    /**
     * Returns the raw JSON value of [zeroFuelMoment].
     *
     * Unlike [zeroFuelMoment], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _zeroFuelMoment(): JsonField<Double> = body._zeroFuelMoment()

    /**
     * Returns the raw JSON value of [zeroFuelWeight].
     *
     * Unlike [zeroFuelWeight], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _zeroFuelWeight(): JsonField<Double> = body._zeroFuelWeight()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [AirloadPlanUpdateParams].
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .estDepTime()
         * .source()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [AirloadPlanUpdateParams]. */
    class Builder internal constructor() {

        private var pathId: String? = null
        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(airloadPlanUpdateParams: AirloadPlanUpdateParams) = apply {
            pathId = airloadPlanUpdateParams.pathId
            body = airloadPlanUpdateParams.body.toBuilder()
            additionalHeaders = airloadPlanUpdateParams.additionalHeaders.toBuilder()
            additionalQueryParams = airloadPlanUpdateParams.additionalQueryParams.toBuilder()
        }

        fun pathId(pathId: String?) = apply { this.pathId = pathId }

        /** Alias for calling [Builder.pathId] with `pathId.orElse(null)`. */
        fun pathId(pathId: Optional<String>) = pathId(pathId.getOrNull())

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [classificationMarking]
         * - [dataMode]
         * - [estDepTime]
         * - [source]
         * - [bodyId]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) = apply { body.dataMode(dataMode) }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) = apply { body.dataMode(dataMode) }

        /**
         * The current estimated time that the aircraft is planned to depart, in ISO 8601 UTC format
         * with millisecond precision.
         */
        fun estDepTime(estDepTime: OffsetDateTime) = apply { body.estDepTime(estDepTime) }

        /**
         * Sets [Builder.estDepTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.estDepTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun estDepTime(estDepTime: JsonField<OffsetDateTime>) = apply {
            body.estDepTime(estDepTime)
        }

        /** Source of the data. */
        fun source(source: String) = apply { body.source(source) }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun source(source: JsonField<String>) = apply { body.source(source) }

        /** Unique identifier of the record, auto-generated by the system. */
        fun bodyId(bodyId: String) = apply { body.bodyId(bodyId) }

        /**
         * Sets [Builder.bodyId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bodyId] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun bodyId(bodyId: JsonField<String>) = apply { body.bodyId(bodyId) }

        /**
         * Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of passengers,
         * baggage, and cargo that can be safely transported in the aircraft cabin, in kilograms.
         */
        fun aclOnboard(aclOnboard: Double) = apply { body.aclOnboard(aclOnboard) }

        /**
         * Sets [Builder.aclOnboard] to an arbitrary JSON value.
         *
         * You should usually call [Builder.aclOnboard] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun aclOnboard(aclOnboard: JsonField<Double>) = apply { body.aclOnboard(aclOnboard) }

        /**
         * Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage, and
         * cargo released from the aircraft cabin, in kilograms.
         */
        fun aclReleased(aclReleased: Double) = apply { body.aclReleased(aclReleased) }

        /**
         * Sets [Builder.aclReleased] to an arbitrary JSON value.
         *
         * You should usually call [Builder.aclReleased] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun aclReleased(aclReleased: JsonField<Double>) = apply { body.aclReleased(aclReleased) }

        /** The Model Design Series designation of the aircraft supporting this load plan. */
        fun aircraftMds(aircraftMds: String) = apply { body.aircraftMds(aircraftMds) }

        /**
         * Sets [Builder.aircraftMds] to an arbitrary JSON value.
         *
         * You should usually call [Builder.aircraftMds] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun aircraftMds(aircraftMds: JsonField<String>) = apply { body.aircraftMds(aircraftMds) }

        /** Collection of hazmat actuals associated with this load plan. */
        fun airLoadPlanHazmatActuals(airLoadPlanHazmatActuals: List<AirLoadPlanHazmatActual>) =
            apply {
                body.airLoadPlanHazmatActuals(airLoadPlanHazmatActuals)
            }

        /**
         * Sets [Builder.airLoadPlanHazmatActuals] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airLoadPlanHazmatActuals] with a well-typed
         * `List<AirLoadPlanHazmatActual>` value instead. This method is primarily for setting the
         * field to an undocumented or not yet supported value.
         */
        fun airLoadPlanHazmatActuals(
            airLoadPlanHazmatActuals: JsonField<List<AirLoadPlanHazmatActual>>
        ) = apply { body.airLoadPlanHazmatActuals(airLoadPlanHazmatActuals) }

        /**
         * Adds a single [AirLoadPlanHazmatActual] to [airLoadPlanHazmatActuals].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAirLoadPlanHazmatActual(airLoadPlanHazmatActual: AirLoadPlanHazmatActual) = apply {
            body.addAirLoadPlanHazmatActual(airLoadPlanHazmatActual)
        }

        /** Collection of human remains transport information associated with this load plan. */
        fun airLoadPlanHr(airLoadPlanHr: List<AirLoadPlanHr>) = apply {
            body.airLoadPlanHr(airLoadPlanHr)
        }

        /**
         * Sets [Builder.airLoadPlanHr] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airLoadPlanHr] with a well-typed `List<AirLoadPlanHr>`
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun airLoadPlanHr(airLoadPlanHr: JsonField<List<AirLoadPlanHr>>) = apply {
            body.airLoadPlanHr(airLoadPlanHr)
        }

        /**
         * Adds a single [AirLoadPlanHr] to [Builder.airLoadPlanHr].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAirLoadPlanHr(airLoadPlanHr: AirLoadPlanHr) = apply {
            body.addAirLoadPlanHr(airLoadPlanHr)
        }

        /**
         * Collection of cargo information located at the pallet positions associated with this load
         * plan.
         */
        fun airLoadPlanPalletDetails(airLoadPlanPalletDetails: List<AirLoadPlanPalletDetail>) =
            apply {
                body.airLoadPlanPalletDetails(airLoadPlanPalletDetails)
            }

        /**
         * Sets [Builder.airLoadPlanPalletDetails] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airLoadPlanPalletDetails] with a well-typed
         * `List<AirLoadPlanPalletDetail>` value instead. This method is primarily for setting the
         * field to an undocumented or not yet supported value.
         */
        fun airLoadPlanPalletDetails(
            airLoadPlanPalletDetails: JsonField<List<AirLoadPlanPalletDetail>>
        ) = apply { body.airLoadPlanPalletDetails(airLoadPlanPalletDetails) }

        /**
         * Adds a single [AirLoadPlanPalletDetail] to [airLoadPlanPalletDetails].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAirLoadPlanPalletDetail(airLoadPlanPalletDetail: AirLoadPlanPalletDetail) = apply {
            body.addAirLoadPlanPalletDetail(airLoadPlanPalletDetail)
        }

        /**
         * Collection of passenger and cargo details associated with this load plan for this leg of
         * the mission.
         */
        fun airLoadPlanPaxCargo(airLoadPlanPaxCargo: List<AirLoadPlanPaxCargo>) = apply {
            body.airLoadPlanPaxCargo(airLoadPlanPaxCargo)
        }

        /**
         * Sets [Builder.airLoadPlanPaxCargo] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airLoadPlanPaxCargo] with a well-typed
         * `List<AirLoadPlanPaxCargo>` value instead. This method is primarily for setting the field
         * to an undocumented or not yet supported value.
         */
        fun airLoadPlanPaxCargo(airLoadPlanPaxCargo: JsonField<List<AirLoadPlanPaxCargo>>) = apply {
            body.airLoadPlanPaxCargo(airLoadPlanPaxCargo)
        }

        /**
         * Adds a single [AirLoadPlanPaxCargo] to [Builder.airLoadPlanPaxCargo].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAirLoadPlanPaxCargo(airLoadPlanPaxCargo: AirLoadPlanPaxCargo) = apply {
            body.addAirLoadPlanPaxCargo(airLoadPlanPaxCargo)
        }

        /** Collection of unit line number actuals associated with this load plan. */
        fun airLoadPlanUlnActuals(airLoadPlanUlnActuals: List<AirLoadPlanUlnActual>) = apply {
            body.airLoadPlanUlnActuals(airLoadPlanUlnActuals)
        }

        /**
         * Sets [Builder.airLoadPlanUlnActuals] to an arbitrary JSON value.
         *
         * You should usually call [Builder.airLoadPlanUlnActuals] with a well-typed
         * `List<AirLoadPlanUlnActual>` value instead. This method is primarily for setting the
         * field to an undocumented or not yet supported value.
         */
        fun airLoadPlanUlnActuals(airLoadPlanUlnActuals: JsonField<List<AirLoadPlanUlnActual>>) =
            apply {
                body.airLoadPlanUlnActuals(airLoadPlanUlnActuals)
            }

        /**
         * Adds a single [AirLoadPlanUlnActual] to [airLoadPlanUlnActuals].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addAirLoadPlanUlnActual(airLoadPlanUlnActual: AirLoadPlanUlnActual) = apply {
            body.addAirLoadPlanUlnActual(airLoadPlanUlnActual)
        }

        /**
         * Optional identifier of arrival airfield with no International Civil Organization (ICAO)
         * code.
         */
        fun arrAirfield(arrAirfield: String) = apply { body.arrAirfield(arrAirfield) }

        /**
         * Sets [Builder.arrAirfield] to an arbitrary JSON value.
         *
         * You should usually call [Builder.arrAirfield] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun arrAirfield(arrAirfield: JsonField<String>) = apply { body.arrAirfield(arrAirfield) }

        /** The arrival International Civil Organization (ICAO) code of the landing airfield. */
        fun arrIcao(arrIcao: String) = apply { body.arrIcao(arrIcao) }

        /**
         * Sets [Builder.arrIcao] to an arbitrary JSON value.
         *
         * You should usually call [Builder.arrIcao] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun arrIcao(arrIcao: JsonField<String>) = apply { body.arrIcao(arrIcao) }

        /**
         * Time the loadmaster or boom operator is available for cargo loading/unloading, in ISO
         * 8601 UTC format with millisecond precision.
         */
        fun availableTime(availableTime: OffsetDateTime) = apply {
            body.availableTime(availableTime)
        }

        /**
         * Sets [Builder.availableTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.availableTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun availableTime(availableTime: JsonField<OffsetDateTime>) = apply {
            body.availableTime(availableTime)
        }

        /**
         * The basic weight of the aircraft multiplied by the distance between the reference datum
         * and the aircraft's center of gravity, in Newton-meters.
         */
        fun basicMoment(basicMoment: Double) = apply { body.basicMoment(basicMoment) }

        /**
         * Sets [Builder.basicMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.basicMoment] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun basicMoment(basicMoment: JsonField<Double>) = apply { body.basicMoment(basicMoment) }

        /**
         * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in
         * kilograms.
         */
        fun basicWeight(basicWeight: Double) = apply { body.basicWeight(basicWeight) }

        /**
         * Sets [Builder.basicWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.basicWeight] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun basicWeight(basicWeight: JsonField<Double>) = apply { body.basicWeight(basicWeight) }

        /**
         * Time the cargo briefing was given to the loadmaster or boom operator, in ISO 8601 UTC
         * format with millisecond precision.
         */
        fun briefTime(briefTime: OffsetDateTime) = apply { body.briefTime(briefTime) }

        /**
         * Sets [Builder.briefTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.briefTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun briefTime(briefTime: JsonField<OffsetDateTime>) = apply { body.briefTime(briefTime) }

        /** The call sign of the mission supporting this load plan. */
        fun callSign(callSign: String) = apply { body.callSign(callSign) }

        /**
         * Sets [Builder.callSign] to an arbitrary JSON value.
         *
         * You should usually call [Builder.callSign] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun callSign(callSign: JsonField<String>) = apply { body.callSign(callSign) }

        /**
         * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the
         * reference datum, in meters.
         */
        fun cargoBayFsMax(cargoBayFsMax: Double) = apply { body.cargoBayFsMax(cargoBayFsMax) }

        /**
         * Sets [Builder.cargoBayFsMax] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoBayFsMax] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoBayFsMax(cargoBayFsMax: JsonField<Double>) = apply {
            body.cargoBayFsMax(cargoBayFsMax)
        }

        /**
         * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the
         * reference datum, in meters.
         */
        fun cargoBayFsMin(cargoBayFsMin: Double) = apply { body.cargoBayFsMin(cargoBayFsMin) }

        /**
         * Sets [Builder.cargoBayFsMin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoBayFsMin] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoBayFsMin(cargoBayFsMin: JsonField<Double>) = apply {
            body.cargoBayFsMin(cargoBayFsMin)
        }

        /** Width of the cargo bay, in meters. */
        fun cargoBayWidth(cargoBayWidth: Double) = apply { body.cargoBayWidth(cargoBayWidth) }

        /**
         * Sets [Builder.cargoBayWidth] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoBayWidth] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoBayWidth(cargoBayWidth: JsonField<Double>) = apply {
            body.cargoBayWidth(cargoBayWidth)
        }

        /**
         * The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
         * etc.). Configuration meanings are determined by the data source.
         */
        fun cargoConfig(cargoConfig: String) = apply { body.cargoConfig(cargoConfig) }

        /**
         * Sets [Builder.cargoConfig] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoConfig] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoConfig(cargoConfig: JsonField<String>) = apply { body.cargoConfig(cargoConfig) }

        /**
         * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each
         * individual cargo moment is the weight of the cargo multiplied by the distance between the
         * reference datum and the cargo's center of gravity.
         */
        fun cargoMoment(cargoMoment: Double) = apply { body.cargoMoment(cargoMoment) }

        /**
         * Sets [Builder.cargoMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoMoment] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoMoment(cargoMoment: JsonField<Double>) = apply { body.cargoMoment(cargoMoment) }

        /** Volume of cargo space in the aircraft, in cubic meters. */
        fun cargoVolume(cargoVolume: Double) = apply { body.cargoVolume(cargoVolume) }

        /**
         * Sets [Builder.cargoVolume] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoVolume] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoVolume(cargoVolume: JsonField<Double>) = apply { body.cargoVolume(cargoVolume) }

        /** The weight of the cargo on board the aircraft, in kilograms. */
        fun cargoWeight(cargoWeight: Double) = apply { body.cargoWeight(cargoWeight) }

        /**
         * Sets [Builder.cargoWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.cargoWeight] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun cargoWeight(cargoWeight: JsonField<Double>) = apply { body.cargoWeight(cargoWeight) }

        /** Time the row was created in the database, auto-populated by the system. */
        fun createdAt(createdAt: OffsetDateTime) = apply { body.createdAt(createdAt) }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { body.createdAt(createdAt) }

        /** Application user who created the row in the database, auto-populated by the system. */
        fun createdBy(createdBy: String) = apply { body.createdBy(createdBy) }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun createdBy(createdBy: JsonField<String>) = apply { body.createdBy(createdBy) }

        /** The number of crew members on the aircraft. */
        fun crewSize(crewSize: Int) = apply { body.crewSize(crewSize) }

        /**
         * Sets [Builder.crewSize] to an arbitrary JSON value.
         *
         * You should usually call [Builder.crewSize] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun crewSize(crewSize: JsonField<Int>) = apply { body.crewSize(crewSize) }

        /**
         * Optional identifier of departure airfield with no International Civil Organization (ICAO)
         * code.
         */
        fun depAirfield(depAirfield: String) = apply { body.depAirfield(depAirfield) }

        /**
         * Sets [Builder.depAirfield] to an arbitrary JSON value.
         *
         * You should usually call [Builder.depAirfield] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun depAirfield(depAirfield: JsonField<String>) = apply { body.depAirfield(depAirfield) }

        /** The departure International Civil Organization (ICAO) code of the departure airfield. */
        fun depIcao(depIcao: String) = apply { body.depIcao(depIcao) }

        /**
         * Sets [Builder.depIcao] to an arbitrary JSON value.
         *
         * You should usually call [Builder.depIcao] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun depIcao(depIcao: JsonField<String>) = apply { body.depIcao(depIcao) }

        /**
         * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat,
         * etc.). Configuration meanings are determined by the data source.
         */
        fun equipConfig(equipConfig: String) = apply { body.equipConfig(equipConfig) }

        /**
         * Sets [Builder.equipConfig] to an arbitrary JSON value.
         *
         * You should usually call [Builder.equipConfig] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun equipConfig(equipConfig: JsonField<String>) = apply { body.equipConfig(equipConfig) }

        /**
         * The current estimated time that the aircraft is planned to arrive, in ISO 8601 UTC format
         * with millisecond precision.
         */
        fun estArrTime(estArrTime: OffsetDateTime) = apply { body.estArrTime(estArrTime) }

        /**
         * Sets [Builder.estArrTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.estArrTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun estArrTime(estArrTime: JsonField<OffsetDateTime>) = apply {
            body.estArrTime(estArrTime)
        }

        /**
         * The estimated weight of usable fuel upon landing multiplied by the distance between the
         * reference datum and the fuel's center of gravity, in Newton-meters.
         */
        fun estLandingFuelMoment(estLandingFuelMoment: Double) = apply {
            body.estLandingFuelMoment(estLandingFuelMoment)
        }

        /**
         * Sets [Builder.estLandingFuelMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.estLandingFuelMoment] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun estLandingFuelMoment(estLandingFuelMoment: JsonField<Double>) = apply {
            body.estLandingFuelMoment(estLandingFuelMoment)
        }

        /** The estimated weight of usable fuel upon landing, in kilograms. */
        fun estLandingFuelWeight(estLandingFuelWeight: Double) = apply {
            body.estLandingFuelWeight(estLandingFuelWeight)
        }

        /**
         * Sets [Builder.estLandingFuelWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.estLandingFuelWeight] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun estLandingFuelWeight(estLandingFuelWeight: JsonField<Double>) = apply {
            body.estLandingFuelWeight(estLandingFuelWeight)
        }

        /**
         * Optional ID from external systems. This field has no meaning within UDL and is provided
         * as a convenience for systems that require tracking of an internal system generated ID.
         */
        fun externalId(externalId: String) = apply { body.externalId(externalId) }

        /**
         * Sets [Builder.externalId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.externalId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun externalId(externalId: JsonField<String>) = apply { body.externalId(externalId) }

        /**
         * The fuel weight on board the aircraft multiplied by the distance between the reference
         * datum and the fuel's center of gravity, in Newton-meters.
         */
        fun fuelMoment(fuelMoment: Double) = apply { body.fuelMoment(fuelMoment) }

        /**
         * Sets [Builder.fuelMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fuelMoment] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun fuelMoment(fuelMoment: JsonField<Double>) = apply { body.fuelMoment(fuelMoment) }

        /** The weight of usable fuel on board the aircraft, in kilograms. */
        fun fuelWeight(fuelWeight: Double) = apply { body.fuelWeight(fuelWeight) }

        /**
         * Sets [Builder.fuelWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fuelWeight] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun fuelWeight(fuelWeight: JsonField<Double>) = apply { body.fuelWeight(fuelWeight) }

        /**
         * The center of gravity of the aircraft using the gross weight and gross moment, as a
         * percentage of the mean aerodynamic chord (%MAC).
         */
        fun grossCg(grossCg: Double) = apply { body.grossCg(grossCg) }

        /**
         * Sets [Builder.grossCg] to an arbitrary JSON value.
         *
         * You should usually call [Builder.grossCg] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun grossCg(grossCg: JsonField<Double>) = apply { body.grossCg(grossCg) }

        /**
         * The sum of moments of all items making up the gross weight of the aircraft, in
         * Newton-meters.
         */
        fun grossMoment(grossMoment: Double) = apply { body.grossMoment(grossMoment) }

        /**
         * Sets [Builder.grossMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.grossMoment] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun grossMoment(grossMoment: JsonField<Double>) = apply { body.grossMoment(grossMoment) }

        /**
         * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and
         * usable fuel, in kilograms.
         */
        fun grossWeight(grossWeight: Double) = apply { body.grossWeight(grossWeight) }

        /**
         * Sets [Builder.grossWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.grossWeight] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun grossWeight(grossWeight: JsonField<Double>) = apply { body.grossWeight(grossWeight) }

        /** The UDL ID of the mission this record is associated with. */
        fun idMission(idMission: String) = apply { body.idMission(idMission) }

        /**
         * Sets [Builder.idMission] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idMission] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idMission(idMission: JsonField<String>) = apply { body.idMission(idMission) }

        /** The UDL ID of the aircraft sortie this record is associated with. */
        fun idSortie(idSortie: String) = apply { body.idSortie(idSortie) }

        /**
         * Sets [Builder.idSortie] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSortie] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun idSortie(idSortie: JsonField<String>) = apply { body.idSortie(idSortie) }

        /**
         * The center of gravity of the aircraft using the landing weight and landing moment, as a
         * percentage of the mean aerodynamic chord (%MAC).
         */
        fun landingCg(landingCg: Double) = apply { body.landingCg(landingCg) }

        /**
         * Sets [Builder.landingCg] to an arbitrary JSON value.
         *
         * You should usually call [Builder.landingCg] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun landingCg(landingCg: JsonField<Double>) = apply { body.landingCg(landingCg) }

        /**
         * The sum of moments of all items making up the gross weight of the aircraft upon landing,
         * in Newton-meters.
         */
        fun landingMoment(landingMoment: Double) = apply { body.landingMoment(landingMoment) }

        /**
         * Sets [Builder.landingMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.landingMoment] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun landingMoment(landingMoment: JsonField<Double>) = apply {
            body.landingMoment(landingMoment)
        }

        /** The gross weight of the aircraft upon landing, in kilograms. */
        fun landingWeight(landingWeight: Double) = apply { body.landingWeight(landingWeight) }

        /**
         * Sets [Builder.landingWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.landingWeight] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun landingWeight(landingWeight: JsonField<Double>) = apply {
            body.landingWeight(landingWeight)
        }

        /** The leg number of the mission supporting this load plan. */
        fun legNum(legNum: Int) = apply { body.legNum(legNum) }

        /**
         * Sets [Builder.legNum] to an arbitrary JSON value.
         *
         * You should usually call [Builder.legNum] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun legNum(legNum: JsonField<Int>) = apply { body.legNum(legNum) }

        /** Name of the loadmaster or boom operator who received the cargo briefing. */
        fun loadmasterName(loadmasterName: String) = apply { body.loadmasterName(loadmasterName) }

        /**
         * Sets [Builder.loadmasterName] to an arbitrary JSON value.
         *
         * You should usually call [Builder.loadmasterName] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun loadmasterName(loadmasterName: JsonField<String>) = apply {
            body.loadmasterName(loadmasterName)
        }

        /** Rank of the loadmaster or boom operator overseeing cargo loading/unloading. */
        fun loadmasterRank(loadmasterRank: String) = apply { body.loadmasterRank(loadmasterRank) }

        /**
         * Sets [Builder.loadmasterRank] to an arbitrary JSON value.
         *
         * You should usually call [Builder.loadmasterRank] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun loadmasterRank(loadmasterRank: JsonField<String>) = apply {
            body.loadmasterRank(loadmasterRank)
        }

        /** Remarks concerning this load plan. */
        fun loadRemarks(loadRemarks: String) = apply { body.loadRemarks(loadRemarks) }

        /**
         * Sets [Builder.loadRemarks] to an arbitrary JSON value.
         *
         * You should usually call [Builder.loadRemarks] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun loadRemarks(loadRemarks: JsonField<String>) = apply { body.loadRemarks(loadRemarks) }

        /** The mission number of the mission supporting this load plan. */
        fun missionNumber(missionNumber: String) = apply { body.missionNumber(missionNumber) }

        /**
         * Sets [Builder.missionNumber] to an arbitrary JSON value.
         *
         * You should usually call [Builder.missionNumber] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun missionNumber(missionNumber: JsonField<String>) = apply {
            body.missionNumber(missionNumber)
        }

        /**
         * The operating weight of the aircraft multiplied by the distance between the reference
         * datum and the aircraft's center of gravity, in Newton-meters.
         */
        fun operatingMoment(operatingMoment: Double) = apply {
            body.operatingMoment(operatingMoment)
        }

        /**
         * Sets [Builder.operatingMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.operatingMoment] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun operatingMoment(operatingMoment: JsonField<Double>) = apply {
            body.operatingMoment(operatingMoment)
        }

        /** The basic weight of the aircraft including passengers and equipment, in kilograms. */
        fun operatingWeight(operatingWeight: Double) = apply {
            body.operatingWeight(operatingWeight)
        }

        /**
         * Sets [Builder.operatingWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.operatingWeight] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun operatingWeight(operatingWeight: JsonField<Double>) = apply {
            body.operatingWeight(operatingWeight)
        }

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         */
        fun origin(origin: String) = apply { body.origin(origin) }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun origin(origin: JsonField<String>) = apply { body.origin(origin) }

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         */
        fun origNetwork(origNetwork: String) = apply { body.origNetwork(origNetwork) }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origNetwork(origNetwork: JsonField<String>) = apply { body.origNetwork(origNetwork) }

        /** Number of pallet positions on the aircraft. */
        fun ppOnboard(ppOnboard: Int) = apply { body.ppOnboard(ppOnboard) }

        /**
         * Sets [Builder.ppOnboard] to an arbitrary JSON value.
         *
         * You should usually call [Builder.ppOnboard] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun ppOnboard(ppOnboard: JsonField<Int>) = apply { body.ppOnboard(ppOnboard) }

        /** Number of pallet positions released this leg. */
        fun ppReleased(ppReleased: Int) = apply { body.ppReleased(ppReleased) }

        /**
         * Sets [Builder.ppReleased] to an arbitrary JSON value.
         *
         * You should usually call [Builder.ppReleased] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun ppReleased(ppReleased: JsonField<Int>) = apply { body.ppReleased(ppReleased) }

        /**
         * Time the loadmaster or boom operator is scheduled to begin overseeing cargo
         * loading/unloading, in ISO 8601 UTC format with millisecond precision.
         */
        fun schedTime(schedTime: OffsetDateTime) = apply { body.schedTime(schedTime) }

        /**
         * Sets [Builder.schedTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.schedTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun schedTime(schedTime: JsonField<OffsetDateTime>) = apply { body.schedTime(schedTime) }

        /** Number of passenger seats on the aircraft. */
        fun seatsOnboard(seatsOnboard: Int) = apply { body.seatsOnboard(seatsOnboard) }

        /**
         * Sets [Builder.seatsOnboard] to an arbitrary JSON value.
         *
         * You should usually call [Builder.seatsOnboard] with a well-typed [Int] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun seatsOnboard(seatsOnboard: JsonField<Int>) = apply { body.seatsOnboard(seatsOnboard) }

        /** Number of passenger seats released this leg. */
        fun seatsReleased(seatsReleased: Int) = apply { body.seatsReleased(seatsReleased) }

        /**
         * Sets [Builder.seatsReleased] to an arbitrary JSON value.
         *
         * You should usually call [Builder.seatsReleased] with a well-typed [Int] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun seatsReleased(seatsReleased: JsonField<Int>) = apply {
            body.seatsReleased(seatsReleased)
        }

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         */
        fun sourceDl(sourceDl: String) = apply { body.sourceDl(sourceDl) }

        /**
         * Sets [Builder.sourceDl] to an arbitrary JSON value.
         *
         * You should usually call [Builder.sourceDl] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun sourceDl(sourceDl: JsonField<String>) = apply { body.sourceDl(sourceDl) }

        /** The tail number of the aircraft supporting this load plan. */
        fun tailNumber(tailNumber: String) = apply { body.tailNumber(tailNumber) }

        /**
         * Sets [Builder.tailNumber] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tailNumber] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun tailNumber(tailNumber: JsonField<String>) = apply { body.tailNumber(tailNumber) }

        /**
         * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration
         * meanings are determined by the data source.
         */
        fun tankConfig(tankConfig: String) = apply { body.tankConfig(tankConfig) }

        /**
         * Sets [Builder.tankConfig] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tankConfig] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun tankConfig(tankConfig: JsonField<String>) = apply { body.tankConfig(tankConfig) }

        /** Time the row was updated in the database, auto-populated by the system. */
        fun updatedAt(updatedAt: OffsetDateTime) = apply { body.updatedAt(updatedAt) }

        /**
         * Sets [Builder.updatedAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.updatedAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun updatedAt(updatedAt: JsonField<OffsetDateTime>) = apply { body.updatedAt(updatedAt) }

        /** Application user who updated the row in the database, auto-populated by the system. */
        fun updatedBy(updatedBy: String) = apply { body.updatedBy(updatedBy) }

        /**
         * Sets [Builder.updatedBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.updatedBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun updatedBy(updatedBy: JsonField<String>) = apply { body.updatedBy(updatedBy) }

        /**
         * Alphanumeric code that describes general cargo-related utilization and characteristics
         * for an itinerary point.
         */
        fun utilCode(utilCode: String) = apply { body.utilCode(utilCode) }

        /**
         * Sets [Builder.utilCode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.utilCode] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun utilCode(utilCode: JsonField<String>) = apply { body.utilCode(utilCode) }

        /**
         * The center of gravity of the aircraft using the zero fuel weight and zero fuel total
         * moment, as a percentage of the mean aerodynamic chord (%MAC).
         */
        fun zeroFuelCg(zeroFuelCg: Double) = apply { body.zeroFuelCg(zeroFuelCg) }

        /**
         * Sets [Builder.zeroFuelCg] to an arbitrary JSON value.
         *
         * You should usually call [Builder.zeroFuelCg] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun zeroFuelCg(zeroFuelCg: JsonField<Double>) = apply { body.zeroFuelCg(zeroFuelCg) }

        /**
         * The zero fuel weight of the aircraft multiplied by the distance between the reference
         * datum and the aircraft's center of gravity, in Newton-meters.
         */
        fun zeroFuelMoment(zeroFuelMoment: Double) = apply { body.zeroFuelMoment(zeroFuelMoment) }

        /**
         * Sets [Builder.zeroFuelMoment] to an arbitrary JSON value.
         *
         * You should usually call [Builder.zeroFuelMoment] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun zeroFuelMoment(zeroFuelMoment: JsonField<Double>) = apply {
            body.zeroFuelMoment(zeroFuelMoment)
        }

        /**
         * The operating weight of the aircraft including cargo, mail, baggage, and passengers, but
         * without usable fuel, in kilograms.
         */
        fun zeroFuelWeight(zeroFuelWeight: Double) = apply { body.zeroFuelWeight(zeroFuelWeight) }

        /**
         * Sets [Builder.zeroFuelWeight] to an arbitrary JSON value.
         *
         * You should usually call [Builder.zeroFuelWeight] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun zeroFuelWeight(zeroFuelWeight: JsonField<Double>) = apply {
            body.zeroFuelWeight(zeroFuelWeight)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAlladditional_body_properties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAlladditional_body_properties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAlladditional_body_properties(keys: Set<String>) = apply {
            body.removeAlladditional_body_properties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceadditional_headers(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeadditional_headers(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAlladditional_headers(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAlladditional_query_params(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceadditional_query_params(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAlladditional_query_params(
            additionalQueryParams: Map<String, Iterable<String>>
        ) = apply { this.additionalQueryParams.replaceAll(additionalQueryParams) }

        fun removeadditional_query_params(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAlladditional_query_params(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [AirloadPlanUpdateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .estDepTime()
         * .source()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): AirloadPlanUpdateParams =
            AirloadPlanUpdateParams(
                pathId,
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    fun _pathParam(index: Int): String =
        when (index) {
            0 -> pathId ?: ""
            else -> ""
        }

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /** Information related to how an aircraft is loaded with cargo, equipment, and passengers. */
    class Body
    private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val estDepTime: JsonField<OffsetDateTime>,
        private val source: JsonField<String>,
        private val bodyId: JsonField<String>,
        private val aclOnboard: JsonField<Double>,
        private val aclReleased: JsonField<Double>,
        private val aircraftMds: JsonField<String>,
        private val airLoadPlanHazmatActuals: JsonField<List<AirLoadPlanHazmatActual>>,
        private val airLoadPlanHr: JsonField<List<AirLoadPlanHr>>,
        private val airLoadPlanPalletDetails: JsonField<List<AirLoadPlanPalletDetail>>,
        private val airLoadPlanPaxCargo: JsonField<List<AirLoadPlanPaxCargo>>,
        private val airLoadPlanUlnActuals: JsonField<List<AirLoadPlanUlnActual>>,
        private val arrAirfield: JsonField<String>,
        private val arrIcao: JsonField<String>,
        private val availableTime: JsonField<OffsetDateTime>,
        private val basicMoment: JsonField<Double>,
        private val basicWeight: JsonField<Double>,
        private val briefTime: JsonField<OffsetDateTime>,
        private val callSign: JsonField<String>,
        private val cargoBayFsMax: JsonField<Double>,
        private val cargoBayFsMin: JsonField<Double>,
        private val cargoBayWidth: JsonField<Double>,
        private val cargoConfig: JsonField<String>,
        private val cargoMoment: JsonField<Double>,
        private val cargoVolume: JsonField<Double>,
        private val cargoWeight: JsonField<Double>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val crewSize: JsonField<Int>,
        private val depAirfield: JsonField<String>,
        private val depIcao: JsonField<String>,
        private val equipConfig: JsonField<String>,
        private val estArrTime: JsonField<OffsetDateTime>,
        private val estLandingFuelMoment: JsonField<Double>,
        private val estLandingFuelWeight: JsonField<Double>,
        private val externalId: JsonField<String>,
        private val fuelMoment: JsonField<Double>,
        private val fuelWeight: JsonField<Double>,
        private val grossCg: JsonField<Double>,
        private val grossMoment: JsonField<Double>,
        private val grossWeight: JsonField<Double>,
        private val idMission: JsonField<String>,
        private val idSortie: JsonField<String>,
        private val landingCg: JsonField<Double>,
        private val landingMoment: JsonField<Double>,
        private val landingWeight: JsonField<Double>,
        private val legNum: JsonField<Int>,
        private val loadmasterName: JsonField<String>,
        private val loadmasterRank: JsonField<String>,
        private val loadRemarks: JsonField<String>,
        private val missionNumber: JsonField<String>,
        private val operatingMoment: JsonField<Double>,
        private val operatingWeight: JsonField<Double>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val ppOnboard: JsonField<Int>,
        private val ppReleased: JsonField<Int>,
        private val schedTime: JsonField<OffsetDateTime>,
        private val seatsOnboard: JsonField<Int>,
        private val seatsReleased: JsonField<Int>,
        private val sourceDl: JsonField<String>,
        private val tailNumber: JsonField<String>,
        private val tankConfig: JsonField<String>,
        private val updatedAt: JsonField<OffsetDateTime>,
        private val updatedBy: JsonField<String>,
        private val utilCode: JsonField<String>,
        private val zeroFuelCg: JsonField<Double>,
        private val zeroFuelMoment: JsonField<Double>,
        private val zeroFuelWeight: JsonField<Double>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("estDepTime")
            @ExcludeMissing
            estDepTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing bodyId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("aclOnboard")
            @ExcludeMissing
            aclOnboard: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("aclReleased")
            @ExcludeMissing
            aclReleased: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("aircraftMDS")
            @ExcludeMissing
            aircraftMds: JsonField<String> = JsonMissing.of(),
            @JsonProperty("airLoadPlanHazmatActuals")
            @ExcludeMissing
            airLoadPlanHazmatActuals: JsonField<List<AirLoadPlanHazmatActual>> = JsonMissing.of(),
            @JsonProperty("airLoadPlanHR")
            @ExcludeMissing
            airLoadPlanHr: JsonField<List<AirLoadPlanHr>> = JsonMissing.of(),
            @JsonProperty("airLoadPlanPalletDetails")
            @ExcludeMissing
            airLoadPlanPalletDetails: JsonField<List<AirLoadPlanPalletDetail>> = JsonMissing.of(),
            @JsonProperty("airLoadPlanPaxCargo")
            @ExcludeMissing
            airLoadPlanPaxCargo: JsonField<List<AirLoadPlanPaxCargo>> = JsonMissing.of(),
            @JsonProperty("airLoadPlanULNActuals")
            @ExcludeMissing
            airLoadPlanUlnActuals: JsonField<List<AirLoadPlanUlnActual>> = JsonMissing.of(),
            @JsonProperty("arrAirfield")
            @ExcludeMissing
            arrAirfield: JsonField<String> = JsonMissing.of(),
            @JsonProperty("arrICAO") @ExcludeMissing arrIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("availableTime")
            @ExcludeMissing
            availableTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("basicMoment")
            @ExcludeMissing
            basicMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("basicWeight")
            @ExcludeMissing
            basicWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("briefTime")
            @ExcludeMissing
            briefTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("callSign")
            @ExcludeMissing
            callSign: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cargoBayFSMax")
            @ExcludeMissing
            cargoBayFsMax: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("cargoBayFSMin")
            @ExcludeMissing
            cargoBayFsMin: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("cargoBayWidth")
            @ExcludeMissing
            cargoBayWidth: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("cargoConfig")
            @ExcludeMissing
            cargoConfig: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cargoMoment")
            @ExcludeMissing
            cargoMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("cargoVolume")
            @ExcludeMissing
            cargoVolume: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("cargoWeight")
            @ExcludeMissing
            cargoWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("crewSize") @ExcludeMissing crewSize: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("depAirfield")
            @ExcludeMissing
            depAirfield: JsonField<String> = JsonMissing.of(),
            @JsonProperty("depICAO") @ExcludeMissing depIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("equipConfig")
            @ExcludeMissing
            equipConfig: JsonField<String> = JsonMissing.of(),
            @JsonProperty("estArrTime")
            @ExcludeMissing
            estArrTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("estLandingFuelMoment")
            @ExcludeMissing
            estLandingFuelMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("estLandingFuelWeight")
            @ExcludeMissing
            estLandingFuelWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("externalId")
            @ExcludeMissing
            externalId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fuelMoment")
            @ExcludeMissing
            fuelMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("fuelWeight")
            @ExcludeMissing
            fuelWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("grossCG") @ExcludeMissing grossCg: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("grossMoment")
            @ExcludeMissing
            grossMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("grossWeight")
            @ExcludeMissing
            grossWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("idMission")
            @ExcludeMissing
            idMission: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idSortie")
            @ExcludeMissing
            idSortie: JsonField<String> = JsonMissing.of(),
            @JsonProperty("landingCG")
            @ExcludeMissing
            landingCg: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("landingMoment")
            @ExcludeMissing
            landingMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("landingWeight")
            @ExcludeMissing
            landingWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("legNum") @ExcludeMissing legNum: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("loadmasterName")
            @ExcludeMissing
            loadmasterName: JsonField<String> = JsonMissing.of(),
            @JsonProperty("loadmasterRank")
            @ExcludeMissing
            loadmasterRank: JsonField<String> = JsonMissing.of(),
            @JsonProperty("loadRemarks")
            @ExcludeMissing
            loadRemarks: JsonField<String> = JsonMissing.of(),
            @JsonProperty("missionNumber")
            @ExcludeMissing
            missionNumber: JsonField<String> = JsonMissing.of(),
            @JsonProperty("operatingMoment")
            @ExcludeMissing
            operatingMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("operatingWeight")
            @ExcludeMissing
            operatingWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork")
            @ExcludeMissing
            origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppOnboard") @ExcludeMissing ppOnboard: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("ppReleased")
            @ExcludeMissing
            ppReleased: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("schedTime")
            @ExcludeMissing
            schedTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("seatsOnboard")
            @ExcludeMissing
            seatsOnboard: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("seatsReleased")
            @ExcludeMissing
            seatsReleased: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("sourceDL")
            @ExcludeMissing
            sourceDl: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tailNumber")
            @ExcludeMissing
            tailNumber: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tankConfig")
            @ExcludeMissing
            tankConfig: JsonField<String> = JsonMissing.of(),
            @JsonProperty("updatedAt")
            @ExcludeMissing
            updatedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("updatedBy")
            @ExcludeMissing
            updatedBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("utilCode")
            @ExcludeMissing
            utilCode: JsonField<String> = JsonMissing.of(),
            @JsonProperty("zeroFuelCG")
            @ExcludeMissing
            zeroFuelCg: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zeroFuelMoment")
            @ExcludeMissing
            zeroFuelMoment: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zeroFuelWeight")
            @ExcludeMissing
            zeroFuelWeight: JsonField<Double> = JsonMissing.of(),
        ) : this(
            classificationMarking,
            dataMode,
            estDepTime,
            source,
            bodyId,
            aclOnboard,
            aclReleased,
            aircraftMds,
            airLoadPlanHazmatActuals,
            airLoadPlanHr,
            airLoadPlanPalletDetails,
            airLoadPlanPaxCargo,
            airLoadPlanUlnActuals,
            arrAirfield,
            arrIcao,
            availableTime,
            basicMoment,
            basicWeight,
            briefTime,
            callSign,
            cargoBayFsMax,
            cargoBayFsMin,
            cargoBayWidth,
            cargoConfig,
            cargoMoment,
            cargoVolume,
            cargoWeight,
            createdAt,
            createdBy,
            crewSize,
            depAirfield,
            depIcao,
            equipConfig,
            estArrTime,
            estLandingFuelMoment,
            estLandingFuelWeight,
            externalId,
            fuelMoment,
            fuelWeight,
            grossCg,
            grossMoment,
            grossWeight,
            idMission,
            idSortie,
            landingCg,
            landingMoment,
            landingWeight,
            legNum,
            loadmasterName,
            loadmasterRank,
            loadRemarks,
            missionNumber,
            operatingMoment,
            operatingWeight,
            origin,
            origNetwork,
            ppOnboard,
            ppReleased,
            schedTime,
            seatsOnboard,
            seatsReleased,
            sourceDl,
            tailNumber,
            tankConfig,
            updatedAt,
            updatedBy,
            utilCode,
            zeroFuelCg,
            zeroFuelMoment,
            zeroFuelWeight,
            mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * The current estimated time that the aircraft is planned to depart, in ISO 8601 UTC format
         * with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun estDepTime(): OffsetDateTime = estDepTime.getRequired("estDepTime")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bodyId(): Optional<String> = bodyId.getOptional("id")

        /**
         * Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of passengers,
         * baggage, and cargo that can be safely transported in the aircraft cabin, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun aclOnboard(): Optional<Double> = aclOnboard.getOptional("aclOnboard")

        /**
         * Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage, and
         * cargo released from the aircraft cabin, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun aclReleased(): Optional<Double> = aclReleased.getOptional("aclReleased")

        /**
         * The Model Design Series designation of the aircraft supporting this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun aircraftMds(): Optional<String> = aircraftMds.getOptional("aircraftMDS")

        /**
         * Collection of hazmat actuals associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airLoadPlanHazmatActuals(): Optional<List<AirLoadPlanHazmatActual>> =
            airLoadPlanHazmatActuals.getOptional("airLoadPlanHazmatActuals")

        /**
         * Collection of human remains transport information associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airLoadPlanHr(): Optional<List<AirLoadPlanHr>> =
            airLoadPlanHr.getOptional("airLoadPlanHR")

        /**
         * Collection of cargo information located at the pallet positions associated with this load
         * plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airLoadPlanPalletDetails(): Optional<List<AirLoadPlanPalletDetail>> =
            airLoadPlanPalletDetails.getOptional("airLoadPlanPalletDetails")

        /**
         * Collection of passenger and cargo details associated with this load plan for this leg of
         * the mission.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airLoadPlanPaxCargo(): Optional<List<AirLoadPlanPaxCargo>> =
            airLoadPlanPaxCargo.getOptional("airLoadPlanPaxCargo")

        /**
         * Collection of unit line number actuals associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun airLoadPlanUlnActuals(): Optional<List<AirLoadPlanUlnActual>> =
            airLoadPlanUlnActuals.getOptional("airLoadPlanULNActuals")

        /**
         * Optional identifier of arrival airfield with no International Civil Organization (ICAO)
         * code.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun arrAirfield(): Optional<String> = arrAirfield.getOptional("arrAirfield")

        /**
         * The arrival International Civil Organization (ICAO) code of the landing airfield.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun arrIcao(): Optional<String> = arrIcao.getOptional("arrICAO")

        /**
         * Time the loadmaster or boom operator is available for cargo loading/unloading, in ISO
         * 8601 UTC format with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun availableTime(): Optional<OffsetDateTime> = availableTime.getOptional("availableTime")

        /**
         * The basic weight of the aircraft multiplied by the distance between the reference datum
         * and the aircraft's center of gravity, in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun basicMoment(): Optional<Double> = basicMoment.getOptional("basicMoment")

        /**
         * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in
         * kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun basicWeight(): Optional<Double> = basicWeight.getOptional("basicWeight")

        /**
         * Time the cargo briefing was given to the loadmaster or boom operator, in ISO 8601 UTC
         * format with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun briefTime(): Optional<OffsetDateTime> = briefTime.getOptional("briefTime")

        /**
         * The call sign of the mission supporting this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun callSign(): Optional<String> = callSign.getOptional("callSign")

        /**
         * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the
         * reference datum, in meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoBayFsMax(): Optional<Double> = cargoBayFsMax.getOptional("cargoBayFSMax")

        /**
         * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the
         * reference datum, in meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoBayFsMin(): Optional<Double> = cargoBayFsMin.getOptional("cargoBayFSMin")

        /**
         * Width of the cargo bay, in meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoBayWidth(): Optional<Double> = cargoBayWidth.getOptional("cargoBayWidth")

        /**
         * The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
         * etc.). Configuration meanings are determined by the data source.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoConfig(): Optional<String> = cargoConfig.getOptional("cargoConfig")

        /**
         * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each
         * individual cargo moment is the weight of the cargo multiplied by the distance between the
         * reference datum and the cargo's center of gravity.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoMoment(): Optional<Double> = cargoMoment.getOptional("cargoMoment")

        /**
         * Volume of cargo space in the aircraft, in cubic meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoVolume(): Optional<Double> = cargoVolume.getOptional("cargoVolume")

        /**
         * The weight of the cargo on board the aircraft, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cargoWeight(): Optional<Double> = cargoWeight.getOptional("cargoWeight")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * The number of crew members on the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun crewSize(): Optional<Int> = crewSize.getOptional("crewSize")

        /**
         * Optional identifier of departure airfield with no International Civil Organization (ICAO)
         * code.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun depAirfield(): Optional<String> = depAirfield.getOptional("depAirfield")

        /**
         * The departure International Civil Organization (ICAO) code of the departure airfield.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun depIcao(): Optional<String> = depIcao.getOptional("depICAO")

        /**
         * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat,
         * etc.). Configuration meanings are determined by the data source.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun equipConfig(): Optional<String> = equipConfig.getOptional("equipConfig")

        /**
         * The current estimated time that the aircraft is planned to arrive, in ISO 8601 UTC format
         * with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun estArrTime(): Optional<OffsetDateTime> = estArrTime.getOptional("estArrTime")

        /**
         * The estimated weight of usable fuel upon landing multiplied by the distance between the
         * reference datum and the fuel's center of gravity, in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun estLandingFuelMoment(): Optional<Double> =
            estLandingFuelMoment.getOptional("estLandingFuelMoment")

        /**
         * The estimated weight of usable fuel upon landing, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun estLandingFuelWeight(): Optional<Double> =
            estLandingFuelWeight.getOptional("estLandingFuelWeight")

        /**
         * Optional ID from external systems. This field has no meaning within UDL and is provided
         * as a convenience for systems that require tracking of an internal system generated ID.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun externalId(): Optional<String> = externalId.getOptional("externalId")

        /**
         * The fuel weight on board the aircraft multiplied by the distance between the reference
         * datum and the fuel's center of gravity, in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fuelMoment(): Optional<Double> = fuelMoment.getOptional("fuelMoment")

        /**
         * The weight of usable fuel on board the aircraft, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fuelWeight(): Optional<Double> = fuelWeight.getOptional("fuelWeight")

        /**
         * The center of gravity of the aircraft using the gross weight and gross moment, as a
         * percentage of the mean aerodynamic chord (%MAC).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun grossCg(): Optional<Double> = grossCg.getOptional("grossCG")

        /**
         * The sum of moments of all items making up the gross weight of the aircraft, in
         * Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun grossMoment(): Optional<Double> = grossMoment.getOptional("grossMoment")

        /**
         * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and
         * usable fuel, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun grossWeight(): Optional<Double> = grossWeight.getOptional("grossWeight")

        /**
         * The UDL ID of the mission this record is associated with.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idMission(): Optional<String> = idMission.getOptional("idMission")

        /**
         * The UDL ID of the aircraft sortie this record is associated with.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idSortie(): Optional<String> = idSortie.getOptional("idSortie")

        /**
         * The center of gravity of the aircraft using the landing weight and landing moment, as a
         * percentage of the mean aerodynamic chord (%MAC).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun landingCg(): Optional<Double> = landingCg.getOptional("landingCG")

        /**
         * The sum of moments of all items making up the gross weight of the aircraft upon landing,
         * in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun landingMoment(): Optional<Double> = landingMoment.getOptional("landingMoment")

        /**
         * The gross weight of the aircraft upon landing, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun landingWeight(): Optional<Double> = landingWeight.getOptional("landingWeight")

        /**
         * The leg number of the mission supporting this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun legNum(): Optional<Int> = legNum.getOptional("legNum")

        /**
         * Name of the loadmaster or boom operator who received the cargo briefing.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun loadmasterName(): Optional<String> = loadmasterName.getOptional("loadmasterName")

        /**
         * Rank of the loadmaster or boom operator overseeing cargo loading/unloading.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun loadmasterRank(): Optional<String> = loadmasterRank.getOptional("loadmasterRank")

        /**
         * Remarks concerning this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun loadRemarks(): Optional<String> = loadRemarks.getOptional("loadRemarks")

        /**
         * The mission number of the mission supporting this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun missionNumber(): Optional<String> = missionNumber.getOptional("missionNumber")

        /**
         * The operating weight of the aircraft multiplied by the distance between the reference
         * datum and the aircraft's center of gravity, in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun operatingMoment(): Optional<Double> = operatingMoment.getOptional("operatingMoment")

        /**
         * The basic weight of the aircraft including passengers and equipment, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun operatingWeight(): Optional<Double> = operatingWeight.getOptional("operatingWeight")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * Number of pallet positions on the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppOnboard(): Optional<Int> = ppOnboard.getOptional("ppOnboard")

        /**
         * Number of pallet positions released this leg.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppReleased(): Optional<Int> = ppReleased.getOptional("ppReleased")

        /**
         * Time the loadmaster or boom operator is scheduled to begin overseeing cargo
         * loading/unloading, in ISO 8601 UTC format with millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun schedTime(): Optional<OffsetDateTime> = schedTime.getOptional("schedTime")

        /**
         * Number of passenger seats on the aircraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun seatsOnboard(): Optional<Int> = seatsOnboard.getOptional("seatsOnboard")

        /**
         * Number of passenger seats released this leg.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun seatsReleased(): Optional<Int> = seatsReleased.getOptional("seatsReleased")

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun sourceDl(): Optional<String> = sourceDl.getOptional("sourceDL")

        /**
         * The tail number of the aircraft supporting this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tailNumber(): Optional<String> = tailNumber.getOptional("tailNumber")

        /**
         * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration
         * meanings are determined by the data source.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tankConfig(): Optional<String> = tankConfig.getOptional("tankConfig")

        /**
         * Time the row was updated in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun updatedAt(): Optional<OffsetDateTime> = updatedAt.getOptional("updatedAt")

        /**
         * Application user who updated the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun updatedBy(): Optional<String> = updatedBy.getOptional("updatedBy")

        /**
         * Alphanumeric code that describes general cargo-related utilization and characteristics
         * for an itinerary point.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun utilCode(): Optional<String> = utilCode.getOptional("utilCode")

        /**
         * The center of gravity of the aircraft using the zero fuel weight and zero fuel total
         * moment, as a percentage of the mean aerodynamic chord (%MAC).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun zeroFuelCg(): Optional<Double> = zeroFuelCg.getOptional("zeroFuelCG")

        /**
         * The zero fuel weight of the aircraft multiplied by the distance between the reference
         * datum and the aircraft's center of gravity, in Newton-meters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun zeroFuelMoment(): Optional<Double> = zeroFuelMoment.getOptional("zeroFuelMoment")

        /**
         * The operating weight of the aircraft including cargo, mail, baggage, and passengers, but
         * without usable fuel, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun zeroFuelWeight(): Optional<Double> = zeroFuelWeight.getOptional("zeroFuelWeight")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [estDepTime].
         *
         * Unlike [estDepTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("estDepTime")
        @ExcludeMissing
        fun _estDepTime(): JsonField<OffsetDateTime> = estDepTime

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [bodyId].
         *
         * Unlike [bodyId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _bodyId(): JsonField<String> = bodyId

        /**
         * Returns the raw JSON value of [aclOnboard].
         *
         * Unlike [aclOnboard], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("aclOnboard")
        @ExcludeMissing
        fun _aclOnboard(): JsonField<Double> = aclOnboard

        /**
         * Returns the raw JSON value of [aclReleased].
         *
         * Unlike [aclReleased], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("aclReleased")
        @ExcludeMissing
        fun _aclReleased(): JsonField<Double> = aclReleased

        /**
         * Returns the raw JSON value of [aircraftMds].
         *
         * Unlike [aircraftMds], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("aircraftMDS")
        @ExcludeMissing
        fun _aircraftMds(): JsonField<String> = aircraftMds

        /**
         * Returns the raw JSON value of [airLoadPlanHazmatActuals].
         *
         * Unlike [airLoadPlanHazmatActuals], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("airLoadPlanHazmatActuals")
        @ExcludeMissing
        fun _airLoadPlanHazmatActuals(): JsonField<List<AirLoadPlanHazmatActual>> =
            airLoadPlanHazmatActuals

        /**
         * Returns the raw JSON value of [airLoadPlanHr].
         *
         * Unlike [airLoadPlanHr], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("airLoadPlanHR")
        @ExcludeMissing
        fun _airLoadPlanHr(): JsonField<List<AirLoadPlanHr>> = airLoadPlanHr

        /**
         * Returns the raw JSON value of [airLoadPlanPalletDetails].
         *
         * Unlike [airLoadPlanPalletDetails], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("airLoadPlanPalletDetails")
        @ExcludeMissing
        fun _airLoadPlanPalletDetails(): JsonField<List<AirLoadPlanPalletDetail>> =
            airLoadPlanPalletDetails

        /**
         * Returns the raw JSON value of [airLoadPlanPaxCargo].
         *
         * Unlike [airLoadPlanPaxCargo], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("airLoadPlanPaxCargo")
        @ExcludeMissing
        fun _airLoadPlanPaxCargo(): JsonField<List<AirLoadPlanPaxCargo>> = airLoadPlanPaxCargo

        /**
         * Returns the raw JSON value of [airLoadPlanUlnActuals].
         *
         * Unlike [airLoadPlanUlnActuals], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("airLoadPlanULNActuals")
        @ExcludeMissing
        fun _airLoadPlanUlnActuals(): JsonField<List<AirLoadPlanUlnActual>> = airLoadPlanUlnActuals

        /**
         * Returns the raw JSON value of [arrAirfield].
         *
         * Unlike [arrAirfield], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("arrAirfield")
        @ExcludeMissing
        fun _arrAirfield(): JsonField<String> = arrAirfield

        /**
         * Returns the raw JSON value of [arrIcao].
         *
         * Unlike [arrIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("arrICAO") @ExcludeMissing fun _arrIcao(): JsonField<String> = arrIcao

        /**
         * Returns the raw JSON value of [availableTime].
         *
         * Unlike [availableTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("availableTime")
        @ExcludeMissing
        fun _availableTime(): JsonField<OffsetDateTime> = availableTime

        /**
         * Returns the raw JSON value of [basicMoment].
         *
         * Unlike [basicMoment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("basicMoment")
        @ExcludeMissing
        fun _basicMoment(): JsonField<Double> = basicMoment

        /**
         * Returns the raw JSON value of [basicWeight].
         *
         * Unlike [basicWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("basicWeight")
        @ExcludeMissing
        fun _basicWeight(): JsonField<Double> = basicWeight

        /**
         * Returns the raw JSON value of [briefTime].
         *
         * Unlike [briefTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("briefTime")
        @ExcludeMissing
        fun _briefTime(): JsonField<OffsetDateTime> = briefTime

        /**
         * Returns the raw JSON value of [callSign].
         *
         * Unlike [callSign], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("callSign") @ExcludeMissing fun _callSign(): JsonField<String> = callSign

        /**
         * Returns the raw JSON value of [cargoBayFsMax].
         *
         * Unlike [cargoBayFsMax], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("cargoBayFSMax")
        @ExcludeMissing
        fun _cargoBayFsMax(): JsonField<Double> = cargoBayFsMax

        /**
         * Returns the raw JSON value of [cargoBayFsMin].
         *
         * Unlike [cargoBayFsMin], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("cargoBayFSMin")
        @ExcludeMissing
        fun _cargoBayFsMin(): JsonField<Double> = cargoBayFsMin

        /**
         * Returns the raw JSON value of [cargoBayWidth].
         *
         * Unlike [cargoBayWidth], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("cargoBayWidth")
        @ExcludeMissing
        fun _cargoBayWidth(): JsonField<Double> = cargoBayWidth

        /**
         * Returns the raw JSON value of [cargoConfig].
         *
         * Unlike [cargoConfig], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cargoConfig")
        @ExcludeMissing
        fun _cargoConfig(): JsonField<String> = cargoConfig

        /**
         * Returns the raw JSON value of [cargoMoment].
         *
         * Unlike [cargoMoment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cargoMoment")
        @ExcludeMissing
        fun _cargoMoment(): JsonField<Double> = cargoMoment

        /**
         * Returns the raw JSON value of [cargoVolume].
         *
         * Unlike [cargoVolume], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cargoVolume")
        @ExcludeMissing
        fun _cargoVolume(): JsonField<Double> = cargoVolume

        /**
         * Returns the raw JSON value of [cargoWeight].
         *
         * Unlike [cargoWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cargoWeight")
        @ExcludeMissing
        fun _cargoWeight(): JsonField<Double> = cargoWeight

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [crewSize].
         *
         * Unlike [crewSize], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("crewSize") @ExcludeMissing fun _crewSize(): JsonField<Int> = crewSize

        /**
         * Returns the raw JSON value of [depAirfield].
         *
         * Unlike [depAirfield], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("depAirfield")
        @ExcludeMissing
        fun _depAirfield(): JsonField<String> = depAirfield

        /**
         * Returns the raw JSON value of [depIcao].
         *
         * Unlike [depIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("depICAO") @ExcludeMissing fun _depIcao(): JsonField<String> = depIcao

        /**
         * Returns the raw JSON value of [equipConfig].
         *
         * Unlike [equipConfig], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("equipConfig")
        @ExcludeMissing
        fun _equipConfig(): JsonField<String> = equipConfig

        /**
         * Returns the raw JSON value of [estArrTime].
         *
         * Unlike [estArrTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("estArrTime")
        @ExcludeMissing
        fun _estArrTime(): JsonField<OffsetDateTime> = estArrTime

        /**
         * Returns the raw JSON value of [estLandingFuelMoment].
         *
         * Unlike [estLandingFuelMoment], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("estLandingFuelMoment")
        @ExcludeMissing
        fun _estLandingFuelMoment(): JsonField<Double> = estLandingFuelMoment

        /**
         * Returns the raw JSON value of [estLandingFuelWeight].
         *
         * Unlike [estLandingFuelWeight], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("estLandingFuelWeight")
        @ExcludeMissing
        fun _estLandingFuelWeight(): JsonField<Double> = estLandingFuelWeight

        /**
         * Returns the raw JSON value of [externalId].
         *
         * Unlike [externalId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("externalId")
        @ExcludeMissing
        fun _externalId(): JsonField<String> = externalId

        /**
         * Returns the raw JSON value of [fuelMoment].
         *
         * Unlike [fuelMoment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fuelMoment")
        @ExcludeMissing
        fun _fuelMoment(): JsonField<Double> = fuelMoment

        /**
         * Returns the raw JSON value of [fuelWeight].
         *
         * Unlike [fuelWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fuelWeight")
        @ExcludeMissing
        fun _fuelWeight(): JsonField<Double> = fuelWeight

        /**
         * Returns the raw JSON value of [grossCg].
         *
         * Unlike [grossCg], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("grossCG") @ExcludeMissing fun _grossCg(): JsonField<Double> = grossCg

        /**
         * Returns the raw JSON value of [grossMoment].
         *
         * Unlike [grossMoment], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("grossMoment")
        @ExcludeMissing
        fun _grossMoment(): JsonField<Double> = grossMoment

        /**
         * Returns the raw JSON value of [grossWeight].
         *
         * Unlike [grossWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("grossWeight")
        @ExcludeMissing
        fun _grossWeight(): JsonField<Double> = grossWeight

        /**
         * Returns the raw JSON value of [idMission].
         *
         * Unlike [idMission], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idMission") @ExcludeMissing fun _idMission(): JsonField<String> = idMission

        /**
         * Returns the raw JSON value of [idSortie].
         *
         * Unlike [idSortie], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idSortie") @ExcludeMissing fun _idSortie(): JsonField<String> = idSortie

        /**
         * Returns the raw JSON value of [landingCg].
         *
         * Unlike [landingCg], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("landingCG") @ExcludeMissing fun _landingCg(): JsonField<Double> = landingCg

        /**
         * Returns the raw JSON value of [landingMoment].
         *
         * Unlike [landingMoment], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("landingMoment")
        @ExcludeMissing
        fun _landingMoment(): JsonField<Double> = landingMoment

        /**
         * Returns the raw JSON value of [landingWeight].
         *
         * Unlike [landingWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("landingWeight")
        @ExcludeMissing
        fun _landingWeight(): JsonField<Double> = landingWeight

        /**
         * Returns the raw JSON value of [legNum].
         *
         * Unlike [legNum], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("legNum") @ExcludeMissing fun _legNum(): JsonField<Int> = legNum

        /**
         * Returns the raw JSON value of [loadmasterName].
         *
         * Unlike [loadmasterName], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("loadmasterName")
        @ExcludeMissing
        fun _loadmasterName(): JsonField<String> = loadmasterName

        /**
         * Returns the raw JSON value of [loadmasterRank].
         *
         * Unlike [loadmasterRank], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("loadmasterRank")
        @ExcludeMissing
        fun _loadmasterRank(): JsonField<String> = loadmasterRank

        /**
         * Returns the raw JSON value of [loadRemarks].
         *
         * Unlike [loadRemarks], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("loadRemarks")
        @ExcludeMissing
        fun _loadRemarks(): JsonField<String> = loadRemarks

        /**
         * Returns the raw JSON value of [missionNumber].
         *
         * Unlike [missionNumber], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("missionNumber")
        @ExcludeMissing
        fun _missionNumber(): JsonField<String> = missionNumber

        /**
         * Returns the raw JSON value of [operatingMoment].
         *
         * Unlike [operatingMoment], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("operatingMoment")
        @ExcludeMissing
        fun _operatingMoment(): JsonField<Double> = operatingMoment

        /**
         * Returns the raw JSON value of [operatingWeight].
         *
         * Unlike [operatingWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("operatingWeight")
        @ExcludeMissing
        fun _operatingWeight(): JsonField<Double> = operatingWeight

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [ppOnboard].
         *
         * Unlike [ppOnboard], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppOnboard") @ExcludeMissing fun _ppOnboard(): JsonField<Int> = ppOnboard

        /**
         * Returns the raw JSON value of [ppReleased].
         *
         * Unlike [ppReleased], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppReleased") @ExcludeMissing fun _ppReleased(): JsonField<Int> = ppReleased

        /**
         * Returns the raw JSON value of [schedTime].
         *
         * Unlike [schedTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("schedTime")
        @ExcludeMissing
        fun _schedTime(): JsonField<OffsetDateTime> = schedTime

        /**
         * Returns the raw JSON value of [seatsOnboard].
         *
         * Unlike [seatsOnboard], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("seatsOnboard")
        @ExcludeMissing
        fun _seatsOnboard(): JsonField<Int> = seatsOnboard

        /**
         * Returns the raw JSON value of [seatsReleased].
         *
         * Unlike [seatsReleased], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("seatsReleased")
        @ExcludeMissing
        fun _seatsReleased(): JsonField<Int> = seatsReleased

        /**
         * Returns the raw JSON value of [sourceDl].
         *
         * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("sourceDL") @ExcludeMissing fun _sourceDl(): JsonField<String> = sourceDl

        /**
         * Returns the raw JSON value of [tailNumber].
         *
         * Unlike [tailNumber], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tailNumber")
        @ExcludeMissing
        fun _tailNumber(): JsonField<String> = tailNumber

        /**
         * Returns the raw JSON value of [tankConfig].
         *
         * Unlike [tankConfig], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tankConfig")
        @ExcludeMissing
        fun _tankConfig(): JsonField<String> = tankConfig

        /**
         * Returns the raw JSON value of [updatedAt].
         *
         * Unlike [updatedAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("updatedAt")
        @ExcludeMissing
        fun _updatedAt(): JsonField<OffsetDateTime> = updatedAt

        /**
         * Returns the raw JSON value of [updatedBy].
         *
         * Unlike [updatedBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("updatedBy") @ExcludeMissing fun _updatedBy(): JsonField<String> = updatedBy

        /**
         * Returns the raw JSON value of [utilCode].
         *
         * Unlike [utilCode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("utilCode") @ExcludeMissing fun _utilCode(): JsonField<String> = utilCode

        /**
         * Returns the raw JSON value of [zeroFuelCg].
         *
         * Unlike [zeroFuelCg], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("zeroFuelCG")
        @ExcludeMissing
        fun _zeroFuelCg(): JsonField<Double> = zeroFuelCg

        /**
         * Returns the raw JSON value of [zeroFuelMoment].
         *
         * Unlike [zeroFuelMoment], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("zeroFuelMoment")
        @ExcludeMissing
        fun _zeroFuelMoment(): JsonField<Double> = zeroFuelMoment

        /**
         * Returns the raw JSON value of [zeroFuelWeight].
         *
         * Unlike [zeroFuelWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("zeroFuelWeight")
        @ExcludeMissing
        fun _zeroFuelWeight(): JsonField<Double> = zeroFuelWeight

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .estDepTime()
             * .source()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var estDepTime: JsonField<OffsetDateTime>? = null
            private var source: JsonField<String>? = null
            private var bodyId: JsonField<String> = JsonMissing.of()
            private var aclOnboard: JsonField<Double> = JsonMissing.of()
            private var aclReleased: JsonField<Double> = JsonMissing.of()
            private var aircraftMds: JsonField<String> = JsonMissing.of()
            private var airLoadPlanHazmatActuals: JsonField<MutableList<AirLoadPlanHazmatActual>>? =
                null
            private var airLoadPlanHr: JsonField<MutableList<AirLoadPlanHr>>? = null
            private var airLoadPlanPalletDetails: JsonField<MutableList<AirLoadPlanPalletDetail>>? =
                null
            private var airLoadPlanPaxCargo: JsonField<MutableList<AirLoadPlanPaxCargo>>? = null
            private var airLoadPlanUlnActuals: JsonField<MutableList<AirLoadPlanUlnActual>>? = null
            private var arrAirfield: JsonField<String> = JsonMissing.of()
            private var arrIcao: JsonField<String> = JsonMissing.of()
            private var availableTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var basicMoment: JsonField<Double> = JsonMissing.of()
            private var basicWeight: JsonField<Double> = JsonMissing.of()
            private var briefTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var callSign: JsonField<String> = JsonMissing.of()
            private var cargoBayFsMax: JsonField<Double> = JsonMissing.of()
            private var cargoBayFsMin: JsonField<Double> = JsonMissing.of()
            private var cargoBayWidth: JsonField<Double> = JsonMissing.of()
            private var cargoConfig: JsonField<String> = JsonMissing.of()
            private var cargoMoment: JsonField<Double> = JsonMissing.of()
            private var cargoVolume: JsonField<Double> = JsonMissing.of()
            private var cargoWeight: JsonField<Double> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var crewSize: JsonField<Int> = JsonMissing.of()
            private var depAirfield: JsonField<String> = JsonMissing.of()
            private var depIcao: JsonField<String> = JsonMissing.of()
            private var equipConfig: JsonField<String> = JsonMissing.of()
            private var estArrTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var estLandingFuelMoment: JsonField<Double> = JsonMissing.of()
            private var estLandingFuelWeight: JsonField<Double> = JsonMissing.of()
            private var externalId: JsonField<String> = JsonMissing.of()
            private var fuelMoment: JsonField<Double> = JsonMissing.of()
            private var fuelWeight: JsonField<Double> = JsonMissing.of()
            private var grossCg: JsonField<Double> = JsonMissing.of()
            private var grossMoment: JsonField<Double> = JsonMissing.of()
            private var grossWeight: JsonField<Double> = JsonMissing.of()
            private var idMission: JsonField<String> = JsonMissing.of()
            private var idSortie: JsonField<String> = JsonMissing.of()
            private var landingCg: JsonField<Double> = JsonMissing.of()
            private var landingMoment: JsonField<Double> = JsonMissing.of()
            private var landingWeight: JsonField<Double> = JsonMissing.of()
            private var legNum: JsonField<Int> = JsonMissing.of()
            private var loadmasterName: JsonField<String> = JsonMissing.of()
            private var loadmasterRank: JsonField<String> = JsonMissing.of()
            private var loadRemarks: JsonField<String> = JsonMissing.of()
            private var missionNumber: JsonField<String> = JsonMissing.of()
            private var operatingMoment: JsonField<Double> = JsonMissing.of()
            private var operatingWeight: JsonField<Double> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var ppOnboard: JsonField<Int> = JsonMissing.of()
            private var ppReleased: JsonField<Int> = JsonMissing.of()
            private var schedTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var seatsOnboard: JsonField<Int> = JsonMissing.of()
            private var seatsReleased: JsonField<Int> = JsonMissing.of()
            private var sourceDl: JsonField<String> = JsonMissing.of()
            private var tailNumber: JsonField<String> = JsonMissing.of()
            private var tankConfig: JsonField<String> = JsonMissing.of()
            private var updatedAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var updatedBy: JsonField<String> = JsonMissing.of()
            private var utilCode: JsonField<String> = JsonMissing.of()
            private var zeroFuelCg: JsonField<Double> = JsonMissing.of()
            private var zeroFuelMoment: JsonField<Double> = JsonMissing.of()
            private var zeroFuelWeight: JsonField<Double> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                classificationMarking = body.classificationMarking
                dataMode = body.dataMode
                estDepTime = body.estDepTime
                source = body.source
                bodyId = body.bodyId
                aclOnboard = body.aclOnboard
                aclReleased = body.aclReleased
                aircraftMds = body.aircraftMds
                airLoadPlanHazmatActuals = body.airLoadPlanHazmatActuals.map { it.toMutableList() }
                airLoadPlanHr = body.airLoadPlanHr.map { it.toMutableList() }
                airLoadPlanPalletDetails = body.airLoadPlanPalletDetails.map { it.toMutableList() }
                airLoadPlanPaxCargo = body.airLoadPlanPaxCargo.map { it.toMutableList() }
                airLoadPlanUlnActuals = body.airLoadPlanUlnActuals.map { it.toMutableList() }
                arrAirfield = body.arrAirfield
                arrIcao = body.arrIcao
                availableTime = body.availableTime
                basicMoment = body.basicMoment
                basicWeight = body.basicWeight
                briefTime = body.briefTime
                callSign = body.callSign
                cargoBayFsMax = body.cargoBayFsMax
                cargoBayFsMin = body.cargoBayFsMin
                cargoBayWidth = body.cargoBayWidth
                cargoConfig = body.cargoConfig
                cargoMoment = body.cargoMoment
                cargoVolume = body.cargoVolume
                cargoWeight = body.cargoWeight
                createdAt = body.createdAt
                createdBy = body.createdBy
                crewSize = body.crewSize
                depAirfield = body.depAirfield
                depIcao = body.depIcao
                equipConfig = body.equipConfig
                estArrTime = body.estArrTime
                estLandingFuelMoment = body.estLandingFuelMoment
                estLandingFuelWeight = body.estLandingFuelWeight
                externalId = body.externalId
                fuelMoment = body.fuelMoment
                fuelWeight = body.fuelWeight
                grossCg = body.grossCg
                grossMoment = body.grossMoment
                grossWeight = body.grossWeight
                idMission = body.idMission
                idSortie = body.idSortie
                landingCg = body.landingCg
                landingMoment = body.landingMoment
                landingWeight = body.landingWeight
                legNum = body.legNum
                loadmasterName = body.loadmasterName
                loadmasterRank = body.loadmasterRank
                loadRemarks = body.loadRemarks
                missionNumber = body.missionNumber
                operatingMoment = body.operatingMoment
                operatingWeight = body.operatingWeight
                origin = body.origin
                origNetwork = body.origNetwork
                ppOnboard = body.ppOnboard
                ppReleased = body.ppReleased
                schedTime = body.schedTime
                seatsOnboard = body.seatsOnboard
                seatsReleased = body.seatsReleased
                sourceDl = body.sourceDl
                tailNumber = body.tailNumber
                tankConfig = body.tankConfig
                updatedAt = body.updatedAt
                updatedBy = body.updatedBy
                utilCode = body.utilCode
                zeroFuelCg = body.zeroFuelCg
                zeroFuelMoment = body.zeroFuelMoment
                zeroFuelWeight = body.zeroFuelWeight
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /**
             * The current estimated time that the aircraft is planned to depart, in ISO 8601 UTC
             * format with millisecond precision.
             */
            fun estDepTime(estDepTime: OffsetDateTime) = estDepTime(JsonField.of(estDepTime))

            /**
             * Sets [Builder.estDepTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.estDepTime] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun estDepTime(estDepTime: JsonField<OffsetDateTime>) = apply {
                this.estDepTime = estDepTime
            }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /** Unique identifier of the record, auto-generated by the system. */
            fun bodyId(bodyId: String) = bodyId(JsonField.of(bodyId))

            /**
             * Sets [Builder.bodyId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bodyId] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bodyId(bodyId: JsonField<String>) = apply { this.bodyId = bodyId }

            /**
             * Allowable Cabin Load (ACL) onboard the aircraft. The maximum weight of passengers,
             * baggage, and cargo that can be safely transported in the aircraft cabin, in
             * kilograms.
             */
            fun aclOnboard(aclOnboard: Double) = aclOnboard(JsonField.of(aclOnboard))

            /**
             * Sets [Builder.aclOnboard] to an arbitrary JSON value.
             *
             * You should usually call [Builder.aclOnboard] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun aclOnboard(aclOnboard: JsonField<Double>) = apply { this.aclOnboard = aclOnboard }

            /**
             * Allowable Cabin Load (ACL) released this leg. The weight of passengers, baggage, and
             * cargo released from the aircraft cabin, in kilograms.
             */
            fun aclReleased(aclReleased: Double) = aclReleased(JsonField.of(aclReleased))

            /**
             * Sets [Builder.aclReleased] to an arbitrary JSON value.
             *
             * You should usually call [Builder.aclReleased] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun aclReleased(aclReleased: JsonField<Double>) = apply {
                this.aclReleased = aclReleased
            }

            /** The Model Design Series designation of the aircraft supporting this load plan. */
            fun aircraftMds(aircraftMds: String) = aircraftMds(JsonField.of(aircraftMds))

            /**
             * Sets [Builder.aircraftMds] to an arbitrary JSON value.
             *
             * You should usually call [Builder.aircraftMds] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun aircraftMds(aircraftMds: JsonField<String>) = apply {
                this.aircraftMds = aircraftMds
            }

            /** Collection of hazmat actuals associated with this load plan. */
            fun airLoadPlanHazmatActuals(airLoadPlanHazmatActuals: List<AirLoadPlanHazmatActual>) =
                airLoadPlanHazmatActuals(JsonField.of(airLoadPlanHazmatActuals))

            /**
             * Sets [Builder.airLoadPlanHazmatActuals] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airLoadPlanHazmatActuals] with a well-typed
             * `List<AirLoadPlanHazmatActual>` value instead. This method is primarily for setting
             * the field to an undocumented or not yet supported value.
             */
            fun airLoadPlanHazmatActuals(
                airLoadPlanHazmatActuals: JsonField<List<AirLoadPlanHazmatActual>>
            ) = apply {
                this.airLoadPlanHazmatActuals = airLoadPlanHazmatActuals.map { it.toMutableList() }
            }

            /**
             * Adds a single [AirLoadPlanHazmatActual] to [airLoadPlanHazmatActuals].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAirLoadPlanHazmatActual(airLoadPlanHazmatActual: AirLoadPlanHazmatActual) =
                apply {
                    airLoadPlanHazmatActuals =
                        (airLoadPlanHazmatActuals ?: JsonField.of(mutableListOf())).also {
                            checkKnown("airLoadPlanHazmatActuals", it).add(airLoadPlanHazmatActual)
                        }
                }

            /** Collection of human remains transport information associated with this load plan. */
            fun airLoadPlanHr(airLoadPlanHr: List<AirLoadPlanHr>) =
                airLoadPlanHr(JsonField.of(airLoadPlanHr))

            /**
             * Sets [Builder.airLoadPlanHr] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airLoadPlanHr] with a well-typed
             * `List<AirLoadPlanHr>` value instead. This method is primarily for setting the field
             * to an undocumented or not yet supported value.
             */
            fun airLoadPlanHr(airLoadPlanHr: JsonField<List<AirLoadPlanHr>>) = apply {
                this.airLoadPlanHr = airLoadPlanHr.map { it.toMutableList() }
            }

            /**
             * Adds a single [AirLoadPlanHr] to [Builder.airLoadPlanHr].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAirLoadPlanHr(airLoadPlanHr: AirLoadPlanHr) = apply {
                this.airLoadPlanHr =
                    (this.airLoadPlanHr ?: JsonField.of(mutableListOf())).also {
                        checkKnown("airLoadPlanHr", it).add(airLoadPlanHr)
                    }
            }

            /**
             * Collection of cargo information located at the pallet positions associated with this
             * load plan.
             */
            fun airLoadPlanPalletDetails(airLoadPlanPalletDetails: List<AirLoadPlanPalletDetail>) =
                airLoadPlanPalletDetails(JsonField.of(airLoadPlanPalletDetails))

            /**
             * Sets [Builder.airLoadPlanPalletDetails] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airLoadPlanPalletDetails] with a well-typed
             * `List<AirLoadPlanPalletDetail>` value instead. This method is primarily for setting
             * the field to an undocumented or not yet supported value.
             */
            fun airLoadPlanPalletDetails(
                airLoadPlanPalletDetails: JsonField<List<AirLoadPlanPalletDetail>>
            ) = apply {
                this.airLoadPlanPalletDetails = airLoadPlanPalletDetails.map { it.toMutableList() }
            }

            /**
             * Adds a single [AirLoadPlanPalletDetail] to [airLoadPlanPalletDetails].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAirLoadPlanPalletDetail(airLoadPlanPalletDetail: AirLoadPlanPalletDetail) =
                apply {
                    airLoadPlanPalletDetails =
                        (airLoadPlanPalletDetails ?: JsonField.of(mutableListOf())).also {
                            checkKnown("airLoadPlanPalletDetails", it).add(airLoadPlanPalletDetail)
                        }
                }

            /**
             * Collection of passenger and cargo details associated with this load plan for this leg
             * of the mission.
             */
            fun airLoadPlanPaxCargo(airLoadPlanPaxCargo: List<AirLoadPlanPaxCargo>) =
                airLoadPlanPaxCargo(JsonField.of(airLoadPlanPaxCargo))

            /**
             * Sets [Builder.airLoadPlanPaxCargo] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airLoadPlanPaxCargo] with a well-typed
             * `List<AirLoadPlanPaxCargo>` value instead. This method is primarily for setting the
             * field to an undocumented or not yet supported value.
             */
            fun airLoadPlanPaxCargo(airLoadPlanPaxCargo: JsonField<List<AirLoadPlanPaxCargo>>) =
                apply {
                    this.airLoadPlanPaxCargo = airLoadPlanPaxCargo.map { it.toMutableList() }
                }

            /**
             * Adds a single [AirLoadPlanPaxCargo] to [Builder.airLoadPlanPaxCargo].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAirLoadPlanPaxCargo(airLoadPlanPaxCargo: AirLoadPlanPaxCargo) = apply {
                this.airLoadPlanPaxCargo =
                    (this.airLoadPlanPaxCargo ?: JsonField.of(mutableListOf())).also {
                        checkKnown("airLoadPlanPaxCargo", it).add(airLoadPlanPaxCargo)
                    }
            }

            /** Collection of unit line number actuals associated with this load plan. */
            fun airLoadPlanUlnActuals(airLoadPlanUlnActuals: List<AirLoadPlanUlnActual>) =
                airLoadPlanUlnActuals(JsonField.of(airLoadPlanUlnActuals))

            /**
             * Sets [Builder.airLoadPlanUlnActuals] to an arbitrary JSON value.
             *
             * You should usually call [Builder.airLoadPlanUlnActuals] with a well-typed
             * `List<AirLoadPlanUlnActual>` value instead. This method is primarily for setting the
             * field to an undocumented or not yet supported value.
             */
            fun airLoadPlanUlnActuals(
                airLoadPlanUlnActuals: JsonField<List<AirLoadPlanUlnActual>>
            ) = apply {
                this.airLoadPlanUlnActuals = airLoadPlanUlnActuals.map { it.toMutableList() }
            }

            /**
             * Adds a single [AirLoadPlanUlnActual] to [airLoadPlanUlnActuals].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addAirLoadPlanUlnActual(airLoadPlanUlnActual: AirLoadPlanUlnActual) = apply {
                airLoadPlanUlnActuals =
                    (airLoadPlanUlnActuals ?: JsonField.of(mutableListOf())).also {
                        checkKnown("airLoadPlanUlnActuals", it).add(airLoadPlanUlnActual)
                    }
            }

            /**
             * Optional identifier of arrival airfield with no International Civil Organization
             * (ICAO) code.
             */
            fun arrAirfield(arrAirfield: String) = arrAirfield(JsonField.of(arrAirfield))

            /**
             * Sets [Builder.arrAirfield] to an arbitrary JSON value.
             *
             * You should usually call [Builder.arrAirfield] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun arrAirfield(arrAirfield: JsonField<String>) = apply {
                this.arrAirfield = arrAirfield
            }

            /** The arrival International Civil Organization (ICAO) code of the landing airfield. */
            fun arrIcao(arrIcao: String) = arrIcao(JsonField.of(arrIcao))

            /**
             * Sets [Builder.arrIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.arrIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun arrIcao(arrIcao: JsonField<String>) = apply { this.arrIcao = arrIcao }

            /**
             * Time the loadmaster or boom operator is available for cargo loading/unloading, in ISO
             * 8601 UTC format with millisecond precision.
             */
            fun availableTime(availableTime: OffsetDateTime) =
                availableTime(JsonField.of(availableTime))

            /**
             * Sets [Builder.availableTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.availableTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun availableTime(availableTime: JsonField<OffsetDateTime>) = apply {
                this.availableTime = availableTime
            }

            /**
             * The basic weight of the aircraft multiplied by the distance between the reference
             * datum and the aircraft's center of gravity, in Newton-meters.
             */
            fun basicMoment(basicMoment: Double) = basicMoment(JsonField.of(basicMoment))

            /**
             * Sets [Builder.basicMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.basicMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun basicMoment(basicMoment: JsonField<Double>) = apply {
                this.basicMoment = basicMoment
            }

            /**
             * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in
             * kilograms.
             */
            fun basicWeight(basicWeight: Double) = basicWeight(JsonField.of(basicWeight))

            /**
             * Sets [Builder.basicWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.basicWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun basicWeight(basicWeight: JsonField<Double>) = apply {
                this.basicWeight = basicWeight
            }

            /**
             * Time the cargo briefing was given to the loadmaster or boom operator, in ISO 8601 UTC
             * format with millisecond precision.
             */
            fun briefTime(briefTime: OffsetDateTime) = briefTime(JsonField.of(briefTime))

            /**
             * Sets [Builder.briefTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.briefTime] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun briefTime(briefTime: JsonField<OffsetDateTime>) = apply {
                this.briefTime = briefTime
            }

            /** The call sign of the mission supporting this load plan. */
            fun callSign(callSign: String) = callSign(JsonField.of(callSign))

            /**
             * Sets [Builder.callSign] to an arbitrary JSON value.
             *
             * You should usually call [Builder.callSign] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun callSign(callSign: JsonField<String>) = apply { this.callSign = callSign }

            /**
             * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the
             * reference datum, in meters.
             */
            fun cargoBayFsMax(cargoBayFsMax: Double) = cargoBayFsMax(JsonField.of(cargoBayFsMax))

            /**
             * Sets [Builder.cargoBayFsMax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoBayFsMax] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoBayFsMax(cargoBayFsMax: JsonField<Double>) = apply {
                this.cargoBayFsMax = cargoBayFsMax
            }

            /**
             * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the
             * reference datum, in meters.
             */
            fun cargoBayFsMin(cargoBayFsMin: Double) = cargoBayFsMin(JsonField.of(cargoBayFsMin))

            /**
             * Sets [Builder.cargoBayFsMin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoBayFsMin] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoBayFsMin(cargoBayFsMin: JsonField<Double>) = apply {
                this.cargoBayFsMin = cargoBayFsMin
            }

            /** Width of the cargo bay, in meters. */
            fun cargoBayWidth(cargoBayWidth: Double) = cargoBayWidth(JsonField.of(cargoBayWidth))

            /**
             * Sets [Builder.cargoBayWidth] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoBayWidth] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoBayWidth(cargoBayWidth: JsonField<Double>) = apply {
                this.cargoBayWidth = cargoBayWidth
            }

            /**
             * The cargo configuration required for this leg (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1,
             * etc.). Configuration meanings are determined by the data source.
             */
            fun cargoConfig(cargoConfig: String) = cargoConfig(JsonField.of(cargoConfig))

            /**
             * Sets [Builder.cargoConfig] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoConfig] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoConfig(cargoConfig: JsonField<String>) = apply {
                this.cargoConfig = cargoConfig
            }

            /**
             * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each
             * individual cargo moment is the weight of the cargo multiplied by the distance between
             * the reference datum and the cargo's center of gravity.
             */
            fun cargoMoment(cargoMoment: Double) = cargoMoment(JsonField.of(cargoMoment))

            /**
             * Sets [Builder.cargoMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoMoment(cargoMoment: JsonField<Double>) = apply {
                this.cargoMoment = cargoMoment
            }

            /** Volume of cargo space in the aircraft, in cubic meters. */
            fun cargoVolume(cargoVolume: Double) = cargoVolume(JsonField.of(cargoVolume))

            /**
             * Sets [Builder.cargoVolume] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoVolume] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoVolume(cargoVolume: JsonField<Double>) = apply {
                this.cargoVolume = cargoVolume
            }

            /** The weight of the cargo on board the aircraft, in kilograms. */
            fun cargoWeight(cargoWeight: Double) = cargoWeight(JsonField.of(cargoWeight))

            /**
             * Sets [Builder.cargoWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cargoWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cargoWeight(cargoWeight: JsonField<Double>) = apply {
                this.cargoWeight = cargoWeight
            }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /**
             * Application user who created the row in the database, auto-populated by the system.
             */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /** The number of crew members on the aircraft. */
            fun crewSize(crewSize: Int) = crewSize(JsonField.of(crewSize))

            /**
             * Sets [Builder.crewSize] to an arbitrary JSON value.
             *
             * You should usually call [Builder.crewSize] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun crewSize(crewSize: JsonField<Int>) = apply { this.crewSize = crewSize }

            /**
             * Optional identifier of departure airfield with no International Civil Organization
             * (ICAO) code.
             */
            fun depAirfield(depAirfield: String) = depAirfield(JsonField.of(depAirfield))

            /**
             * Sets [Builder.depAirfield] to an arbitrary JSON value.
             *
             * You should usually call [Builder.depAirfield] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun depAirfield(depAirfield: JsonField<String>) = apply {
                this.depAirfield = depAirfield
            }

            /**
             * The departure International Civil Organization (ICAO) code of the departure airfield.
             */
            fun depIcao(depIcao: String) = depIcao(JsonField.of(depIcao))

            /**
             * Sets [Builder.depIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.depIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun depIcao(depIcao: JsonField<String>) = apply { this.depIcao = depIcao }

            /**
             * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat,
             * etc.). Configuration meanings are determined by the data source.
             */
            fun equipConfig(equipConfig: String) = equipConfig(JsonField.of(equipConfig))

            /**
             * Sets [Builder.equipConfig] to an arbitrary JSON value.
             *
             * You should usually call [Builder.equipConfig] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun equipConfig(equipConfig: JsonField<String>) = apply {
                this.equipConfig = equipConfig
            }

            /**
             * The current estimated time that the aircraft is planned to arrive, in ISO 8601 UTC
             * format with millisecond precision.
             */
            fun estArrTime(estArrTime: OffsetDateTime) = estArrTime(JsonField.of(estArrTime))

            /**
             * Sets [Builder.estArrTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.estArrTime] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun estArrTime(estArrTime: JsonField<OffsetDateTime>) = apply {
                this.estArrTime = estArrTime
            }

            /**
             * The estimated weight of usable fuel upon landing multiplied by the distance between
             * the reference datum and the fuel's center of gravity, in Newton-meters.
             */
            fun estLandingFuelMoment(estLandingFuelMoment: Double) =
                estLandingFuelMoment(JsonField.of(estLandingFuelMoment))

            /**
             * Sets [Builder.estLandingFuelMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.estLandingFuelMoment] with a well-typed [Double]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun estLandingFuelMoment(estLandingFuelMoment: JsonField<Double>) = apply {
                this.estLandingFuelMoment = estLandingFuelMoment
            }

            /** The estimated weight of usable fuel upon landing, in kilograms. */
            fun estLandingFuelWeight(estLandingFuelWeight: Double) =
                estLandingFuelWeight(JsonField.of(estLandingFuelWeight))

            /**
             * Sets [Builder.estLandingFuelWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.estLandingFuelWeight] with a well-typed [Double]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun estLandingFuelWeight(estLandingFuelWeight: JsonField<Double>) = apply {
                this.estLandingFuelWeight = estLandingFuelWeight
            }

            /**
             * Optional ID from external systems. This field has no meaning within UDL and is
             * provided as a convenience for systems that require tracking of an internal system
             * generated ID.
             */
            fun externalId(externalId: String) = externalId(JsonField.of(externalId))

            /**
             * Sets [Builder.externalId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.externalId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun externalId(externalId: JsonField<String>) = apply { this.externalId = externalId }

            /**
             * The fuel weight on board the aircraft multiplied by the distance between the
             * reference datum and the fuel's center of gravity, in Newton-meters.
             */
            fun fuelMoment(fuelMoment: Double) = fuelMoment(JsonField.of(fuelMoment))

            /**
             * Sets [Builder.fuelMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fuelMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fuelMoment(fuelMoment: JsonField<Double>) = apply { this.fuelMoment = fuelMoment }

            /** The weight of usable fuel on board the aircraft, in kilograms. */
            fun fuelWeight(fuelWeight: Double) = fuelWeight(JsonField.of(fuelWeight))

            /**
             * Sets [Builder.fuelWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fuelWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fuelWeight(fuelWeight: JsonField<Double>) = apply { this.fuelWeight = fuelWeight }

            /**
             * The center of gravity of the aircraft using the gross weight and gross moment, as a
             * percentage of the mean aerodynamic chord (%MAC).
             */
            fun grossCg(grossCg: Double) = grossCg(JsonField.of(grossCg))

            /**
             * Sets [Builder.grossCg] to an arbitrary JSON value.
             *
             * You should usually call [Builder.grossCg] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun grossCg(grossCg: JsonField<Double>) = apply { this.grossCg = grossCg }

            /**
             * The sum of moments of all items making up the gross weight of the aircraft, in
             * Newton-meters.
             */
            fun grossMoment(grossMoment: Double) = grossMoment(JsonField.of(grossMoment))

            /**
             * Sets [Builder.grossMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.grossMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun grossMoment(grossMoment: JsonField<Double>) = apply {
                this.grossMoment = grossMoment
            }

            /**
             * The total weight of the aircraft at takeoff including passengers, cargo, equipment,
             * and usable fuel, in kilograms.
             */
            fun grossWeight(grossWeight: Double) = grossWeight(JsonField.of(grossWeight))

            /**
             * Sets [Builder.grossWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.grossWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun grossWeight(grossWeight: JsonField<Double>) = apply {
                this.grossWeight = grossWeight
            }

            /** The UDL ID of the mission this record is associated with. */
            fun idMission(idMission: String) = idMission(JsonField.of(idMission))

            /**
             * Sets [Builder.idMission] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idMission] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idMission(idMission: JsonField<String>) = apply { this.idMission = idMission }

            /** The UDL ID of the aircraft sortie this record is associated with. */
            fun idSortie(idSortie: String) = idSortie(JsonField.of(idSortie))

            /**
             * Sets [Builder.idSortie] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSortie] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idSortie(idSortie: JsonField<String>) = apply { this.idSortie = idSortie }

            /**
             * The center of gravity of the aircraft using the landing weight and landing moment, as
             * a percentage of the mean aerodynamic chord (%MAC).
             */
            fun landingCg(landingCg: Double) = landingCg(JsonField.of(landingCg))

            /**
             * Sets [Builder.landingCg] to an arbitrary JSON value.
             *
             * You should usually call [Builder.landingCg] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun landingCg(landingCg: JsonField<Double>) = apply { this.landingCg = landingCg }

            /**
             * The sum of moments of all items making up the gross weight of the aircraft upon
             * landing, in Newton-meters.
             */
            fun landingMoment(landingMoment: Double) = landingMoment(JsonField.of(landingMoment))

            /**
             * Sets [Builder.landingMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.landingMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun landingMoment(landingMoment: JsonField<Double>) = apply {
                this.landingMoment = landingMoment
            }

            /** The gross weight of the aircraft upon landing, in kilograms. */
            fun landingWeight(landingWeight: Double) = landingWeight(JsonField.of(landingWeight))

            /**
             * Sets [Builder.landingWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.landingWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun landingWeight(landingWeight: JsonField<Double>) = apply {
                this.landingWeight = landingWeight
            }

            /** The leg number of the mission supporting this load plan. */
            fun legNum(legNum: Int) = legNum(JsonField.of(legNum))

            /**
             * Sets [Builder.legNum] to an arbitrary JSON value.
             *
             * You should usually call [Builder.legNum] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun legNum(legNum: JsonField<Int>) = apply { this.legNum = legNum }

            /** Name of the loadmaster or boom operator who received the cargo briefing. */
            fun loadmasterName(loadmasterName: String) =
                loadmasterName(JsonField.of(loadmasterName))

            /**
             * Sets [Builder.loadmasterName] to an arbitrary JSON value.
             *
             * You should usually call [Builder.loadmasterName] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun loadmasterName(loadmasterName: JsonField<String>) = apply {
                this.loadmasterName = loadmasterName
            }

            /** Rank of the loadmaster or boom operator overseeing cargo loading/unloading. */
            fun loadmasterRank(loadmasterRank: String) =
                loadmasterRank(JsonField.of(loadmasterRank))

            /**
             * Sets [Builder.loadmasterRank] to an arbitrary JSON value.
             *
             * You should usually call [Builder.loadmasterRank] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun loadmasterRank(loadmasterRank: JsonField<String>) = apply {
                this.loadmasterRank = loadmasterRank
            }

            /** Remarks concerning this load plan. */
            fun loadRemarks(loadRemarks: String) = loadRemarks(JsonField.of(loadRemarks))

            /**
             * Sets [Builder.loadRemarks] to an arbitrary JSON value.
             *
             * You should usually call [Builder.loadRemarks] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun loadRemarks(loadRemarks: JsonField<String>) = apply {
                this.loadRemarks = loadRemarks
            }

            /** The mission number of the mission supporting this load plan. */
            fun missionNumber(missionNumber: String) = missionNumber(JsonField.of(missionNumber))

            /**
             * Sets [Builder.missionNumber] to an arbitrary JSON value.
             *
             * You should usually call [Builder.missionNumber] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun missionNumber(missionNumber: JsonField<String>) = apply {
                this.missionNumber = missionNumber
            }

            /**
             * The operating weight of the aircraft multiplied by the distance between the reference
             * datum and the aircraft's center of gravity, in Newton-meters.
             */
            fun operatingMoment(operatingMoment: Double) =
                operatingMoment(JsonField.of(operatingMoment))

            /**
             * Sets [Builder.operatingMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.operatingMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun operatingMoment(operatingMoment: JsonField<Double>) = apply {
                this.operatingMoment = operatingMoment
            }

            /**
             * The basic weight of the aircraft including passengers and equipment, in kilograms.
             */
            fun operatingWeight(operatingWeight: Double) =
                operatingWeight(JsonField.of(operatingWeight))

            /**
             * Sets [Builder.operatingWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.operatingWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun operatingWeight(operatingWeight: JsonField<Double>) = apply {
                this.operatingWeight = operatingWeight
            }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * The originating source network on which this record was created, auto-populated by
             * the system.
             */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) = apply {
                this.origNetwork = origNetwork
            }

            /** Number of pallet positions on the aircraft. */
            fun ppOnboard(ppOnboard: Int) = ppOnboard(JsonField.of(ppOnboard))

            /**
             * Sets [Builder.ppOnboard] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppOnboard] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppOnboard(ppOnboard: JsonField<Int>) = apply { this.ppOnboard = ppOnboard }

            /** Number of pallet positions released this leg. */
            fun ppReleased(ppReleased: Int) = ppReleased(JsonField.of(ppReleased))

            /**
             * Sets [Builder.ppReleased] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppReleased] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppReleased(ppReleased: JsonField<Int>) = apply { this.ppReleased = ppReleased }

            /**
             * Time the loadmaster or boom operator is scheduled to begin overseeing cargo
             * loading/unloading, in ISO 8601 UTC format with millisecond precision.
             */
            fun schedTime(schedTime: OffsetDateTime) = schedTime(JsonField.of(schedTime))

            /**
             * Sets [Builder.schedTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.schedTime] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun schedTime(schedTime: JsonField<OffsetDateTime>) = apply {
                this.schedTime = schedTime
            }

            /** Number of passenger seats on the aircraft. */
            fun seatsOnboard(seatsOnboard: Int) = seatsOnboard(JsonField.of(seatsOnboard))

            /**
             * Sets [Builder.seatsOnboard] to an arbitrary JSON value.
             *
             * You should usually call [Builder.seatsOnboard] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun seatsOnboard(seatsOnboard: JsonField<Int>) = apply {
                this.seatsOnboard = seatsOnboard
            }

            /** Number of passenger seats released this leg. */
            fun seatsReleased(seatsReleased: Int) = seatsReleased(JsonField.of(seatsReleased))

            /**
             * Sets [Builder.seatsReleased] to an arbitrary JSON value.
             *
             * You should usually call [Builder.seatsReleased] with a well-typed [Int] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun seatsReleased(seatsReleased: JsonField<Int>) = apply {
                this.seatsReleased = seatsReleased
            }

            /**
             * The source data library from which this record was received. This could be a remote
             * or tactical UDL or another data library. If null, the record should be assumed to
             * have originated from the primary Enterprise UDL.
             */
            fun sourceDl(sourceDl: String) = sourceDl(JsonField.of(sourceDl))

            /**
             * Sets [Builder.sourceDl] to an arbitrary JSON value.
             *
             * You should usually call [Builder.sourceDl] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun sourceDl(sourceDl: JsonField<String>) = apply { this.sourceDl = sourceDl }

            /** The tail number of the aircraft supporting this load plan. */
            fun tailNumber(tailNumber: String) = tailNumber(JsonField.of(tailNumber))

            /**
             * Sets [Builder.tailNumber] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tailNumber] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tailNumber(tailNumber: JsonField<String>) = apply { this.tailNumber = tailNumber }

            /**
             * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration
             * meanings are determined by the data source.
             */
            fun tankConfig(tankConfig: String) = tankConfig(JsonField.of(tankConfig))

            /**
             * Sets [Builder.tankConfig] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tankConfig] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tankConfig(tankConfig: JsonField<String>) = apply { this.tankConfig = tankConfig }

            /** Time the row was updated in the database, auto-populated by the system. */
            fun updatedAt(updatedAt: OffsetDateTime) = updatedAt(JsonField.of(updatedAt))

            /**
             * Sets [Builder.updatedAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.updatedAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun updatedAt(updatedAt: JsonField<OffsetDateTime>) = apply {
                this.updatedAt = updatedAt
            }

            /**
             * Application user who updated the row in the database, auto-populated by the system.
             */
            fun updatedBy(updatedBy: String) = updatedBy(JsonField.of(updatedBy))

            /**
             * Sets [Builder.updatedBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.updatedBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun updatedBy(updatedBy: JsonField<String>) = apply { this.updatedBy = updatedBy }

            /**
             * Alphanumeric code that describes general cargo-related utilization and
             * characteristics for an itinerary point.
             */
            fun utilCode(utilCode: String) = utilCode(JsonField.of(utilCode))

            /**
             * Sets [Builder.utilCode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.utilCode] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun utilCode(utilCode: JsonField<String>) = apply { this.utilCode = utilCode }

            /**
             * The center of gravity of the aircraft using the zero fuel weight and zero fuel total
             * moment, as a percentage of the mean aerodynamic chord (%MAC).
             */
            fun zeroFuelCg(zeroFuelCg: Double) = zeroFuelCg(JsonField.of(zeroFuelCg))

            /**
             * Sets [Builder.zeroFuelCg] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zeroFuelCg] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun zeroFuelCg(zeroFuelCg: JsonField<Double>) = apply { this.zeroFuelCg = zeroFuelCg }

            /**
             * The zero fuel weight of the aircraft multiplied by the distance between the reference
             * datum and the aircraft's center of gravity, in Newton-meters.
             */
            fun zeroFuelMoment(zeroFuelMoment: Double) =
                zeroFuelMoment(JsonField.of(zeroFuelMoment))

            /**
             * Sets [Builder.zeroFuelMoment] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zeroFuelMoment] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun zeroFuelMoment(zeroFuelMoment: JsonField<Double>) = apply {
                this.zeroFuelMoment = zeroFuelMoment
            }

            /**
             * The operating weight of the aircraft including cargo, mail, baggage, and passengers,
             * but without usable fuel, in kilograms.
             */
            fun zeroFuelWeight(zeroFuelWeight: Double) =
                zeroFuelWeight(JsonField.of(zeroFuelWeight))

            /**
             * Sets [Builder.zeroFuelWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zeroFuelWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun zeroFuelWeight(zeroFuelWeight: JsonField<Double>) = apply {
                this.zeroFuelWeight = zeroFuelWeight
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .estDepTime()
             * .source()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("estDepTime", estDepTime),
                    checkRequired("source", source),
                    bodyId,
                    aclOnboard,
                    aclReleased,
                    aircraftMds,
                    (airLoadPlanHazmatActuals ?: JsonMissing.of()).map { it.toImmutable() },
                    (airLoadPlanHr ?: JsonMissing.of()).map { it.toImmutable() },
                    (airLoadPlanPalletDetails ?: JsonMissing.of()).map { it.toImmutable() },
                    (airLoadPlanPaxCargo ?: JsonMissing.of()).map { it.toImmutable() },
                    (airLoadPlanUlnActuals ?: JsonMissing.of()).map { it.toImmutable() },
                    arrAirfield,
                    arrIcao,
                    availableTime,
                    basicMoment,
                    basicWeight,
                    briefTime,
                    callSign,
                    cargoBayFsMax,
                    cargoBayFsMin,
                    cargoBayWidth,
                    cargoConfig,
                    cargoMoment,
                    cargoVolume,
                    cargoWeight,
                    createdAt,
                    createdBy,
                    crewSize,
                    depAirfield,
                    depIcao,
                    equipConfig,
                    estArrTime,
                    estLandingFuelMoment,
                    estLandingFuelWeight,
                    externalId,
                    fuelMoment,
                    fuelWeight,
                    grossCg,
                    grossMoment,
                    grossWeight,
                    idMission,
                    idSortie,
                    landingCg,
                    landingMoment,
                    landingWeight,
                    legNum,
                    loadmasterName,
                    loadmasterRank,
                    loadRemarks,
                    missionNumber,
                    operatingMoment,
                    operatingWeight,
                    origin,
                    origNetwork,
                    ppOnboard,
                    ppReleased,
                    schedTime,
                    seatsOnboard,
                    seatsReleased,
                    sourceDl,
                    tailNumber,
                    tankConfig,
                    updatedAt,
                    updatedBy,
                    utilCode,
                    zeroFuelCg,
                    zeroFuelMoment,
                    zeroFuelWeight,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            classificationMarking()
            dataMode().validate()
            estDepTime()
            source()
            bodyId()
            aclOnboard()
            aclReleased()
            aircraftMds()
            airLoadPlanHazmatActuals().ifPresent { it.forEach { it.validate() } }
            airLoadPlanHr().ifPresent { it.forEach { it.validate() } }
            airLoadPlanPalletDetails().ifPresent { it.forEach { it.validate() } }
            airLoadPlanPaxCargo().ifPresent { it.forEach { it.validate() } }
            airLoadPlanUlnActuals().ifPresent { it.forEach { it.validate() } }
            arrAirfield()
            arrIcao()
            availableTime()
            basicMoment()
            basicWeight()
            briefTime()
            callSign()
            cargoBayFsMax()
            cargoBayFsMin()
            cargoBayWidth()
            cargoConfig()
            cargoMoment()
            cargoVolume()
            cargoWeight()
            createdAt()
            createdBy()
            crewSize()
            depAirfield()
            depIcao()
            equipConfig()
            estArrTime()
            estLandingFuelMoment()
            estLandingFuelWeight()
            externalId()
            fuelMoment()
            fuelWeight()
            grossCg()
            grossMoment()
            grossWeight()
            idMission()
            idSortie()
            landingCg()
            landingMoment()
            landingWeight()
            legNum()
            loadmasterName()
            loadmasterRank()
            loadRemarks()
            missionNumber()
            operatingMoment()
            operatingWeight()
            origin()
            origNetwork()
            ppOnboard()
            ppReleased()
            schedTime()
            seatsOnboard()
            seatsReleased()
            sourceDl()
            tailNumber()
            tankConfig()
            updatedAt()
            updatedBy()
            utilCode()
            zeroFuelCg()
            zeroFuelMoment()
            zeroFuelWeight()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (estDepTime.asKnown().isPresent) 1 else 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (bodyId.asKnown().isPresent) 1 else 0) +
                (if (aclOnboard.asKnown().isPresent) 1 else 0) +
                (if (aclReleased.asKnown().isPresent) 1 else 0) +
                (if (aircraftMds.asKnown().isPresent) 1 else 0) +
                (airLoadPlanHazmatActuals.asKnown().getOrNull()?.sumOf { it.validity().toInt() }
                    ?: 0) +
                (airLoadPlanHr.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (airLoadPlanPalletDetails.asKnown().getOrNull()?.sumOf { it.validity().toInt() }
                    ?: 0) +
                (airLoadPlanPaxCargo.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (airLoadPlanUlnActuals.asKnown().getOrNull()?.sumOf { it.validity().toInt() }
                    ?: 0) +
                (if (arrAirfield.asKnown().isPresent) 1 else 0) +
                (if (arrIcao.asKnown().isPresent) 1 else 0) +
                (if (availableTime.asKnown().isPresent) 1 else 0) +
                (if (basicMoment.asKnown().isPresent) 1 else 0) +
                (if (basicWeight.asKnown().isPresent) 1 else 0) +
                (if (briefTime.asKnown().isPresent) 1 else 0) +
                (if (callSign.asKnown().isPresent) 1 else 0) +
                (if (cargoBayFsMax.asKnown().isPresent) 1 else 0) +
                (if (cargoBayFsMin.asKnown().isPresent) 1 else 0) +
                (if (cargoBayWidth.asKnown().isPresent) 1 else 0) +
                (if (cargoConfig.asKnown().isPresent) 1 else 0) +
                (if (cargoMoment.asKnown().isPresent) 1 else 0) +
                (if (cargoVolume.asKnown().isPresent) 1 else 0) +
                (if (cargoWeight.asKnown().isPresent) 1 else 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (crewSize.asKnown().isPresent) 1 else 0) +
                (if (depAirfield.asKnown().isPresent) 1 else 0) +
                (if (depIcao.asKnown().isPresent) 1 else 0) +
                (if (equipConfig.asKnown().isPresent) 1 else 0) +
                (if (estArrTime.asKnown().isPresent) 1 else 0) +
                (if (estLandingFuelMoment.asKnown().isPresent) 1 else 0) +
                (if (estLandingFuelWeight.asKnown().isPresent) 1 else 0) +
                (if (externalId.asKnown().isPresent) 1 else 0) +
                (if (fuelMoment.asKnown().isPresent) 1 else 0) +
                (if (fuelWeight.asKnown().isPresent) 1 else 0) +
                (if (grossCg.asKnown().isPresent) 1 else 0) +
                (if (grossMoment.asKnown().isPresent) 1 else 0) +
                (if (grossWeight.asKnown().isPresent) 1 else 0) +
                (if (idMission.asKnown().isPresent) 1 else 0) +
                (if (idSortie.asKnown().isPresent) 1 else 0) +
                (if (landingCg.asKnown().isPresent) 1 else 0) +
                (if (landingMoment.asKnown().isPresent) 1 else 0) +
                (if (landingWeight.asKnown().isPresent) 1 else 0) +
                (if (legNum.asKnown().isPresent) 1 else 0) +
                (if (loadmasterName.asKnown().isPresent) 1 else 0) +
                (if (loadmasterRank.asKnown().isPresent) 1 else 0) +
                (if (loadRemarks.asKnown().isPresent) 1 else 0) +
                (if (missionNumber.asKnown().isPresent) 1 else 0) +
                (if (operatingMoment.asKnown().isPresent) 1 else 0) +
                (if (operatingWeight.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origNetwork.asKnown().isPresent) 1 else 0) +
                (if (ppOnboard.asKnown().isPresent) 1 else 0) +
                (if (ppReleased.asKnown().isPresent) 1 else 0) +
                (if (schedTime.asKnown().isPresent) 1 else 0) +
                (if (seatsOnboard.asKnown().isPresent) 1 else 0) +
                (if (seatsReleased.asKnown().isPresent) 1 else 0) +
                (if (sourceDl.asKnown().isPresent) 1 else 0) +
                (if (tailNumber.asKnown().isPresent) 1 else 0) +
                (if (tankConfig.asKnown().isPresent) 1 else 0) +
                (if (updatedAt.asKnown().isPresent) 1 else 0) +
                (if (updatedBy.asKnown().isPresent) 1 else 0) +
                (if (utilCode.asKnown().isPresent) 1 else 0) +
                (if (zeroFuelCg.asKnown().isPresent) 1 else 0) +
                (if (zeroFuelMoment.asKnown().isPresent) 1 else 0) +
                (if (zeroFuelWeight.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is Body &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                estDepTime == other.estDepTime &&
                source == other.source &&
                bodyId == other.bodyId &&
                aclOnboard == other.aclOnboard &&
                aclReleased == other.aclReleased &&
                aircraftMds == other.aircraftMds &&
                airLoadPlanHazmatActuals == other.airLoadPlanHazmatActuals &&
                airLoadPlanHr == other.airLoadPlanHr &&
                airLoadPlanPalletDetails == other.airLoadPlanPalletDetails &&
                airLoadPlanPaxCargo == other.airLoadPlanPaxCargo &&
                airLoadPlanUlnActuals == other.airLoadPlanUlnActuals &&
                arrAirfield == other.arrAirfield &&
                arrIcao == other.arrIcao &&
                availableTime == other.availableTime &&
                basicMoment == other.basicMoment &&
                basicWeight == other.basicWeight &&
                briefTime == other.briefTime &&
                callSign == other.callSign &&
                cargoBayFsMax == other.cargoBayFsMax &&
                cargoBayFsMin == other.cargoBayFsMin &&
                cargoBayWidth == other.cargoBayWidth &&
                cargoConfig == other.cargoConfig &&
                cargoMoment == other.cargoMoment &&
                cargoVolume == other.cargoVolume &&
                cargoWeight == other.cargoWeight &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                crewSize == other.crewSize &&
                depAirfield == other.depAirfield &&
                depIcao == other.depIcao &&
                equipConfig == other.equipConfig &&
                estArrTime == other.estArrTime &&
                estLandingFuelMoment == other.estLandingFuelMoment &&
                estLandingFuelWeight == other.estLandingFuelWeight &&
                externalId == other.externalId &&
                fuelMoment == other.fuelMoment &&
                fuelWeight == other.fuelWeight &&
                grossCg == other.grossCg &&
                grossMoment == other.grossMoment &&
                grossWeight == other.grossWeight &&
                idMission == other.idMission &&
                idSortie == other.idSortie &&
                landingCg == other.landingCg &&
                landingMoment == other.landingMoment &&
                landingWeight == other.landingWeight &&
                legNum == other.legNum &&
                loadmasterName == other.loadmasterName &&
                loadmasterRank == other.loadmasterRank &&
                loadRemarks == other.loadRemarks &&
                missionNumber == other.missionNumber &&
                operatingMoment == other.operatingMoment &&
                operatingWeight == other.operatingWeight &&
                origin == other.origin &&
                origNetwork == other.origNetwork &&
                ppOnboard == other.ppOnboard &&
                ppReleased == other.ppReleased &&
                schedTime == other.schedTime &&
                seatsOnboard == other.seatsOnboard &&
                seatsReleased == other.seatsReleased &&
                sourceDl == other.sourceDl &&
                tailNumber == other.tailNumber &&
                tankConfig == other.tankConfig &&
                updatedAt == other.updatedAt &&
                updatedBy == other.updatedBy &&
                utilCode == other.utilCode &&
                zeroFuelCg == other.zeroFuelCg &&
                zeroFuelMoment == other.zeroFuelMoment &&
                zeroFuelWeight == other.zeroFuelWeight &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                classificationMarking,
                dataMode,
                estDepTime,
                source,
                bodyId,
                aclOnboard,
                aclReleased,
                aircraftMds,
                airLoadPlanHazmatActuals,
                airLoadPlanHr,
                airLoadPlanPalletDetails,
                airLoadPlanPaxCargo,
                airLoadPlanUlnActuals,
                arrAirfield,
                arrIcao,
                availableTime,
                basicMoment,
                basicWeight,
                briefTime,
                callSign,
                cargoBayFsMax,
                cargoBayFsMin,
                cargoBayWidth,
                cargoConfig,
                cargoMoment,
                cargoVolume,
                cargoWeight,
                createdAt,
                createdBy,
                crewSize,
                depAirfield,
                depIcao,
                equipConfig,
                estArrTime,
                estLandingFuelMoment,
                estLandingFuelWeight,
                externalId,
                fuelMoment,
                fuelWeight,
                grossCg,
                grossMoment,
                grossWeight,
                idMission,
                idSortie,
                landingCg,
                landingMoment,
                landingWeight,
                legNum,
                loadmasterName,
                loadmasterRank,
                loadRemarks,
                missionNumber,
                operatingMoment,
                operatingWeight,
                origin,
                origNetwork,
                ppOnboard,
                ppReleased,
                schedTime,
                seatsOnboard,
                seatsReleased,
                sourceDl,
                tailNumber,
                tankConfig,
                updatedAt,
                updatedBy,
                utilCode,
                zeroFuelCg,
                zeroFuelMoment,
                zeroFuelWeight,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{classificationMarking=$classificationMarking, dataMode=$dataMode, estDepTime=$estDepTime, source=$source, bodyId=$bodyId, aclOnboard=$aclOnboard, aclReleased=$aclReleased, aircraftMds=$aircraftMds, airLoadPlanHazmatActuals=$airLoadPlanHazmatActuals, airLoadPlanHr=$airLoadPlanHr, airLoadPlanPalletDetails=$airLoadPlanPalletDetails, airLoadPlanPaxCargo=$airLoadPlanPaxCargo, airLoadPlanUlnActuals=$airLoadPlanUlnActuals, arrAirfield=$arrAirfield, arrIcao=$arrIcao, availableTime=$availableTime, basicMoment=$basicMoment, basicWeight=$basicWeight, briefTime=$briefTime, callSign=$callSign, cargoBayFsMax=$cargoBayFsMax, cargoBayFsMin=$cargoBayFsMin, cargoBayWidth=$cargoBayWidth, cargoConfig=$cargoConfig, cargoMoment=$cargoMoment, cargoVolume=$cargoVolume, cargoWeight=$cargoWeight, createdAt=$createdAt, createdBy=$createdBy, crewSize=$crewSize, depAirfield=$depAirfield, depIcao=$depIcao, equipConfig=$equipConfig, estArrTime=$estArrTime, estLandingFuelMoment=$estLandingFuelMoment, estLandingFuelWeight=$estLandingFuelWeight, externalId=$externalId, fuelMoment=$fuelMoment, fuelWeight=$fuelWeight, grossCg=$grossCg, grossMoment=$grossMoment, grossWeight=$grossWeight, idMission=$idMission, idSortie=$idSortie, landingCg=$landingCg, landingMoment=$landingMoment, landingWeight=$landingWeight, legNum=$legNum, loadmasterName=$loadmasterName, loadmasterRank=$loadmasterRank, loadRemarks=$loadRemarks, missionNumber=$missionNumber, operatingMoment=$operatingMoment, operatingWeight=$operatingWeight, origin=$origin, origNetwork=$origNetwork, ppOnboard=$ppOnboard, ppReleased=$ppReleased, schedTime=$schedTime, seatsOnboard=$seatsOnboard, seatsReleased=$seatsReleased, sourceDl=$sourceDl, tailNumber=$tailNumber, tankConfig=$tankConfig, updatedAt=$updatedAt, updatedBy=$updatedBy, utilCode=$utilCode, zeroFuelCg=$zeroFuelCg, zeroFuelMoment=$zeroFuelMoment, zeroFuelWeight=$zeroFuelWeight, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): DataMode = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is DataMode && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /** Collection of hazmat actuals associated with this load plan. */
    class AirLoadPlanHazmatActual
    private constructor(
        private val ashc: JsonField<String>,
        private val cgc: JsonField<String>,
        private val classDiv: JsonField<String>,
        private val hazDescription: JsonField<String>,
        private val hazmatRemarks: JsonField<String>,
        private val hazNum: JsonField<String>,
        private val hazNumType: JsonField<String>,
        private val hazOffIcao: JsonField<String>,
        private val hazOffItin: JsonField<Int>,
        private val hazOnIcao: JsonField<String>,
        private val hazOnItin: JsonField<Int>,
        private val hazPieces: JsonField<Int>,
        private val hazTcn: JsonField<String>,
        private val hazWeight: JsonField<Double>,
        private val itemName: JsonField<String>,
        private val lotNum: JsonField<String>,
        private val netExpWt: JsonField<Double>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("ashc") @ExcludeMissing ashc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cgc") @ExcludeMissing cgc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("classDiv")
            @ExcludeMissing
            classDiv: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazDescription")
            @ExcludeMissing
            hazDescription: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazmatRemarks")
            @ExcludeMissing
            hazmatRemarks: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazNum") @ExcludeMissing hazNum: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazNumType")
            @ExcludeMissing
            hazNumType: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazOffICAO")
            @ExcludeMissing
            hazOffIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazOffItin")
            @ExcludeMissing
            hazOffItin: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("hazOnICAO")
            @ExcludeMissing
            hazOnIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazOnItin") @ExcludeMissing hazOnItin: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("hazPieces") @ExcludeMissing hazPieces: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("hazTcn") @ExcludeMissing hazTcn: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hazWeight")
            @ExcludeMissing
            hazWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("itemName")
            @ExcludeMissing
            itemName: JsonField<String> = JsonMissing.of(),
            @JsonProperty("lotNum") @ExcludeMissing lotNum: JsonField<String> = JsonMissing.of(),
            @JsonProperty("netExpWt") @ExcludeMissing netExpWt: JsonField<Double> = JsonMissing.of(),
        ) : this(
            ashc,
            cgc,
            classDiv,
            hazDescription,
            hazmatRemarks,
            hazNum,
            hazNumType,
            hazOffIcao,
            hazOffItin,
            hazOnIcao,
            hazOnItin,
            hazPieces,
            hazTcn,
            hazWeight,
            itemName,
            lotNum,
            netExpWt,
            mutableMapOf(),
        )

        /**
         * The Air Special Handling Code (ASHC) indicates the type of special handling required for
         * hazardous cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ashc(): Optional<String> = ashc.getOptional("ashc")

        /**
         * Compatibility group code used to specify the controls for the transportation and storage
         * of hazardous materials according to the Hazardous Materials Regulations issued by the
         * U.S. Department of Transportation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cgc(): Optional<String> = cgc.getOptional("cgc")

        /**
         * Class and division of the hazardous material according to the Hazardous Materials
         * Regulations issued by the U.S. Department of Transportation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun classDiv(): Optional<String> = classDiv.getOptional("classDiv")

        /**
         * Description of the hazardous item.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazDescription(): Optional<String> = hazDescription.getOptional("hazDescription")

        /**
         * Remarks concerning this hazardous material.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazmatRemarks(): Optional<String> = hazmatRemarks.getOptional("hazmatRemarks")

        /**
         * United Nations number or North American number that identifies hazardous materials
         * according to the Hazardous Materials Regulations issued by the U.S. Department of
         * Transportation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazNum(): Optional<String> = hazNum.getOptional("hazNum")

        /**
         * Designates the type of hazmat number for the item (UN for United Nations or NA for North
         * American).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazNumType(): Optional<String> = hazNumType.getOptional("hazNumType")

        /**
         * The International Civil Aviation Organization (ICAO) code of the site where the hazardous
         * material is unloaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazOffIcao(): Optional<String> = hazOffIcao.getOptional("hazOffICAO")

        /**
         * Itinerary number that identifies where the hazardous material is unloaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazOffItin(): Optional<Int> = hazOffItin.getOptional("hazOffItin")

        /**
         * The International Civil Aviation Organization (ICAO) code of the site where the hazardous
         * material is loaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazOnIcao(): Optional<String> = hazOnIcao.getOptional("hazOnICAO")

        /**
         * Itinerary number that identifies where the hazardous material is loaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazOnItin(): Optional<Int> = hazOnItin.getOptional("hazOnItin")

        /**
         * Number of pieces of hazardous cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazPieces(): Optional<Int> = hazPieces.getOptional("hazPieces")

        /**
         * Transportation Control Number (TCN) of the hazardous item.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazTcn(): Optional<String> = hazTcn.getOptional("hazTcn")

        /**
         * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hazWeight(): Optional<Double> = hazWeight.getOptional("hazWeight")

        /**
         * United Nations proper shipping name of the hazardous material according to the Hazardous
         * Materials Regulations issued by the U.S. Department of Transportation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun itemName(): Optional<String> = itemName.getOptional("itemName")

        /**
         * Manufacturer's lot number for identification of the hazardous material.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lotNum(): Optional<String> = lotNum.getOptional("lotNum")

        /**
         * Net explosive weight of the hazardous material, in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun netExpWt(): Optional<Double> = netExpWt.getOptional("netExpWt")

        /**
         * Returns the raw JSON value of [ashc].
         *
         * Unlike [ashc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ashc") @ExcludeMissing fun _ashc(): JsonField<String> = ashc

        /**
         * Returns the raw JSON value of [cgc].
         *
         * Unlike [cgc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cgc") @ExcludeMissing fun _cgc(): JsonField<String> = cgc

        /**
         * Returns the raw JSON value of [classDiv].
         *
         * Unlike [classDiv], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("classDiv") @ExcludeMissing fun _classDiv(): JsonField<String> = classDiv

        /**
         * Returns the raw JSON value of [hazDescription].
         *
         * Unlike [hazDescription], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("hazDescription")
        @ExcludeMissing
        fun _hazDescription(): JsonField<String> = hazDescription

        /**
         * Returns the raw JSON value of [hazmatRemarks].
         *
         * Unlike [hazmatRemarks], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("hazmatRemarks")
        @ExcludeMissing
        fun _hazmatRemarks(): JsonField<String> = hazmatRemarks

        /**
         * Returns the raw JSON value of [hazNum].
         *
         * Unlike [hazNum], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazNum") @ExcludeMissing fun _hazNum(): JsonField<String> = hazNum

        /**
         * Returns the raw JSON value of [hazNumType].
         *
         * Unlike [hazNumType], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazNumType")
        @ExcludeMissing
        fun _hazNumType(): JsonField<String> = hazNumType

        /**
         * Returns the raw JSON value of [hazOffIcao].
         *
         * Unlike [hazOffIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazOffICAO")
        @ExcludeMissing
        fun _hazOffIcao(): JsonField<String> = hazOffIcao

        /**
         * Returns the raw JSON value of [hazOffItin].
         *
         * Unlike [hazOffItin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazOffItin") @ExcludeMissing fun _hazOffItin(): JsonField<Int> = hazOffItin

        /**
         * Returns the raw JSON value of [hazOnIcao].
         *
         * Unlike [hazOnIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazOnICAO") @ExcludeMissing fun _hazOnIcao(): JsonField<String> = hazOnIcao

        /**
         * Returns the raw JSON value of [hazOnItin].
         *
         * Unlike [hazOnItin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazOnItin") @ExcludeMissing fun _hazOnItin(): JsonField<Int> = hazOnItin

        /**
         * Returns the raw JSON value of [hazPieces].
         *
         * Unlike [hazPieces], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazPieces") @ExcludeMissing fun _hazPieces(): JsonField<Int> = hazPieces

        /**
         * Returns the raw JSON value of [hazTcn].
         *
         * Unlike [hazTcn], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazTcn") @ExcludeMissing fun _hazTcn(): JsonField<String> = hazTcn

        /**
         * Returns the raw JSON value of [hazWeight].
         *
         * Unlike [hazWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hazWeight") @ExcludeMissing fun _hazWeight(): JsonField<Double> = hazWeight

        /**
         * Returns the raw JSON value of [itemName].
         *
         * Unlike [itemName], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("itemName") @ExcludeMissing fun _itemName(): JsonField<String> = itemName

        /**
         * Returns the raw JSON value of [lotNum].
         *
         * Unlike [lotNum], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("lotNum") @ExcludeMissing fun _lotNum(): JsonField<String> = lotNum

        /**
         * Returns the raw JSON value of [netExpWt].
         *
         * Unlike [netExpWt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("netExpWt") @ExcludeMissing fun _netExpWt(): JsonField<Double> = netExpWt

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [AirLoadPlanHazmatActual].
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AirLoadPlanHazmatActual]. */
        class Builder internal constructor() {

            private var ashc: JsonField<String> = JsonMissing.of()
            private var cgc: JsonField<String> = JsonMissing.of()
            private var classDiv: JsonField<String> = JsonMissing.of()
            private var hazDescription: JsonField<String> = JsonMissing.of()
            private var hazmatRemarks: JsonField<String> = JsonMissing.of()
            private var hazNum: JsonField<String> = JsonMissing.of()
            private var hazNumType: JsonField<String> = JsonMissing.of()
            private var hazOffIcao: JsonField<String> = JsonMissing.of()
            private var hazOffItin: JsonField<Int> = JsonMissing.of()
            private var hazOnIcao: JsonField<String> = JsonMissing.of()
            private var hazOnItin: JsonField<Int> = JsonMissing.of()
            private var hazPieces: JsonField<Int> = JsonMissing.of()
            private var hazTcn: JsonField<String> = JsonMissing.of()
            private var hazWeight: JsonField<Double> = JsonMissing.of()
            private var itemName: JsonField<String> = JsonMissing.of()
            private var lotNum: JsonField<String> = JsonMissing.of()
            private var netExpWt: JsonField<Double> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(airLoadPlanHazmatActual: AirLoadPlanHazmatActual) = apply {
                ashc = airLoadPlanHazmatActual.ashc
                cgc = airLoadPlanHazmatActual.cgc
                classDiv = airLoadPlanHazmatActual.classDiv
                hazDescription = airLoadPlanHazmatActual.hazDescription
                hazmatRemarks = airLoadPlanHazmatActual.hazmatRemarks
                hazNum = airLoadPlanHazmatActual.hazNum
                hazNumType = airLoadPlanHazmatActual.hazNumType
                hazOffIcao = airLoadPlanHazmatActual.hazOffIcao
                hazOffItin = airLoadPlanHazmatActual.hazOffItin
                hazOnIcao = airLoadPlanHazmatActual.hazOnIcao
                hazOnItin = airLoadPlanHazmatActual.hazOnItin
                hazPieces = airLoadPlanHazmatActual.hazPieces
                hazTcn = airLoadPlanHazmatActual.hazTcn
                hazWeight = airLoadPlanHazmatActual.hazWeight
                itemName = airLoadPlanHazmatActual.itemName
                lotNum = airLoadPlanHazmatActual.lotNum
                netExpWt = airLoadPlanHazmatActual.netExpWt
                additionalProperties = airLoadPlanHazmatActual.additionalProperties.toMutableMap()
            }

            /**
             * The Air Special Handling Code (ASHC) indicates the type of special handling required
             * for hazardous cargo.
             */
            fun ashc(ashc: String) = ashc(JsonField.of(ashc))

            /**
             * Sets [Builder.ashc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ashc] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun ashc(ashc: JsonField<String>) = apply { this.ashc = ashc }

            /**
             * Compatibility group code used to specify the controls for the transportation and
             * storage of hazardous materials according to the Hazardous Materials Regulations
             * issued by the U.S. Department of Transportation.
             */
            fun cgc(cgc: String) = cgc(JsonField.of(cgc))

            /**
             * Sets [Builder.cgc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cgc] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun cgc(cgc: JsonField<String>) = apply { this.cgc = cgc }

            /**
             * Class and division of the hazardous material according to the Hazardous Materials
             * Regulations issued by the U.S. Department of Transportation.
             */
            fun classDiv(classDiv: String) = classDiv(JsonField.of(classDiv))

            /**
             * Sets [Builder.classDiv] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classDiv] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun classDiv(classDiv: JsonField<String>) = apply { this.classDiv = classDiv }

            /** Description of the hazardous item. */
            fun hazDescription(hazDescription: String) =
                hazDescription(JsonField.of(hazDescription))

            /**
             * Sets [Builder.hazDescription] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazDescription] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazDescription(hazDescription: JsonField<String>) = apply {
                this.hazDescription = hazDescription
            }

            /** Remarks concerning this hazardous material. */
            fun hazmatRemarks(hazmatRemarks: String) = hazmatRemarks(JsonField.of(hazmatRemarks))

            /**
             * Sets [Builder.hazmatRemarks] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazmatRemarks] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazmatRemarks(hazmatRemarks: JsonField<String>) = apply {
                this.hazmatRemarks = hazmatRemarks
            }

            /**
             * United Nations number or North American number that identifies hazardous materials
             * according to the Hazardous Materials Regulations issued by the U.S. Department of
             * Transportation.
             */
            fun hazNum(hazNum: String) = hazNum(JsonField.of(hazNum))

            /**
             * Sets [Builder.hazNum] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazNum] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazNum(hazNum: JsonField<String>) = apply { this.hazNum = hazNum }

            /**
             * Designates the type of hazmat number for the item (UN for United Nations or NA for
             * North American).
             */
            fun hazNumType(hazNumType: String) = hazNumType(JsonField.of(hazNumType))

            /**
             * Sets [Builder.hazNumType] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazNumType] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazNumType(hazNumType: JsonField<String>) = apply { this.hazNumType = hazNumType }

            /**
             * The International Civil Aviation Organization (ICAO) code of the site where the
             * hazardous material is unloaded.
             */
            fun hazOffIcao(hazOffIcao: String) = hazOffIcao(JsonField.of(hazOffIcao))

            /**
             * Sets [Builder.hazOffIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazOffIcao] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazOffIcao(hazOffIcao: JsonField<String>) = apply { this.hazOffIcao = hazOffIcao }

            /** Itinerary number that identifies where the hazardous material is unloaded. */
            fun hazOffItin(hazOffItin: Int) = hazOffItin(JsonField.of(hazOffItin))

            /**
             * Sets [Builder.hazOffItin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazOffItin] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazOffItin(hazOffItin: JsonField<Int>) = apply { this.hazOffItin = hazOffItin }

            /**
             * The International Civil Aviation Organization (ICAO) code of the site where the
             * hazardous material is loaded.
             */
            fun hazOnIcao(hazOnIcao: String) = hazOnIcao(JsonField.of(hazOnIcao))

            /**
             * Sets [Builder.hazOnIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazOnIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazOnIcao(hazOnIcao: JsonField<String>) = apply { this.hazOnIcao = hazOnIcao }

            /** Itinerary number that identifies where the hazardous material is loaded. */
            fun hazOnItin(hazOnItin: Int) = hazOnItin(JsonField.of(hazOnItin))

            /**
             * Sets [Builder.hazOnItin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazOnItin] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazOnItin(hazOnItin: JsonField<Int>) = apply { this.hazOnItin = hazOnItin }

            /** Number of pieces of hazardous cargo. */
            fun hazPieces(hazPieces: Int) = hazPieces(JsonField.of(hazPieces))

            /**
             * Sets [Builder.hazPieces] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazPieces] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazPieces(hazPieces: JsonField<Int>) = apply { this.hazPieces = hazPieces }

            /** Transportation Control Number (TCN) of the hazardous item. */
            fun hazTcn(hazTcn: String) = hazTcn(JsonField.of(hazTcn))

            /**
             * Sets [Builder.hazTcn] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazTcn] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazTcn(hazTcn: JsonField<String>) = apply { this.hazTcn = hazTcn }

            /** Total weight of hazardous cargo, including non-explosive parts, in kilograms. */
            fun hazWeight(hazWeight: Double) = hazWeight(JsonField.of(hazWeight))

            /**
             * Sets [Builder.hazWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hazWeight] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hazWeight(hazWeight: JsonField<Double>) = apply { this.hazWeight = hazWeight }

            /**
             * United Nations proper shipping name of the hazardous material according to the
             * Hazardous Materials Regulations issued by the U.S. Department of Transportation.
             */
            fun itemName(itemName: String) = itemName(JsonField.of(itemName))

            /**
             * Sets [Builder.itemName] to an arbitrary JSON value.
             *
             * You should usually call [Builder.itemName] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun itemName(itemName: JsonField<String>) = apply { this.itemName = itemName }

            /** Manufacturer's lot number for identification of the hazardous material. */
            fun lotNum(lotNum: String) = lotNum(JsonField.of(lotNum))

            /**
             * Sets [Builder.lotNum] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lotNum] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun lotNum(lotNum: JsonField<String>) = apply { this.lotNum = lotNum }

            /** Net explosive weight of the hazardous material, in kilograms. */
            fun netExpWt(netExpWt: Double) = netExpWt(JsonField.of(netExpWt))

            /**
             * Sets [Builder.netExpWt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.netExpWt] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun netExpWt(netExpWt: JsonField<Double>) = apply { this.netExpWt = netExpWt }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [AirLoadPlanHazmatActual].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): AirLoadPlanHazmatActual =
                AirLoadPlanHazmatActual(
                    ashc,
                    cgc,
                    classDiv,
                    hazDescription,
                    hazmatRemarks,
                    hazNum,
                    hazNumType,
                    hazOffIcao,
                    hazOffItin,
                    hazOnIcao,
                    hazOnItin,
                    hazPieces,
                    hazTcn,
                    hazWeight,
                    itemName,
                    lotNum,
                    netExpWt,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): AirLoadPlanHazmatActual = apply {
            if (validated) {
                return@apply
            }

            ashc()
            cgc()
            classDiv()
            hazDescription()
            hazmatRemarks()
            hazNum()
            hazNumType()
            hazOffIcao()
            hazOffItin()
            hazOnIcao()
            hazOnItin()
            hazPieces()
            hazTcn()
            hazWeight()
            itemName()
            lotNum()
            netExpWt()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (ashc.asKnown().isPresent) 1 else 0) +
                (if (cgc.asKnown().isPresent) 1 else 0) +
                (if (classDiv.asKnown().isPresent) 1 else 0) +
                (if (hazDescription.asKnown().isPresent) 1 else 0) +
                (if (hazmatRemarks.asKnown().isPresent) 1 else 0) +
                (if (hazNum.asKnown().isPresent) 1 else 0) +
                (if (hazNumType.asKnown().isPresent) 1 else 0) +
                (if (hazOffIcao.asKnown().isPresent) 1 else 0) +
                (if (hazOffItin.asKnown().isPresent) 1 else 0) +
                (if (hazOnIcao.asKnown().isPresent) 1 else 0) +
                (if (hazOnItin.asKnown().isPresent) 1 else 0) +
                (if (hazPieces.asKnown().isPresent) 1 else 0) +
                (if (hazTcn.asKnown().isPresent) 1 else 0) +
                (if (hazWeight.asKnown().isPresent) 1 else 0) +
                (if (itemName.asKnown().isPresent) 1 else 0) +
                (if (lotNum.asKnown().isPresent) 1 else 0) +
                (if (netExpWt.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirLoadPlanHazmatActual &&
                ashc == other.ashc &&
                cgc == other.cgc &&
                classDiv == other.classDiv &&
                hazDescription == other.hazDescription &&
                hazmatRemarks == other.hazmatRemarks &&
                hazNum == other.hazNum &&
                hazNumType == other.hazNumType &&
                hazOffIcao == other.hazOffIcao &&
                hazOffItin == other.hazOffItin &&
                hazOnIcao == other.hazOnIcao &&
                hazOnItin == other.hazOnItin &&
                hazPieces == other.hazPieces &&
                hazTcn == other.hazTcn &&
                hazWeight == other.hazWeight &&
                itemName == other.itemName &&
                lotNum == other.lotNum &&
                netExpWt == other.netExpWt &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                ashc,
                cgc,
                classDiv,
                hazDescription,
                hazmatRemarks,
                hazNum,
                hazNumType,
                hazOffIcao,
                hazOffItin,
                hazOnIcao,
                hazOnItin,
                hazPieces,
                hazTcn,
                hazWeight,
                itemName,
                lotNum,
                netExpWt,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AirLoadPlanHazmatActual{ashc=$ashc, cgc=$cgc, classDiv=$classDiv, hazDescription=$hazDescription, hazmatRemarks=$hazmatRemarks, hazNum=$hazNum, hazNumType=$hazNumType, hazOffIcao=$hazOffIcao, hazOffItin=$hazOffItin, hazOnIcao=$hazOnIcao, hazOnItin=$hazOnItin, hazPieces=$hazPieces, hazTcn=$hazTcn, hazWeight=$hazWeight, itemName=$itemName, lotNum=$lotNum, netExpWt=$netExpWt, additionalProperties=$additionalProperties}"
    }

    /** Collection of human remains transport information associated with this load plan. */
    class AirLoadPlanHr
    private constructor(
        private val container: JsonField<String>,
        private val escort: JsonField<String>,
        private val hrEstArrTime: JsonField<OffsetDateTime>,
        private val hrOffIcao: JsonField<String>,
        private val hrOffItin: JsonField<Int>,
        private val hrOnIcao: JsonField<String>,
        private val hrOnItin: JsonField<Int>,
        private val hrRemarks: JsonField<String>,
        private val name: JsonField<String>,
        private val rank: JsonField<String>,
        private val recAgency: JsonField<String>,
        private val service: JsonField<String>,
        private val viewable: JsonField<Boolean>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("container")
            @ExcludeMissing
            container: JsonField<String> = JsonMissing.of(),
            @JsonProperty("escort") @ExcludeMissing escort: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hrEstArrTime")
            @ExcludeMissing
            hrEstArrTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("hrOffICAO")
            @ExcludeMissing
            hrOffIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hrOffItin") @ExcludeMissing hrOffItin: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("hrOnICAO")
            @ExcludeMissing
            hrOnIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hrOnItin") @ExcludeMissing hrOnItin: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("hrRemarks")
            @ExcludeMissing
            hrRemarks: JsonField<String> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("rank") @ExcludeMissing rank: JsonField<String> = JsonMissing.of(),
            @JsonProperty("recAgency")
            @ExcludeMissing
            recAgency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("service") @ExcludeMissing service: JsonField<String> = JsonMissing.of(),
            @JsonProperty("viewable")
            @ExcludeMissing
            viewable: JsonField<Boolean> = JsonMissing.of(),
        ) : this(
            container,
            escort,
            hrEstArrTime,
            hrOffIcao,
            hrOffItin,
            hrOnIcao,
            hrOnItin,
            hrRemarks,
            name,
            rank,
            recAgency,
            service,
            viewable,
            mutableMapOf(),
        )

        /**
         * Type of transfer case used.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun container(): Optional<String> = container.getOptional("container")

        /**
         * Name of the escort for the remains.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun escort(): Optional<String> = escort.getOptional("escort")

        /**
         * The current estimated time of arrival for the remains in ISO 8601 UTC format with
         * millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrEstArrTime(): Optional<OffsetDateTime> = hrEstArrTime.getOptional("hrEstArrTime")

        /**
         * The International Civil Aviation Organization (ICAO) code of the site where the remains
         * are unloaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrOffIcao(): Optional<String> = hrOffIcao.getOptional("hrOffICAO")

        /**
         * Itinerary number that identifies where the remains are unloaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrOffItin(): Optional<Int> = hrOffItin.getOptional("hrOffItin")

        /**
         * The International Civil Aviation Organization (ICAO) code of the site where the remains
         * are loaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrOnIcao(): Optional<String> = hrOnIcao.getOptional("hrOnICAO")

        /**
         * Itinerary number that identifies where the remains are loaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrOnItin(): Optional<Int> = hrOnItin.getOptional("hrOnItin")

        /**
         * Remarks concerning the remains.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hrRemarks(): Optional<String> = hrRemarks.getOptional("hrRemarks")

        /**
         * Name of the deceased.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun name(): Optional<String> = name.getOptional("name")

        /**
         * Rank of the deceased.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun rank(): Optional<String> = rank.getOptional("rank")

        /**
         * Name of the receiving agency or funeral home to which the remains are being delivered.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun recAgency(): Optional<String> = recAgency.getOptional("recAgency")

        /**
         * Branch of service of the deceased.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun service(): Optional<String> = service.getOptional("service")

        /**
         * Flag indicating if the remains are viewable.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun viewable(): Optional<Boolean> = viewable.getOptional("viewable")

        /**
         * Returns the raw JSON value of [container].
         *
         * Unlike [container], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("container") @ExcludeMissing fun _container(): JsonField<String> = container

        /**
         * Returns the raw JSON value of [escort].
         *
         * Unlike [escort], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("escort") @ExcludeMissing fun _escort(): JsonField<String> = escort

        /**
         * Returns the raw JSON value of [hrEstArrTime].
         *
         * Unlike [hrEstArrTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("hrEstArrTime")
        @ExcludeMissing
        fun _hrEstArrTime(): JsonField<OffsetDateTime> = hrEstArrTime

        /**
         * Returns the raw JSON value of [hrOffIcao].
         *
         * Unlike [hrOffIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hrOffICAO") @ExcludeMissing fun _hrOffIcao(): JsonField<String> = hrOffIcao

        /**
         * Returns the raw JSON value of [hrOffItin].
         *
         * Unlike [hrOffItin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hrOffItin") @ExcludeMissing fun _hrOffItin(): JsonField<Int> = hrOffItin

        /**
         * Returns the raw JSON value of [hrOnIcao].
         *
         * Unlike [hrOnIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hrOnICAO") @ExcludeMissing fun _hrOnIcao(): JsonField<String> = hrOnIcao

        /**
         * Returns the raw JSON value of [hrOnItin].
         *
         * Unlike [hrOnItin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hrOnItin") @ExcludeMissing fun _hrOnItin(): JsonField<Int> = hrOnItin

        /**
         * Returns the raw JSON value of [hrRemarks].
         *
         * Unlike [hrRemarks], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hrRemarks") @ExcludeMissing fun _hrRemarks(): JsonField<String> = hrRemarks

        /**
         * Returns the raw JSON value of [name].
         *
         * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

        /**
         * Returns the raw JSON value of [rank].
         *
         * Unlike [rank], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("rank") @ExcludeMissing fun _rank(): JsonField<String> = rank

        /**
         * Returns the raw JSON value of [recAgency].
         *
         * Unlike [recAgency], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("recAgency") @ExcludeMissing fun _recAgency(): JsonField<String> = recAgency

        /**
         * Returns the raw JSON value of [service].
         *
         * Unlike [service], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("service") @ExcludeMissing fun _service(): JsonField<String> = service

        /**
         * Returns the raw JSON value of [viewable].
         *
         * Unlike [viewable], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("viewable") @ExcludeMissing fun _viewable(): JsonField<Boolean> = viewable

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [AirLoadPlanHr]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AirLoadPlanHr]. */
        class Builder internal constructor() {

            private var container: JsonField<String> = JsonMissing.of()
            private var escort: JsonField<String> = JsonMissing.of()
            private var hrEstArrTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var hrOffIcao: JsonField<String> = JsonMissing.of()
            private var hrOffItin: JsonField<Int> = JsonMissing.of()
            private var hrOnIcao: JsonField<String> = JsonMissing.of()
            private var hrOnItin: JsonField<Int> = JsonMissing.of()
            private var hrRemarks: JsonField<String> = JsonMissing.of()
            private var name: JsonField<String> = JsonMissing.of()
            private var rank: JsonField<String> = JsonMissing.of()
            private var recAgency: JsonField<String> = JsonMissing.of()
            private var service: JsonField<String> = JsonMissing.of()
            private var viewable: JsonField<Boolean> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(airLoadPlanHr: AirLoadPlanHr) = apply {
                container = airLoadPlanHr.container
                escort = airLoadPlanHr.escort
                hrEstArrTime = airLoadPlanHr.hrEstArrTime
                hrOffIcao = airLoadPlanHr.hrOffIcao
                hrOffItin = airLoadPlanHr.hrOffItin
                hrOnIcao = airLoadPlanHr.hrOnIcao
                hrOnItin = airLoadPlanHr.hrOnItin
                hrRemarks = airLoadPlanHr.hrRemarks
                name = airLoadPlanHr.name
                rank = airLoadPlanHr.rank
                recAgency = airLoadPlanHr.recAgency
                service = airLoadPlanHr.service
                viewable = airLoadPlanHr.viewable
                additionalProperties = airLoadPlanHr.additionalProperties.toMutableMap()
            }

            /** Type of transfer case used. */
            fun container(container: String) = container(JsonField.of(container))

            /**
             * Sets [Builder.container] to an arbitrary JSON value.
             *
             * You should usually call [Builder.container] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun container(container: JsonField<String>) = apply { this.container = container }

            /** Name of the escort for the remains. */
            fun escort(escort: String) = escort(JsonField.of(escort))

            /**
             * Sets [Builder.escort] to an arbitrary JSON value.
             *
             * You should usually call [Builder.escort] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun escort(escort: JsonField<String>) = apply { this.escort = escort }

            /**
             * The current estimated time of arrival for the remains in ISO 8601 UTC format with
             * millisecond precision.
             */
            fun hrEstArrTime(hrEstArrTime: OffsetDateTime) =
                hrEstArrTime(JsonField.of(hrEstArrTime))

            /**
             * Sets [Builder.hrEstArrTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrEstArrTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun hrEstArrTime(hrEstArrTime: JsonField<OffsetDateTime>) = apply {
                this.hrEstArrTime = hrEstArrTime
            }

            /**
             * The International Civil Aviation Organization (ICAO) code of the site where the
             * remains are unloaded.
             */
            fun hrOffIcao(hrOffIcao: String) = hrOffIcao(JsonField.of(hrOffIcao))

            /**
             * Sets [Builder.hrOffIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrOffIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hrOffIcao(hrOffIcao: JsonField<String>) = apply { this.hrOffIcao = hrOffIcao }

            /** Itinerary number that identifies where the remains are unloaded. */
            fun hrOffItin(hrOffItin: Int) = hrOffItin(JsonField.of(hrOffItin))

            /**
             * Sets [Builder.hrOffItin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrOffItin] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hrOffItin(hrOffItin: JsonField<Int>) = apply { this.hrOffItin = hrOffItin }

            /**
             * The International Civil Aviation Organization (ICAO) code of the site where the
             * remains are loaded.
             */
            fun hrOnIcao(hrOnIcao: String) = hrOnIcao(JsonField.of(hrOnIcao))

            /**
             * Sets [Builder.hrOnIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrOnIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hrOnIcao(hrOnIcao: JsonField<String>) = apply { this.hrOnIcao = hrOnIcao }

            /** Itinerary number that identifies where the remains are loaded. */
            fun hrOnItin(hrOnItin: Int) = hrOnItin(JsonField.of(hrOnItin))

            /**
             * Sets [Builder.hrOnItin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrOnItin] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hrOnItin(hrOnItin: JsonField<Int>) = apply { this.hrOnItin = hrOnItin }

            /** Remarks concerning the remains. */
            fun hrRemarks(hrRemarks: String) = hrRemarks(JsonField.of(hrRemarks))

            /**
             * Sets [Builder.hrRemarks] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hrRemarks] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hrRemarks(hrRemarks: JsonField<String>) = apply { this.hrRemarks = hrRemarks }

            /** Name of the deceased. */
            fun name(name: String) = name(JsonField.of(name))

            /**
             * Sets [Builder.name] to an arbitrary JSON value.
             *
             * You should usually call [Builder.name] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun name(name: JsonField<String>) = apply { this.name = name }

            /** Rank of the deceased. */
            fun rank(rank: String) = rank(JsonField.of(rank))

            /**
             * Sets [Builder.rank] to an arbitrary JSON value.
             *
             * You should usually call [Builder.rank] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun rank(rank: JsonField<String>) = apply { this.rank = rank }

            /**
             * Name of the receiving agency or funeral home to which the remains are being
             * delivered.
             */
            fun recAgency(recAgency: String) = recAgency(JsonField.of(recAgency))

            /**
             * Sets [Builder.recAgency] to an arbitrary JSON value.
             *
             * You should usually call [Builder.recAgency] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun recAgency(recAgency: JsonField<String>) = apply { this.recAgency = recAgency }

            /** Branch of service of the deceased. */
            fun service(service: String) = service(JsonField.of(service))

            /**
             * Sets [Builder.service] to an arbitrary JSON value.
             *
             * You should usually call [Builder.service] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun service(service: JsonField<String>) = apply { this.service = service }

            /** Flag indicating if the remains are viewable. */
            fun viewable(viewable: Boolean) = viewable(JsonField.of(viewable))

            /**
             * Sets [Builder.viewable] to an arbitrary JSON value.
             *
             * You should usually call [Builder.viewable] with a well-typed [Boolean] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun viewable(viewable: JsonField<Boolean>) = apply { this.viewable = viewable }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [AirLoadPlanHr].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): AirLoadPlanHr =
                AirLoadPlanHr(
                    container,
                    escort,
                    hrEstArrTime,
                    hrOffIcao,
                    hrOffItin,
                    hrOnIcao,
                    hrOnItin,
                    hrRemarks,
                    name,
                    rank,
                    recAgency,
                    service,
                    viewable,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): AirLoadPlanHr = apply {
            if (validated) {
                return@apply
            }

            container()
            escort()
            hrEstArrTime()
            hrOffIcao()
            hrOffItin()
            hrOnIcao()
            hrOnItin()
            hrRemarks()
            name()
            rank()
            recAgency()
            service()
            viewable()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (container.asKnown().isPresent) 1 else 0) +
                (if (escort.asKnown().isPresent) 1 else 0) +
                (if (hrEstArrTime.asKnown().isPresent) 1 else 0) +
                (if (hrOffIcao.asKnown().isPresent) 1 else 0) +
                (if (hrOffItin.asKnown().isPresent) 1 else 0) +
                (if (hrOnIcao.asKnown().isPresent) 1 else 0) +
                (if (hrOnItin.asKnown().isPresent) 1 else 0) +
                (if (hrRemarks.asKnown().isPresent) 1 else 0) +
                (if (name.asKnown().isPresent) 1 else 0) +
                (if (rank.asKnown().isPresent) 1 else 0) +
                (if (recAgency.asKnown().isPresent) 1 else 0) +
                (if (service.asKnown().isPresent) 1 else 0) +
                (if (viewable.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirLoadPlanHr &&
                container == other.container &&
                escort == other.escort &&
                hrEstArrTime == other.hrEstArrTime &&
                hrOffIcao == other.hrOffIcao &&
                hrOffItin == other.hrOffItin &&
                hrOnIcao == other.hrOnIcao &&
                hrOnItin == other.hrOnItin &&
                hrRemarks == other.hrRemarks &&
                name == other.name &&
                rank == other.rank &&
                recAgency == other.recAgency &&
                service == other.service &&
                viewable == other.viewable &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                container,
                escort,
                hrEstArrTime,
                hrOffIcao,
                hrOffItin,
                hrOnIcao,
                hrOnItin,
                hrRemarks,
                name,
                rank,
                recAgency,
                service,
                viewable,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AirLoadPlanHr{container=$container, escort=$escort, hrEstArrTime=$hrEstArrTime, hrOffIcao=$hrOffIcao, hrOffItin=$hrOffItin, hrOnIcao=$hrOnIcao, hrOnItin=$hrOnItin, hrRemarks=$hrRemarks, name=$name, rank=$rank, recAgency=$recAgency, service=$service, viewable=$viewable, additionalProperties=$additionalProperties}"
    }

    /**
     * Collection of cargo information located at the pallet positions associated with this load
     * plan.
     */
    class AirLoadPlanPalletDetail
    private constructor(
        private val category: JsonField<String>,
        private val pp: JsonField<String>,
        private val ppDescription: JsonField<String>,
        private val ppOffIcao: JsonField<String>,
        private val ppPieces: JsonField<Int>,
        private val ppRemarks: JsonField<String>,
        private val ppTcn: JsonField<String>,
        private val ppWeight: JsonField<Double>,
        private val specialInterest: JsonField<Boolean>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("category")
            @ExcludeMissing
            category: JsonField<String> = JsonMissing.of(),
            @JsonProperty("pp") @ExcludeMissing pp: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppDescription")
            @ExcludeMissing
            ppDescription: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppOffICAO")
            @ExcludeMissing
            ppOffIcao: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppPieces") @ExcludeMissing ppPieces: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("ppRemarks")
            @ExcludeMissing
            ppRemarks: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppTcn") @ExcludeMissing ppTcn: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ppWeight")
            @ExcludeMissing
            ppWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("specialInterest")
            @ExcludeMissing
            specialInterest: JsonField<Boolean> = JsonMissing.of(),
        ) : this(
            category,
            pp,
            ppDescription,
            ppOffIcao,
            ppPieces,
            ppRemarks,
            ppTcn,
            ppWeight,
            specialInterest,
            mutableMapOf(),
        )

        /**
         * Category of special interest cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun category(): Optional<String> = category.getOptional("category")

        /**
         * Pallet position of the cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun pp(): Optional<String> = pp.getOptional("pp")

        /**
         * Description of the cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppDescription(): Optional<String> = ppDescription.getOptional("ppDescription")

        /**
         * The International Civil Aviation Organization (ICAO) code of the site where the cargo is
         * unloaded.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppOffIcao(): Optional<String> = ppOffIcao.getOptional("ppOffICAO")

        /**
         * Number of pieces included in the Transportation Control Number (TCN).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppPieces(): Optional<Int> = ppPieces.getOptional("ppPieces")

        /**
         * Remarks concerning the cargo at this pallet position.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppRemarks(): Optional<String> = ppRemarks.getOptional("ppRemarks")

        /**
         * Transportation Control Number (TCN) of the cargo.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppTcn(): Optional<String> = ppTcn.getOptional("ppTcn")

        /**
         * Total weight of the cargo at this pallet position in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ppWeight(): Optional<Double> = ppWeight.getOptional("ppWeight")

        /**
         * Flag indicating if this cargo is considered special interest.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun specialInterest(): Optional<Boolean> = specialInterest.getOptional("specialInterest")

        /**
         * Returns the raw JSON value of [category].
         *
         * Unlike [category], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("category") @ExcludeMissing fun _category(): JsonField<String> = category

        /**
         * Returns the raw JSON value of [pp].
         *
         * Unlike [pp], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("pp") @ExcludeMissing fun _pp(): JsonField<String> = pp

        /**
         * Returns the raw JSON value of [ppDescription].
         *
         * Unlike [ppDescription], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("ppDescription")
        @ExcludeMissing
        fun _ppDescription(): JsonField<String> = ppDescription

        /**
         * Returns the raw JSON value of [ppOffIcao].
         *
         * Unlike [ppOffIcao], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppOffICAO") @ExcludeMissing fun _ppOffIcao(): JsonField<String> = ppOffIcao

        /**
         * Returns the raw JSON value of [ppPieces].
         *
         * Unlike [ppPieces], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppPieces") @ExcludeMissing fun _ppPieces(): JsonField<Int> = ppPieces

        /**
         * Returns the raw JSON value of [ppRemarks].
         *
         * Unlike [ppRemarks], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppRemarks") @ExcludeMissing fun _ppRemarks(): JsonField<String> = ppRemarks

        /**
         * Returns the raw JSON value of [ppTcn].
         *
         * Unlike [ppTcn], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppTcn") @ExcludeMissing fun _ppTcn(): JsonField<String> = ppTcn

        /**
         * Returns the raw JSON value of [ppWeight].
         *
         * Unlike [ppWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ppWeight") @ExcludeMissing fun _ppWeight(): JsonField<Double> = ppWeight

        /**
         * Returns the raw JSON value of [specialInterest].
         *
         * Unlike [specialInterest], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("specialInterest")
        @ExcludeMissing
        fun _specialInterest(): JsonField<Boolean> = specialInterest

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [AirLoadPlanPalletDetail].
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AirLoadPlanPalletDetail]. */
        class Builder internal constructor() {

            private var category: JsonField<String> = JsonMissing.of()
            private var pp: JsonField<String> = JsonMissing.of()
            private var ppDescription: JsonField<String> = JsonMissing.of()
            private var ppOffIcao: JsonField<String> = JsonMissing.of()
            private var ppPieces: JsonField<Int> = JsonMissing.of()
            private var ppRemarks: JsonField<String> = JsonMissing.of()
            private var ppTcn: JsonField<String> = JsonMissing.of()
            private var ppWeight: JsonField<Double> = JsonMissing.of()
            private var specialInterest: JsonField<Boolean> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(airLoadPlanPalletDetail: AirLoadPlanPalletDetail) = apply {
                category = airLoadPlanPalletDetail.category
                pp = airLoadPlanPalletDetail.pp
                ppDescription = airLoadPlanPalletDetail.ppDescription
                ppOffIcao = airLoadPlanPalletDetail.ppOffIcao
                ppPieces = airLoadPlanPalletDetail.ppPieces
                ppRemarks = airLoadPlanPalletDetail.ppRemarks
                ppTcn = airLoadPlanPalletDetail.ppTcn
                ppWeight = airLoadPlanPalletDetail.ppWeight
                specialInterest = airLoadPlanPalletDetail.specialInterest
                additionalProperties = airLoadPlanPalletDetail.additionalProperties.toMutableMap()
            }

            /** Category of special interest cargo. */
            fun category(category: String) = category(JsonField.of(category))

            /**
             * Sets [Builder.category] to an arbitrary JSON value.
             *
             * You should usually call [Builder.category] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun category(category: JsonField<String>) = apply { this.category = category }

            /** Pallet position of the cargo. */
            fun pp(pp: String) = pp(JsonField.of(pp))

            /**
             * Sets [Builder.pp] to an arbitrary JSON value.
             *
             * You should usually call [Builder.pp] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun pp(pp: JsonField<String>) = apply { this.pp = pp }

            /** Description of the cargo. */
            fun ppDescription(ppDescription: String) = ppDescription(JsonField.of(ppDescription))

            /**
             * Sets [Builder.ppDescription] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppDescription] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppDescription(ppDescription: JsonField<String>) = apply {
                this.ppDescription = ppDescription
            }

            /**
             * The International Civil Aviation Organization (ICAO) code of the site where the cargo
             * is unloaded.
             */
            fun ppOffIcao(ppOffIcao: String) = ppOffIcao(JsonField.of(ppOffIcao))

            /**
             * Sets [Builder.ppOffIcao] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppOffIcao] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppOffIcao(ppOffIcao: JsonField<String>) = apply { this.ppOffIcao = ppOffIcao }

            /** Number of pieces included in the Transportation Control Number (TCN). */
            fun ppPieces(ppPieces: Int) = ppPieces(JsonField.of(ppPieces))

            /**
             * Sets [Builder.ppPieces] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppPieces] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppPieces(ppPieces: JsonField<Int>) = apply { this.ppPieces = ppPieces }

            /** Remarks concerning the cargo at this pallet position. */
            fun ppRemarks(ppRemarks: String) = ppRemarks(JsonField.of(ppRemarks))

            /**
             * Sets [Builder.ppRemarks] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppRemarks] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppRemarks(ppRemarks: JsonField<String>) = apply { this.ppRemarks = ppRemarks }

            /** Transportation Control Number (TCN) of the cargo. */
            fun ppTcn(ppTcn: String) = ppTcn(JsonField.of(ppTcn))

            /**
             * Sets [Builder.ppTcn] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppTcn] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppTcn(ppTcn: JsonField<String>) = apply { this.ppTcn = ppTcn }

            /** Total weight of the cargo at this pallet position in kilograms. */
            fun ppWeight(ppWeight: Double) = ppWeight(JsonField.of(ppWeight))

            /**
             * Sets [Builder.ppWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ppWeight] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ppWeight(ppWeight: JsonField<Double>) = apply { this.ppWeight = ppWeight }

            /** Flag indicating if this cargo is considered special interest. */
            fun specialInterest(specialInterest: Boolean) =
                specialInterest(JsonField.of(specialInterest))

            /**
             * Sets [Builder.specialInterest] to an arbitrary JSON value.
             *
             * You should usually call [Builder.specialInterest] with a well-typed [Boolean] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun specialInterest(specialInterest: JsonField<Boolean>) = apply {
                this.specialInterest = specialInterest
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [AirLoadPlanPalletDetail].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): AirLoadPlanPalletDetail =
                AirLoadPlanPalletDetail(
                    category,
                    pp,
                    ppDescription,
                    ppOffIcao,
                    ppPieces,
                    ppRemarks,
                    ppTcn,
                    ppWeight,
                    specialInterest,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): AirLoadPlanPalletDetail = apply {
            if (validated) {
                return@apply
            }

            category()
            pp()
            ppDescription()
            ppOffIcao()
            ppPieces()
            ppRemarks()
            ppTcn()
            ppWeight()
            specialInterest()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (category.asKnown().isPresent) 1 else 0) +
                (if (pp.asKnown().isPresent) 1 else 0) +
                (if (ppDescription.asKnown().isPresent) 1 else 0) +
                (if (ppOffIcao.asKnown().isPresent) 1 else 0) +
                (if (ppPieces.asKnown().isPresent) 1 else 0) +
                (if (ppRemarks.asKnown().isPresent) 1 else 0) +
                (if (ppTcn.asKnown().isPresent) 1 else 0) +
                (if (ppWeight.asKnown().isPresent) 1 else 0) +
                (if (specialInterest.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirLoadPlanPalletDetail &&
                category == other.category &&
                pp == other.pp &&
                ppDescription == other.ppDescription &&
                ppOffIcao == other.ppOffIcao &&
                ppPieces == other.ppPieces &&
                ppRemarks == other.ppRemarks &&
                ppTcn == other.ppTcn &&
                ppWeight == other.ppWeight &&
                specialInterest == other.specialInterest &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                category,
                pp,
                ppDescription,
                ppOffIcao,
                ppPieces,
                ppRemarks,
                ppTcn,
                ppWeight,
                specialInterest,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AirLoadPlanPalletDetail{category=$category, pp=$pp, ppDescription=$ppDescription, ppOffIcao=$ppOffIcao, ppPieces=$ppPieces, ppRemarks=$ppRemarks, ppTcn=$ppTcn, ppWeight=$ppWeight, specialInterest=$specialInterest, additionalProperties=$additionalProperties}"
    }

    /**
     * Collection of passenger and cargo details associated with this load plan for this leg of the
     * mission.
     */
    class AirLoadPlanPaxCargo
    private constructor(
        private val ambPax: JsonField<Int>,
        private val attPax: JsonField<Int>,
        private val availablePax: JsonField<Int>,
        private val bagWeight: JsonField<Double>,
        private val civPax: JsonField<Int>,
        private val dvPax: JsonField<Int>,
        private val fnPax: JsonField<Int>,
        private val groupCargoWeight: JsonField<Double>,
        private val groupType: JsonField<String>,
        private val litPax: JsonField<Int>,
        private val mailWeight: JsonField<Double>,
        private val numPallet: JsonField<Int>,
        private val palletWeight: JsonField<Double>,
        private val paxWeight: JsonField<Double>,
        private val requiredPax: JsonField<Int>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("ambPax") @ExcludeMissing ambPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("attPax") @ExcludeMissing attPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("availablePax")
            @ExcludeMissing
            availablePax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("bagWeight")
            @ExcludeMissing
            bagWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("civPax") @ExcludeMissing civPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("dvPax") @ExcludeMissing dvPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("fnPax") @ExcludeMissing fnPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("groupCargoWeight")
            @ExcludeMissing
            groupCargoWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("groupType")
            @ExcludeMissing
            groupType: JsonField<String> = JsonMissing.of(),
            @JsonProperty("litPax") @ExcludeMissing litPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("mailWeight")
            @ExcludeMissing
            mailWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("numPallet") @ExcludeMissing numPallet: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("palletWeight")
            @ExcludeMissing
            palletWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("paxWeight")
            @ExcludeMissing
            paxWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("requiredPax")
            @ExcludeMissing
            requiredPax: JsonField<Int> = JsonMissing.of(),
        ) : this(
            ambPax,
            attPax,
            availablePax,
            bagWeight,
            civPax,
            dvPax,
            fnPax,
            groupCargoWeight,
            groupType,
            litPax,
            mailWeight,
            numPallet,
            palletWeight,
            paxWeight,
            requiredPax,
            mutableMapOf(),
        )

        /**
         * Number of ambulatory medical passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ambPax(): Optional<Int> = ambPax.getOptional("ambPax")

        /**
         * Number of patient attendant passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun attPax(): Optional<Int> = attPax.getOptional("attPax")

        /**
         * Number of space available passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun availablePax(): Optional<Int> = availablePax.getOptional("availablePax")

        /**
         * Weight of baggage in this group in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bagWeight(): Optional<Double> = bagWeight.getOptional("bagWeight")

        /**
         * Number of civilian passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun civPax(): Optional<Int> = civPax.getOptional("civPax")

        /**
         * Number of distinguished visitor passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun dvPax(): Optional<Int> = dvPax.getOptional("dvPax")

        /**
         * Number of foreign national passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun fnPax(): Optional<Int> = fnPax.getOptional("fnPax")

        /**
         * Weight of cargo in this group in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun groupCargoWeight(): Optional<Double> = groupCargoWeight.getOptional("groupCargoWeight")

        /**
         * Describes the status or action needed for this group of passenger and cargo data (e.g.
         * ARRONBD, OFFTHIS, THROUGH, ONTHIS, DEPONBD, OFFNEXT).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun groupType(): Optional<String> = groupType.getOptional("groupType")

        /**
         * Number of litter-bound passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun litPax(): Optional<Int> = litPax.getOptional("litPax")

        /**
         * Weight of mail in this group in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun mailWeight(): Optional<Double> = mailWeight.getOptional("mailWeight")

        /**
         * Number of cargo pallets in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun numPallet(): Optional<Int> = numPallet.getOptional("numPallet")

        /**
         * Weight of pallets, chains, and devices in this group in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun palletWeight(): Optional<Double> = palletWeight.getOptional("palletWeight")

        /**
         * Weight of passengers in this group in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun paxWeight(): Optional<Double> = paxWeight.getOptional("paxWeight")

        /**
         * Number of space required passengers in this group.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun requiredPax(): Optional<Int> = requiredPax.getOptional("requiredPax")

        /**
         * Returns the raw JSON value of [ambPax].
         *
         * Unlike [ambPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ambPax") @ExcludeMissing fun _ambPax(): JsonField<Int> = ambPax

        /**
         * Returns the raw JSON value of [attPax].
         *
         * Unlike [attPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("attPax") @ExcludeMissing fun _attPax(): JsonField<Int> = attPax

        /**
         * Returns the raw JSON value of [availablePax].
         *
         * Unlike [availablePax], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("availablePax")
        @ExcludeMissing
        fun _availablePax(): JsonField<Int> = availablePax

        /**
         * Returns the raw JSON value of [bagWeight].
         *
         * Unlike [bagWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("bagWeight") @ExcludeMissing fun _bagWeight(): JsonField<Double> = bagWeight

        /**
         * Returns the raw JSON value of [civPax].
         *
         * Unlike [civPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("civPax") @ExcludeMissing fun _civPax(): JsonField<Int> = civPax

        /**
         * Returns the raw JSON value of [dvPax].
         *
         * Unlike [dvPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dvPax") @ExcludeMissing fun _dvPax(): JsonField<Int> = dvPax

        /**
         * Returns the raw JSON value of [fnPax].
         *
         * Unlike [fnPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fnPax") @ExcludeMissing fun _fnPax(): JsonField<Int> = fnPax

        /**
         * Returns the raw JSON value of [groupCargoWeight].
         *
         * Unlike [groupCargoWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("groupCargoWeight")
        @ExcludeMissing
        fun _groupCargoWeight(): JsonField<Double> = groupCargoWeight

        /**
         * Returns the raw JSON value of [groupType].
         *
         * Unlike [groupType], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("groupType") @ExcludeMissing fun _groupType(): JsonField<String> = groupType

        /**
         * Returns the raw JSON value of [litPax].
         *
         * Unlike [litPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("litPax") @ExcludeMissing fun _litPax(): JsonField<Int> = litPax

        /**
         * Returns the raw JSON value of [mailWeight].
         *
         * Unlike [mailWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("mailWeight")
        @ExcludeMissing
        fun _mailWeight(): JsonField<Double> = mailWeight

        /**
         * Returns the raw JSON value of [numPallet].
         *
         * Unlike [numPallet], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("numPallet") @ExcludeMissing fun _numPallet(): JsonField<Int> = numPallet

        /**
         * Returns the raw JSON value of [palletWeight].
         *
         * Unlike [palletWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("palletWeight")
        @ExcludeMissing
        fun _palletWeight(): JsonField<Double> = palletWeight

        /**
         * Returns the raw JSON value of [paxWeight].
         *
         * Unlike [paxWeight], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("paxWeight") @ExcludeMissing fun _paxWeight(): JsonField<Double> = paxWeight

        /**
         * Returns the raw JSON value of [requiredPax].
         *
         * Unlike [requiredPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("requiredPax")
        @ExcludeMissing
        fun _requiredPax(): JsonField<Int> = requiredPax

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [AirLoadPlanPaxCargo]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AirLoadPlanPaxCargo]. */
        class Builder internal constructor() {

            private var ambPax: JsonField<Int> = JsonMissing.of()
            private var attPax: JsonField<Int> = JsonMissing.of()
            private var availablePax: JsonField<Int> = JsonMissing.of()
            private var bagWeight: JsonField<Double> = JsonMissing.of()
            private var civPax: JsonField<Int> = JsonMissing.of()
            private var dvPax: JsonField<Int> = JsonMissing.of()
            private var fnPax: JsonField<Int> = JsonMissing.of()
            private var groupCargoWeight: JsonField<Double> = JsonMissing.of()
            private var groupType: JsonField<String> = JsonMissing.of()
            private var litPax: JsonField<Int> = JsonMissing.of()
            private var mailWeight: JsonField<Double> = JsonMissing.of()
            private var numPallet: JsonField<Int> = JsonMissing.of()
            private var palletWeight: JsonField<Double> = JsonMissing.of()
            private var paxWeight: JsonField<Double> = JsonMissing.of()
            private var requiredPax: JsonField<Int> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(airLoadPlanPaxCargo: AirLoadPlanPaxCargo) = apply {
                ambPax = airLoadPlanPaxCargo.ambPax
                attPax = airLoadPlanPaxCargo.attPax
                availablePax = airLoadPlanPaxCargo.availablePax
                bagWeight = airLoadPlanPaxCargo.bagWeight
                civPax = airLoadPlanPaxCargo.civPax
                dvPax = airLoadPlanPaxCargo.dvPax
                fnPax = airLoadPlanPaxCargo.fnPax
                groupCargoWeight = airLoadPlanPaxCargo.groupCargoWeight
                groupType = airLoadPlanPaxCargo.groupType
                litPax = airLoadPlanPaxCargo.litPax
                mailWeight = airLoadPlanPaxCargo.mailWeight
                numPallet = airLoadPlanPaxCargo.numPallet
                palletWeight = airLoadPlanPaxCargo.palletWeight
                paxWeight = airLoadPlanPaxCargo.paxWeight
                requiredPax = airLoadPlanPaxCargo.requiredPax
                additionalProperties = airLoadPlanPaxCargo.additionalProperties.toMutableMap()
            }

            /** Number of ambulatory medical passengers in this group. */
            fun ambPax(ambPax: Int) = ambPax(JsonField.of(ambPax))

            /**
             * Sets [Builder.ambPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ambPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun ambPax(ambPax: JsonField<Int>) = apply { this.ambPax = ambPax }

            /** Number of patient attendant passengers in this group. */
            fun attPax(attPax: Int) = attPax(JsonField.of(attPax))

            /**
             * Sets [Builder.attPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.attPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun attPax(attPax: JsonField<Int>) = apply { this.attPax = attPax }

            /** Number of space available passengers in this group. */
            fun availablePax(availablePax: Int) = availablePax(JsonField.of(availablePax))

            /**
             * Sets [Builder.availablePax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.availablePax] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun availablePax(availablePax: JsonField<Int>) = apply {
                this.availablePax = availablePax
            }

            /** Weight of baggage in this group in kilograms. */
            fun bagWeight(bagWeight: Double) = bagWeight(JsonField.of(bagWeight))

            /**
             * Sets [Builder.bagWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bagWeight] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bagWeight(bagWeight: JsonField<Double>) = apply { this.bagWeight = bagWeight }

            /** Number of civilian passengers in this group. */
            fun civPax(civPax: Int) = civPax(JsonField.of(civPax))

            /**
             * Sets [Builder.civPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.civPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun civPax(civPax: JsonField<Int>) = apply { this.civPax = civPax }

            /** Number of distinguished visitor passengers in this group. */
            fun dvPax(dvPax: Int) = dvPax(JsonField.of(dvPax))

            /**
             * Sets [Builder.dvPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dvPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun dvPax(dvPax: JsonField<Int>) = apply { this.dvPax = dvPax }

            /** Number of foreign national passengers in this group. */
            fun fnPax(fnPax: Int) = fnPax(JsonField.of(fnPax))

            /**
             * Sets [Builder.fnPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fnPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun fnPax(fnPax: JsonField<Int>) = apply { this.fnPax = fnPax }

            /** Weight of cargo in this group in kilograms. */
            fun groupCargoWeight(groupCargoWeight: Double) =
                groupCargoWeight(JsonField.of(groupCargoWeight))

            /**
             * Sets [Builder.groupCargoWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.groupCargoWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun groupCargoWeight(groupCargoWeight: JsonField<Double>) = apply {
                this.groupCargoWeight = groupCargoWeight
            }

            /**
             * Describes the status or action needed for this group of passenger and cargo data
             * (e.g. ARRONBD, OFFTHIS, THROUGH, ONTHIS, DEPONBD, OFFNEXT).
             */
            fun groupType(groupType: String) = groupType(JsonField.of(groupType))

            /**
             * Sets [Builder.groupType] to an arbitrary JSON value.
             *
             * You should usually call [Builder.groupType] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun groupType(groupType: JsonField<String>) = apply { this.groupType = groupType }

            /** Number of litter-bound passengers in this group. */
            fun litPax(litPax: Int) = litPax(JsonField.of(litPax))

            /**
             * Sets [Builder.litPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.litPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun litPax(litPax: JsonField<Int>) = apply { this.litPax = litPax }

            /** Weight of mail in this group in kilograms. */
            fun mailWeight(mailWeight: Double) = mailWeight(JsonField.of(mailWeight))

            /**
             * Sets [Builder.mailWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.mailWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun mailWeight(mailWeight: JsonField<Double>) = apply { this.mailWeight = mailWeight }

            /** Number of cargo pallets in this group. */
            fun numPallet(numPallet: Int) = numPallet(JsonField.of(numPallet))

            /**
             * Sets [Builder.numPallet] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numPallet] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numPallet(numPallet: JsonField<Int>) = apply { this.numPallet = numPallet }

            /** Weight of pallets, chains, and devices in this group in kilograms. */
            fun palletWeight(palletWeight: Double) = palletWeight(JsonField.of(palletWeight))

            /**
             * Sets [Builder.palletWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.palletWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun palletWeight(palletWeight: JsonField<Double>) = apply {
                this.palletWeight = palletWeight
            }

            /** Weight of passengers in this group in kilograms. */
            fun paxWeight(paxWeight: Double) = paxWeight(JsonField.of(paxWeight))

            /**
             * Sets [Builder.paxWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.paxWeight] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun paxWeight(paxWeight: JsonField<Double>) = apply { this.paxWeight = paxWeight }

            /** Number of space required passengers in this group. */
            fun requiredPax(requiredPax: Int) = requiredPax(JsonField.of(requiredPax))

            /**
             * Sets [Builder.requiredPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.requiredPax] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun requiredPax(requiredPax: JsonField<Int>) = apply { this.requiredPax = requiredPax }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [AirLoadPlanPaxCargo].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): AirLoadPlanPaxCargo =
                AirLoadPlanPaxCargo(
                    ambPax,
                    attPax,
                    availablePax,
                    bagWeight,
                    civPax,
                    dvPax,
                    fnPax,
                    groupCargoWeight,
                    groupType,
                    litPax,
                    mailWeight,
                    numPallet,
                    palletWeight,
                    paxWeight,
                    requiredPax,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): AirLoadPlanPaxCargo = apply {
            if (validated) {
                return@apply
            }

            ambPax()
            attPax()
            availablePax()
            bagWeight()
            civPax()
            dvPax()
            fnPax()
            groupCargoWeight()
            groupType()
            litPax()
            mailWeight()
            numPallet()
            palletWeight()
            paxWeight()
            requiredPax()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (ambPax.asKnown().isPresent) 1 else 0) +
                (if (attPax.asKnown().isPresent) 1 else 0) +
                (if (availablePax.asKnown().isPresent) 1 else 0) +
                (if (bagWeight.asKnown().isPresent) 1 else 0) +
                (if (civPax.asKnown().isPresent) 1 else 0) +
                (if (dvPax.asKnown().isPresent) 1 else 0) +
                (if (fnPax.asKnown().isPresent) 1 else 0) +
                (if (groupCargoWeight.asKnown().isPresent) 1 else 0) +
                (if (groupType.asKnown().isPresent) 1 else 0) +
                (if (litPax.asKnown().isPresent) 1 else 0) +
                (if (mailWeight.asKnown().isPresent) 1 else 0) +
                (if (numPallet.asKnown().isPresent) 1 else 0) +
                (if (palletWeight.asKnown().isPresent) 1 else 0) +
                (if (paxWeight.asKnown().isPresent) 1 else 0) +
                (if (requiredPax.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirLoadPlanPaxCargo &&
                ambPax == other.ambPax &&
                attPax == other.attPax &&
                availablePax == other.availablePax &&
                bagWeight == other.bagWeight &&
                civPax == other.civPax &&
                dvPax == other.dvPax &&
                fnPax == other.fnPax &&
                groupCargoWeight == other.groupCargoWeight &&
                groupType == other.groupType &&
                litPax == other.litPax &&
                mailWeight == other.mailWeight &&
                numPallet == other.numPallet &&
                palletWeight == other.palletWeight &&
                paxWeight == other.paxWeight &&
                requiredPax == other.requiredPax &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                ambPax,
                attPax,
                availablePax,
                bagWeight,
                civPax,
                dvPax,
                fnPax,
                groupCargoWeight,
                groupType,
                litPax,
                mailWeight,
                numPallet,
                palletWeight,
                paxWeight,
                requiredPax,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AirLoadPlanPaxCargo{ambPax=$ambPax, attPax=$attPax, availablePax=$availablePax, bagWeight=$bagWeight, civPax=$civPax, dvPax=$dvPax, fnPax=$fnPax, groupCargoWeight=$groupCargoWeight, groupType=$groupType, litPax=$litPax, mailWeight=$mailWeight, numPallet=$numPallet, palletWeight=$palletWeight, paxWeight=$paxWeight, requiredPax=$requiredPax, additionalProperties=$additionalProperties}"
    }

    /** Collection of unit line number actuals associated with this load plan. */
    class AirLoadPlanUlnActual
    private constructor(
        private val numAmbulatory: JsonField<Int>,
        private val numAttendant: JsonField<Int>,
        private val numLitter: JsonField<Int>,
        private val numPax: JsonField<Int>,
        private val offloadId: JsonField<Int>,
        private val offloadLoCode: JsonField<String>,
        private val onloadId: JsonField<Int>,
        private val onloadLoCode: JsonField<String>,
        private val oplan: JsonField<String>,
        private val projName: JsonField<String>,
        private val uln: JsonField<String>,
        private val ulnCargoWeight: JsonField<Double>,
        private val ulnRemarks: JsonField<String>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("numAmbulatory")
            @ExcludeMissing
            numAmbulatory: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("numAttendant")
            @ExcludeMissing
            numAttendant: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("numLitter") @ExcludeMissing numLitter: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("numPax") @ExcludeMissing numPax: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("offloadId") @ExcludeMissing offloadId: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("offloadLOCode")
            @ExcludeMissing
            offloadLoCode: JsonField<String> = JsonMissing.of(),
            @JsonProperty("onloadId") @ExcludeMissing onloadId: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("onloadLOCode")
            @ExcludeMissing
            onloadLoCode: JsonField<String> = JsonMissing.of(),
            @JsonProperty("oplan") @ExcludeMissing oplan: JsonField<String> = JsonMissing.of(),
            @JsonProperty("projName")
            @ExcludeMissing
            projName: JsonField<String> = JsonMissing.of(),
            @JsonProperty("uln") @ExcludeMissing uln: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ulnCargoWeight")
            @ExcludeMissing
            ulnCargoWeight: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("ulnRemarks")
            @ExcludeMissing
            ulnRemarks: JsonField<String> = JsonMissing.of(),
        ) : this(
            numAmbulatory,
            numAttendant,
            numLitter,
            numPax,
            offloadId,
            offloadLoCode,
            onloadId,
            onloadLoCode,
            oplan,
            projName,
            uln,
            ulnCargoWeight,
            ulnRemarks,
            mutableMapOf(),
        )

        /**
         * Number of ambulatory patients associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun numAmbulatory(): Optional<Int> = numAmbulatory.getOptional("numAmbulatory")

        /**
         * Number of attendants associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun numAttendant(): Optional<Int> = numAttendant.getOptional("numAttendant")

        /**
         * Number of litter patients associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun numLitter(): Optional<Int> = numLitter.getOptional("numLitter")

        /**
         * Number of passengers associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun numPax(): Optional<Int> = numPax.getOptional("numPax")

        /**
         * Identifier of the offload itinerary location.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun offloadId(): Optional<Int> = offloadId.getOptional("offloadId")

        /**
         * Offload location code.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun offloadLoCode(): Optional<String> = offloadLoCode.getOptional("offloadLOCode")

        /**
         * Identifier of the onload itinerary location.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun onloadId(): Optional<Int> = onloadId.getOptional("onloadId")

        /**
         * Onload location code.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun onloadLoCode(): Optional<String> = onloadLoCode.getOptional("onloadLOCode")

        /**
         * Identification number of the Operation Plan (OPLAN) associated with this load plan.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun oplan(): Optional<String> = oplan.getOptional("oplan")

        /**
         * Project name.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun projName(): Optional<String> = projName.getOptional("projName")

        /**
         * Unit line number.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun uln(): Optional<String> = uln.getOptional("uln")

        /**
         * Total weight of all cargo items for this unit line number in kilograms.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ulnCargoWeight(): Optional<Double> = ulnCargoWeight.getOptional("ulnCargoWeight")

        /**
         * Remarks concerning these unit line number actuals.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ulnRemarks(): Optional<String> = ulnRemarks.getOptional("ulnRemarks")

        /**
         * Returns the raw JSON value of [numAmbulatory].
         *
         * Unlike [numAmbulatory], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("numAmbulatory")
        @ExcludeMissing
        fun _numAmbulatory(): JsonField<Int> = numAmbulatory

        /**
         * Returns the raw JSON value of [numAttendant].
         *
         * Unlike [numAttendant], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("numAttendant")
        @ExcludeMissing
        fun _numAttendant(): JsonField<Int> = numAttendant

        /**
         * Returns the raw JSON value of [numLitter].
         *
         * Unlike [numLitter], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("numLitter") @ExcludeMissing fun _numLitter(): JsonField<Int> = numLitter

        /**
         * Returns the raw JSON value of [numPax].
         *
         * Unlike [numPax], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("numPax") @ExcludeMissing fun _numPax(): JsonField<Int> = numPax

        /**
         * Returns the raw JSON value of [offloadId].
         *
         * Unlike [offloadId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("offloadId") @ExcludeMissing fun _offloadId(): JsonField<Int> = offloadId

        /**
         * Returns the raw JSON value of [offloadLoCode].
         *
         * Unlike [offloadLoCode], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("offloadLOCode")
        @ExcludeMissing
        fun _offloadLoCode(): JsonField<String> = offloadLoCode

        /**
         * Returns the raw JSON value of [onloadId].
         *
         * Unlike [onloadId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("onloadId") @ExcludeMissing fun _onloadId(): JsonField<Int> = onloadId

        /**
         * Returns the raw JSON value of [onloadLoCode].
         *
         * Unlike [onloadLoCode], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("onloadLOCode")
        @ExcludeMissing
        fun _onloadLoCode(): JsonField<String> = onloadLoCode

        /**
         * Returns the raw JSON value of [oplan].
         *
         * Unlike [oplan], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("oplan") @ExcludeMissing fun _oplan(): JsonField<String> = oplan

        /**
         * Returns the raw JSON value of [projName].
         *
         * Unlike [projName], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("projName") @ExcludeMissing fun _projName(): JsonField<String> = projName

        /**
         * Returns the raw JSON value of [uln].
         *
         * Unlike [uln], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("uln") @ExcludeMissing fun _uln(): JsonField<String> = uln

        /**
         * Returns the raw JSON value of [ulnCargoWeight].
         *
         * Unlike [ulnCargoWeight], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("ulnCargoWeight")
        @ExcludeMissing
        fun _ulnCargoWeight(): JsonField<Double> = ulnCargoWeight

        /**
         * Returns the raw JSON value of [ulnRemarks].
         *
         * Unlike [ulnRemarks], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ulnRemarks")
        @ExcludeMissing
        fun _ulnRemarks(): JsonField<String> = ulnRemarks

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /** Returns a mutable builder for constructing an instance of [AirLoadPlanUlnActual]. */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AirLoadPlanUlnActual]. */
        class Builder internal constructor() {

            private var numAmbulatory: JsonField<Int> = JsonMissing.of()
            private var numAttendant: JsonField<Int> = JsonMissing.of()
            private var numLitter: JsonField<Int> = JsonMissing.of()
            private var numPax: JsonField<Int> = JsonMissing.of()
            private var offloadId: JsonField<Int> = JsonMissing.of()
            private var offloadLoCode: JsonField<String> = JsonMissing.of()
            private var onloadId: JsonField<Int> = JsonMissing.of()
            private var onloadLoCode: JsonField<String> = JsonMissing.of()
            private var oplan: JsonField<String> = JsonMissing.of()
            private var projName: JsonField<String> = JsonMissing.of()
            private var uln: JsonField<String> = JsonMissing.of()
            private var ulnCargoWeight: JsonField<Double> = JsonMissing.of()
            private var ulnRemarks: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(airLoadPlanUlnActual: AirLoadPlanUlnActual) = apply {
                numAmbulatory = airLoadPlanUlnActual.numAmbulatory
                numAttendant = airLoadPlanUlnActual.numAttendant
                numLitter = airLoadPlanUlnActual.numLitter
                numPax = airLoadPlanUlnActual.numPax
                offloadId = airLoadPlanUlnActual.offloadId
                offloadLoCode = airLoadPlanUlnActual.offloadLoCode
                onloadId = airLoadPlanUlnActual.onloadId
                onloadLoCode = airLoadPlanUlnActual.onloadLoCode
                oplan = airLoadPlanUlnActual.oplan
                projName = airLoadPlanUlnActual.projName
                uln = airLoadPlanUlnActual.uln
                ulnCargoWeight = airLoadPlanUlnActual.ulnCargoWeight
                ulnRemarks = airLoadPlanUlnActual.ulnRemarks
                additionalProperties = airLoadPlanUlnActual.additionalProperties.toMutableMap()
            }

            /** Number of ambulatory patients associated with this load plan. */
            fun numAmbulatory(numAmbulatory: Int) = numAmbulatory(JsonField.of(numAmbulatory))

            /**
             * Sets [Builder.numAmbulatory] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numAmbulatory] with a well-typed [Int] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numAmbulatory(numAmbulatory: JsonField<Int>) = apply {
                this.numAmbulatory = numAmbulatory
            }

            /** Number of attendants associated with this load plan. */
            fun numAttendant(numAttendant: Int) = numAttendant(JsonField.of(numAttendant))

            /**
             * Sets [Builder.numAttendant] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numAttendant] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numAttendant(numAttendant: JsonField<Int>) = apply {
                this.numAttendant = numAttendant
            }

            /** Number of litter patients associated with this load plan. */
            fun numLitter(numLitter: Int) = numLitter(JsonField.of(numLitter))

            /**
             * Sets [Builder.numLitter] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numLitter] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numLitter(numLitter: JsonField<Int>) = apply { this.numLitter = numLitter }

            /** Number of passengers associated with this load plan. */
            fun numPax(numPax: Int) = numPax(JsonField.of(numPax))

            /**
             * Sets [Builder.numPax] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numPax] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun numPax(numPax: JsonField<Int>) = apply { this.numPax = numPax }

            /** Identifier of the offload itinerary location. */
            fun offloadId(offloadId: Int) = offloadId(JsonField.of(offloadId))

            /**
             * Sets [Builder.offloadId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.offloadId] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun offloadId(offloadId: JsonField<Int>) = apply { this.offloadId = offloadId }

            /** Offload location code. */
            fun offloadLoCode(offloadLoCode: String) = offloadLoCode(JsonField.of(offloadLoCode))

            /**
             * Sets [Builder.offloadLoCode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.offloadLoCode] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun offloadLoCode(offloadLoCode: JsonField<String>) = apply {
                this.offloadLoCode = offloadLoCode
            }

            /** Identifier of the onload itinerary location. */
            fun onloadId(onloadId: Int) = onloadId(JsonField.of(onloadId))

            /**
             * Sets [Builder.onloadId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.onloadId] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun onloadId(onloadId: JsonField<Int>) = apply { this.onloadId = onloadId }

            /** Onload location code. */
            fun onloadLoCode(onloadLoCode: String) = onloadLoCode(JsonField.of(onloadLoCode))

            /**
             * Sets [Builder.onloadLoCode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.onloadLoCode] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun onloadLoCode(onloadLoCode: JsonField<String>) = apply {
                this.onloadLoCode = onloadLoCode
            }

            /**
             * Identification number of the Operation Plan (OPLAN) associated with this load plan.
             */
            fun oplan(oplan: String) = oplan(JsonField.of(oplan))

            /**
             * Sets [Builder.oplan] to an arbitrary JSON value.
             *
             * You should usually call [Builder.oplan] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun oplan(oplan: JsonField<String>) = apply { this.oplan = oplan }

            /** Project name. */
            fun projName(projName: String) = projName(JsonField.of(projName))

            /**
             * Sets [Builder.projName] to an arbitrary JSON value.
             *
             * You should usually call [Builder.projName] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun projName(projName: JsonField<String>) = apply { this.projName = projName }

            /** Unit line number. */
            fun uln(uln: String) = uln(JsonField.of(uln))

            /**
             * Sets [Builder.uln] to an arbitrary JSON value.
             *
             * You should usually call [Builder.uln] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun uln(uln: JsonField<String>) = apply { this.uln = uln }

            /** Total weight of all cargo items for this unit line number in kilograms. */
            fun ulnCargoWeight(ulnCargoWeight: Double) =
                ulnCargoWeight(JsonField.of(ulnCargoWeight))

            /**
             * Sets [Builder.ulnCargoWeight] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ulnCargoWeight] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ulnCargoWeight(ulnCargoWeight: JsonField<Double>) = apply {
                this.ulnCargoWeight = ulnCargoWeight
            }

            /** Remarks concerning these unit line number actuals. */
            fun ulnRemarks(ulnRemarks: String) = ulnRemarks(JsonField.of(ulnRemarks))

            /**
             * Sets [Builder.ulnRemarks] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ulnRemarks] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ulnRemarks(ulnRemarks: JsonField<String>) = apply { this.ulnRemarks = ulnRemarks }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [AirLoadPlanUlnActual].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             */
            fun build(): AirLoadPlanUlnActual =
                AirLoadPlanUlnActual(
                    numAmbulatory,
                    numAttendant,
                    numLitter,
                    numPax,
                    offloadId,
                    offloadLoCode,
                    onloadId,
                    onloadLoCode,
                    oplan,
                    projName,
                    uln,
                    ulnCargoWeight,
                    ulnRemarks,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): AirLoadPlanUlnActual = apply {
            if (validated) {
                return@apply
            }

            numAmbulatory()
            numAttendant()
            numLitter()
            numPax()
            offloadId()
            offloadLoCode()
            onloadId()
            onloadLoCode()
            oplan()
            projName()
            uln()
            ulnCargoWeight()
            ulnRemarks()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (numAmbulatory.asKnown().isPresent) 1 else 0) +
                (if (numAttendant.asKnown().isPresent) 1 else 0) +
                (if (numLitter.asKnown().isPresent) 1 else 0) +
                (if (numPax.asKnown().isPresent) 1 else 0) +
                (if (offloadId.asKnown().isPresent) 1 else 0) +
                (if (offloadLoCode.asKnown().isPresent) 1 else 0) +
                (if (onloadId.asKnown().isPresent) 1 else 0) +
                (if (onloadLoCode.asKnown().isPresent) 1 else 0) +
                (if (oplan.asKnown().isPresent) 1 else 0) +
                (if (projName.asKnown().isPresent) 1 else 0) +
                (if (uln.asKnown().isPresent) 1 else 0) +
                (if (ulnCargoWeight.asKnown().isPresent) 1 else 0) +
                (if (ulnRemarks.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is AirLoadPlanUlnActual &&
                numAmbulatory == other.numAmbulatory &&
                numAttendant == other.numAttendant &&
                numLitter == other.numLitter &&
                numPax == other.numPax &&
                offloadId == other.offloadId &&
                offloadLoCode == other.offloadLoCode &&
                onloadId == other.onloadId &&
                onloadLoCode == other.onloadLoCode &&
                oplan == other.oplan &&
                projName == other.projName &&
                uln == other.uln &&
                ulnCargoWeight == other.ulnCargoWeight &&
                ulnRemarks == other.ulnRemarks &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                numAmbulatory,
                numAttendant,
                numLitter,
                numPax,
                offloadId,
                offloadLoCode,
                onloadId,
                onloadLoCode,
                oplan,
                projName,
                uln,
                ulnCargoWeight,
                ulnRemarks,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AirLoadPlanUlnActual{numAmbulatory=$numAmbulatory, numAttendant=$numAttendant, numLitter=$numLitter, numPax=$numPax, offloadId=$offloadId, offloadLoCode=$offloadLoCode, onloadId=$onloadId, onloadLoCode=$onloadLoCode, oplan=$oplan, projName=$projName, uln=$uln, ulnCargoWeight=$ulnCargoWeight, ulnRemarks=$ulnRemarks, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is AirloadPlanUpdateParams &&
            pathId == other.pathId &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int =
        Objects.hash(pathId, body, additionalHeaders, additionalQueryParams)

    override fun toString() =
        "AirloadPlanUpdateParams{pathId=$pathId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
