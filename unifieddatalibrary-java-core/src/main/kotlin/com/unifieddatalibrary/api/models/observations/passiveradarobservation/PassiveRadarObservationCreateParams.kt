// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.observations.passiveradarobservation

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkKnown
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.core.toImmutable
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to take a single PassiveRadarObservation as a POST body and ingest into the
 * database. A specific role is required to perform this service operation. Please contact the UDL
 * team for assistance.
 */
class PassiveRadarObservationCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun obTime(): OffsetDateTime = body.obTime()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun id(): Optional<String> = body.id()

    /**
     * The target Acceleration measurement in kilometers/sec^2 for this observation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun accel(): Optional<Double> = body.accel()

    /**
     * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun accelUnc(): Optional<Double> = body.accelUnc()

    /**
     * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun alt(): Optional<Double> = body.alt()

    /**
     * Line of sight azimuth angle in degrees and topocentric frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun azimuth(): Optional<Double> = body.azimuth()

    /**
     * Sensor azimuth angle bias in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun azimuthBias(): Optional<Double> = body.azimuthBias()

    /**
     * Rate of change of the line of sight azimuth in degrees per second.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun azimuthRate(): Optional<Double> = body.azimuthRate()

    /**
     * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun azimuthUnc(): Optional<Double> = body.azimuthUnc()

    /**
     * Target bistatic path distance in kilometers. This is the
     * transmitter-to-target-to-surveillance site distance.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRange(): Optional<Double> = body.bistaticRange()

    /**
     * Bistatic range acceleration in kilometers/sec^2.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeAccel(): Optional<Double> = body.bistaticRangeAccel()

    /**
     * One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeAccelUnc(): Optional<Double> = body.bistaticRangeAccelUnc()

    /**
     * Sensor bistatic range bias in kilometers.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeBias(): Optional<Double> = body.bistaticRangeBias()

    /**
     * Rate of change of the bistatic path in kilometers/sec.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeRate(): Optional<Double> = body.bistaticRangeRate()

    /**
     * One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeRateUnc(): Optional<Double> = body.bistaticRangeRateUnc()

    /**
     * One sigma uncertainty in bistatic range in kilometers.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bistaticRangeUnc(): Optional<Double> = body.bistaticRangeUnc()

    /**
     * Coning angle in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun coning(): Optional<Double> = body.coning()

    /**
     * One sigma uncertainty in the coning angle measurement, in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun coningUnc(): Optional<Double> = body.coningUnc()

    /**
     * Time the row was created in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * Line of sight declination angle in degrees and J2000 coordinate frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun declination(): Optional<Double> = body.declination()

    /**
     * The time difference, in seconds, between the signal collected at the surveillance site (after
     * being reflected from the target) and the reference site (direct path line-of-sight signal).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun delay(): Optional<Double> = body.delay()

    /**
     * Delay bias in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun delayBias(): Optional<Double> = body.delayBias()

    /**
     * One sigma uncertainty in the delay measurement, in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun delayUnc(): Optional<Double> = body.delayUnc()

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun descriptor(): Optional<String> = body.descriptor()

    /**
     * Doppler measurement in hertz.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun doppler(): Optional<Double> = body.doppler()

    /**
     * One sigma uncertainty in the Doppler measurement in hertz.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun dopplerUnc(): Optional<Double> = body.dopplerUnc()

    /**
     * Line of sight elevation in degrees and topocentric frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun elevation(): Optional<Double> = body.elevation()

    /**
     * Sensor elevation bias in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun elevationBias(): Optional<Double> = body.elevationBias()

    /**
     * Rate of change of the line of sight elevation in degrees per second.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun elevationRate(): Optional<Double> = body.elevationRate()

    /**
     * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun elevationUnc(): Optional<Double> = body.elevationUnc()

    /**
     * Optional external observation identifier provided by the source.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun extObservationId(): Optional<String> = body.extObservationId()

    /**
     * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain
     * additional information on an OnOrbit object using the 'get by ID' operation (e.g.
     * /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as
     * /udl/onorbit/25544.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idOnOrbit(): Optional<String> = body.idOnOrbit()

    /**
     * Unique identifier of the transmitter. This ID can be used to obtain additional information on
     * an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the
     * RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idRfEmitter(): Optional<String> = body.idRfEmitter()

    /**
     * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain
     * additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}).
     * For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idSensor(): Optional<String> = body.idSensor()

    /**
     * Unique identifier of the reference receiver sensor. This ID can be used to obtain additional
     * information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example,
     * the sensor with idSensor = abc would be queried as /udl/sensor/abc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idSensorRefReceiver(): Optional<String> = body.idSensorRefReceiver()

    /**
     * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90
     * degrees (negative values south of equator).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lat(): Optional<Double> = body.lat()

    /**
     * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180
     * degrees (negative values west of Prime Meridian).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lon(): Optional<Double> = body.lon()

    /**
     * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE). This
     * identifier is optional and, if null, no assumption should be made regarding whether other
     * observations may or may not exist to compose a track.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun obPosition(): Optional<String> = body.obPosition()

    /**
     * Originating system or organization which produced the data, if different from the source. The
     * origin may be different than the source if the source was a mediating system which forwarded
     * the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the
     * system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of
     * this observation. This may be an internal identifier and not necessarily a valid satellite
     * number.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origObjectId(): Optional<String> = body.origObjectId()

    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which
     * produced this observation. This may be an internal identifier and not necessarily a valid
     * sensor ID.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origSensorId(): Optional<String> = body.origSensorId()

    /**
     * Radar cross section in meters squared for orthogonal polarization.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun orthogonalRcs(): Optional<Double> = body.orthogonalRcs()

    /**
     * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun orthogonalRcsUnc(): Optional<Double> = body.orthogonalRcsUnc()

    /**
     * Line of sight right ascension in degrees and J2000 coordinate frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun ra(): Optional<Double> = body.ra()

    /**
     * Radar cross section in meters squared for polarization principal.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun rcs(): Optional<Double> = body.rcs()

    /**
     * One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun rcsUnc(): Optional<Double> = body.rcsUnc()

    /**
     * Satellite/Catalog number of the target on-orbit object.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun satNo(): Optional<Int> = body.satNo()

    /**
     * Signal to noise ratio, in dB.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun snr(): Optional<Double> = body.snr()

    /**
     * The source data library from which this record was received. This could be a remote or
     * tactical UDL or another data library. If null, the record should be assumed to have
     * originated from the primary Enterprise UDL.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun sourceDl(): Optional<String> = body.sourceDl()

    /**
     * Optional array of provider/source specific tags for this data, where each element is no
     * longer than 32 characters, used for implementing data owner conditional access controls to
     * restrict access to the data. Should be left null by data providers unless conditional access
     * controls are coordinated with the UDL team.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tags(): Optional<List<String>> = body.tags()

    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun taskId(): Optional<String> = body.taskId()

    /**
     * Sensor timing bias in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun timingBias(): Optional<Double> = body.timingBias()

    /**
     * Time of flight (TOF) in seconds. This is the calculated propagation time from
     * transmitter-to-target-to-surveillance site.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tof(): Optional<Double> = body.tof()

    /**
     * The Time of Flight (TOF) bias in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tofBias(): Optional<Double> = body.tofBias()

    /**
     * One sigma uncertainty in time of flight in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tofUnc(): Optional<Double> = body.tofUnc()

    /**
     * Unique identifier of a track that represents a tracklet for this observation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun trackId(): Optional<String> = body.trackId()

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this
     * data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun transactionId(): Optional<String> = body.transactionId()

    /**
     * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun type(): Optional<String> = body.type()

    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be
     * correlated to a known object. This flag should only be set to true by data providers after an
     * attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the
     * 'origObjectId' field may be populated with an internal data provider specific identifier.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun uct(): Optional<Boolean> = body.uct()

    /**
     * X velocity of target in kilometers/sec in J2000 coordinate frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun xvel(): Optional<Double> = body.xvel()

    /**
     * Y velocity of target in kilometers/sec in J2000 coordinate frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun yvel(): Optional<Double> = body.yvel()

    /**
     * Z velocity of target in kilometers/sec in J2000 coordinate frame.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun zvel(): Optional<Double> = body.zvel()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [obTime].
     *
     * Unlike [obTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _obTime(): JsonField<OffsetDateTime> = body._obTime()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _id(): JsonField<String> = body._id()

    /**
     * Returns the raw JSON value of [accel].
     *
     * Unlike [accel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _accel(): JsonField<Double> = body._accel()

    /**
     * Returns the raw JSON value of [accelUnc].
     *
     * Unlike [accelUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _accelUnc(): JsonField<Double> = body._accelUnc()

    /**
     * Returns the raw JSON value of [alt].
     *
     * Unlike [alt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _alt(): JsonField<Double> = body._alt()

    /**
     * Returns the raw JSON value of [azimuth].
     *
     * Unlike [azimuth], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _azimuth(): JsonField<Double> = body._azimuth()

    /**
     * Returns the raw JSON value of [azimuthBias].
     *
     * Unlike [azimuthBias], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _azimuthBias(): JsonField<Double> = body._azimuthBias()

    /**
     * Returns the raw JSON value of [azimuthRate].
     *
     * Unlike [azimuthRate], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _azimuthRate(): JsonField<Double> = body._azimuthRate()

    /**
     * Returns the raw JSON value of [azimuthUnc].
     *
     * Unlike [azimuthUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _azimuthUnc(): JsonField<Double> = body._azimuthUnc()

    /**
     * Returns the raw JSON value of [bistaticRange].
     *
     * Unlike [bistaticRange], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _bistaticRange(): JsonField<Double> = body._bistaticRange()

    /**
     * Returns the raw JSON value of [bistaticRangeAccel].
     *
     * Unlike [bistaticRangeAccel], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeAccel(): JsonField<Double> = body._bistaticRangeAccel()

    /**
     * Returns the raw JSON value of [bistaticRangeAccelUnc].
     *
     * Unlike [bistaticRangeAccelUnc], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeAccelUnc(): JsonField<Double> = body._bistaticRangeAccelUnc()

    /**
     * Returns the raw JSON value of [bistaticRangeBias].
     *
     * Unlike [bistaticRangeBias], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeBias(): JsonField<Double> = body._bistaticRangeBias()

    /**
     * Returns the raw JSON value of [bistaticRangeRate].
     *
     * Unlike [bistaticRangeRate], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeRate(): JsonField<Double> = body._bistaticRangeRate()

    /**
     * Returns the raw JSON value of [bistaticRangeRateUnc].
     *
     * Unlike [bistaticRangeRateUnc], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeRateUnc(): JsonField<Double> = body._bistaticRangeRateUnc()

    /**
     * Returns the raw JSON value of [bistaticRangeUnc].
     *
     * Unlike [bistaticRangeUnc], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _bistaticRangeUnc(): JsonField<Double> = body._bistaticRangeUnc()

    /**
     * Returns the raw JSON value of [coning].
     *
     * Unlike [coning], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _coning(): JsonField<Double> = body._coning()

    /**
     * Returns the raw JSON value of [coningUnc].
     *
     * Unlike [coningUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _coningUnc(): JsonField<Double> = body._coningUnc()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [declination].
     *
     * Unlike [declination], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _declination(): JsonField<Double> = body._declination()

    /**
     * Returns the raw JSON value of [delay].
     *
     * Unlike [delay], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _delay(): JsonField<Double> = body._delay()

    /**
     * Returns the raw JSON value of [delayBias].
     *
     * Unlike [delayBias], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _delayBias(): JsonField<Double> = body._delayBias()

    /**
     * Returns the raw JSON value of [delayUnc].
     *
     * Unlike [delayUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _delayUnc(): JsonField<Double> = body._delayUnc()

    /**
     * Returns the raw JSON value of [descriptor].
     *
     * Unlike [descriptor], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _descriptor(): JsonField<String> = body._descriptor()

    /**
     * Returns the raw JSON value of [doppler].
     *
     * Unlike [doppler], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _doppler(): JsonField<Double> = body._doppler()

    /**
     * Returns the raw JSON value of [dopplerUnc].
     *
     * Unlike [dopplerUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dopplerUnc(): JsonField<Double> = body._dopplerUnc()

    /**
     * Returns the raw JSON value of [elevation].
     *
     * Unlike [elevation], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _elevation(): JsonField<Double> = body._elevation()

    /**
     * Returns the raw JSON value of [elevationBias].
     *
     * Unlike [elevationBias], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _elevationBias(): JsonField<Double> = body._elevationBias()

    /**
     * Returns the raw JSON value of [elevationRate].
     *
     * Unlike [elevationRate], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _elevationRate(): JsonField<Double> = body._elevationRate()

    /**
     * Returns the raw JSON value of [elevationUnc].
     *
     * Unlike [elevationUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _elevationUnc(): JsonField<Double> = body._elevationUnc()

    /**
     * Returns the raw JSON value of [extObservationId].
     *
     * Unlike [extObservationId], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _extObservationId(): JsonField<String> = body._extObservationId()

    /**
     * Returns the raw JSON value of [idOnOrbit].
     *
     * Unlike [idOnOrbit], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idOnOrbit(): JsonField<String> = body._idOnOrbit()

    /**
     * Returns the raw JSON value of [idRfEmitter].
     *
     * Unlike [idRfEmitter], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idRfEmitter(): JsonField<String> = body._idRfEmitter()

    /**
     * Returns the raw JSON value of [idSensor].
     *
     * Unlike [idSensor], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idSensor(): JsonField<String> = body._idSensor()

    /**
     * Returns the raw JSON value of [idSensorRefReceiver].
     *
     * Unlike [idSensorRefReceiver], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _idSensorRefReceiver(): JsonField<String> = body._idSensorRefReceiver()

    /**
     * Returns the raw JSON value of [lat].
     *
     * Unlike [lat], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _lat(): JsonField<Double> = body._lat()

    /**
     * Returns the raw JSON value of [lon].
     *
     * Unlike [lon], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _lon(): JsonField<Double> = body._lon()

    /**
     * Returns the raw JSON value of [obPosition].
     *
     * Unlike [obPosition], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _obPosition(): JsonField<String> = body._obPosition()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [origObjectId].
     *
     * Unlike [origObjectId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origObjectId(): JsonField<String> = body._origObjectId()

    /**
     * Returns the raw JSON value of [origSensorId].
     *
     * Unlike [origSensorId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origSensorId(): JsonField<String> = body._origSensorId()

    /**
     * Returns the raw JSON value of [orthogonalRcs].
     *
     * Unlike [orthogonalRcs], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _orthogonalRcs(): JsonField<Double> = body._orthogonalRcs()

    /**
     * Returns the raw JSON value of [orthogonalRcsUnc].
     *
     * Unlike [orthogonalRcsUnc], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _orthogonalRcsUnc(): JsonField<Double> = body._orthogonalRcsUnc()

    /**
     * Returns the raw JSON value of [ra].
     *
     * Unlike [ra], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _ra(): JsonField<Double> = body._ra()

    /**
     * Returns the raw JSON value of [rcs].
     *
     * Unlike [rcs], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _rcs(): JsonField<Double> = body._rcs()

    /**
     * Returns the raw JSON value of [rcsUnc].
     *
     * Unlike [rcsUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _rcsUnc(): JsonField<Double> = body._rcsUnc()

    /**
     * Returns the raw JSON value of [satNo].
     *
     * Unlike [satNo], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _satNo(): JsonField<Int> = body._satNo()

    /**
     * Returns the raw JSON value of [snr].
     *
     * Unlike [snr], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _snr(): JsonField<Double> = body._snr()

    /**
     * Returns the raw JSON value of [sourceDl].
     *
     * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _sourceDl(): JsonField<String> = body._sourceDl()

    /**
     * Returns the raw JSON value of [tags].
     *
     * Unlike [tags], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tags(): JsonField<List<String>> = body._tags()

    /**
     * Returns the raw JSON value of [taskId].
     *
     * Unlike [taskId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _taskId(): JsonField<String> = body._taskId()

    /**
     * Returns the raw JSON value of [timingBias].
     *
     * Unlike [timingBias], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _timingBias(): JsonField<Double> = body._timingBias()

    /**
     * Returns the raw JSON value of [tof].
     *
     * Unlike [tof], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tof(): JsonField<Double> = body._tof()

    /**
     * Returns the raw JSON value of [tofBias].
     *
     * Unlike [tofBias], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tofBias(): JsonField<Double> = body._tofBias()

    /**
     * Returns the raw JSON value of [tofUnc].
     *
     * Unlike [tofUnc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tofUnc(): JsonField<Double> = body._tofUnc()

    /**
     * Returns the raw JSON value of [trackId].
     *
     * Unlike [trackId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _trackId(): JsonField<String> = body._trackId()

    /**
     * Returns the raw JSON value of [transactionId].
     *
     * Unlike [transactionId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _transactionId(): JsonField<String> = body._transactionId()

    /**
     * Returns the raw JSON value of [type].
     *
     * Unlike [type], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _type(): JsonField<String> = body._type()

    /**
     * Returns the raw JSON value of [uct].
     *
     * Unlike [uct], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _uct(): JsonField<Boolean> = body._uct()

    /**
     * Returns the raw JSON value of [xvel].
     *
     * Unlike [xvel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _xvel(): JsonField<Double> = body._xvel()

    /**
     * Returns the raw JSON value of [yvel].
     *
     * Unlike [yvel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _yvel(): JsonField<Double> = body._yvel()

    /**
     * Returns the raw JSON value of [zvel].
     *
     * Unlike [zvel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _zvel(): JsonField<Double> = body._zvel()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [PassiveRadarObservationCreateParams].
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .obTime()
         * .source()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [PassiveRadarObservationCreateParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(
            passiveRadarObservationCreateParams: PassiveRadarObservationCreateParams
        ) = apply {
            body = passiveRadarObservationCreateParams.body.toBuilder()
            additionalHeaders = passiveRadarObservationCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams =
                passiveRadarObservationCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [classificationMarking]
         * - [dataMode]
         * - [obTime]
         * - [source]
         * - [id]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) = apply { body.dataMode(dataMode) }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) = apply { body.dataMode(dataMode) }

        /** Ob detection time in ISO 8601 UTC with microsecond precision. */
        fun obTime(obTime: OffsetDateTime) = apply { body.obTime(obTime) }

        /**
         * Sets [Builder.obTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.obTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun obTime(obTime: JsonField<OffsetDateTime>) = apply { body.obTime(obTime) }

        /** Source of the data. */
        fun source(source: String) = apply { body.source(source) }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun source(source: JsonField<String>) = apply { body.source(source) }

        /** Unique identifier of the record, auto-generated by the system. */
        fun id(id: String) = apply { body.id(id) }

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { body.id(id) }

        /** The target Acceleration measurement in kilometers/sec^2 for this observation. */
        fun accel(accel: Double) = apply { body.accel(accel) }

        /**
         * Sets [Builder.accel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.accel] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun accel(accel: JsonField<Double>) = apply { body.accel(accel) }

        /**
         * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
         */
        fun accelUnc(accelUnc: Double) = apply { body.accelUnc(accelUnc) }

        /**
         * Sets [Builder.accelUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.accelUnc] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun accelUnc(accelUnc: JsonField<Double>) = apply { body.accelUnc(accelUnc) }

        /** The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation. */
        fun alt(alt: Double) = apply { body.alt(alt) }

        /**
         * Sets [Builder.alt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.alt] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun alt(alt: JsonField<Double>) = apply { body.alt(alt) }

        /** Line of sight azimuth angle in degrees and topocentric frame. */
        fun azimuth(azimuth: Double) = apply { body.azimuth(azimuth) }

        /**
         * Sets [Builder.azimuth] to an arbitrary JSON value.
         *
         * You should usually call [Builder.azimuth] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun azimuth(azimuth: JsonField<Double>) = apply { body.azimuth(azimuth) }

        /** Sensor azimuth angle bias in degrees. */
        fun azimuthBias(azimuthBias: Double) = apply { body.azimuthBias(azimuthBias) }

        /**
         * Sets [Builder.azimuthBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.azimuthBias] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun azimuthBias(azimuthBias: JsonField<Double>) = apply { body.azimuthBias(azimuthBias) }

        /** Rate of change of the line of sight azimuth in degrees per second. */
        fun azimuthRate(azimuthRate: Double) = apply { body.azimuthRate(azimuthRate) }

        /**
         * Sets [Builder.azimuthRate] to an arbitrary JSON value.
         *
         * You should usually call [Builder.azimuthRate] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun azimuthRate(azimuthRate: JsonField<Double>) = apply { body.azimuthRate(azimuthRate) }

        /** One sigma uncertainty in the line of sight azimuth angle measurement, in degrees. */
        fun azimuthUnc(azimuthUnc: Double) = apply { body.azimuthUnc(azimuthUnc) }

        /**
         * Sets [Builder.azimuthUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.azimuthUnc] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun azimuthUnc(azimuthUnc: JsonField<Double>) = apply { body.azimuthUnc(azimuthUnc) }

        /**
         * Target bistatic path distance in kilometers. This is the
         * transmitter-to-target-to-surveillance site distance.
         */
        fun bistaticRange(bistaticRange: Double) = apply { body.bistaticRange(bistaticRange) }

        /**
         * Sets [Builder.bistaticRange] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRange] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun bistaticRange(bistaticRange: JsonField<Double>) = apply {
            body.bistaticRange(bistaticRange)
        }

        /** Bistatic range acceleration in kilometers/sec^2. */
        fun bistaticRangeAccel(bistaticRangeAccel: Double) = apply {
            body.bistaticRangeAccel(bistaticRangeAccel)
        }

        /**
         * Sets [Builder.bistaticRangeAccel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeAccel] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeAccel(bistaticRangeAccel: JsonField<Double>) = apply {
            body.bistaticRangeAccel(bistaticRangeAccel)
        }

        /**
         * One sigma uncertainty in the bistatic range acceleration measurement, in
         * kilometers/sec^2.
         */
        fun bistaticRangeAccelUnc(bistaticRangeAccelUnc: Double) = apply {
            body.bistaticRangeAccelUnc(bistaticRangeAccelUnc)
        }

        /**
         * Sets [Builder.bistaticRangeAccelUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeAccelUnc] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeAccelUnc(bistaticRangeAccelUnc: JsonField<Double>) = apply {
            body.bistaticRangeAccelUnc(bistaticRangeAccelUnc)
        }

        /** Sensor bistatic range bias in kilometers. */
        fun bistaticRangeBias(bistaticRangeBias: Double) = apply {
            body.bistaticRangeBias(bistaticRangeBias)
        }

        /**
         * Sets [Builder.bistaticRangeBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeBias] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeBias(bistaticRangeBias: JsonField<Double>) = apply {
            body.bistaticRangeBias(bistaticRangeBias)
        }

        /** Rate of change of the bistatic path in kilometers/sec. */
        fun bistaticRangeRate(bistaticRangeRate: Double) = apply {
            body.bistaticRangeRate(bistaticRangeRate)
        }

        /**
         * Sets [Builder.bistaticRangeRate] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeRate] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeRate(bistaticRangeRate: JsonField<Double>) = apply {
            body.bistaticRangeRate(bistaticRangeRate)
        }

        /** One sigma uncertainty in rate of change of the bistatic path in kilometers/sec. */
        fun bistaticRangeRateUnc(bistaticRangeRateUnc: Double) = apply {
            body.bistaticRangeRateUnc(bistaticRangeRateUnc)
        }

        /**
         * Sets [Builder.bistaticRangeRateUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeRateUnc] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeRateUnc(bistaticRangeRateUnc: JsonField<Double>) = apply {
            body.bistaticRangeRateUnc(bistaticRangeRateUnc)
        }

        /** One sigma uncertainty in bistatic range in kilometers. */
        fun bistaticRangeUnc(bistaticRangeUnc: Double) = apply {
            body.bistaticRangeUnc(bistaticRangeUnc)
        }

        /**
         * Sets [Builder.bistaticRangeUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bistaticRangeUnc] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bistaticRangeUnc(bistaticRangeUnc: JsonField<Double>) = apply {
            body.bistaticRangeUnc(bistaticRangeUnc)
        }

        /** Coning angle in degrees. */
        fun coning(coning: Double) = apply { body.coning(coning) }

        /**
         * Sets [Builder.coning] to an arbitrary JSON value.
         *
         * You should usually call [Builder.coning] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun coning(coning: JsonField<Double>) = apply { body.coning(coning) }

        /** One sigma uncertainty in the coning angle measurement, in degrees. */
        fun coningUnc(coningUnc: Double) = apply { body.coningUnc(coningUnc) }

        /**
         * Sets [Builder.coningUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.coningUnc] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun coningUnc(coningUnc: JsonField<Double>) = apply { body.coningUnc(coningUnc) }

        /** Time the row was created in the database, auto-populated by the system. */
        fun createdAt(createdAt: OffsetDateTime) = apply { body.createdAt(createdAt) }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { body.createdAt(createdAt) }

        /** Application user who created the row in the database, auto-populated by the system. */
        fun createdBy(createdBy: String) = apply { body.createdBy(createdBy) }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun createdBy(createdBy: JsonField<String>) = apply { body.createdBy(createdBy) }

        /** Line of sight declination angle in degrees and J2000 coordinate frame. */
        fun declination(declination: Double) = apply { body.declination(declination) }

        /**
         * Sets [Builder.declination] to an arbitrary JSON value.
         *
         * You should usually call [Builder.declination] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun declination(declination: JsonField<Double>) = apply { body.declination(declination) }

        /**
         * The time difference, in seconds, between the signal collected at the surveillance site
         * (after being reflected from the target) and the reference site (direct path line-of-sight
         * signal).
         */
        fun delay(delay: Double) = apply { body.delay(delay) }

        /**
         * Sets [Builder.delay] to an arbitrary JSON value.
         *
         * You should usually call [Builder.delay] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun delay(delay: JsonField<Double>) = apply { body.delay(delay) }

        /** Delay bias in seconds. */
        fun delayBias(delayBias: Double) = apply { body.delayBias(delayBias) }

        /**
         * Sets [Builder.delayBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.delayBias] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun delayBias(delayBias: JsonField<Double>) = apply { body.delayBias(delayBias) }

        /** One sigma uncertainty in the delay measurement, in seconds. */
        fun delayUnc(delayUnc: Double) = apply { body.delayUnc(delayUnc) }

        /**
         * Sets [Builder.delayUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.delayUnc] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun delayUnc(delayUnc: JsonField<Double>) = apply { body.delayUnc(delayUnc) }

        /** Optional source-provided and searchable metadata or descriptor of the data. */
        fun descriptor(descriptor: String) = apply { body.descriptor(descriptor) }

        /**
         * Sets [Builder.descriptor] to an arbitrary JSON value.
         *
         * You should usually call [Builder.descriptor] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun descriptor(descriptor: JsonField<String>) = apply { body.descriptor(descriptor) }

        /** Doppler measurement in hertz. */
        fun doppler(doppler: Double) = apply { body.doppler(doppler) }

        /**
         * Sets [Builder.doppler] to an arbitrary JSON value.
         *
         * You should usually call [Builder.doppler] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun doppler(doppler: JsonField<Double>) = apply { body.doppler(doppler) }

        /** One sigma uncertainty in the Doppler measurement in hertz. */
        fun dopplerUnc(dopplerUnc: Double) = apply { body.dopplerUnc(dopplerUnc) }

        /**
         * Sets [Builder.dopplerUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dopplerUnc] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dopplerUnc(dopplerUnc: JsonField<Double>) = apply { body.dopplerUnc(dopplerUnc) }

        /** Line of sight elevation in degrees and topocentric frame. */
        fun elevation(elevation: Double) = apply { body.elevation(elevation) }

        /**
         * Sets [Builder.elevation] to an arbitrary JSON value.
         *
         * You should usually call [Builder.elevation] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun elevation(elevation: JsonField<Double>) = apply { body.elevation(elevation) }

        /** Sensor elevation bias in degrees. */
        fun elevationBias(elevationBias: Double) = apply { body.elevationBias(elevationBias) }

        /**
         * Sets [Builder.elevationBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.elevationBias] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun elevationBias(elevationBias: JsonField<Double>) = apply {
            body.elevationBias(elevationBias)
        }

        /** Rate of change of the line of sight elevation in degrees per second. */
        fun elevationRate(elevationRate: Double) = apply { body.elevationRate(elevationRate) }

        /**
         * Sets [Builder.elevationRate] to an arbitrary JSON value.
         *
         * You should usually call [Builder.elevationRate] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun elevationRate(elevationRate: JsonField<Double>) = apply {
            body.elevationRate(elevationRate)
        }

        /** One sigma uncertainty in the line of sight elevation angle measurement, in degrees. */
        fun elevationUnc(elevationUnc: Double) = apply { body.elevationUnc(elevationUnc) }

        /**
         * Sets [Builder.elevationUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.elevationUnc] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun elevationUnc(elevationUnc: JsonField<Double>) = apply {
            body.elevationUnc(elevationUnc)
        }

        /** Optional external observation identifier provided by the source. */
        fun extObservationId(extObservationId: String) = apply {
            body.extObservationId(extObservationId)
        }

        /**
         * Sets [Builder.extObservationId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.extObservationId] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun extObservationId(extObservationId: JsonField<String>) = apply {
            body.extObservationId(extObservationId)
        }

        /**
         * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain
         * additional information on an OnOrbit object using the 'get by ID' operation (e.g.
         * /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as
         * /udl/onorbit/25544.
         */
        fun idOnOrbit(idOnOrbit: String) = apply { body.idOnOrbit(idOnOrbit) }

        /**
         * Sets [Builder.idOnOrbit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idOnOrbit] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idOnOrbit(idOnOrbit: JsonField<String>) = apply { body.idOnOrbit(idOnOrbit) }

        /**
         * Unique identifier of the transmitter. This ID can be used to obtain additional
         * information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}).
         * For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
         */
        fun idRfEmitter(idRfEmitter: String) = apply { body.idRfEmitter(idRfEmitter) }

        /**
         * Sets [Builder.idRfEmitter] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idRfEmitter] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idRfEmitter(idRfEmitter: JsonField<String>) = apply { body.idRfEmitter(idRfEmitter) }

        /**
         * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain
         * additional information on a sensor using the 'get by ID' operation (e.g.
         * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
         * /udl/sensor/abc.
         */
        fun idSensor(idSensor: String) = apply { body.idSensor(idSensor) }

        /**
         * Sets [Builder.idSensor] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSensor] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun idSensor(idSensor: JsonField<String>) = apply { body.idSensor(idSensor) }

        /**
         * Unique identifier of the reference receiver sensor. This ID can be used to obtain
         * additional information on a sensor using the 'get by ID' operation (e.g.
         * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
         * /udl/sensor/abc.
         */
        fun idSensorRefReceiver(idSensorRefReceiver: String) = apply {
            body.idSensorRefReceiver(idSensorRefReceiver)
        }

        /**
         * Sets [Builder.idSensorRefReceiver] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSensorRefReceiver] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun idSensorRefReceiver(idSensorRefReceiver: JsonField<String>) = apply {
            body.idSensorRefReceiver(idSensorRefReceiver)
        }

        /**
         * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90
         * degrees (negative values south of equator).
         */
        fun lat(lat: Double) = apply { body.lat(lat) }

        /**
         * Sets [Builder.lat] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lat] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun lat(lat: JsonField<Double>) = apply { body.lat(lat) }

        /**
         * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to
         * 180 degrees (negative values west of Prime Meridian).
         */
        fun lon(lon: Double) = apply { body.lon(lon) }

        /**
         * Sets [Builder.lon] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lon] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun lon(lon: JsonField<Double>) = apply { body.lon(lon) }

        /**
         * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE). This
         * identifier is optional and, if null, no assumption should be made regarding whether other
         * observations may or may not exist to compose a track.
         */
        fun obPosition(obPosition: String) = apply { body.obPosition(obPosition) }

        /**
         * Sets [Builder.obPosition] to an arbitrary JSON value.
         *
         * You should usually call [Builder.obPosition] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun obPosition(obPosition: JsonField<String>) = apply { body.obPosition(obPosition) }

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         */
        fun origin(origin: String) = apply { body.origin(origin) }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun origin(origin: JsonField<String>) = apply { body.origin(origin) }

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         */
        fun origNetwork(origNetwork: String) = apply { body.origNetwork(origNetwork) }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origNetwork(origNetwork: JsonField<String>) = apply { body.origNetwork(origNetwork) }

        /**
         * Optional identifier provided by observation source to indicate the target onorbit object
         * of this observation. This may be an internal identifier and not necessarily a valid
         * satellite number.
         */
        fun origObjectId(origObjectId: String) = apply { body.origObjectId(origObjectId) }

        /**
         * Sets [Builder.origObjectId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origObjectId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origObjectId(origObjectId: JsonField<String>) = apply {
            body.origObjectId(origObjectId)
        }

        /**
         * Optional identifier provided by observation source to indicate the sensor identifier
         * which produced this observation. This may be an internal identifier and not necessarily a
         * valid sensor ID.
         */
        fun origSensorId(origSensorId: String) = apply { body.origSensorId(origSensorId) }

        /**
         * Sets [Builder.origSensorId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origSensorId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origSensorId(origSensorId: JsonField<String>) = apply {
            body.origSensorId(origSensorId)
        }

        /** Radar cross section in meters squared for orthogonal polarization. */
        fun orthogonalRcs(orthogonalRcs: Double) = apply { body.orthogonalRcs(orthogonalRcs) }

        /**
         * Sets [Builder.orthogonalRcs] to an arbitrary JSON value.
         *
         * You should usually call [Builder.orthogonalRcs] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun orthogonalRcs(orthogonalRcs: JsonField<Double>) = apply {
            body.orthogonalRcs(orthogonalRcs)
        }

        /** One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2. */
        fun orthogonalRcsUnc(orthogonalRcsUnc: Double) = apply {
            body.orthogonalRcsUnc(orthogonalRcsUnc)
        }

        /**
         * Sets [Builder.orthogonalRcsUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.orthogonalRcsUnc] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun orthogonalRcsUnc(orthogonalRcsUnc: JsonField<Double>) = apply {
            body.orthogonalRcsUnc(orthogonalRcsUnc)
        }

        /** Line of sight right ascension in degrees and J2000 coordinate frame. */
        fun ra(ra: Double) = apply { body.ra(ra) }

        /**
         * Sets [Builder.ra] to an arbitrary JSON value.
         *
         * You should usually call [Builder.ra] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun ra(ra: JsonField<Double>) = apply { body.ra(ra) }

        /** Radar cross section in meters squared for polarization principal. */
        fun rcs(rcs: Double) = apply { body.rcs(rcs) }

        /**
         * Sets [Builder.rcs] to an arbitrary JSON value.
         *
         * You should usually call [Builder.rcs] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun rcs(rcs: JsonField<Double>) = apply { body.rcs(rcs) }

        /** One sigma uncertainty in principal polarization Radar Cross Section, in meters^2. */
        fun rcsUnc(rcsUnc: Double) = apply { body.rcsUnc(rcsUnc) }

        /**
         * Sets [Builder.rcsUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.rcsUnc] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun rcsUnc(rcsUnc: JsonField<Double>) = apply { body.rcsUnc(rcsUnc) }

        /** Satellite/Catalog number of the target on-orbit object. */
        fun satNo(satNo: Int) = apply { body.satNo(satNo) }

        /**
         * Sets [Builder.satNo] to an arbitrary JSON value.
         *
         * You should usually call [Builder.satNo] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun satNo(satNo: JsonField<Int>) = apply { body.satNo(satNo) }

        /** Signal to noise ratio, in dB. */
        fun snr(snr: Double) = apply { body.snr(snr) }

        /**
         * Sets [Builder.snr] to an arbitrary JSON value.
         *
         * You should usually call [Builder.snr] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun snr(snr: JsonField<Double>) = apply { body.snr(snr) }

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         */
        fun sourceDl(sourceDl: String) = apply { body.sourceDl(sourceDl) }

        /**
         * Sets [Builder.sourceDl] to an arbitrary JSON value.
         *
         * You should usually call [Builder.sourceDl] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun sourceDl(sourceDl: JsonField<String>) = apply { body.sourceDl(sourceDl) }

        /**
         * Optional array of provider/source specific tags for this data, where each element is no
         * longer than 32 characters, used for implementing data owner conditional access controls
         * to restrict access to the data. Should be left null by data providers unless conditional
         * access controls are coordinated with the UDL team.
         */
        fun tags(tags: List<String>) = apply { body.tags(tags) }

        /**
         * Sets [Builder.tags] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tags] with a well-typed `List<String>` value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun tags(tags: JsonField<List<String>>) = apply { body.tags(tags) }

        /**
         * Adds a single [String] to [tags].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addTag(tag: String) = apply { body.addTag(tag) }

        /** Optional identifier to indicate the specific tasking which produced this observation. */
        fun taskId(taskId: String) = apply { body.taskId(taskId) }

        /**
         * Sets [Builder.taskId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.taskId] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun taskId(taskId: JsonField<String>) = apply { body.taskId(taskId) }

        /** Sensor timing bias in seconds. */
        fun timingBias(timingBias: Double) = apply { body.timingBias(timingBias) }

        /**
         * Sets [Builder.timingBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.timingBias] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun timingBias(timingBias: JsonField<Double>) = apply { body.timingBias(timingBias) }

        /**
         * Time of flight (TOF) in seconds. This is the calculated propagation time from
         * transmitter-to-target-to-surveillance site.
         */
        fun tof(tof: Double) = apply { body.tof(tof) }

        /**
         * Sets [Builder.tof] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tof] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun tof(tof: JsonField<Double>) = apply { body.tof(tof) }

        /** The Time of Flight (TOF) bias in seconds. */
        fun tofBias(tofBias: Double) = apply { body.tofBias(tofBias) }

        /**
         * Sets [Builder.tofBias] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tofBias] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun tofBias(tofBias: JsonField<Double>) = apply { body.tofBias(tofBias) }

        /** One sigma uncertainty in time of flight in seconds. */
        fun tofUnc(tofUnc: Double) = apply { body.tofUnc(tofUnc) }

        /**
         * Sets [Builder.tofUnc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tofUnc] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun tofUnc(tofUnc: JsonField<Double>) = apply { body.tofUnc(tofUnc) }

        /** Unique identifier of a track that represents a tracklet for this observation. */
        fun trackId(trackId: String) = apply { body.trackId(trackId) }

        /**
         * Sets [Builder.trackId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.trackId] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun trackId(trackId: JsonField<String>) = apply { body.trackId(trackId) }

        /**
         * Optional identifier to track a commercial or marketplace transaction executed to produce
         * this data.
         */
        fun transactionId(transactionId: String) = apply { body.transactionId(transactionId) }

        /**
         * Sets [Builder.transactionId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.transactionId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun transactionId(transactionId: JsonField<String>) = apply {
            body.transactionId(transactionId)
        }

        /**
         * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
         */
        fun type(type: String) = apply { body.type(type) }

        /**
         * Sets [Builder.type] to an arbitrary JSON value.
         *
         * You should usually call [Builder.type] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun type(type: JsonField<String>) = apply { body.type(type) }

        /**
         * Boolean indicating this observation is part of an uncorrelated track or was unable to be
         * correlated to a known object. This flag should only be set to true by data providers
         * after an attempt to correlate to an on-orbit object was made and failed. If unable to
         * correlate, the 'origObjectId' field may be populated with an internal data provider
         * specific identifier.
         */
        fun uct(uct: Boolean) = apply { body.uct(uct) }

        /**
         * Sets [Builder.uct] to an arbitrary JSON value.
         *
         * You should usually call [Builder.uct] with a well-typed [Boolean] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun uct(uct: JsonField<Boolean>) = apply { body.uct(uct) }

        /** X velocity of target in kilometers/sec in J2000 coordinate frame. */
        fun xvel(xvel: Double) = apply { body.xvel(xvel) }

        /**
         * Sets [Builder.xvel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.xvel] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun xvel(xvel: JsonField<Double>) = apply { body.xvel(xvel) }

        /** Y velocity of target in kilometers/sec in J2000 coordinate frame. */
        fun yvel(yvel: Double) = apply { body.yvel(yvel) }

        /**
         * Sets [Builder.yvel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.yvel] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun yvel(yvel: JsonField<Double>) = apply { body.yvel(yvel) }

        /** Z velocity of target in kilometers/sec in J2000 coordinate frame. */
        fun zvel(zvel: Double) = apply { body.zvel(zvel) }

        /**
         * Sets [Builder.zvel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.zvel] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun zvel(zvel: JsonField<Double>) = apply { body.zvel(zvel) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAlladditional_body_properties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAlladditional_body_properties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAlladditional_body_properties(keys: Set<String>) = apply {
            body.removeAlladditional_body_properties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceadditional_headers(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeadditional_headers(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAlladditional_headers(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAlladditional_query_params(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceadditional_query_params(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAlladditional_query_params(
            additionalQueryParams: Map<String, Iterable<String>>
        ) = apply { this.additionalQueryParams.replaceAll(additionalQueryParams) }

        fun removeadditional_query_params(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAlladditional_query_params(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [PassiveRadarObservationCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .obTime()
         * .source()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): PassiveRadarObservationCreateParams =
            PassiveRadarObservationCreateParams(
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /**
     * Model representation of observation data for passive radar based sensor phenomenologies.
     * Passive radar is a form of radar that instead of using a dedicated transmitter, as is the
     * case for traditional radar, utilizes radio frequency (RF) energy already in the environment.
     * With an abundance of existing energy available from geographically diverse sources, passive
     * radar offers wide field of view coverage and long observation times. A passive radar system
     * is comprised of separately located transmitter (for example, FM radio stations), a reference
     * receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over
     * a broad angular extent as well as providing a signal at the reference site. The reflected
     * energy is received at the surveillance site for processing with the reference signal. The
     * long observation durations that are possible with this technology enables an accurate orbit
     * to be determined within a single pass.
     */
    class Body
    private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val obTime: JsonField<OffsetDateTime>,
        private val source: JsonField<String>,
        private val id: JsonField<String>,
        private val accel: JsonField<Double>,
        private val accelUnc: JsonField<Double>,
        private val alt: JsonField<Double>,
        private val azimuth: JsonField<Double>,
        private val azimuthBias: JsonField<Double>,
        private val azimuthRate: JsonField<Double>,
        private val azimuthUnc: JsonField<Double>,
        private val bistaticRange: JsonField<Double>,
        private val bistaticRangeAccel: JsonField<Double>,
        private val bistaticRangeAccelUnc: JsonField<Double>,
        private val bistaticRangeBias: JsonField<Double>,
        private val bistaticRangeRate: JsonField<Double>,
        private val bistaticRangeRateUnc: JsonField<Double>,
        private val bistaticRangeUnc: JsonField<Double>,
        private val coning: JsonField<Double>,
        private val coningUnc: JsonField<Double>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val declination: JsonField<Double>,
        private val delay: JsonField<Double>,
        private val delayBias: JsonField<Double>,
        private val delayUnc: JsonField<Double>,
        private val descriptor: JsonField<String>,
        private val doppler: JsonField<Double>,
        private val dopplerUnc: JsonField<Double>,
        private val elevation: JsonField<Double>,
        private val elevationBias: JsonField<Double>,
        private val elevationRate: JsonField<Double>,
        private val elevationUnc: JsonField<Double>,
        private val extObservationId: JsonField<String>,
        private val idOnOrbit: JsonField<String>,
        private val idRfEmitter: JsonField<String>,
        private val idSensor: JsonField<String>,
        private val idSensorRefReceiver: JsonField<String>,
        private val lat: JsonField<Double>,
        private val lon: JsonField<Double>,
        private val obPosition: JsonField<String>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val origObjectId: JsonField<String>,
        private val origSensorId: JsonField<String>,
        private val orthogonalRcs: JsonField<Double>,
        private val orthogonalRcsUnc: JsonField<Double>,
        private val ra: JsonField<Double>,
        private val rcs: JsonField<Double>,
        private val rcsUnc: JsonField<Double>,
        private val satNo: JsonField<Int>,
        private val snr: JsonField<Double>,
        private val sourceDl: JsonField<String>,
        private val tags: JsonField<List<String>>,
        private val taskId: JsonField<String>,
        private val timingBias: JsonField<Double>,
        private val tof: JsonField<Double>,
        private val tofBias: JsonField<Double>,
        private val tofUnc: JsonField<Double>,
        private val trackId: JsonField<String>,
        private val transactionId: JsonField<String>,
        private val type: JsonField<String>,
        private val uct: JsonField<Boolean>,
        private val xvel: JsonField<Double>,
        private val yvel: JsonField<Double>,
        private val zvel: JsonField<Double>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("obTime")
            @ExcludeMissing
            obTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("accel") @ExcludeMissing accel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("accelUnc")
            @ExcludeMissing
            accelUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("alt") @ExcludeMissing alt: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("azimuth") @ExcludeMissing azimuth: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("azimuthBias")
            @ExcludeMissing
            azimuthBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("azimuthRate")
            @ExcludeMissing
            azimuthRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("azimuthUnc")
            @ExcludeMissing
            azimuthUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRange")
            @ExcludeMissing
            bistaticRange: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeAccel")
            @ExcludeMissing
            bistaticRangeAccel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeAccelUnc")
            @ExcludeMissing
            bistaticRangeAccelUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeBias")
            @ExcludeMissing
            bistaticRangeBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeRate")
            @ExcludeMissing
            bistaticRangeRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeRateUnc")
            @ExcludeMissing
            bistaticRangeRateUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("bistaticRangeUnc")
            @ExcludeMissing
            bistaticRangeUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("coning") @ExcludeMissing coning: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("coningUnc")
            @ExcludeMissing
            coningUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("declination")
            @ExcludeMissing
            declination: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("delay") @ExcludeMissing delay: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("delayBias")
            @ExcludeMissing
            delayBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("delayUnc")
            @ExcludeMissing
            delayUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("descriptor")
            @ExcludeMissing
            descriptor: JsonField<String> = JsonMissing.of(),
            @JsonProperty("doppler") @ExcludeMissing doppler: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("dopplerUnc")
            @ExcludeMissing
            dopplerUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("elevation")
            @ExcludeMissing
            elevation: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("elevationBias")
            @ExcludeMissing
            elevationBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("elevationRate")
            @ExcludeMissing
            elevationRate: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("elevationUnc")
            @ExcludeMissing
            elevationUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("extObservationId")
            @ExcludeMissing
            extObservationId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idOnOrbit")
            @ExcludeMissing
            idOnOrbit: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idRFEmitter")
            @ExcludeMissing
            idRfEmitter: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idSensor")
            @ExcludeMissing
            idSensor: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idSensorRefReceiver")
            @ExcludeMissing
            idSensorRefReceiver: JsonField<String> = JsonMissing.of(),
            @JsonProperty("lat") @ExcludeMissing lat: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("lon") @ExcludeMissing lon: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("obPosition")
            @ExcludeMissing
            obPosition: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork")
            @ExcludeMissing
            origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origObjectId")
            @ExcludeMissing
            origObjectId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origSensorId")
            @ExcludeMissing
            origSensorId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("orthogonalRcs")
            @ExcludeMissing
            orthogonalRcs: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("orthogonalRcsUnc")
            @ExcludeMissing
            orthogonalRcsUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("ra") @ExcludeMissing ra: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("rcs") @ExcludeMissing rcs: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("rcsUnc") @ExcludeMissing rcsUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("satNo") @ExcludeMissing satNo: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("snr") @ExcludeMissing snr: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("sourceDL")
            @ExcludeMissing
            sourceDl: JsonField<String> = JsonMissing.of(),
            @JsonProperty("tags") @ExcludeMissing tags: JsonField<List<String>> = JsonMissing.of(),
            @JsonProperty("taskId") @ExcludeMissing taskId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("timingBias")
            @ExcludeMissing
            timingBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("tof") @ExcludeMissing tof: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("tofBias") @ExcludeMissing tofBias: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("tofUnc") @ExcludeMissing tofUnc: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("trackId") @ExcludeMissing trackId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("transactionId")
            @ExcludeMissing
            transactionId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("type") @ExcludeMissing type: JsonField<String> = JsonMissing.of(),
            @JsonProperty("uct") @ExcludeMissing uct: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("xvel") @ExcludeMissing xvel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("yvel") @ExcludeMissing yvel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zvel") @ExcludeMissing zvel: JsonField<Double> = JsonMissing.of(),
        ) : this(
            classificationMarking,
            dataMode,
            obTime,
            source,
            id,
            accel,
            accelUnc,
            alt,
            azimuth,
            azimuthBias,
            azimuthRate,
            azimuthUnc,
            bistaticRange,
            bistaticRangeAccel,
            bistaticRangeAccelUnc,
            bistaticRangeBias,
            bistaticRangeRate,
            bistaticRangeRateUnc,
            bistaticRangeUnc,
            coning,
            coningUnc,
            createdAt,
            createdBy,
            declination,
            delay,
            delayBias,
            delayUnc,
            descriptor,
            doppler,
            dopplerUnc,
            elevation,
            elevationBias,
            elevationRate,
            elevationUnc,
            extObservationId,
            idOnOrbit,
            idRfEmitter,
            idSensor,
            idSensorRefReceiver,
            lat,
            lon,
            obPosition,
            origin,
            origNetwork,
            origObjectId,
            origSensorId,
            orthogonalRcs,
            orthogonalRcsUnc,
            ra,
            rcs,
            rcsUnc,
            satNo,
            snr,
            sourceDl,
            tags,
            taskId,
            timingBias,
            tof,
            tofBias,
            tofUnc,
            trackId,
            transactionId,
            type,
            uct,
            xvel,
            yvel,
            zvel,
            mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * Ob detection time in ISO 8601 UTC with microsecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun obTime(): OffsetDateTime = obTime.getRequired("obTime")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun id(): Optional<String> = id.getOptional("id")

        /**
         * The target Acceleration measurement in kilometers/sec^2 for this observation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun accel(): Optional<Double> = accel.getOptional("accel")

        /**
         * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun accelUnc(): Optional<Double> = accelUnc.getOptional("accelUnc")

        /**
         * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun alt(): Optional<Double> = alt.getOptional("alt")

        /**
         * Line of sight azimuth angle in degrees and topocentric frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun azimuth(): Optional<Double> = azimuth.getOptional("azimuth")

        /**
         * Sensor azimuth angle bias in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun azimuthBias(): Optional<Double> = azimuthBias.getOptional("azimuthBias")

        /**
         * Rate of change of the line of sight azimuth in degrees per second.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun azimuthRate(): Optional<Double> = azimuthRate.getOptional("azimuthRate")

        /**
         * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun azimuthUnc(): Optional<Double> = azimuthUnc.getOptional("azimuthUnc")

        /**
         * Target bistatic path distance in kilometers. This is the
         * transmitter-to-target-to-surveillance site distance.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRange(): Optional<Double> = bistaticRange.getOptional("bistaticRange")

        /**
         * Bistatic range acceleration in kilometers/sec^2.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeAccel(): Optional<Double> =
            bistaticRangeAccel.getOptional("bistaticRangeAccel")

        /**
         * One sigma uncertainty in the bistatic range acceleration measurement, in
         * kilometers/sec^2.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeAccelUnc(): Optional<Double> =
            bistaticRangeAccelUnc.getOptional("bistaticRangeAccelUnc")

        /**
         * Sensor bistatic range bias in kilometers.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeBias(): Optional<Double> =
            bistaticRangeBias.getOptional("bistaticRangeBias")

        /**
         * Rate of change of the bistatic path in kilometers/sec.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeRate(): Optional<Double> =
            bistaticRangeRate.getOptional("bistaticRangeRate")

        /**
         * One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeRateUnc(): Optional<Double> =
            bistaticRangeRateUnc.getOptional("bistaticRangeRateUnc")

        /**
         * One sigma uncertainty in bistatic range in kilometers.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bistaticRangeUnc(): Optional<Double> = bistaticRangeUnc.getOptional("bistaticRangeUnc")

        /**
         * Coning angle in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun coning(): Optional<Double> = coning.getOptional("coning")

        /**
         * One sigma uncertainty in the coning angle measurement, in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun coningUnc(): Optional<Double> = coningUnc.getOptional("coningUnc")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * Line of sight declination angle in degrees and J2000 coordinate frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun declination(): Optional<Double> = declination.getOptional("declination")

        /**
         * The time difference, in seconds, between the signal collected at the surveillance site
         * (after being reflected from the target) and the reference site (direct path line-of-sight
         * signal).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun delay(): Optional<Double> = delay.getOptional("delay")

        /**
         * Delay bias in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun delayBias(): Optional<Double> = delayBias.getOptional("delayBias")

        /**
         * One sigma uncertainty in the delay measurement, in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun delayUnc(): Optional<Double> = delayUnc.getOptional("delayUnc")

        /**
         * Optional source-provided and searchable metadata or descriptor of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun descriptor(): Optional<String> = descriptor.getOptional("descriptor")

        /**
         * Doppler measurement in hertz.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun doppler(): Optional<Double> = doppler.getOptional("doppler")

        /**
         * One sigma uncertainty in the Doppler measurement in hertz.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun dopplerUnc(): Optional<Double> = dopplerUnc.getOptional("dopplerUnc")

        /**
         * Line of sight elevation in degrees and topocentric frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun elevation(): Optional<Double> = elevation.getOptional("elevation")

        /**
         * Sensor elevation bias in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun elevationBias(): Optional<Double> = elevationBias.getOptional("elevationBias")

        /**
         * Rate of change of the line of sight elevation in degrees per second.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun elevationRate(): Optional<Double> = elevationRate.getOptional("elevationRate")

        /**
         * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun elevationUnc(): Optional<Double> = elevationUnc.getOptional("elevationUnc")

        /**
         * Optional external observation identifier provided by the source.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun extObservationId(): Optional<String> = extObservationId.getOptional("extObservationId")

        /**
         * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain
         * additional information on an OnOrbit object using the 'get by ID' operation (e.g.
         * /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as
         * /udl/onorbit/25544.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idOnOrbit(): Optional<String> = idOnOrbit.getOptional("idOnOrbit")

        /**
         * Unique identifier of the transmitter. This ID can be used to obtain additional
         * information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}).
         * For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idRfEmitter(): Optional<String> = idRfEmitter.getOptional("idRFEmitter")

        /**
         * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain
         * additional information on a sensor using the 'get by ID' operation (e.g.
         * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
         * /udl/sensor/abc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idSensor(): Optional<String> = idSensor.getOptional("idSensor")

        /**
         * Unique identifier of the reference receiver sensor. This ID can be used to obtain
         * additional information on a sensor using the 'get by ID' operation (e.g.
         * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
         * /udl/sensor/abc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idSensorRefReceiver(): Optional<String> =
            idSensorRefReceiver.getOptional("idSensorRefReceiver")

        /**
         * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90
         * degrees (negative values south of equator).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lat(): Optional<Double> = lat.getOptional("lat")

        /**
         * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to
         * 180 degrees (negative values west of Prime Meridian).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lon(): Optional<Double> = lon.getOptional("lon")

        /**
         * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE). This
         * identifier is optional and, if null, no assumption should be made regarding whether other
         * observations may or may not exist to compose a track.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun obPosition(): Optional<String> = obPosition.getOptional("obPosition")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * Optional identifier provided by observation source to indicate the target onorbit object
         * of this observation. This may be an internal identifier and not necessarily a valid
         * satellite number.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origObjectId(): Optional<String> = origObjectId.getOptional("origObjectId")

        /**
         * Optional identifier provided by observation source to indicate the sensor identifier
         * which produced this observation. This may be an internal identifier and not necessarily a
         * valid sensor ID.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origSensorId(): Optional<String> = origSensorId.getOptional("origSensorId")

        /**
         * Radar cross section in meters squared for orthogonal polarization.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun orthogonalRcs(): Optional<Double> = orthogonalRcs.getOptional("orthogonalRcs")

        /**
         * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun orthogonalRcsUnc(): Optional<Double> = orthogonalRcsUnc.getOptional("orthogonalRcsUnc")

        /**
         * Line of sight right ascension in degrees and J2000 coordinate frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ra(): Optional<Double> = ra.getOptional("ra")

        /**
         * Radar cross section in meters squared for polarization principal.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun rcs(): Optional<Double> = rcs.getOptional("rcs")

        /**
         * One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun rcsUnc(): Optional<Double> = rcsUnc.getOptional("rcsUnc")

        /**
         * Satellite/Catalog number of the target on-orbit object.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun satNo(): Optional<Int> = satNo.getOptional("satNo")

        /**
         * Signal to noise ratio, in dB.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun snr(): Optional<Double> = snr.getOptional("snr")

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun sourceDl(): Optional<String> = sourceDl.getOptional("sourceDL")

        /**
         * Optional array of provider/source specific tags for this data, where each element is no
         * longer than 32 characters, used for implementing data owner conditional access controls
         * to restrict access to the data. Should be left null by data providers unless conditional
         * access controls are coordinated with the UDL team.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tags(): Optional<List<String>> = tags.getOptional("tags")

        /**
         * Optional identifier to indicate the specific tasking which produced this observation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun taskId(): Optional<String> = taskId.getOptional("taskId")

        /**
         * Sensor timing bias in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun timingBias(): Optional<Double> = timingBias.getOptional("timingBias")

        /**
         * Time of flight (TOF) in seconds. This is the calculated propagation time from
         * transmitter-to-target-to-surveillance site.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tof(): Optional<Double> = tof.getOptional("tof")

        /**
         * The Time of Flight (TOF) bias in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tofBias(): Optional<Double> = tofBias.getOptional("tofBias")

        /**
         * One sigma uncertainty in time of flight in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tofUnc(): Optional<Double> = tofUnc.getOptional("tofUnc")

        /**
         * Unique identifier of a track that represents a tracklet for this observation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun trackId(): Optional<String> = trackId.getOptional("trackId")

        /**
         * Optional identifier to track a commercial or marketplace transaction executed to produce
         * this data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun transactionId(): Optional<String> = transactionId.getOptional("transactionId")

        /**
         * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun type(): Optional<String> = type.getOptional("type")

        /**
         * Boolean indicating this observation is part of an uncorrelated track or was unable to be
         * correlated to a known object. This flag should only be set to true by data providers
         * after an attempt to correlate to an on-orbit object was made and failed. If unable to
         * correlate, the 'origObjectId' field may be populated with an internal data provider
         * specific identifier.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun uct(): Optional<Boolean> = uct.getOptional("uct")

        /**
         * X velocity of target in kilometers/sec in J2000 coordinate frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun xvel(): Optional<Double> = xvel.getOptional("xvel")

        /**
         * Y velocity of target in kilometers/sec in J2000 coordinate frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun yvel(): Optional<Double> = yvel.getOptional("yvel")

        /**
         * Z velocity of target in kilometers/sec in J2000 coordinate frame.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun zvel(): Optional<Double> = zvel.getOptional("zvel")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [obTime].
         *
         * Unlike [obTime], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("obTime") @ExcludeMissing fun _obTime(): JsonField<OffsetDateTime> = obTime

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [id].
         *
         * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

        /**
         * Returns the raw JSON value of [accel].
         *
         * Unlike [accel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("accel") @ExcludeMissing fun _accel(): JsonField<Double> = accel

        /**
         * Returns the raw JSON value of [accelUnc].
         *
         * Unlike [accelUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("accelUnc") @ExcludeMissing fun _accelUnc(): JsonField<Double> = accelUnc

        /**
         * Returns the raw JSON value of [alt].
         *
         * Unlike [alt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("alt") @ExcludeMissing fun _alt(): JsonField<Double> = alt

        /**
         * Returns the raw JSON value of [azimuth].
         *
         * Unlike [azimuth], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("azimuth") @ExcludeMissing fun _azimuth(): JsonField<Double> = azimuth

        /**
         * Returns the raw JSON value of [azimuthBias].
         *
         * Unlike [azimuthBias], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("azimuthBias")
        @ExcludeMissing
        fun _azimuthBias(): JsonField<Double> = azimuthBias

        /**
         * Returns the raw JSON value of [azimuthRate].
         *
         * Unlike [azimuthRate], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("azimuthRate")
        @ExcludeMissing
        fun _azimuthRate(): JsonField<Double> = azimuthRate

        /**
         * Returns the raw JSON value of [azimuthUnc].
         *
         * Unlike [azimuthUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("azimuthUnc")
        @ExcludeMissing
        fun _azimuthUnc(): JsonField<Double> = azimuthUnc

        /**
         * Returns the raw JSON value of [bistaticRange].
         *
         * Unlike [bistaticRange], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("bistaticRange")
        @ExcludeMissing
        fun _bistaticRange(): JsonField<Double> = bistaticRange

        /**
         * Returns the raw JSON value of [bistaticRangeAccel].
         *
         * Unlike [bistaticRangeAccel], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("bistaticRangeAccel")
        @ExcludeMissing
        fun _bistaticRangeAccel(): JsonField<Double> = bistaticRangeAccel

        /**
         * Returns the raw JSON value of [bistaticRangeAccelUnc].
         *
         * Unlike [bistaticRangeAccelUnc], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("bistaticRangeAccelUnc")
        @ExcludeMissing
        fun _bistaticRangeAccelUnc(): JsonField<Double> = bistaticRangeAccelUnc

        /**
         * Returns the raw JSON value of [bistaticRangeBias].
         *
         * Unlike [bistaticRangeBias], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("bistaticRangeBias")
        @ExcludeMissing
        fun _bistaticRangeBias(): JsonField<Double> = bistaticRangeBias

        /**
         * Returns the raw JSON value of [bistaticRangeRate].
         *
         * Unlike [bistaticRangeRate], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("bistaticRangeRate")
        @ExcludeMissing
        fun _bistaticRangeRate(): JsonField<Double> = bistaticRangeRate

        /**
         * Returns the raw JSON value of [bistaticRangeRateUnc].
         *
         * Unlike [bistaticRangeRateUnc], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("bistaticRangeRateUnc")
        @ExcludeMissing
        fun _bistaticRangeRateUnc(): JsonField<Double> = bistaticRangeRateUnc

        /**
         * Returns the raw JSON value of [bistaticRangeUnc].
         *
         * Unlike [bistaticRangeUnc], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("bistaticRangeUnc")
        @ExcludeMissing
        fun _bistaticRangeUnc(): JsonField<Double> = bistaticRangeUnc

        /**
         * Returns the raw JSON value of [coning].
         *
         * Unlike [coning], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("coning") @ExcludeMissing fun _coning(): JsonField<Double> = coning

        /**
         * Returns the raw JSON value of [coningUnc].
         *
         * Unlike [coningUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("coningUnc") @ExcludeMissing fun _coningUnc(): JsonField<Double> = coningUnc

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [declination].
         *
         * Unlike [declination], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("declination")
        @ExcludeMissing
        fun _declination(): JsonField<Double> = declination

        /**
         * Returns the raw JSON value of [delay].
         *
         * Unlike [delay], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("delay") @ExcludeMissing fun _delay(): JsonField<Double> = delay

        /**
         * Returns the raw JSON value of [delayBias].
         *
         * Unlike [delayBias], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("delayBias") @ExcludeMissing fun _delayBias(): JsonField<Double> = delayBias

        /**
         * Returns the raw JSON value of [delayUnc].
         *
         * Unlike [delayUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("delayUnc") @ExcludeMissing fun _delayUnc(): JsonField<Double> = delayUnc

        /**
         * Returns the raw JSON value of [descriptor].
         *
         * Unlike [descriptor], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("descriptor")
        @ExcludeMissing
        fun _descriptor(): JsonField<String> = descriptor

        /**
         * Returns the raw JSON value of [doppler].
         *
         * Unlike [doppler], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("doppler") @ExcludeMissing fun _doppler(): JsonField<Double> = doppler

        /**
         * Returns the raw JSON value of [dopplerUnc].
         *
         * Unlike [dopplerUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dopplerUnc")
        @ExcludeMissing
        fun _dopplerUnc(): JsonField<Double> = dopplerUnc

        /**
         * Returns the raw JSON value of [elevation].
         *
         * Unlike [elevation], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("elevation") @ExcludeMissing fun _elevation(): JsonField<Double> = elevation

        /**
         * Returns the raw JSON value of [elevationBias].
         *
         * Unlike [elevationBias], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("elevationBias")
        @ExcludeMissing
        fun _elevationBias(): JsonField<Double> = elevationBias

        /**
         * Returns the raw JSON value of [elevationRate].
         *
         * Unlike [elevationRate], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("elevationRate")
        @ExcludeMissing
        fun _elevationRate(): JsonField<Double> = elevationRate

        /**
         * Returns the raw JSON value of [elevationUnc].
         *
         * Unlike [elevationUnc], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("elevationUnc")
        @ExcludeMissing
        fun _elevationUnc(): JsonField<Double> = elevationUnc

        /**
         * Returns the raw JSON value of [extObservationId].
         *
         * Unlike [extObservationId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("extObservationId")
        @ExcludeMissing
        fun _extObservationId(): JsonField<String> = extObservationId

        /**
         * Returns the raw JSON value of [idOnOrbit].
         *
         * Unlike [idOnOrbit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idOnOrbit") @ExcludeMissing fun _idOnOrbit(): JsonField<String> = idOnOrbit

        /**
         * Returns the raw JSON value of [idRfEmitter].
         *
         * Unlike [idRfEmitter], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idRFEmitter")
        @ExcludeMissing
        fun _idRfEmitter(): JsonField<String> = idRfEmitter

        /**
         * Returns the raw JSON value of [idSensor].
         *
         * Unlike [idSensor], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idSensor") @ExcludeMissing fun _idSensor(): JsonField<String> = idSensor

        /**
         * Returns the raw JSON value of [idSensorRefReceiver].
         *
         * Unlike [idSensorRefReceiver], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("idSensorRefReceiver")
        @ExcludeMissing
        fun _idSensorRefReceiver(): JsonField<String> = idSensorRefReceiver

        /**
         * Returns the raw JSON value of [lat].
         *
         * Unlike [lat], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("lat") @ExcludeMissing fun _lat(): JsonField<Double> = lat

        /**
         * Returns the raw JSON value of [lon].
         *
         * Unlike [lon], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("lon") @ExcludeMissing fun _lon(): JsonField<Double> = lon

        /**
         * Returns the raw JSON value of [obPosition].
         *
         * Unlike [obPosition], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("obPosition")
        @ExcludeMissing
        fun _obPosition(): JsonField<String> = obPosition

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [origObjectId].
         *
         * Unlike [origObjectId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("origObjectId")
        @ExcludeMissing
        fun _origObjectId(): JsonField<String> = origObjectId

        /**
         * Returns the raw JSON value of [origSensorId].
         *
         * Unlike [origSensorId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("origSensorId")
        @ExcludeMissing
        fun _origSensorId(): JsonField<String> = origSensorId

        /**
         * Returns the raw JSON value of [orthogonalRcs].
         *
         * Unlike [orthogonalRcs], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("orthogonalRcs")
        @ExcludeMissing
        fun _orthogonalRcs(): JsonField<Double> = orthogonalRcs

        /**
         * Returns the raw JSON value of [orthogonalRcsUnc].
         *
         * Unlike [orthogonalRcsUnc], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("orthogonalRcsUnc")
        @ExcludeMissing
        fun _orthogonalRcsUnc(): JsonField<Double> = orthogonalRcsUnc

        /**
         * Returns the raw JSON value of [ra].
         *
         * Unlike [ra], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ra") @ExcludeMissing fun _ra(): JsonField<Double> = ra

        /**
         * Returns the raw JSON value of [rcs].
         *
         * Unlike [rcs], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("rcs") @ExcludeMissing fun _rcs(): JsonField<Double> = rcs

        /**
         * Returns the raw JSON value of [rcsUnc].
         *
         * Unlike [rcsUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("rcsUnc") @ExcludeMissing fun _rcsUnc(): JsonField<Double> = rcsUnc

        /**
         * Returns the raw JSON value of [satNo].
         *
         * Unlike [satNo], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("satNo") @ExcludeMissing fun _satNo(): JsonField<Int> = satNo

        /**
         * Returns the raw JSON value of [snr].
         *
         * Unlike [snr], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("snr") @ExcludeMissing fun _snr(): JsonField<Double> = snr

        /**
         * Returns the raw JSON value of [sourceDl].
         *
         * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("sourceDL") @ExcludeMissing fun _sourceDl(): JsonField<String> = sourceDl

        /**
         * Returns the raw JSON value of [tags].
         *
         * Unlike [tags], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tags") @ExcludeMissing fun _tags(): JsonField<List<String>> = tags

        /**
         * Returns the raw JSON value of [taskId].
         *
         * Unlike [taskId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("taskId") @ExcludeMissing fun _taskId(): JsonField<String> = taskId

        /**
         * Returns the raw JSON value of [timingBias].
         *
         * Unlike [timingBias], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("timingBias")
        @ExcludeMissing
        fun _timingBias(): JsonField<Double> = timingBias

        /**
         * Returns the raw JSON value of [tof].
         *
         * Unlike [tof], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tof") @ExcludeMissing fun _tof(): JsonField<Double> = tof

        /**
         * Returns the raw JSON value of [tofBias].
         *
         * Unlike [tofBias], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tofBias") @ExcludeMissing fun _tofBias(): JsonField<Double> = tofBias

        /**
         * Returns the raw JSON value of [tofUnc].
         *
         * Unlike [tofUnc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tofUnc") @ExcludeMissing fun _tofUnc(): JsonField<Double> = tofUnc

        /**
         * Returns the raw JSON value of [trackId].
         *
         * Unlike [trackId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("trackId") @ExcludeMissing fun _trackId(): JsonField<String> = trackId

        /**
         * Returns the raw JSON value of [transactionId].
         *
         * Unlike [transactionId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("transactionId")
        @ExcludeMissing
        fun _transactionId(): JsonField<String> = transactionId

        /**
         * Returns the raw JSON value of [type].
         *
         * Unlike [type], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("type") @ExcludeMissing fun _type(): JsonField<String> = type

        /**
         * Returns the raw JSON value of [uct].
         *
         * Unlike [uct], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("uct") @ExcludeMissing fun _uct(): JsonField<Boolean> = uct

        /**
         * Returns the raw JSON value of [xvel].
         *
         * Unlike [xvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("xvel") @ExcludeMissing fun _xvel(): JsonField<Double> = xvel

        /**
         * Returns the raw JSON value of [yvel].
         *
         * Unlike [yvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("yvel") @ExcludeMissing fun _yvel(): JsonField<Double> = yvel

        /**
         * Returns the raw JSON value of [zvel].
         *
         * Unlike [zvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("zvel") @ExcludeMissing fun _zvel(): JsonField<Double> = zvel

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .obTime()
             * .source()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var obTime: JsonField<OffsetDateTime>? = null
            private var source: JsonField<String>? = null
            private var id: JsonField<String> = JsonMissing.of()
            private var accel: JsonField<Double> = JsonMissing.of()
            private var accelUnc: JsonField<Double> = JsonMissing.of()
            private var alt: JsonField<Double> = JsonMissing.of()
            private var azimuth: JsonField<Double> = JsonMissing.of()
            private var azimuthBias: JsonField<Double> = JsonMissing.of()
            private var azimuthRate: JsonField<Double> = JsonMissing.of()
            private var azimuthUnc: JsonField<Double> = JsonMissing.of()
            private var bistaticRange: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeAccel: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeAccelUnc: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeBias: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeRate: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeRateUnc: JsonField<Double> = JsonMissing.of()
            private var bistaticRangeUnc: JsonField<Double> = JsonMissing.of()
            private var coning: JsonField<Double> = JsonMissing.of()
            private var coningUnc: JsonField<Double> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var declination: JsonField<Double> = JsonMissing.of()
            private var delay: JsonField<Double> = JsonMissing.of()
            private var delayBias: JsonField<Double> = JsonMissing.of()
            private var delayUnc: JsonField<Double> = JsonMissing.of()
            private var descriptor: JsonField<String> = JsonMissing.of()
            private var doppler: JsonField<Double> = JsonMissing.of()
            private var dopplerUnc: JsonField<Double> = JsonMissing.of()
            private var elevation: JsonField<Double> = JsonMissing.of()
            private var elevationBias: JsonField<Double> = JsonMissing.of()
            private var elevationRate: JsonField<Double> = JsonMissing.of()
            private var elevationUnc: JsonField<Double> = JsonMissing.of()
            private var extObservationId: JsonField<String> = JsonMissing.of()
            private var idOnOrbit: JsonField<String> = JsonMissing.of()
            private var idRfEmitter: JsonField<String> = JsonMissing.of()
            private var idSensor: JsonField<String> = JsonMissing.of()
            private var idSensorRefReceiver: JsonField<String> = JsonMissing.of()
            private var lat: JsonField<Double> = JsonMissing.of()
            private var lon: JsonField<Double> = JsonMissing.of()
            private var obPosition: JsonField<String> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var origObjectId: JsonField<String> = JsonMissing.of()
            private var origSensorId: JsonField<String> = JsonMissing.of()
            private var orthogonalRcs: JsonField<Double> = JsonMissing.of()
            private var orthogonalRcsUnc: JsonField<Double> = JsonMissing.of()
            private var ra: JsonField<Double> = JsonMissing.of()
            private var rcs: JsonField<Double> = JsonMissing.of()
            private var rcsUnc: JsonField<Double> = JsonMissing.of()
            private var satNo: JsonField<Int> = JsonMissing.of()
            private var snr: JsonField<Double> = JsonMissing.of()
            private var sourceDl: JsonField<String> = JsonMissing.of()
            private var tags: JsonField<MutableList<String>>? = null
            private var taskId: JsonField<String> = JsonMissing.of()
            private var timingBias: JsonField<Double> = JsonMissing.of()
            private var tof: JsonField<Double> = JsonMissing.of()
            private var tofBias: JsonField<Double> = JsonMissing.of()
            private var tofUnc: JsonField<Double> = JsonMissing.of()
            private var trackId: JsonField<String> = JsonMissing.of()
            private var transactionId: JsonField<String> = JsonMissing.of()
            private var type: JsonField<String> = JsonMissing.of()
            private var uct: JsonField<Boolean> = JsonMissing.of()
            private var xvel: JsonField<Double> = JsonMissing.of()
            private var yvel: JsonField<Double> = JsonMissing.of()
            private var zvel: JsonField<Double> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                classificationMarking = body.classificationMarking
                dataMode = body.dataMode
                obTime = body.obTime
                source = body.source
                id = body.id
                accel = body.accel
                accelUnc = body.accelUnc
                alt = body.alt
                azimuth = body.azimuth
                azimuthBias = body.azimuthBias
                azimuthRate = body.azimuthRate
                azimuthUnc = body.azimuthUnc
                bistaticRange = body.bistaticRange
                bistaticRangeAccel = body.bistaticRangeAccel
                bistaticRangeAccelUnc = body.bistaticRangeAccelUnc
                bistaticRangeBias = body.bistaticRangeBias
                bistaticRangeRate = body.bistaticRangeRate
                bistaticRangeRateUnc = body.bistaticRangeRateUnc
                bistaticRangeUnc = body.bistaticRangeUnc
                coning = body.coning
                coningUnc = body.coningUnc
                createdAt = body.createdAt
                createdBy = body.createdBy
                declination = body.declination
                delay = body.delay
                delayBias = body.delayBias
                delayUnc = body.delayUnc
                descriptor = body.descriptor
                doppler = body.doppler
                dopplerUnc = body.dopplerUnc
                elevation = body.elevation
                elevationBias = body.elevationBias
                elevationRate = body.elevationRate
                elevationUnc = body.elevationUnc
                extObservationId = body.extObservationId
                idOnOrbit = body.idOnOrbit
                idRfEmitter = body.idRfEmitter
                idSensor = body.idSensor
                idSensorRefReceiver = body.idSensorRefReceiver
                lat = body.lat
                lon = body.lon
                obPosition = body.obPosition
                origin = body.origin
                origNetwork = body.origNetwork
                origObjectId = body.origObjectId
                origSensorId = body.origSensorId
                orthogonalRcs = body.orthogonalRcs
                orthogonalRcsUnc = body.orthogonalRcsUnc
                ra = body.ra
                rcs = body.rcs
                rcsUnc = body.rcsUnc
                satNo = body.satNo
                snr = body.snr
                sourceDl = body.sourceDl
                tags = body.tags.map { it.toMutableList() }
                taskId = body.taskId
                timingBias = body.timingBias
                tof = body.tof
                tofBias = body.tofBias
                tofUnc = body.tofUnc
                trackId = body.trackId
                transactionId = body.transactionId
                type = body.type
                uct = body.uct
                xvel = body.xvel
                yvel = body.yvel
                zvel = body.zvel
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /** Ob detection time in ISO 8601 UTC with microsecond precision. */
            fun obTime(obTime: OffsetDateTime) = obTime(JsonField.of(obTime))

            /**
             * Sets [Builder.obTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.obTime] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun obTime(obTime: JsonField<OffsetDateTime>) = apply { this.obTime = obTime }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /** Unique identifier of the record, auto-generated by the system. */
            fun id(id: String) = id(JsonField.of(id))

            /**
             * Sets [Builder.id] to an arbitrary JSON value.
             *
             * You should usually call [Builder.id] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun id(id: JsonField<String>) = apply { this.id = id }

            /** The target Acceleration measurement in kilometers/sec^2 for this observation. */
            fun accel(accel: Double) = accel(JsonField.of(accel))

            /**
             * Sets [Builder.accel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.accel] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun accel(accel: JsonField<Double>) = apply { this.accel = accel }

            /**
             * The target Acceleration uncertainty measurement in kilometers/sec^2 for this
             * observation.
             */
            fun accelUnc(accelUnc: Double) = accelUnc(JsonField.of(accelUnc))

            /**
             * Sets [Builder.accelUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.accelUnc] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun accelUnc(accelUnc: JsonField<Double>) = apply { this.accelUnc = accelUnc }

            /**
             * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
             */
            fun alt(alt: Double) = alt(JsonField.of(alt))

            /**
             * Sets [Builder.alt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.alt] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun alt(alt: JsonField<Double>) = apply { this.alt = alt }

            /** Line of sight azimuth angle in degrees and topocentric frame. */
            fun azimuth(azimuth: Double) = azimuth(JsonField.of(azimuth))

            /**
             * Sets [Builder.azimuth] to an arbitrary JSON value.
             *
             * You should usually call [Builder.azimuth] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun azimuth(azimuth: JsonField<Double>) = apply { this.azimuth = azimuth }

            /** Sensor azimuth angle bias in degrees. */
            fun azimuthBias(azimuthBias: Double) = azimuthBias(JsonField.of(azimuthBias))

            /**
             * Sets [Builder.azimuthBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.azimuthBias] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun azimuthBias(azimuthBias: JsonField<Double>) = apply {
                this.azimuthBias = azimuthBias
            }

            /** Rate of change of the line of sight azimuth in degrees per second. */
            fun azimuthRate(azimuthRate: Double) = azimuthRate(JsonField.of(azimuthRate))

            /**
             * Sets [Builder.azimuthRate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.azimuthRate] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun azimuthRate(azimuthRate: JsonField<Double>) = apply {
                this.azimuthRate = azimuthRate
            }

            /** One sigma uncertainty in the line of sight azimuth angle measurement, in degrees. */
            fun azimuthUnc(azimuthUnc: Double) = azimuthUnc(JsonField.of(azimuthUnc))

            /**
             * Sets [Builder.azimuthUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.azimuthUnc] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun azimuthUnc(azimuthUnc: JsonField<Double>) = apply { this.azimuthUnc = azimuthUnc }

            /**
             * Target bistatic path distance in kilometers. This is the
             * transmitter-to-target-to-surveillance site distance.
             */
            fun bistaticRange(bistaticRange: Double) = bistaticRange(JsonField.of(bistaticRange))

            /**
             * Sets [Builder.bistaticRange] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRange] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bistaticRange(bistaticRange: JsonField<Double>) = apply {
                this.bistaticRange = bistaticRange
            }

            /** Bistatic range acceleration in kilometers/sec^2. */
            fun bistaticRangeAccel(bistaticRangeAccel: Double) =
                bistaticRangeAccel(JsonField.of(bistaticRangeAccel))

            /**
             * Sets [Builder.bistaticRangeAccel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeAccel] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bistaticRangeAccel(bistaticRangeAccel: JsonField<Double>) = apply {
                this.bistaticRangeAccel = bistaticRangeAccel
            }

            /**
             * One sigma uncertainty in the bistatic range acceleration measurement, in
             * kilometers/sec^2.
             */
            fun bistaticRangeAccelUnc(bistaticRangeAccelUnc: Double) =
                bistaticRangeAccelUnc(JsonField.of(bistaticRangeAccelUnc))

            /**
             * Sets [Builder.bistaticRangeAccelUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeAccelUnc] with a well-typed [Double]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun bistaticRangeAccelUnc(bistaticRangeAccelUnc: JsonField<Double>) = apply {
                this.bistaticRangeAccelUnc = bistaticRangeAccelUnc
            }

            /** Sensor bistatic range bias in kilometers. */
            fun bistaticRangeBias(bistaticRangeBias: Double) =
                bistaticRangeBias(JsonField.of(bistaticRangeBias))

            /**
             * Sets [Builder.bistaticRangeBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeBias] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bistaticRangeBias(bistaticRangeBias: JsonField<Double>) = apply {
                this.bistaticRangeBias = bistaticRangeBias
            }

            /** Rate of change of the bistatic path in kilometers/sec. */
            fun bistaticRangeRate(bistaticRangeRate: Double) =
                bistaticRangeRate(JsonField.of(bistaticRangeRate))

            /**
             * Sets [Builder.bistaticRangeRate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeRate] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bistaticRangeRate(bistaticRangeRate: JsonField<Double>) = apply {
                this.bistaticRangeRate = bistaticRangeRate
            }

            /** One sigma uncertainty in rate of change of the bistatic path in kilometers/sec. */
            fun bistaticRangeRateUnc(bistaticRangeRateUnc: Double) =
                bistaticRangeRateUnc(JsonField.of(bistaticRangeRateUnc))

            /**
             * Sets [Builder.bistaticRangeRateUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeRateUnc] with a well-typed [Double]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun bistaticRangeRateUnc(bistaticRangeRateUnc: JsonField<Double>) = apply {
                this.bistaticRangeRateUnc = bistaticRangeRateUnc
            }

            /** One sigma uncertainty in bistatic range in kilometers. */
            fun bistaticRangeUnc(bistaticRangeUnc: Double) =
                bistaticRangeUnc(JsonField.of(bistaticRangeUnc))

            /**
             * Sets [Builder.bistaticRangeUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bistaticRangeUnc] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bistaticRangeUnc(bistaticRangeUnc: JsonField<Double>) = apply {
                this.bistaticRangeUnc = bistaticRangeUnc
            }

            /** Coning angle in degrees. */
            fun coning(coning: Double) = coning(JsonField.of(coning))

            /**
             * Sets [Builder.coning] to an arbitrary JSON value.
             *
             * You should usually call [Builder.coning] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun coning(coning: JsonField<Double>) = apply { this.coning = coning }

            /** One sigma uncertainty in the coning angle measurement, in degrees. */
            fun coningUnc(coningUnc: Double) = coningUnc(JsonField.of(coningUnc))

            /**
             * Sets [Builder.coningUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.coningUnc] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun coningUnc(coningUnc: JsonField<Double>) = apply { this.coningUnc = coningUnc }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /**
             * Application user who created the row in the database, auto-populated by the system.
             */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /** Line of sight declination angle in degrees and J2000 coordinate frame. */
            fun declination(declination: Double) = declination(JsonField.of(declination))

            /**
             * Sets [Builder.declination] to an arbitrary JSON value.
             *
             * You should usually call [Builder.declination] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun declination(declination: JsonField<Double>) = apply {
                this.declination = declination
            }

            /**
             * The time difference, in seconds, between the signal collected at the surveillance
             * site (after being reflected from the target) and the reference site (direct path
             * line-of-sight signal).
             */
            fun delay(delay: Double) = delay(JsonField.of(delay))

            /**
             * Sets [Builder.delay] to an arbitrary JSON value.
             *
             * You should usually call [Builder.delay] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun delay(delay: JsonField<Double>) = apply { this.delay = delay }

            /** Delay bias in seconds. */
            fun delayBias(delayBias: Double) = delayBias(JsonField.of(delayBias))

            /**
             * Sets [Builder.delayBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.delayBias] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun delayBias(delayBias: JsonField<Double>) = apply { this.delayBias = delayBias }

            /** One sigma uncertainty in the delay measurement, in seconds. */
            fun delayUnc(delayUnc: Double) = delayUnc(JsonField.of(delayUnc))

            /**
             * Sets [Builder.delayUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.delayUnc] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun delayUnc(delayUnc: JsonField<Double>) = apply { this.delayUnc = delayUnc }

            /** Optional source-provided and searchable metadata or descriptor of the data. */
            fun descriptor(descriptor: String) = descriptor(JsonField.of(descriptor))

            /**
             * Sets [Builder.descriptor] to an arbitrary JSON value.
             *
             * You should usually call [Builder.descriptor] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun descriptor(descriptor: JsonField<String>) = apply { this.descriptor = descriptor }

            /** Doppler measurement in hertz. */
            fun doppler(doppler: Double) = doppler(JsonField.of(doppler))

            /**
             * Sets [Builder.doppler] to an arbitrary JSON value.
             *
             * You should usually call [Builder.doppler] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun doppler(doppler: JsonField<Double>) = apply { this.doppler = doppler }

            /** One sigma uncertainty in the Doppler measurement in hertz. */
            fun dopplerUnc(dopplerUnc: Double) = dopplerUnc(JsonField.of(dopplerUnc))

            /**
             * Sets [Builder.dopplerUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dopplerUnc] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dopplerUnc(dopplerUnc: JsonField<Double>) = apply { this.dopplerUnc = dopplerUnc }

            /** Line of sight elevation in degrees and topocentric frame. */
            fun elevation(elevation: Double) = elevation(JsonField.of(elevation))

            /**
             * Sets [Builder.elevation] to an arbitrary JSON value.
             *
             * You should usually call [Builder.elevation] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun elevation(elevation: JsonField<Double>) = apply { this.elevation = elevation }

            /** Sensor elevation bias in degrees. */
            fun elevationBias(elevationBias: Double) = elevationBias(JsonField.of(elevationBias))

            /**
             * Sets [Builder.elevationBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.elevationBias] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun elevationBias(elevationBias: JsonField<Double>) = apply {
                this.elevationBias = elevationBias
            }

            /** Rate of change of the line of sight elevation in degrees per second. */
            fun elevationRate(elevationRate: Double) = elevationRate(JsonField.of(elevationRate))

            /**
             * Sets [Builder.elevationRate] to an arbitrary JSON value.
             *
             * You should usually call [Builder.elevationRate] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun elevationRate(elevationRate: JsonField<Double>) = apply {
                this.elevationRate = elevationRate
            }

            /**
             * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
             */
            fun elevationUnc(elevationUnc: Double) = elevationUnc(JsonField.of(elevationUnc))

            /**
             * Sets [Builder.elevationUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.elevationUnc] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun elevationUnc(elevationUnc: JsonField<Double>) = apply {
                this.elevationUnc = elevationUnc
            }

            /** Optional external observation identifier provided by the source. */
            fun extObservationId(extObservationId: String) =
                extObservationId(JsonField.of(extObservationId))

            /**
             * Sets [Builder.extObservationId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.extObservationId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun extObservationId(extObservationId: JsonField<String>) = apply {
                this.extObservationId = extObservationId
            }

            /**
             * Unique identifier of the target satellite on-orbit object. This ID can be used to
             * obtain additional information on an OnOrbit object using the 'get by ID' operation
             * (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be
             * queried as /udl/onorbit/25544.
             */
            fun idOnOrbit(idOnOrbit: String) = idOnOrbit(JsonField.of(idOnOrbit))

            /**
             * Sets [Builder.idOnOrbit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idOnOrbit] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idOnOrbit(idOnOrbit: JsonField<String>) = apply { this.idOnOrbit = idOnOrbit }

            /**
             * Unique identifier of the transmitter. This ID can be used to obtain additional
             * information on an RFEmitter using the 'get by ID' operation (e.g.
             * /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be
             * queried as /udl/rfemitter/abc.
             */
            fun idRfEmitter(idRfEmitter: String) = idRfEmitter(JsonField.of(idRfEmitter))

            /**
             * Sets [Builder.idRfEmitter] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idRfEmitter] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idRfEmitter(idRfEmitter: JsonField<String>) = apply {
                this.idRfEmitter = idRfEmitter
            }

            /**
             * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain
             * additional information on a sensor using the 'get by ID' operation (e.g.
             * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
             * /udl/sensor/abc.
             */
            fun idSensor(idSensor: String) = idSensor(JsonField.of(idSensor))

            /**
             * Sets [Builder.idSensor] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSensor] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idSensor(idSensor: JsonField<String>) = apply { this.idSensor = idSensor }

            /**
             * Unique identifier of the reference receiver sensor. This ID can be used to obtain
             * additional information on a sensor using the 'get by ID' operation (e.g.
             * /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as
             * /udl/sensor/abc.
             */
            fun idSensorRefReceiver(idSensorRefReceiver: String) =
                idSensorRefReceiver(JsonField.of(idSensorRefReceiver))

            /**
             * Sets [Builder.idSensorRefReceiver] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSensorRefReceiver] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun idSensorRefReceiver(idSensorRefReceiver: JsonField<String>) = apply {
                this.idSensorRefReceiver = idSensorRefReceiver
            }

            /**
             * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to
             * 90 degrees (negative values south of equator).
             */
            fun lat(lat: Double) = lat(JsonField.of(lat))

            /**
             * Sets [Builder.lat] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lat] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun lat(lat: JsonField<Double>) = apply { this.lat = lat }

            /**
             * WGS-84 target longitude sub-point at observation time (obTime), represented as -180
             * to 180 degrees (negative values west of Prime Meridian).
             */
            fun lon(lon: Double) = lon(JsonField.of(lon))

            /**
             * Sets [Builder.lon] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lon] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun lon(lon: JsonField<Double>) = apply { this.lon = lon }

            /**
             * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).
             * This identifier is optional and, if null, no assumption should be made regarding
             * whether other observations may or may not exist to compose a track.
             */
            fun obPosition(obPosition: String) = obPosition(JsonField.of(obPosition))

            /**
             * Sets [Builder.obPosition] to an arbitrary JSON value.
             *
             * You should usually call [Builder.obPosition] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun obPosition(obPosition: JsonField<String>) = apply { this.obPosition = obPosition }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * The originating source network on which this record was created, auto-populated by
             * the system.
             */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) = apply {
                this.origNetwork = origNetwork
            }

            /**
             * Optional identifier provided by observation source to indicate the target onorbit
             * object of this observation. This may be an internal identifier and not necessarily a
             * valid satellite number.
             */
            fun origObjectId(origObjectId: String) = origObjectId(JsonField.of(origObjectId))

            /**
             * Sets [Builder.origObjectId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origObjectId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origObjectId(origObjectId: JsonField<String>) = apply {
                this.origObjectId = origObjectId
            }

            /**
             * Optional identifier provided by observation source to indicate the sensor identifier
             * which produced this observation. This may be an internal identifier and not
             * necessarily a valid sensor ID.
             */
            fun origSensorId(origSensorId: String) = origSensorId(JsonField.of(origSensorId))

            /**
             * Sets [Builder.origSensorId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origSensorId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origSensorId(origSensorId: JsonField<String>) = apply {
                this.origSensorId = origSensorId
            }

            /** Radar cross section in meters squared for orthogonal polarization. */
            fun orthogonalRcs(orthogonalRcs: Double) = orthogonalRcs(JsonField.of(orthogonalRcs))

            /**
             * Sets [Builder.orthogonalRcs] to an arbitrary JSON value.
             *
             * You should usually call [Builder.orthogonalRcs] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun orthogonalRcs(orthogonalRcs: JsonField<Double>) = apply {
                this.orthogonalRcs = orthogonalRcs
            }

            /**
             * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
             */
            fun orthogonalRcsUnc(orthogonalRcsUnc: Double) =
                orthogonalRcsUnc(JsonField.of(orthogonalRcsUnc))

            /**
             * Sets [Builder.orthogonalRcsUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.orthogonalRcsUnc] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun orthogonalRcsUnc(orthogonalRcsUnc: JsonField<Double>) = apply {
                this.orthogonalRcsUnc = orthogonalRcsUnc
            }

            /** Line of sight right ascension in degrees and J2000 coordinate frame. */
            fun ra(ra: Double) = ra(JsonField.of(ra))

            /**
             * Sets [Builder.ra] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ra] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun ra(ra: JsonField<Double>) = apply { this.ra = ra }

            /** Radar cross section in meters squared for polarization principal. */
            fun rcs(rcs: Double) = rcs(JsonField.of(rcs))

            /**
             * Sets [Builder.rcs] to an arbitrary JSON value.
             *
             * You should usually call [Builder.rcs] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun rcs(rcs: JsonField<Double>) = apply { this.rcs = rcs }

            /** One sigma uncertainty in principal polarization Radar Cross Section, in meters^2. */
            fun rcsUnc(rcsUnc: Double) = rcsUnc(JsonField.of(rcsUnc))

            /**
             * Sets [Builder.rcsUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.rcsUnc] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun rcsUnc(rcsUnc: JsonField<Double>) = apply { this.rcsUnc = rcsUnc }

            /** Satellite/Catalog number of the target on-orbit object. */
            fun satNo(satNo: Int) = satNo(JsonField.of(satNo))

            /**
             * Sets [Builder.satNo] to an arbitrary JSON value.
             *
             * You should usually call [Builder.satNo] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun satNo(satNo: JsonField<Int>) = apply { this.satNo = satNo }

            /** Signal to noise ratio, in dB. */
            fun snr(snr: Double) = snr(JsonField.of(snr))

            /**
             * Sets [Builder.snr] to an arbitrary JSON value.
             *
             * You should usually call [Builder.snr] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun snr(snr: JsonField<Double>) = apply { this.snr = snr }

            /**
             * The source data library from which this record was received. This could be a remote
             * or tactical UDL or another data library. If null, the record should be assumed to
             * have originated from the primary Enterprise UDL.
             */
            fun sourceDl(sourceDl: String) = sourceDl(JsonField.of(sourceDl))

            /**
             * Sets [Builder.sourceDl] to an arbitrary JSON value.
             *
             * You should usually call [Builder.sourceDl] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun sourceDl(sourceDl: JsonField<String>) = apply { this.sourceDl = sourceDl }

            /**
             * Optional array of provider/source specific tags for this data, where each element is
             * no longer than 32 characters, used for implementing data owner conditional access
             * controls to restrict access to the data. Should be left null by data providers unless
             * conditional access controls are coordinated with the UDL team.
             */
            fun tags(tags: List<String>) = tags(JsonField.of(tags))

            /**
             * Sets [Builder.tags] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tags] with a well-typed `List<String>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tags(tags: JsonField<List<String>>) = apply {
                this.tags = tags.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [tags].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addTag(tag: String) = apply {
                tags =
                    (tags ?: JsonField.of(mutableListOf())).also { checkKnown("tags", it).add(tag) }
            }

            /**
             * Optional identifier to indicate the specific tasking which produced this observation.
             */
            fun taskId(taskId: String) = taskId(JsonField.of(taskId))

            /**
             * Sets [Builder.taskId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.taskId] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun taskId(taskId: JsonField<String>) = apply { this.taskId = taskId }

            /** Sensor timing bias in seconds. */
            fun timingBias(timingBias: Double) = timingBias(JsonField.of(timingBias))

            /**
             * Sets [Builder.timingBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.timingBias] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun timingBias(timingBias: JsonField<Double>) = apply { this.timingBias = timingBias }

            /**
             * Time of flight (TOF) in seconds. This is the calculated propagation time from
             * transmitter-to-target-to-surveillance site.
             */
            fun tof(tof: Double) = tof(JsonField.of(tof))

            /**
             * Sets [Builder.tof] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tof] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun tof(tof: JsonField<Double>) = apply { this.tof = tof }

            /** The Time of Flight (TOF) bias in seconds. */
            fun tofBias(tofBias: Double) = tofBias(JsonField.of(tofBias))

            /**
             * Sets [Builder.tofBias] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tofBias] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tofBias(tofBias: JsonField<Double>) = apply { this.tofBias = tofBias }

            /** One sigma uncertainty in time of flight in seconds. */
            fun tofUnc(tofUnc: Double) = tofUnc(JsonField.of(tofUnc))

            /**
             * Sets [Builder.tofUnc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tofUnc] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tofUnc(tofUnc: JsonField<Double>) = apply { this.tofUnc = tofUnc }

            /** Unique identifier of a track that represents a tracklet for this observation. */
            fun trackId(trackId: String) = trackId(JsonField.of(trackId))

            /**
             * Sets [Builder.trackId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.trackId] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun trackId(trackId: JsonField<String>) = apply { this.trackId = trackId }

            /**
             * Optional identifier to track a commercial or marketplace transaction executed to
             * produce this data.
             */
            fun transactionId(transactionId: String) = transactionId(JsonField.of(transactionId))

            /**
             * Sets [Builder.transactionId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.transactionId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun transactionId(transactionId: JsonField<String>) = apply {
                this.transactionId = transactionId
            }

            /**
             * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF,
             * etc).
             */
            fun type(type: String) = type(JsonField.of(type))

            /**
             * Sets [Builder.type] to an arbitrary JSON value.
             *
             * You should usually call [Builder.type] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun type(type: JsonField<String>) = apply { this.type = type }

            /**
             * Boolean indicating this observation is part of an uncorrelated track or was unable to
             * be correlated to a known object. This flag should only be set to true by data
             * providers after an attempt to correlate to an on-orbit object was made and failed. If
             * unable to correlate, the 'origObjectId' field may be populated with an internal data
             * provider specific identifier.
             */
            fun uct(uct: Boolean) = uct(JsonField.of(uct))

            /**
             * Sets [Builder.uct] to an arbitrary JSON value.
             *
             * You should usually call [Builder.uct] with a well-typed [Boolean] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun uct(uct: JsonField<Boolean>) = apply { this.uct = uct }

            /** X velocity of target in kilometers/sec in J2000 coordinate frame. */
            fun xvel(xvel: Double) = xvel(JsonField.of(xvel))

            /**
             * Sets [Builder.xvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.xvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun xvel(xvel: JsonField<Double>) = apply { this.xvel = xvel }

            /** Y velocity of target in kilometers/sec in J2000 coordinate frame. */
            fun yvel(yvel: Double) = yvel(JsonField.of(yvel))

            /**
             * Sets [Builder.yvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.yvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun yvel(yvel: JsonField<Double>) = apply { this.yvel = yvel }

            /** Z velocity of target in kilometers/sec in J2000 coordinate frame. */
            fun zvel(zvel: Double) = zvel(JsonField.of(zvel))

            /**
             * Sets [Builder.zvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun zvel(zvel: JsonField<Double>) = apply { this.zvel = zvel }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .obTime()
             * .source()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("obTime", obTime),
                    checkRequired("source", source),
                    id,
                    accel,
                    accelUnc,
                    alt,
                    azimuth,
                    azimuthBias,
                    azimuthRate,
                    azimuthUnc,
                    bistaticRange,
                    bistaticRangeAccel,
                    bistaticRangeAccelUnc,
                    bistaticRangeBias,
                    bistaticRangeRate,
                    bistaticRangeRateUnc,
                    bistaticRangeUnc,
                    coning,
                    coningUnc,
                    createdAt,
                    createdBy,
                    declination,
                    delay,
                    delayBias,
                    delayUnc,
                    descriptor,
                    doppler,
                    dopplerUnc,
                    elevation,
                    elevationBias,
                    elevationRate,
                    elevationUnc,
                    extObservationId,
                    idOnOrbit,
                    idRfEmitter,
                    idSensor,
                    idSensorRefReceiver,
                    lat,
                    lon,
                    obPosition,
                    origin,
                    origNetwork,
                    origObjectId,
                    origSensorId,
                    orthogonalRcs,
                    orthogonalRcsUnc,
                    ra,
                    rcs,
                    rcsUnc,
                    satNo,
                    snr,
                    sourceDl,
                    (tags ?: JsonMissing.of()).map { it.toImmutable() },
                    taskId,
                    timingBias,
                    tof,
                    tofBias,
                    tofUnc,
                    trackId,
                    transactionId,
                    type,
                    uct,
                    xvel,
                    yvel,
                    zvel,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            classificationMarking()
            dataMode().validate()
            obTime()
            source()
            id()
            accel()
            accelUnc()
            alt()
            azimuth()
            azimuthBias()
            azimuthRate()
            azimuthUnc()
            bistaticRange()
            bistaticRangeAccel()
            bistaticRangeAccelUnc()
            bistaticRangeBias()
            bistaticRangeRate()
            bistaticRangeRateUnc()
            bistaticRangeUnc()
            coning()
            coningUnc()
            createdAt()
            createdBy()
            declination()
            delay()
            delayBias()
            delayUnc()
            descriptor()
            doppler()
            dopplerUnc()
            elevation()
            elevationBias()
            elevationRate()
            elevationUnc()
            extObservationId()
            idOnOrbit()
            idRfEmitter()
            idSensor()
            idSensorRefReceiver()
            lat()
            lon()
            obPosition()
            origin()
            origNetwork()
            origObjectId()
            origSensorId()
            orthogonalRcs()
            orthogonalRcsUnc()
            ra()
            rcs()
            rcsUnc()
            satNo()
            snr()
            sourceDl()
            tags()
            taskId()
            timingBias()
            tof()
            tofBias()
            tofUnc()
            trackId()
            transactionId()
            type()
            uct()
            xvel()
            yvel()
            zvel()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (obTime.asKnown().isPresent) 1 else 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (id.asKnown().isPresent) 1 else 0) +
                (if (accel.asKnown().isPresent) 1 else 0) +
                (if (accelUnc.asKnown().isPresent) 1 else 0) +
                (if (alt.asKnown().isPresent) 1 else 0) +
                (if (azimuth.asKnown().isPresent) 1 else 0) +
                (if (azimuthBias.asKnown().isPresent) 1 else 0) +
                (if (azimuthRate.asKnown().isPresent) 1 else 0) +
                (if (azimuthUnc.asKnown().isPresent) 1 else 0) +
                (if (bistaticRange.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeAccel.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeAccelUnc.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeBias.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeRate.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeRateUnc.asKnown().isPresent) 1 else 0) +
                (if (bistaticRangeUnc.asKnown().isPresent) 1 else 0) +
                (if (coning.asKnown().isPresent) 1 else 0) +
                (if (coningUnc.asKnown().isPresent) 1 else 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (declination.asKnown().isPresent) 1 else 0) +
                (if (delay.asKnown().isPresent) 1 else 0) +
                (if (delayBias.asKnown().isPresent) 1 else 0) +
                (if (delayUnc.asKnown().isPresent) 1 else 0) +
                (if (descriptor.asKnown().isPresent) 1 else 0) +
                (if (doppler.asKnown().isPresent) 1 else 0) +
                (if (dopplerUnc.asKnown().isPresent) 1 else 0) +
                (if (elevation.asKnown().isPresent) 1 else 0) +
                (if (elevationBias.asKnown().isPresent) 1 else 0) +
                (if (elevationRate.asKnown().isPresent) 1 else 0) +
                (if (elevationUnc.asKnown().isPresent) 1 else 0) +
                (if (extObservationId.asKnown().isPresent) 1 else 0) +
                (if (idOnOrbit.asKnown().isPresent) 1 else 0) +
                (if (idRfEmitter.asKnown().isPresent) 1 else 0) +
                (if (idSensor.asKnown().isPresent) 1 else 0) +
                (if (idSensorRefReceiver.asKnown().isPresent) 1 else 0) +
                (if (lat.asKnown().isPresent) 1 else 0) +
                (if (lon.asKnown().isPresent) 1 else 0) +
                (if (obPosition.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origNetwork.asKnown().isPresent) 1 else 0) +
                (if (origObjectId.asKnown().isPresent) 1 else 0) +
                (if (origSensorId.asKnown().isPresent) 1 else 0) +
                (if (orthogonalRcs.asKnown().isPresent) 1 else 0) +
                (if (orthogonalRcsUnc.asKnown().isPresent) 1 else 0) +
                (if (ra.asKnown().isPresent) 1 else 0) +
                (if (rcs.asKnown().isPresent) 1 else 0) +
                (if (rcsUnc.asKnown().isPresent) 1 else 0) +
                (if (satNo.asKnown().isPresent) 1 else 0) +
                (if (snr.asKnown().isPresent) 1 else 0) +
                (if (sourceDl.asKnown().isPresent) 1 else 0) +
                (tags.asKnown().getOrNull()?.size ?: 0) +
                (if (taskId.asKnown().isPresent) 1 else 0) +
                (if (timingBias.asKnown().isPresent) 1 else 0) +
                (if (tof.asKnown().isPresent) 1 else 0) +
                (if (tofBias.asKnown().isPresent) 1 else 0) +
                (if (tofUnc.asKnown().isPresent) 1 else 0) +
                (if (trackId.asKnown().isPresent) 1 else 0) +
                (if (transactionId.asKnown().isPresent) 1 else 0) +
                (if (type.asKnown().isPresent) 1 else 0) +
                (if (uct.asKnown().isPresent) 1 else 0) +
                (if (xvel.asKnown().isPresent) 1 else 0) +
                (if (yvel.asKnown().isPresent) 1 else 0) +
                (if (zvel.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is Body &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                obTime == other.obTime &&
                source == other.source &&
                id == other.id &&
                accel == other.accel &&
                accelUnc == other.accelUnc &&
                alt == other.alt &&
                azimuth == other.azimuth &&
                azimuthBias == other.azimuthBias &&
                azimuthRate == other.azimuthRate &&
                azimuthUnc == other.azimuthUnc &&
                bistaticRange == other.bistaticRange &&
                bistaticRangeAccel == other.bistaticRangeAccel &&
                bistaticRangeAccelUnc == other.bistaticRangeAccelUnc &&
                bistaticRangeBias == other.bistaticRangeBias &&
                bistaticRangeRate == other.bistaticRangeRate &&
                bistaticRangeRateUnc == other.bistaticRangeRateUnc &&
                bistaticRangeUnc == other.bistaticRangeUnc &&
                coning == other.coning &&
                coningUnc == other.coningUnc &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                declination == other.declination &&
                delay == other.delay &&
                delayBias == other.delayBias &&
                delayUnc == other.delayUnc &&
                descriptor == other.descriptor &&
                doppler == other.doppler &&
                dopplerUnc == other.dopplerUnc &&
                elevation == other.elevation &&
                elevationBias == other.elevationBias &&
                elevationRate == other.elevationRate &&
                elevationUnc == other.elevationUnc &&
                extObservationId == other.extObservationId &&
                idOnOrbit == other.idOnOrbit &&
                idRfEmitter == other.idRfEmitter &&
                idSensor == other.idSensor &&
                idSensorRefReceiver == other.idSensorRefReceiver &&
                lat == other.lat &&
                lon == other.lon &&
                obPosition == other.obPosition &&
                origin == other.origin &&
                origNetwork == other.origNetwork &&
                origObjectId == other.origObjectId &&
                origSensorId == other.origSensorId &&
                orthogonalRcs == other.orthogonalRcs &&
                orthogonalRcsUnc == other.orthogonalRcsUnc &&
                ra == other.ra &&
                rcs == other.rcs &&
                rcsUnc == other.rcsUnc &&
                satNo == other.satNo &&
                snr == other.snr &&
                sourceDl == other.sourceDl &&
                tags == other.tags &&
                taskId == other.taskId &&
                timingBias == other.timingBias &&
                tof == other.tof &&
                tofBias == other.tofBias &&
                tofUnc == other.tofUnc &&
                trackId == other.trackId &&
                transactionId == other.transactionId &&
                type == other.type &&
                uct == other.uct &&
                xvel == other.xvel &&
                yvel == other.yvel &&
                zvel == other.zvel &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                classificationMarking,
                dataMode,
                obTime,
                source,
                id,
                accel,
                accelUnc,
                alt,
                azimuth,
                azimuthBias,
                azimuthRate,
                azimuthUnc,
                bistaticRange,
                bistaticRangeAccel,
                bistaticRangeAccelUnc,
                bistaticRangeBias,
                bistaticRangeRate,
                bistaticRangeRateUnc,
                bistaticRangeUnc,
                coning,
                coningUnc,
                createdAt,
                createdBy,
                declination,
                delay,
                delayBias,
                delayUnc,
                descriptor,
                doppler,
                dopplerUnc,
                elevation,
                elevationBias,
                elevationRate,
                elevationUnc,
                extObservationId,
                idOnOrbit,
                idRfEmitter,
                idSensor,
                idSensorRefReceiver,
                lat,
                lon,
                obPosition,
                origin,
                origNetwork,
                origObjectId,
                origSensorId,
                orthogonalRcs,
                orthogonalRcsUnc,
                ra,
                rcs,
                rcsUnc,
                satNo,
                snr,
                sourceDl,
                tags,
                taskId,
                timingBias,
                tof,
                tofBias,
                tofUnc,
                trackId,
                transactionId,
                type,
                uct,
                xvel,
                yvel,
                zvel,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{classificationMarking=$classificationMarking, dataMode=$dataMode, obTime=$obTime, source=$source, id=$id, accel=$accel, accelUnc=$accelUnc, alt=$alt, azimuth=$azimuth, azimuthBias=$azimuthBias, azimuthRate=$azimuthRate, azimuthUnc=$azimuthUnc, bistaticRange=$bistaticRange, bistaticRangeAccel=$bistaticRangeAccel, bistaticRangeAccelUnc=$bistaticRangeAccelUnc, bistaticRangeBias=$bistaticRangeBias, bistaticRangeRate=$bistaticRangeRate, bistaticRangeRateUnc=$bistaticRangeRateUnc, bistaticRangeUnc=$bistaticRangeUnc, coning=$coning, coningUnc=$coningUnc, createdAt=$createdAt, createdBy=$createdBy, declination=$declination, delay=$delay, delayBias=$delayBias, delayUnc=$delayUnc, descriptor=$descriptor, doppler=$doppler, dopplerUnc=$dopplerUnc, elevation=$elevation, elevationBias=$elevationBias, elevationRate=$elevationRate, elevationUnc=$elevationUnc, extObservationId=$extObservationId, idOnOrbit=$idOnOrbit, idRfEmitter=$idRfEmitter, idSensor=$idSensor, idSensorRefReceiver=$idSensorRefReceiver, lat=$lat, lon=$lon, obPosition=$obPosition, origin=$origin, origNetwork=$origNetwork, origObjectId=$origObjectId, origSensorId=$origSensorId, orthogonalRcs=$orthogonalRcs, orthogonalRcsUnc=$orthogonalRcsUnc, ra=$ra, rcs=$rcs, rcsUnc=$rcsUnc, satNo=$satNo, snr=$snr, sourceDl=$sourceDl, tags=$tags, taskId=$taskId, timingBias=$timingBias, tof=$tof, tofBias=$tofBias, tofUnc=$tofUnc, trackId=$trackId, transactionId=$transactionId, type=$type, uct=$uct, xvel=$xvel, yvel=$yvel, zvel=$zvel, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): DataMode = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is DataMode && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is PassiveRadarObservationCreateParams &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int = Objects.hash(body, additionalHeaders, additionalQueryParams)

    override fun toString() =
        "PassiveRadarObservationCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
