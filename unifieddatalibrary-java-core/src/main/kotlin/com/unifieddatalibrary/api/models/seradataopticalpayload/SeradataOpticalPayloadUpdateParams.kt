// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.seradataopticalpayload

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import com.unifieddatalibrary.api.models.seradataopticalpayload.SeradataOpticalPayloadUpdateParams
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/** Service operation to update an SeradataOpticalPayload. A specific role is required to perform this service operation. Please contact the UDL team for assistance. */
class SeradataOpticalPayloadUpdateParams private constructor(
    private val pathId: String?,
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,

) : Params {

    fun pathId(): Optional<String> = Optional.ofNullable(pathId)

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun spacecraftId(): String = body.spacecraftId()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun bodyId(): Optional<String> = body.bodyId()

    /**
     * Best resolution.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun bestResolution(): Optional<Double> = body.bestResolution()

    /**
     * Time the row was created in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * Field of regard of this radar in degrees.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun fieldOfRegard(): Optional<Double> = body.fieldOfRegard()

    /**
     * Field of view of this radar in kilometers.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun fieldOfView(): Optional<Double> = body.fieldOfView()

    /**
     * Ground Station Locations for this payload.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun groundStationLocations(): Optional<String> = body.groundStationLocations()

    /**
     * Ground Station info for this payload.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun groundStations(): Optional<String> = body.groundStations()

    /**
     * Hosted for company/Organization Id.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun hostedForCompanyOrgId(): Optional<String> = body.hostedForCompanyOrgId()

    /**
     * UUID of the Sensor record.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun idSensor(): Optional<String> = body.idSensor()

    /**
     * Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun imagingPayloadCategory(): Optional<String> = body.imagingPayloadCategory()

    /**
     * Manufacturer Organization Id.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun manufacturerOrgId(): Optional<String> = body.manufacturerOrgId()

    /**
     * Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun name(): Optional<String> = body.name()

    /**
     * Payload notes.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun notes(): Optional<String> = body.notes()

    /**
     * Number of film return canisters.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun numberOfFilmReturnCanisters(): Optional<Long> = body.numberOfFilmReturnCanisters()

    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * Point method for this radar, e.g. Spacecraft.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun pointingMethod(): Optional<String> = body.pointingMethod()

    /**
     * Recorder size.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun recorderSize(): Optional<String> = body.recorderSize()

    /**
     * Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun spectralBand(): Optional<String> = body.spectralBand()

    /**
     * Frequency limit for this payload, e.g. 0.51 - 0.59.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun spectralFrequencyLimits(): Optional<String> = body.spectralFrequencyLimits()

    /**
     * Swath width in kilometers.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
     */
    fun swathWidth(): Optional<Double> = body.swathWidth()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [spacecraftId].
     *
     * Unlike [spacecraftId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _spacecraftId(): JsonField<String> = body._spacecraftId()

    /**
     * Returns the raw JSON value of [bodyId].
     *
     * Unlike [bodyId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _bodyId(): JsonField<String> = body._bodyId()

    /**
     * Returns the raw JSON value of [bestResolution].
     *
     * Unlike [bestResolution], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _bestResolution(): JsonField<Double> = body._bestResolution()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [fieldOfRegard].
     *
     * Unlike [fieldOfRegard], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fieldOfRegard(): JsonField<Double> = body._fieldOfRegard()

    /**
     * Returns the raw JSON value of [fieldOfView].
     *
     * Unlike [fieldOfView], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _fieldOfView(): JsonField<Double> = body._fieldOfView()

    /**
     * Returns the raw JSON value of [groundStationLocations].
     *
     * Unlike [groundStationLocations], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _groundStationLocations(): JsonField<String> = body._groundStationLocations()

    /**
     * Returns the raw JSON value of [groundStations].
     *
     * Unlike [groundStations], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _groundStations(): JsonField<String> = body._groundStations()

    /**
     * Returns the raw JSON value of [hostedForCompanyOrgId].
     *
     * Unlike [hostedForCompanyOrgId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _hostedForCompanyOrgId(): JsonField<String> = body._hostedForCompanyOrgId()

    /**
     * Returns the raw JSON value of [idSensor].
     *
     * Unlike [idSensor], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idSensor(): JsonField<String> = body._idSensor()

    /**
     * Returns the raw JSON value of [imagingPayloadCategory].
     *
     * Unlike [imagingPayloadCategory], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _imagingPayloadCategory(): JsonField<String> = body._imagingPayloadCategory()

    /**
     * Returns the raw JSON value of [manufacturerOrgId].
     *
     * Unlike [manufacturerOrgId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _manufacturerOrgId(): JsonField<String> = body._manufacturerOrgId()

    /**
     * Returns the raw JSON value of [name].
     *
     * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _name(): JsonField<String> = body._name()

    /**
     * Returns the raw JSON value of [notes].
     *
     * Unlike [notes], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _notes(): JsonField<String> = body._notes()

    /**
     * Returns the raw JSON value of [numberOfFilmReturnCanisters].
     *
     * Unlike [numberOfFilmReturnCanisters], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _numberOfFilmReturnCanisters(): JsonField<Long> = body._numberOfFilmReturnCanisters()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [pointingMethod].
     *
     * Unlike [pointingMethod], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _pointingMethod(): JsonField<String> = body._pointingMethod()

    /**
     * Returns the raw JSON value of [recorderSize].
     *
     * Unlike [recorderSize], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _recorderSize(): JsonField<String> = body._recorderSize()

    /**
     * Returns the raw JSON value of [spectralBand].
     *
     * Unlike [spectralBand], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _spectralBand(): JsonField<String> = body._spectralBand()

    /**
     * Returns the raw JSON value of [spectralFrequencyLimits].
     *
     * Unlike [spectralFrequencyLimits], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _spectralFrequencyLimits(): JsonField<String> = body._spectralFrequencyLimits()

    /**
     * Returns the raw JSON value of [swathWidth].
     *
     * Unlike [swathWidth], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _swathWidth(): JsonField<Double> = body._swathWidth()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [SeradataOpticalPayloadUpdateParams].
         *
         * The following fields are required:
         *
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .source()
         * .spacecraftId()
         * ```
         */
        @JvmStatic
        fun builder() = Builder()
    }

    /** A builder for [SeradataOpticalPayloadUpdateParams]. */
    class Builder internal constructor() {

        private var pathId: String? = null
        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(seradataOpticalPayloadUpdateParams: SeradataOpticalPayloadUpdateParams) =
            apply {
                pathId = seradataOpticalPayloadUpdateParams.pathId
                body = seradataOpticalPayloadUpdateParams.body.toBuilder()
                additionalHeaders = seradataOpticalPayloadUpdateParams.additionalHeaders.toBuilder()
                additionalQueryParams = seradataOpticalPayloadUpdateParams.additionalQueryParams.toBuilder()
            }

        fun pathId(pathId: String?) =
            apply {
                this.pathId = pathId
            }

        /** Alias for calling [Builder.pathId] with `pathId.orElse(null)`. */
        fun pathId(pathId: Optional<String>) = pathId(pathId.getOrNull())

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately. Otherwise,
         * it's more convenient to use the top-level setters instead:
         *
         * - [classificationMarking]
         * - [dataMode]
         * - [source]
         * - [spacecraftId]
         * - [bodyId]
         * - etc.
         */
        fun body(body: Body) =
            apply {
                this.body = body.toBuilder()
            }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) =
            apply {
                body.classificationMarking(classificationMarking)
            }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) =
            apply {
                body.classificationMarking(classificationMarking)
            }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) =
            apply {
                body.dataMode(dataMode)
            }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) =
            apply {
                body.dataMode(dataMode)
            }

        /** Source of the data. */
        fun source(source: String) =
            apply {
                body.source(source)
            }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun source(source: JsonField<String>) =
            apply {
                body.source(source)
            }

        /** Seradata ID of the spacecraft (SeradataSpacecraftDetails ID). */
        fun spacecraftId(spacecraftId: String) =
            apply {
                body.spacecraftId(spacecraftId)
            }

        /**
         * Sets [Builder.spacecraftId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.spacecraftId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun spacecraftId(spacecraftId: JsonField<String>) =
            apply {
                body.spacecraftId(spacecraftId)
            }

        /** Unique identifier of the record, auto-generated by the system. */
        fun bodyId(bodyId: String) =
            apply {
                body.bodyId(bodyId)
            }

        /**
         * Sets [Builder.bodyId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bodyId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bodyId(bodyId: JsonField<String>) =
            apply {
                body.bodyId(bodyId)
            }

        /** Best resolution. */
        fun bestResolution(bestResolution: Double) =
            apply {
                body.bestResolution(bestResolution)
            }

        /**
         * Sets [Builder.bestResolution] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bestResolution] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun bestResolution(bestResolution: JsonField<Double>) =
            apply {
                body.bestResolution(bestResolution)
            }

        /** Time the row was created in the database, auto-populated by the system. */
        fun createdAt(createdAt: OffsetDateTime) =
            apply {
                body.createdAt(createdAt)
            }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) =
            apply {
                body.createdAt(createdAt)
            }

        /** Application user who created the row in the database, auto-populated by the system. */
        fun createdBy(createdBy: String) =
            apply {
                body.createdBy(createdBy)
            }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdBy(createdBy: JsonField<String>) =
            apply {
                body.createdBy(createdBy)
            }

        /** Field of regard of this radar in degrees. */
        fun fieldOfRegard(fieldOfRegard: Double) =
            apply {
                body.fieldOfRegard(fieldOfRegard)
            }

        /**
         * Sets [Builder.fieldOfRegard] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fieldOfRegard] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun fieldOfRegard(fieldOfRegard: JsonField<Double>) =
            apply {
                body.fieldOfRegard(fieldOfRegard)
            }

        /** Field of view of this radar in kilometers. */
        fun fieldOfView(fieldOfView: Double) =
            apply {
                body.fieldOfView(fieldOfView)
            }

        /**
         * Sets [Builder.fieldOfView] to an arbitrary JSON value.
         *
         * You should usually call [Builder.fieldOfView] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun fieldOfView(fieldOfView: JsonField<Double>) =
            apply {
                body.fieldOfView(fieldOfView)
            }

        /** Ground Station Locations for this payload. */
        fun groundStationLocations(groundStationLocations: String) =
            apply {
                body.groundStationLocations(groundStationLocations)
            }

        /**
         * Sets [Builder.groundStationLocations] to an arbitrary JSON value.
         *
         * You should usually call [Builder.groundStationLocations] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun groundStationLocations(groundStationLocations: JsonField<String>) =
            apply {
                body.groundStationLocations(groundStationLocations)
            }

        /** Ground Station info for this payload. */
        fun groundStations(groundStations: String) =
            apply {
                body.groundStations(groundStations)
            }

        /**
         * Sets [Builder.groundStations] to an arbitrary JSON value.
         *
         * You should usually call [Builder.groundStations] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun groundStations(groundStations: JsonField<String>) =
            apply {
                body.groundStations(groundStations)
            }

        /** Hosted for company/Organization Id. */
        fun hostedForCompanyOrgId(hostedForCompanyOrgId: String) =
            apply {
                body.hostedForCompanyOrgId(hostedForCompanyOrgId)
            }

        /**
         * Sets [Builder.hostedForCompanyOrgId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.hostedForCompanyOrgId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun hostedForCompanyOrgId(hostedForCompanyOrgId: JsonField<String>) =
            apply {
                body.hostedForCompanyOrgId(hostedForCompanyOrgId)
            }

        /** UUID of the Sensor record. */
        fun idSensor(idSensor: String) =
            apply {
                body.idSensor(idSensor)
            }

        /**
         * Sets [Builder.idSensor] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSensor] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun idSensor(idSensor: JsonField<String>) =
            apply {
                body.idSensor(idSensor)
            }

        /** Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic. */
        fun imagingPayloadCategory(imagingPayloadCategory: String) =
            apply {
                body.imagingPayloadCategory(imagingPayloadCategory)
            }

        /**
         * Sets [Builder.imagingPayloadCategory] to an arbitrary JSON value.
         *
         * You should usually call [Builder.imagingPayloadCategory] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun imagingPayloadCategory(imagingPayloadCategory: JsonField<String>) =
            apply {
                body.imagingPayloadCategory(imagingPayloadCategory)
            }

        /** Manufacturer Organization Id. */
        fun manufacturerOrgId(manufacturerOrgId: String) =
            apply {
                body.manufacturerOrgId(manufacturerOrgId)
            }

        /**
         * Sets [Builder.manufacturerOrgId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.manufacturerOrgId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun manufacturerOrgId(manufacturerOrgId: JsonField<String>) =
            apply {
                body.manufacturerOrgId(manufacturerOrgId)
            }

        /** Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc. */
        fun name(name: String) =
            apply {
                body.name(name)
            }

        /**
         * Sets [Builder.name] to an arbitrary JSON value.
         *
         * You should usually call [Builder.name] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun name(name: JsonField<String>) =
            apply {
                body.name(name)
            }

        /** Payload notes. */
        fun notes(notes: String) =
            apply {
                body.notes(notes)
            }

        /**
         * Sets [Builder.notes] to an arbitrary JSON value.
         *
         * You should usually call [Builder.notes] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun notes(notes: JsonField<String>) =
            apply {
                body.notes(notes)
            }

        /** Number of film return canisters. */
        fun numberOfFilmReturnCanisters(numberOfFilmReturnCanisters: Long) =
            apply {
                body.numberOfFilmReturnCanisters(numberOfFilmReturnCanisters)
            }

        /**
         * Sets [Builder.numberOfFilmReturnCanisters] to an arbitrary JSON value.
         *
         * You should usually call [Builder.numberOfFilmReturnCanisters] with a well-typed [Long] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun numberOfFilmReturnCanisters(numberOfFilmReturnCanisters: JsonField<Long>) =
            apply {
                body.numberOfFilmReturnCanisters(numberOfFilmReturnCanisters)
            }

        /** Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin. */
        fun origin(origin: String) =
            apply {
                body.origin(origin)
            }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun origin(origin: JsonField<String>) =
            apply {
                body.origin(origin)
            }

        /** The originating source network on which this record was created, auto-populated by the system. */
        fun origNetwork(origNetwork: String) =
            apply {
                body.origNetwork(origNetwork)
            }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun origNetwork(origNetwork: JsonField<String>) =
            apply {
                body.origNetwork(origNetwork)
            }

        /** Point method for this radar, e.g. Spacecraft. */
        fun pointingMethod(pointingMethod: String) =
            apply {
                body.pointingMethod(pointingMethod)
            }

        /**
         * Sets [Builder.pointingMethod] to an arbitrary JSON value.
         *
         * You should usually call [Builder.pointingMethod] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun pointingMethod(pointingMethod: JsonField<String>) =
            apply {
                body.pointingMethod(pointingMethod)
            }

        /** Recorder size. */
        fun recorderSize(recorderSize: String) =
            apply {
                body.recorderSize(recorderSize)
            }

        /**
         * Sets [Builder.recorderSize] to an arbitrary JSON value.
         *
         * You should usually call [Builder.recorderSize] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun recorderSize(recorderSize: JsonField<String>) =
            apply {
                body.recorderSize(recorderSize)
            }

        /** Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc. */
        fun spectralBand(spectralBand: String) =
            apply {
                body.spectralBand(spectralBand)
            }

        /**
         * Sets [Builder.spectralBand] to an arbitrary JSON value.
         *
         * You should usually call [Builder.spectralBand] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun spectralBand(spectralBand: JsonField<String>) =
            apply {
                body.spectralBand(spectralBand)
            }

        /** Frequency limit for this payload, e.g. 0.51 - 0.59. */
        fun spectralFrequencyLimits(spectralFrequencyLimits: String) =
            apply {
                body.spectralFrequencyLimits(spectralFrequencyLimits)
            }

        /**
         * Sets [Builder.spectralFrequencyLimits] to an arbitrary JSON value.
         *
         * You should usually call [Builder.spectralFrequencyLimits] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun spectralFrequencyLimits(spectralFrequencyLimits: JsonField<String>) =
            apply {
                body.spectralFrequencyLimits(spectralFrequencyLimits)
            }

        /** Swath width in kilometers. */
        fun swathWidth(swathWidth: Double) =
            apply {
                body.swathWidth(swathWidth)
            }

        /**
         * Sets [Builder.swathWidth] to an arbitrary JSON value.
         *
         * You should usually call [Builder.swathWidth] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun swathWidth(swathWidth: JsonField<Double>) =
            apply {
                body.swathWidth(swathWidth)
            }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.additionalProperties(additionalBodyProperties)
            }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) =
            apply {
                body.putAdditionalProperty(
                  key, value
                )
            }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) =
            apply {
                body.removeAdditionalProperty(key)
            }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) =
            apply {
                body.removeAllAdditionalProperties(keys)
            }

        fun additionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.clear()
                putAllAdditionalHeaders(additionalHeaders)
            }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.clear()
                putAllAdditionalHeaders(additionalHeaders)
            }

        fun putAdditionalHeader(name: String, value: String) =
            apply {
                additionalHeaders.put(name, value)
            }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) =
            apply {
                additionalHeaders.put(name, values)
            }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.putAll(additionalHeaders)
            }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.putAll(additionalHeaders)
            }

        fun replaceAdditionalHeaders(name: String, value: String) =
            apply {
                additionalHeaders.replace(name, value)
            }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) =
            apply {
                additionalHeaders.replace(name, values)
            }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) =
            apply {
                this.additionalHeaders.replaceAll(additionalHeaders)
            }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) =
            apply {
                this.additionalHeaders.replaceAll(additionalHeaders)
            }

        fun removeAdditionalHeaders(name: String) =
            apply {
                additionalHeaders.remove(name)
            }

        fun removeAllAdditionalHeaders(names: Set<String>) =
            apply {
                additionalHeaders.removeAll(names)
            }

        fun additionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.clear()
                putAllAdditionalQueryParams(additionalQueryParams)
            }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.clear()
                putAllAdditionalQueryParams(additionalQueryParams)
            }

        fun putAdditionalQueryParam(key: String, value: String) =
            apply {
                additionalQueryParams.put(key, value)
            }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) =
            apply {
                additionalQueryParams.put(key, values)
            }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) =
            apply {
                additionalQueryParams.replace(key, value)
            }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) =
            apply {
                additionalQueryParams.replace(key, values)
            }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) =
            apply {
                additionalQueryParams.remove(key)
            }

        fun removeAllAdditionalQueryParams(keys: Set<String>) =
            apply {
                additionalQueryParams.removeAll(keys)
            }

        /**
         * Returns an immutable instance of [SeradataOpticalPayloadUpdateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         *
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .source()
         * .spacecraftId()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): SeradataOpticalPayloadUpdateParams =
            SeradataOpticalPayloadUpdateParams(
              pathId,
              body.build(),
              additionalHeaders.build(),
              additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    fun _pathParam(index: Int): String =
        when (index) {
            0 -> pathId ?: ""
            else -> ""
        }

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /** Details for an optical payload from Seradata. */
    class Body private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val source: JsonField<String>,
        private val spacecraftId: JsonField<String>,
        private val bodyId: JsonField<String>,
        private val bestResolution: JsonField<Double>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val fieldOfRegard: JsonField<Double>,
        private val fieldOfView: JsonField<Double>,
        private val groundStationLocations: JsonField<String>,
        private val groundStations: JsonField<String>,
        private val hostedForCompanyOrgId: JsonField<String>,
        private val idSensor: JsonField<String>,
        private val imagingPayloadCategory: JsonField<String>,
        private val manufacturerOrgId: JsonField<String>,
        private val name: JsonField<String>,
        private val notes: JsonField<String>,
        private val numberOfFilmReturnCanisters: JsonField<Long>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val pointingMethod: JsonField<String>,
        private val recorderSize: JsonField<String>,
        private val spectralBand: JsonField<String>,
        private val spectralFrequencyLimits: JsonField<String>,
        private val swathWidth: JsonField<Double>,
        private val additionalProperties: MutableMap<String, JsonValue>,

    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking") @ExcludeMissing classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode") @ExcludeMissing dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("spacecraftId") @ExcludeMissing spacecraftId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing bodyId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("bestResolution") @ExcludeMissing bestResolution: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("createdAt") @ExcludeMissing createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy") @ExcludeMissing createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("fieldOfRegard") @ExcludeMissing fieldOfRegard: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("fieldOfView") @ExcludeMissing fieldOfView: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("groundStationLocations") @ExcludeMissing groundStationLocations: JsonField<String> = JsonMissing.of(),
            @JsonProperty("groundStations") @ExcludeMissing groundStations: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hostedForCompanyOrgId") @ExcludeMissing hostedForCompanyOrgId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idSensor") @ExcludeMissing idSensor: JsonField<String> = JsonMissing.of(),
            @JsonProperty("imagingPayloadCategory") @ExcludeMissing imagingPayloadCategory: JsonField<String> = JsonMissing.of(),
            @JsonProperty("manufacturerOrgId") @ExcludeMissing manufacturerOrgId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("name") @ExcludeMissing name: JsonField<String> = JsonMissing.of(),
            @JsonProperty("notes") @ExcludeMissing notes: JsonField<String> = JsonMissing.of(),
            @JsonProperty("numberOfFilmReturnCanisters") @ExcludeMissing numberOfFilmReturnCanisters: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork") @ExcludeMissing origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("pointingMethod") @ExcludeMissing pointingMethod: JsonField<String> = JsonMissing.of(),
            @JsonProperty("recorderSize") @ExcludeMissing recorderSize: JsonField<String> = JsonMissing.of(),
            @JsonProperty("spectralBand") @ExcludeMissing spectralBand: JsonField<String> = JsonMissing.of(),
            @JsonProperty("spectralFrequencyLimits") @ExcludeMissing spectralFrequencyLimits: JsonField<String> = JsonMissing.of(),
            @JsonProperty("swathWidth") @ExcludeMissing swathWidth: JsonField<Double> = JsonMissing.of()
        ) : this(
          classificationMarking,
          dataMode,
          source,
          spacecraftId,
          bodyId,
          bestResolution,
          createdAt,
          createdBy,
          fieldOfRegard,
          fieldOfView,
          groundStationLocations,
          groundStations,
          hostedForCompanyOrgId,
          idSensor,
          imagingPayloadCategory,
          manufacturerOrgId,
          name,
          notes,
          numberOfFilmReturnCanisters,
          origin,
          origNetwork,
          pointingMethod,
          recorderSize,
          spectralBand,
          spectralFrequencyLimits,
          swathWidth,
          mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun classificationMarking(): String = classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is unexpectedly missing or null (e.g. if the server responded with an unexpected value).
         */
        fun spacecraftId(): String = spacecraftId.getRequired("spacecraftId")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun bodyId(): Optional<String> = bodyId.getOptional("id")

        /**
         * Best resolution.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun bestResolution(): Optional<Double> = bestResolution.getOptional("bestResolution")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * Field of regard of this radar in degrees.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun fieldOfRegard(): Optional<Double> = fieldOfRegard.getOptional("fieldOfRegard")

        /**
         * Field of view of this radar in kilometers.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun fieldOfView(): Optional<Double> = fieldOfView.getOptional("fieldOfView")

        /**
         * Ground Station Locations for this payload.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun groundStationLocations(): Optional<String> = groundStationLocations.getOptional("groundStationLocations")

        /**
         * Ground Station info for this payload.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun groundStations(): Optional<String> = groundStations.getOptional("groundStations")

        /**
         * Hosted for company/Organization Id.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun hostedForCompanyOrgId(): Optional<String> = hostedForCompanyOrgId.getOptional("hostedForCompanyOrgId")

        /**
         * UUID of the Sensor record.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun idSensor(): Optional<String> = idSensor.getOptional("idSensor")

        /**
         * Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun imagingPayloadCategory(): Optional<String> = imagingPayloadCategory.getOptional("imagingPayloadCategory")

        /**
         * Manufacturer Organization Id.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun manufacturerOrgId(): Optional<String> = manufacturerOrgId.getOptional("manufacturerOrgId")

        /**
         * Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun name(): Optional<String> = name.getOptional("name")

        /**
         * Payload notes.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun notes(): Optional<String> = notes.getOptional("notes")

        /**
         * Number of film return canisters.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun numberOfFilmReturnCanisters(): Optional<Long> = numberOfFilmReturnCanisters.getOptional("numberOfFilmReturnCanisters")

        /**
         * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * Point method for this radar, e.g. Spacecraft.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun pointingMethod(): Optional<String> = pointingMethod.getOptional("pointingMethod")

        /**
         * Recorder size.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun recorderSize(): Optional<String> = recorderSize.getOptional("recorderSize")

        /**
         * Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun spectralBand(): Optional<String> = spectralBand.getOptional("spectralBand")

        /**
         * Frequency limit for this payload, e.g. 0.51 - 0.59.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun spectralFrequencyLimits(): Optional<String> = spectralFrequencyLimits.getOptional("spectralFrequencyLimits")

        /**
         * Swath width in kilometers.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g. if the server responded with an unexpected value).
         */
        fun swathWidth(): Optional<Double> = swathWidth.getOptional("swathWidth")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode")
        @ExcludeMissing
        fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source")
        @ExcludeMissing
        fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [spacecraftId].
         *
         * Unlike [spacecraftId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("spacecraftId")
        @ExcludeMissing
        fun _spacecraftId(): JsonField<String> = spacecraftId

        /**
         * Returns the raw JSON value of [bodyId].
         *
         * Unlike [bodyId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id")
        @ExcludeMissing
        fun _bodyId(): JsonField<String> = bodyId

        /**
         * Returns the raw JSON value of [bestResolution].
         *
         * Unlike [bestResolution], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("bestResolution")
        @ExcludeMissing
        fun _bestResolution(): JsonField<Double> = bestResolution

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy")
        @ExcludeMissing
        fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [fieldOfRegard].
         *
         * Unlike [fieldOfRegard], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fieldOfRegard")
        @ExcludeMissing
        fun _fieldOfRegard(): JsonField<Double> = fieldOfRegard

        /**
         * Returns the raw JSON value of [fieldOfView].
         *
         * Unlike [fieldOfView], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("fieldOfView")
        @ExcludeMissing
        fun _fieldOfView(): JsonField<Double> = fieldOfView

        /**
         * Returns the raw JSON value of [groundStationLocations].
         *
         * Unlike [groundStationLocations], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("groundStationLocations")
        @ExcludeMissing
        fun _groundStationLocations(): JsonField<String> = groundStationLocations

        /**
         * Returns the raw JSON value of [groundStations].
         *
         * Unlike [groundStations], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("groundStations")
        @ExcludeMissing
        fun _groundStations(): JsonField<String> = groundStations

        /**
         * Returns the raw JSON value of [hostedForCompanyOrgId].
         *
         * Unlike [hostedForCompanyOrgId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hostedForCompanyOrgId")
        @ExcludeMissing
        fun _hostedForCompanyOrgId(): JsonField<String> = hostedForCompanyOrgId

        /**
         * Returns the raw JSON value of [idSensor].
         *
         * Unlike [idSensor], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idSensor")
        @ExcludeMissing
        fun _idSensor(): JsonField<String> = idSensor

        /**
         * Returns the raw JSON value of [imagingPayloadCategory].
         *
         * Unlike [imagingPayloadCategory], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("imagingPayloadCategory")
        @ExcludeMissing
        fun _imagingPayloadCategory(): JsonField<String> = imagingPayloadCategory

        /**
         * Returns the raw JSON value of [manufacturerOrgId].
         *
         * Unlike [manufacturerOrgId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("manufacturerOrgId")
        @ExcludeMissing
        fun _manufacturerOrgId(): JsonField<String> = manufacturerOrgId

        /**
         * Returns the raw JSON value of [name].
         *
         * Unlike [name], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("name")
        @ExcludeMissing
        fun _name(): JsonField<String> = name

        /**
         * Returns the raw JSON value of [notes].
         *
         * Unlike [notes], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("notes")
        @ExcludeMissing
        fun _notes(): JsonField<String> = notes

        /**
         * Returns the raw JSON value of [numberOfFilmReturnCanisters].
         *
         * Unlike [numberOfFilmReturnCanisters], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("numberOfFilmReturnCanisters")
        @ExcludeMissing
        fun _numberOfFilmReturnCanisters(): JsonField<Long> = numberOfFilmReturnCanisters

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin")
        @ExcludeMissing
        fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [pointingMethod].
         *
         * Unlike [pointingMethod], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("pointingMethod")
        @ExcludeMissing
        fun _pointingMethod(): JsonField<String> = pointingMethod

        /**
         * Returns the raw JSON value of [recorderSize].
         *
         * Unlike [recorderSize], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("recorderSize")
        @ExcludeMissing
        fun _recorderSize(): JsonField<String> = recorderSize

        /**
         * Returns the raw JSON value of [spectralBand].
         *
         * Unlike [spectralBand], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("spectralBand")
        @ExcludeMissing
        fun _spectralBand(): JsonField<String> = spectralBand

        /**
         * Returns the raw JSON value of [spectralFrequencyLimits].
         *
         * Unlike [spectralFrequencyLimits], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("spectralFrequencyLimits")
        @ExcludeMissing
        fun _spectralFrequencyLimits(): JsonField<String> = spectralFrequencyLimits

        /**
         * Returns the raw JSON value of [swathWidth].
         *
         * Unlike [swathWidth], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("swathWidth")
        @ExcludeMissing
        fun _swathWidth(): JsonField<Double> = swathWidth

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
          additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             *
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .source()
             * .spacecraftId()
             * ```
             */
            @JvmStatic
            fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var source: JsonField<String>? = null
            private var spacecraftId: JsonField<String>? = null
            private var bodyId: JsonField<String> = JsonMissing.of()
            private var bestResolution: JsonField<Double> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var fieldOfRegard: JsonField<Double> = JsonMissing.of()
            private var fieldOfView: JsonField<Double> = JsonMissing.of()
            private var groundStationLocations: JsonField<String> = JsonMissing.of()
            private var groundStations: JsonField<String> = JsonMissing.of()
            private var hostedForCompanyOrgId: JsonField<String> = JsonMissing.of()
            private var idSensor: JsonField<String> = JsonMissing.of()
            private var imagingPayloadCategory: JsonField<String> = JsonMissing.of()
            private var manufacturerOrgId: JsonField<String> = JsonMissing.of()
            private var name: JsonField<String> = JsonMissing.of()
            private var notes: JsonField<String> = JsonMissing.of()
            private var numberOfFilmReturnCanisters: JsonField<Long> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var pointingMethod: JsonField<String> = JsonMissing.of()
            private var recorderSize: JsonField<String> = JsonMissing.of()
            private var spectralBand: JsonField<String> = JsonMissing.of()
            private var spectralFrequencyLimits: JsonField<String> = JsonMissing.of()
            private var swathWidth: JsonField<Double> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) =
                apply {
                    classificationMarking = body.classificationMarking
                    dataMode = body.dataMode
                    source = body.source
                    spacecraftId = body.spacecraftId
                    bodyId = body.bodyId
                    bestResolution = body.bestResolution
                    createdAt = body.createdAt
                    createdBy = body.createdBy
                    fieldOfRegard = body.fieldOfRegard
                    fieldOfView = body.fieldOfView
                    groundStationLocations = body.groundStationLocations
                    groundStations = body.groundStations
                    hostedForCompanyOrgId = body.hostedForCompanyOrgId
                    idSensor = body.idSensor
                    imagingPayloadCategory = body.imagingPayloadCategory
                    manufacturerOrgId = body.manufacturerOrgId
                    name = body.name
                    notes = body.notes
                    numberOfFilmReturnCanisters = body.numberOfFilmReturnCanisters
                    origin = body.origin
                    origNetwork = body.origNetwork
                    pointingMethod = body.pointingMethod
                    recorderSize = body.recorderSize
                    spectralBand = body.spectralBand
                    spectralFrequencyLimits = body.spectralFrequencyLimits
                    swathWidth = body.swathWidth
                    additionalProperties = body.additionalProperties.toMutableMap()
                }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) = classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) =
                apply {
                    this.classificationMarking = classificationMarking
                }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) =
                apply {
                    this.dataMode = dataMode
                }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) =
                apply {
                    this.source = source
                }

            /** Seradata ID of the spacecraft (SeradataSpacecraftDetails ID). */
            fun spacecraftId(spacecraftId: String) = spacecraftId(JsonField.of(spacecraftId))

            /**
             * Sets [Builder.spacecraftId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.spacecraftId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun spacecraftId(spacecraftId: JsonField<String>) =
                apply {
                    this.spacecraftId = spacecraftId
                }

            /** Unique identifier of the record, auto-generated by the system. */
            fun bodyId(bodyId: String) = bodyId(JsonField.of(bodyId))

            /**
             * Sets [Builder.bodyId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bodyId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bodyId(bodyId: JsonField<String>) =
                apply {
                    this.bodyId = bodyId
                }

            /** Best resolution. */
            fun bestResolution(bestResolution: Double) = bestResolution(JsonField.of(bestResolution))

            /**
             * Sets [Builder.bestResolution] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bestResolution] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun bestResolution(bestResolution: JsonField<Double>) =
                apply {
                    this.bestResolution = bestResolution
                }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) =
                apply {
                    this.createdAt = createdAt
                }

            /** Application user who created the row in the database, auto-populated by the system. */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) =
                apply {
                    this.createdBy = createdBy
                }

            /** Field of regard of this radar in degrees. */
            fun fieldOfRegard(fieldOfRegard: Double) = fieldOfRegard(JsonField.of(fieldOfRegard))

            /**
             * Sets [Builder.fieldOfRegard] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fieldOfRegard] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fieldOfRegard(fieldOfRegard: JsonField<Double>) =
                apply {
                    this.fieldOfRegard = fieldOfRegard
                }

            /** Field of view of this radar in kilometers. */
            fun fieldOfView(fieldOfView: Double) = fieldOfView(JsonField.of(fieldOfView))

            /**
             * Sets [Builder.fieldOfView] to an arbitrary JSON value.
             *
             * You should usually call [Builder.fieldOfView] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun fieldOfView(fieldOfView: JsonField<Double>) =
                apply {
                    this.fieldOfView = fieldOfView
                }

            /** Ground Station Locations for this payload. */
            fun groundStationLocations(groundStationLocations: String) = groundStationLocations(JsonField.of(groundStationLocations))

            /**
             * Sets [Builder.groundStationLocations] to an arbitrary JSON value.
             *
             * You should usually call [Builder.groundStationLocations] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun groundStationLocations(groundStationLocations: JsonField<String>) =
                apply {
                    this.groundStationLocations = groundStationLocations
                }

            /** Ground Station info for this payload. */
            fun groundStations(groundStations: String) = groundStations(JsonField.of(groundStations))

            /**
             * Sets [Builder.groundStations] to an arbitrary JSON value.
             *
             * You should usually call [Builder.groundStations] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun groundStations(groundStations: JsonField<String>) =
                apply {
                    this.groundStations = groundStations
                }

            /** Hosted for company/Organization Id. */
            fun hostedForCompanyOrgId(hostedForCompanyOrgId: String) = hostedForCompanyOrgId(JsonField.of(hostedForCompanyOrgId))

            /**
             * Sets [Builder.hostedForCompanyOrgId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hostedForCompanyOrgId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hostedForCompanyOrgId(hostedForCompanyOrgId: JsonField<String>) =
                apply {
                    this.hostedForCompanyOrgId = hostedForCompanyOrgId
                }

            /** UUID of the Sensor record. */
            fun idSensor(idSensor: String) = idSensor(JsonField.of(idSensor))

            /**
             * Sets [Builder.idSensor] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSensor] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idSensor(idSensor: JsonField<String>) =
                apply {
                    this.idSensor = idSensor
                }

            /** Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic. */
            fun imagingPayloadCategory(imagingPayloadCategory: String) = imagingPayloadCategory(JsonField.of(imagingPayloadCategory))

            /**
             * Sets [Builder.imagingPayloadCategory] to an arbitrary JSON value.
             *
             * You should usually call [Builder.imagingPayloadCategory] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun imagingPayloadCategory(imagingPayloadCategory: JsonField<String>) =
                apply {
                    this.imagingPayloadCategory = imagingPayloadCategory
                }

            /** Manufacturer Organization Id. */
            fun manufacturerOrgId(manufacturerOrgId: String) = manufacturerOrgId(JsonField.of(manufacturerOrgId))

            /**
             * Sets [Builder.manufacturerOrgId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.manufacturerOrgId] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun manufacturerOrgId(manufacturerOrgId: JsonField<String>) =
                apply {
                    this.manufacturerOrgId = manufacturerOrgId
                }

            /** Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc. */
            fun name(name: String) = name(JsonField.of(name))

            /**
             * Sets [Builder.name] to an arbitrary JSON value.
             *
             * You should usually call [Builder.name] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun name(name: JsonField<String>) =
                apply {
                    this.name = name
                }

            /** Payload notes. */
            fun notes(notes: String) = notes(JsonField.of(notes))

            /**
             * Sets [Builder.notes] to an arbitrary JSON value.
             *
             * You should usually call [Builder.notes] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun notes(notes: JsonField<String>) =
                apply {
                    this.notes = notes
                }

            /** Number of film return canisters. */
            fun numberOfFilmReturnCanisters(numberOfFilmReturnCanisters: Long) = numberOfFilmReturnCanisters(JsonField.of(numberOfFilmReturnCanisters))

            /**
             * Sets [Builder.numberOfFilmReturnCanisters] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numberOfFilmReturnCanisters] with a well-typed [Long] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numberOfFilmReturnCanisters(numberOfFilmReturnCanisters: JsonField<Long>) =
                apply {
                    this.numberOfFilmReturnCanisters = numberOfFilmReturnCanisters
                }

            /** Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin. */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) =
                apply {
                    this.origin = origin
                }

            /** The originating source network on which this record was created, auto-populated by the system. */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) =
                apply {
                    this.origNetwork = origNetwork
                }

            /** Point method for this radar, e.g. Spacecraft. */
            fun pointingMethod(pointingMethod: String) = pointingMethod(JsonField.of(pointingMethod))

            /**
             * Sets [Builder.pointingMethod] to an arbitrary JSON value.
             *
             * You should usually call [Builder.pointingMethod] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun pointingMethod(pointingMethod: JsonField<String>) =
                apply {
                    this.pointingMethod = pointingMethod
                }

            /** Recorder size. */
            fun recorderSize(recorderSize: String) = recorderSize(JsonField.of(recorderSize))

            /**
             * Sets [Builder.recorderSize] to an arbitrary JSON value.
             *
             * You should usually call [Builder.recorderSize] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun recorderSize(recorderSize: JsonField<String>) =
                apply {
                    this.recorderSize = recorderSize
                }

            /** Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc. */
            fun spectralBand(spectralBand: String) = spectralBand(JsonField.of(spectralBand))

            /**
             * Sets [Builder.spectralBand] to an arbitrary JSON value.
             *
             * You should usually call [Builder.spectralBand] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun spectralBand(spectralBand: JsonField<String>) =
                apply {
                    this.spectralBand = spectralBand
                }

            /** Frequency limit for this payload, e.g. 0.51 - 0.59. */
            fun spectralFrequencyLimits(spectralFrequencyLimits: String) = spectralFrequencyLimits(JsonField.of(spectralFrequencyLimits))

            /**
             * Sets [Builder.spectralFrequencyLimits] to an arbitrary JSON value.
             *
             * You should usually call [Builder.spectralFrequencyLimits] with a well-typed [String] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun spectralFrequencyLimits(spectralFrequencyLimits: JsonField<String>) =
                apply {
                    this.spectralFrequencyLimits = spectralFrequencyLimits
                }

            /** Swath width in kilometers. */
            fun swathWidth(swathWidth: Double) = swathWidth(JsonField.of(swathWidth))

            /**
             * Sets [Builder.swathWidth] to an arbitrary JSON value.
             *
             * You should usually call [Builder.swathWidth] with a well-typed [Double] value instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun swathWidth(swathWidth: JsonField<Double>) =
                apply {
                    this.swathWidth = swathWidth
                }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

            fun putAdditionalProperty(key: String, value: JsonValue) =
                apply {
                    additionalProperties.put(key, value)
                }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                apply {
                    this.additionalProperties.putAll(additionalProperties)
                }

            fun removeAdditionalProperty(key: String) =
                apply {
                    additionalProperties.remove(key)
                }

            fun removeAllAdditionalProperties(keys: Set<String>) =
                apply {
                    keys.forEach(::removeAdditionalProperty)
                }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             *
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .source()
             * .spacecraftId()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                  checkRequired(
                    "classificationMarking", classificationMarking
                  ),
                  checkRequired(
                    "dataMode", dataMode
                  ),
                  checkRequired(
                    "source", source
                  ),
                  checkRequired(
                    "spacecraftId", spacecraftId
                  ),
                  bodyId,
                  bestResolution,
                  createdAt,
                  createdBy,
                  fieldOfRegard,
                  fieldOfView,
                  groundStationLocations,
                  groundStations,
                  hostedForCompanyOrgId,
                  idSensor,
                  imagingPayloadCategory,
                  manufacturerOrgId,
                  name,
                  notes,
                  numberOfFilmReturnCanisters,
                  origin,
                  origNetwork,
                  pointingMethod,
                  recorderSize,
                  spectralBand,
                  spectralFrequencyLimits,
                  swathWidth,
                  additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body =
            apply {
                if (validated) {
                  return@apply
                }

                classificationMarking()
                dataMode().validate()
                source()
                spacecraftId()
                bodyId()
                bestResolution()
                createdAt()
                createdBy()
                fieldOfRegard()
                fieldOfView()
                groundStationLocations()
                groundStations()
                hostedForCompanyOrgId()
                idSensor()
                imagingPayloadCategory()
                manufacturerOrgId()
                name()
                notes()
                numberOfFilmReturnCanisters()
                origin()
                origNetwork()
                pointingMethod()
                recorderSize()
                spectralBand()
                spectralFrequencyLimits()
                swathWidth()
                validated = true
            }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int = (if (classificationMarking.asKnown().isPresent) 1 else 0) + (dataMode.asKnown().getOrNull()?.validity() ?: 0) + (if (source.asKnown().isPresent) 1 else 0) + (if (spacecraftId.asKnown().isPresent) 1 else 0) + (if (bodyId.asKnown().isPresent) 1 else 0) + (if (bestResolution.asKnown().isPresent) 1 else 0) + (if (createdAt.asKnown().isPresent) 1 else 0) + (if (createdBy.asKnown().isPresent) 1 else 0) + (if (fieldOfRegard.asKnown().isPresent) 1 else 0) + (if (fieldOfView.asKnown().isPresent) 1 else 0) + (if (groundStationLocations.asKnown().isPresent) 1 else 0) + (if (groundStations.asKnown().isPresent) 1 else 0) + (if (hostedForCompanyOrgId.asKnown().isPresent) 1 else 0) + (if (idSensor.asKnown().isPresent) 1 else 0) + (if (imagingPayloadCategory.asKnown().isPresent) 1 else 0) + (if (manufacturerOrgId.asKnown().isPresent) 1 else 0) + (if (name.asKnown().isPresent) 1 else 0) + (if (notes.asKnown().isPresent) 1 else 0) + (if (numberOfFilmReturnCanisters.asKnown().isPresent) 1 else 0) + (if (origin.asKnown().isPresent) 1 else 0) + (if (origNetwork.asKnown().isPresent) 1 else 0) + (if (pointingMethod.asKnown().isPresent) 1 else 0) + (if (recorderSize.asKnown().isPresent) 1 else 0) + (if (spectralBand.asKnown().isPresent) 1 else 0) + (if (spectralFrequencyLimits.asKnown().isPresent) 1 else 0) + (if (swathWidth.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is Body && classificationMarking == other.classificationMarking && dataMode == other.dataMode && source == other.source && spacecraftId == other.spacecraftId && bodyId == other.bodyId && bestResolution == other.bestResolution && createdAt == other.createdAt && createdBy == other.createdBy && fieldOfRegard == other.fieldOfRegard && fieldOfView == other.fieldOfView && groundStationLocations == other.groundStationLocations && groundStations == other.groundStations && hostedForCompanyOrgId == other.hostedForCompanyOrgId && idSensor == other.idSensor && imagingPayloadCategory == other.imagingPayloadCategory && manufacturerOrgId == other.manufacturerOrgId && name == other.name && notes == other.notes && numberOfFilmReturnCanisters == other.numberOfFilmReturnCanisters && origin == other.origin && origNetwork == other.origNetwork && pointingMethod == other.pointingMethod && recorderSize == other.recorderSize && spectralBand == other.spectralBand && spectralFrequencyLimits == other.spectralFrequencyLimits && swathWidth == other.swathWidth && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(classificationMarking, dataMode, source, spacecraftId, bodyId, bestResolution, createdAt, createdBy, fieldOfRegard, fieldOfView, groundStationLocations, groundStations, hostedForCompanyOrgId, idSensor, imagingPayloadCategory, manufacturerOrgId, name, notes, numberOfFilmReturnCanisters, origin, origNetwork, pointingMethod, recorderSize, spectralBand, spectralFrequencyLimits, swathWidth, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "Body{classificationMarking=$classificationMarking, dataMode=$dataMode, source=$source, spacecraftId=$spacecraftId, bodyId=$bodyId, bestResolution=$bestResolution, createdAt=$createdAt, createdBy=$createdBy, fieldOfRegard=$fieldOfRegard, fieldOfView=$fieldOfView, groundStationLocations=$groundStationLocations, groundStations=$groundStations, hostedForCompanyOrgId=$hostedForCompanyOrgId, idSensor=$idSensor, imagingPayloadCategory=$imagingPayloadCategory, manufacturerOrgId=$manufacturerOrgId, name=$name, notes=$notes, numberOfFilmReturnCanisters=$numberOfFilmReturnCanisters, origin=$origin, origNetwork=$origNetwork, pointingMethod=$pointingMethod, recorderSize=$recorderSize, spectralBand=$spectralBand, spectralFrequencyLimits=$spectralFrequencyLimits, swathWidth=$swathWidth, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(
        private val value: JsonField<String>,

    ) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't match any known
         * member, and you want to know that value. For example, if the SDK is on an older version than the
         * API, then the API may respond with new members that the SDK is unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue
        fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         *
         * - It was deserialized from data that doesn't match any known member. For example, if the SDK is on
         *   an older version than the API, then the API may respond with new members that the SDK is unaware
         *   of.
         *
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN] if the
         * class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want to throw
         * for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't want to throw
         * for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging and generally
         * doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not have the expected
         * primitive type.
         */
        fun asString(): String = _value().asString().orElseThrow { UnifieddatalibraryInvalidDataException("Value is not a String") }

        private var validated: Boolean = false

        fun validate(): DataMode =
            apply {
                if (validated) {
                  return@apply
                }

                known()
                validated = true
            }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
          if (this === other) {
              return true
          }

          return /* spotless:off */ other is DataMode && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
      if (this === other) {
          return true
      }

      return /* spotless:off */ other is SeradataOpticalPayloadUpdateParams && pathId == other.pathId && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(pathId, body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() = "SeradataOpticalPayloadUpdateParams{pathId=$pathId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
