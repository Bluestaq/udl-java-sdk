// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.routestats

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to take a single routeStats record as a POST body and ingest into the database.
 * A specific role is required to perform this service operation. Please contact the UDL team for
 * assistance.
 */
class RouteStatCreateParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * End location of the vehicle.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun locationEnd(): String = body.locationEnd()

    /**
     * Starting location of the vehicle.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun locationStart(): String = body.locationStart()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun id(): Optional<String> = body.id()

    /**
     * Average travel duration for the indicated distance and type of vehicle in hours.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun avgDuration(): Optional<Double> = body.avgDuration()

    /**
     * Average speed during travel in the indicated unit of measurement, speedUnit.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun avgSpeed(): Optional<Double> = body.avgSpeed()

    /**
     * Time the row was created in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database, auto-populated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * The number of data points used in this travel duration calculation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun dataPtsUsed(): Optional<Int> = body.dataPtsUsed()

    /**
     * Distance between the departure and arrival locations in the indicated unit of measurement,
     * distUnit.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun distance(): Optional<Double> = body.distance()

    /**
     * The unit of measurement used for distance in this calculation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun distUnit(): Optional<String> = body.distUnit()

    /**
     * Date of the first data point used in this calculation, in ISO8601 UTC format with millisecond
     * precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun firstPt(): Optional<OffsetDateTime> = body.firstPt()

    /**
     * Description of the portion of travel used to estimate the value of the idealDuration field.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idealDesc(): Optional<String> = body.idealDesc()

    /**
     * Estimated ideal travel duration in hours for the full distance using the indicated vehicle
     * type. The field "idealDesc" should be used to describe the ideal travel route.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idealDuration(): Optional<Double> = body.idealDuration()

    /**
     * Unique identifier of the Site at the route's end location. This ID can be used to obtain
     * additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For
     * example, the Site object with idSite = abc would be queried as /udl/site/abc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idSiteEnd(): Optional<String> = body.idSiteEnd()

    /**
     * Unique identifier of the Site at the route's starting location. This ID can be used to obtain
     * additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}). For
     * example, the Site object with idSite = abc would be queried as /udl/site/abc.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idSiteStart(): Optional<String> = body.idSiteStart()

    /**
     * Date of the last data point used in this calculation, in ISO8601 UTC format with millisecond
     * precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lastPt(): Optional<OffsetDateTime> = body.lastPt()

    /**
     * Type of location used for route start and end points (e.g., ICAO, PORT, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun locationType(): Optional<String> = body.locationType()

    /**
     * Maximum travel duration for the indicated distance and type of vehicle in hours.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maxDuration(): Optional<Double> = body.maxDuration()

    /**
     * Maximum speed during travel in the indicated unit of measurement, speedUnit.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun maxSpeed(): Optional<Double> = body.maxSpeed()

    /**
     * Minimum travel duration for the indicated distance and type of vehicle in hours.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun minDuration(): Optional<Double> = body.minDuration()

    /**
     * Minimum speed during travel in the indicated unit of measurement, speedUnit.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun minSpeed(): Optional<Double> = body.minSpeed()

    /**
     * Originating system or organization which produced the data, if different from the source. The
     * origin may be different than the source if the source was a mediating system which forwarded
     * the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the
     * system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * Description of the portion of travel used to estimate the value of the partialDuration field.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun partialDesc(): Optional<String> = body.partialDesc()

    /**
     * Estimated ideal travel duration in hours for a partial distance using the indicated vehicle
     * type. The field "partialDesc" should be used to specify the intended portion of travel.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun partialDuration(): Optional<Double> = body.partialDuration()

    /**
     * The source data library from which this record was received. This could be a remote or
     * tactical UDL or another data library. If null, the record should be assumed to have
     * originated from the primary Enterprise UDL.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun sourceDl(): Optional<String> = body.sourceDl()

    /**
     * The unit of measurement used for speed in this calculation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun speedUnit(): Optional<String> = body.speedUnit()

    /**
     * The time period this data was collected.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun timePeriod(): Optional<String> = body.timePeriod()

    /**
     * The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT,
     * etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun vehicleCategory(): Optional<String> = body.vehicleCategory()

    /**
     * The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun vehicleType(): Optional<String> = body.vehicleType()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [locationEnd].
     *
     * Unlike [locationEnd], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _locationEnd(): JsonField<String> = body._locationEnd()

    /**
     * Returns the raw JSON value of [locationStart].
     *
     * Unlike [locationStart], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _locationStart(): JsonField<String> = body._locationStart()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _id(): JsonField<String> = body._id()

    /**
     * Returns the raw JSON value of [avgDuration].
     *
     * Unlike [avgDuration], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _avgDuration(): JsonField<Double> = body._avgDuration()

    /**
     * Returns the raw JSON value of [avgSpeed].
     *
     * Unlike [avgSpeed], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _avgSpeed(): JsonField<Double> = body._avgSpeed()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [dataPtsUsed].
     *
     * Unlike [dataPtsUsed], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataPtsUsed(): JsonField<Int> = body._dataPtsUsed()

    /**
     * Returns the raw JSON value of [distance].
     *
     * Unlike [distance], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _distance(): JsonField<Double> = body._distance()

    /**
     * Returns the raw JSON value of [distUnit].
     *
     * Unlike [distUnit], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _distUnit(): JsonField<String> = body._distUnit()

    /**
     * Returns the raw JSON value of [firstPt].
     *
     * Unlike [firstPt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _firstPt(): JsonField<OffsetDateTime> = body._firstPt()

    /**
     * Returns the raw JSON value of [idealDesc].
     *
     * Unlike [idealDesc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idealDesc(): JsonField<String> = body._idealDesc()

    /**
     * Returns the raw JSON value of [idealDuration].
     *
     * Unlike [idealDuration], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idealDuration(): JsonField<Double> = body._idealDuration()

    /**
     * Returns the raw JSON value of [idSiteEnd].
     *
     * Unlike [idSiteEnd], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idSiteEnd(): JsonField<String> = body._idSiteEnd()

    /**
     * Returns the raw JSON value of [idSiteStart].
     *
     * Unlike [idSiteStart], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idSiteStart(): JsonField<String> = body._idSiteStart()

    /**
     * Returns the raw JSON value of [lastPt].
     *
     * Unlike [lastPt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _lastPt(): JsonField<OffsetDateTime> = body._lastPt()

    /**
     * Returns the raw JSON value of [locationType].
     *
     * Unlike [locationType], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _locationType(): JsonField<String> = body._locationType()

    /**
     * Returns the raw JSON value of [maxDuration].
     *
     * Unlike [maxDuration], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _maxDuration(): JsonField<Double> = body._maxDuration()

    /**
     * Returns the raw JSON value of [maxSpeed].
     *
     * Unlike [maxSpeed], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _maxSpeed(): JsonField<Double> = body._maxSpeed()

    /**
     * Returns the raw JSON value of [minDuration].
     *
     * Unlike [minDuration], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _minDuration(): JsonField<Double> = body._minDuration()

    /**
     * Returns the raw JSON value of [minSpeed].
     *
     * Unlike [minSpeed], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _minSpeed(): JsonField<Double> = body._minSpeed()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [partialDesc].
     *
     * Unlike [partialDesc], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _partialDesc(): JsonField<String> = body._partialDesc()

    /**
     * Returns the raw JSON value of [partialDuration].
     *
     * Unlike [partialDuration], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _partialDuration(): JsonField<Double> = body._partialDuration()

    /**
     * Returns the raw JSON value of [sourceDl].
     *
     * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _sourceDl(): JsonField<String> = body._sourceDl()

    /**
     * Returns the raw JSON value of [speedUnit].
     *
     * Unlike [speedUnit], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _speedUnit(): JsonField<String> = body._speedUnit()

    /**
     * Returns the raw JSON value of [timePeriod].
     *
     * Unlike [timePeriod], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _timePeriod(): JsonField<String> = body._timePeriod()

    /**
     * Returns the raw JSON value of [vehicleCategory].
     *
     * Unlike [vehicleCategory], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _vehicleCategory(): JsonField<String> = body._vehicleCategory()

    /**
     * Returns the raw JSON value of [vehicleType].
     *
     * Unlike [vehicleType], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _vehicleType(): JsonField<String> = body._vehicleType()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of [RouteStatCreateParams].
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .locationEnd()
         * .locationStart()
         * .source()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [RouteStatCreateParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(routeStatCreateParams: RouteStatCreateParams) = apply {
            body = routeStatCreateParams.body.toBuilder()
            additionalHeaders = routeStatCreateParams.additionalHeaders.toBuilder()
            additionalQueryParams = routeStatCreateParams.additionalQueryParams.toBuilder()
        }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [classificationMarking]
         * - [dataMode]
         * - [locationEnd]
         * - [locationStart]
         * - [source]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) = apply { body.dataMode(dataMode) }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) = apply { body.dataMode(dataMode) }

        /** End location of the vehicle. */
        fun locationEnd(locationEnd: String) = apply { body.locationEnd(locationEnd) }

        /**
         * Sets [Builder.locationEnd] to an arbitrary JSON value.
         *
         * You should usually call [Builder.locationEnd] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun locationEnd(locationEnd: JsonField<String>) = apply { body.locationEnd(locationEnd) }

        /** Starting location of the vehicle. */
        fun locationStart(locationStart: String) = apply { body.locationStart(locationStart) }

        /**
         * Sets [Builder.locationStart] to an arbitrary JSON value.
         *
         * You should usually call [Builder.locationStart] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun locationStart(locationStart: JsonField<String>) = apply {
            body.locationStart(locationStart)
        }

        /** Source of the data. */
        fun source(source: String) = apply { body.source(source) }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun source(source: JsonField<String>) = apply { body.source(source) }

        /** Unique identifier of the record, auto-generated by the system. */
        fun id(id: String) = apply { body.id(id) }

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { body.id(id) }

        /** Average travel duration for the indicated distance and type of vehicle in hours. */
        fun avgDuration(avgDuration: Double) = apply { body.avgDuration(avgDuration) }

        /**
         * Sets [Builder.avgDuration] to an arbitrary JSON value.
         *
         * You should usually call [Builder.avgDuration] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun avgDuration(avgDuration: JsonField<Double>) = apply { body.avgDuration(avgDuration) }

        /** Average speed during travel in the indicated unit of measurement, speedUnit. */
        fun avgSpeed(avgSpeed: Double) = apply { body.avgSpeed(avgSpeed) }

        /**
         * Sets [Builder.avgSpeed] to an arbitrary JSON value.
         *
         * You should usually call [Builder.avgSpeed] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun avgSpeed(avgSpeed: JsonField<Double>) = apply { body.avgSpeed(avgSpeed) }

        /** Time the row was created in the database, auto-populated by the system. */
        fun createdAt(createdAt: OffsetDateTime) = apply { body.createdAt(createdAt) }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { body.createdAt(createdAt) }

        /** Application user who created the row in the database, auto-populated by the system. */
        fun createdBy(createdBy: String) = apply { body.createdBy(createdBy) }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun createdBy(createdBy: JsonField<String>) = apply { body.createdBy(createdBy) }

        /** The number of data points used in this travel duration calculation. */
        fun dataPtsUsed(dataPtsUsed: Int) = apply { body.dataPtsUsed(dataPtsUsed) }

        /**
         * Sets [Builder.dataPtsUsed] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataPtsUsed] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun dataPtsUsed(dataPtsUsed: JsonField<Int>) = apply { body.dataPtsUsed(dataPtsUsed) }

        /**
         * Distance between the departure and arrival locations in the indicated unit of
         * measurement, distUnit.
         */
        fun distance(distance: Double) = apply { body.distance(distance) }

        /**
         * Sets [Builder.distance] to an arbitrary JSON value.
         *
         * You should usually call [Builder.distance] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun distance(distance: JsonField<Double>) = apply { body.distance(distance) }

        /** The unit of measurement used for distance in this calculation. */
        fun distUnit(distUnit: String) = apply { body.distUnit(distUnit) }

        /**
         * Sets [Builder.distUnit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.distUnit] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun distUnit(distUnit: JsonField<String>) = apply { body.distUnit(distUnit) }

        /**
         * Date of the first data point used in this calculation, in ISO8601 UTC format with
         * millisecond precision.
         */
        fun firstPt(firstPt: OffsetDateTime) = apply { body.firstPt(firstPt) }

        /**
         * Sets [Builder.firstPt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.firstPt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun firstPt(firstPt: JsonField<OffsetDateTime>) = apply { body.firstPt(firstPt) }

        /**
         * Description of the portion of travel used to estimate the value of the idealDuration
         * field.
         */
        fun idealDesc(idealDesc: String) = apply { body.idealDesc(idealDesc) }

        /**
         * Sets [Builder.idealDesc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idealDesc] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idealDesc(idealDesc: JsonField<String>) = apply { body.idealDesc(idealDesc) }

        /**
         * Estimated ideal travel duration in hours for the full distance using the indicated
         * vehicle type. The field "idealDesc" should be used to describe the ideal travel route.
         */
        fun idealDuration(idealDuration: Double) = apply { body.idealDuration(idealDuration) }

        /**
         * Sets [Builder.idealDuration] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idealDuration] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idealDuration(idealDuration: JsonField<Double>) = apply {
            body.idealDuration(idealDuration)
        }

        /**
         * Unique identifier of the Site at the route's end location. This ID can be used to obtain
         * additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}).
         * For example, the Site object with idSite = abc would be queried as /udl/site/abc.
         */
        fun idSiteEnd(idSiteEnd: String) = apply { body.idSiteEnd(idSiteEnd) }

        /**
         * Sets [Builder.idSiteEnd] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSiteEnd] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idSiteEnd(idSiteEnd: JsonField<String>) = apply { body.idSiteEnd(idSiteEnd) }

        /**
         * Unique identifier of the Site at the route's starting location. This ID can be used to
         * obtain additional information on a Site using the 'get by ID' operation (e.g.
         * /udl/site/{id}). For example, the Site object with idSite = abc would be queried as
         * /udl/site/abc.
         */
        fun idSiteStart(idSiteStart: String) = apply { body.idSiteStart(idSiteStart) }

        /**
         * Sets [Builder.idSiteStart] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idSiteStart] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idSiteStart(idSiteStart: JsonField<String>) = apply { body.idSiteStart(idSiteStart) }

        /**
         * Date of the last data point used in this calculation, in ISO8601 UTC format with
         * millisecond precision.
         */
        fun lastPt(lastPt: OffsetDateTime) = apply { body.lastPt(lastPt) }

        /**
         * Sets [Builder.lastPt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lastPt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun lastPt(lastPt: JsonField<OffsetDateTime>) = apply { body.lastPt(lastPt) }

        /** Type of location used for route start and end points (e.g., ICAO, PORT, etc.). */
        fun locationType(locationType: String) = apply { body.locationType(locationType) }

        /**
         * Sets [Builder.locationType] to an arbitrary JSON value.
         *
         * You should usually call [Builder.locationType] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun locationType(locationType: JsonField<String>) = apply {
            body.locationType(locationType)
        }

        /** Maximum travel duration for the indicated distance and type of vehicle in hours. */
        fun maxDuration(maxDuration: Double) = apply { body.maxDuration(maxDuration) }

        /**
         * Sets [Builder.maxDuration] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maxDuration] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun maxDuration(maxDuration: JsonField<Double>) = apply { body.maxDuration(maxDuration) }

        /** Maximum speed during travel in the indicated unit of measurement, speedUnit. */
        fun maxSpeed(maxSpeed: Double) = apply { body.maxSpeed(maxSpeed) }

        /**
         * Sets [Builder.maxSpeed] to an arbitrary JSON value.
         *
         * You should usually call [Builder.maxSpeed] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun maxSpeed(maxSpeed: JsonField<Double>) = apply { body.maxSpeed(maxSpeed) }

        /** Minimum travel duration for the indicated distance and type of vehicle in hours. */
        fun minDuration(minDuration: Double) = apply { body.minDuration(minDuration) }

        /**
         * Sets [Builder.minDuration] to an arbitrary JSON value.
         *
         * You should usually call [Builder.minDuration] with a well-typed [Double] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun minDuration(minDuration: JsonField<Double>) = apply { body.minDuration(minDuration) }

        /** Minimum speed during travel in the indicated unit of measurement, speedUnit. */
        fun minSpeed(minSpeed: Double) = apply { body.minSpeed(minSpeed) }

        /**
         * Sets [Builder.minSpeed] to an arbitrary JSON value.
         *
         * You should usually call [Builder.minSpeed] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun minSpeed(minSpeed: JsonField<Double>) = apply { body.minSpeed(minSpeed) }

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         */
        fun origin(origin: String) = apply { body.origin(origin) }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun origin(origin: JsonField<String>) = apply { body.origin(origin) }

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         */
        fun origNetwork(origNetwork: String) = apply { body.origNetwork(origNetwork) }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origNetwork(origNetwork: JsonField<String>) = apply { body.origNetwork(origNetwork) }

        /**
         * Description of the portion of travel used to estimate the value of the partialDuration
         * field.
         */
        fun partialDesc(partialDesc: String) = apply { body.partialDesc(partialDesc) }

        /**
         * Sets [Builder.partialDesc] to an arbitrary JSON value.
         *
         * You should usually call [Builder.partialDesc] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun partialDesc(partialDesc: JsonField<String>) = apply { body.partialDesc(partialDesc) }

        /**
         * Estimated ideal travel duration in hours for a partial distance using the indicated
         * vehicle type. The field "partialDesc" should be used to specify the intended portion of
         * travel.
         */
        fun partialDuration(partialDuration: Double) = apply {
            body.partialDuration(partialDuration)
        }

        /**
         * Sets [Builder.partialDuration] to an arbitrary JSON value.
         *
         * You should usually call [Builder.partialDuration] with a well-typed [Double] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun partialDuration(partialDuration: JsonField<Double>) = apply {
            body.partialDuration(partialDuration)
        }

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         */
        fun sourceDl(sourceDl: String) = apply { body.sourceDl(sourceDl) }

        /**
         * Sets [Builder.sourceDl] to an arbitrary JSON value.
         *
         * You should usually call [Builder.sourceDl] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun sourceDl(sourceDl: JsonField<String>) = apply { body.sourceDl(sourceDl) }

        /** The unit of measurement used for speed in this calculation. */
        fun speedUnit(speedUnit: String) = apply { body.speedUnit(speedUnit) }

        /**
         * Sets [Builder.speedUnit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.speedUnit] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun speedUnit(speedUnit: JsonField<String>) = apply { body.speedUnit(speedUnit) }

        /** The time period this data was collected. */
        fun timePeriod(timePeriod: String) = apply { body.timePeriod(timePeriod) }

        /**
         * Sets [Builder.timePeriod] to an arbitrary JSON value.
         *
         * You should usually call [Builder.timePeriod] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun timePeriod(timePeriod: JsonField<String>) = apply { body.timePeriod(timePeriod) }

        /**
         * The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT,
         * etc.).
         */
        fun vehicleCategory(vehicleCategory: String) = apply {
            body.vehicleCategory(vehicleCategory)
        }

        /**
         * Sets [Builder.vehicleCategory] to an arbitrary JSON value.
         *
         * You should usually call [Builder.vehicleCategory] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun vehicleCategory(vehicleCategory: JsonField<String>) = apply {
            body.vehicleCategory(vehicleCategory)
        }

        /** The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.). */
        fun vehicleType(vehicleType: String) = apply { body.vehicleType(vehicleType) }

        /**
         * Sets [Builder.vehicleType] to an arbitrary JSON value.
         *
         * You should usually call [Builder.vehicleType] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun vehicleType(vehicleType: JsonField<String>) = apply { body.vehicleType(vehicleType) }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAlladditional_body_properties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAlladditional_body_properties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAlladditional_body_properties(keys: Set<String>) = apply {
            body.removeAlladditional_body_properties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAlladditional_headers(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceadditional_headers(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceadditional_headers(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAlladditional_headers(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAlladditional_headers(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeadditional_headers(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAlladditional_headers(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAlladditional_query_params(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAlladditional_query_params(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceadditional_query_params(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceadditional_query_params(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAlladditional_query_params(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAlladditional_query_params(
            additionalQueryParams: Map<String, Iterable<String>>
        ) = apply { this.additionalQueryParams.replaceAll(additionalQueryParams) }

        fun removeadditional_query_params(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAlladditional_query_params(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [RouteStatCreateParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .classificationMarking()
         * .dataMode()
         * .locationEnd()
         * .locationStart()
         * .source()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): RouteStatCreateParams =
            RouteStatCreateParams(
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /**
     * General statistics applying to navigation routes utilized by vessels, aircraft, ground
     * vehicles, etc.
     */
    class Body
    private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val locationEnd: JsonField<String>,
        private val locationStart: JsonField<String>,
        private val source: JsonField<String>,
        private val id: JsonField<String>,
        private val avgDuration: JsonField<Double>,
        private val avgSpeed: JsonField<Double>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val dataPtsUsed: JsonField<Int>,
        private val distance: JsonField<Double>,
        private val distUnit: JsonField<String>,
        private val firstPt: JsonField<OffsetDateTime>,
        private val idealDesc: JsonField<String>,
        private val idealDuration: JsonField<Double>,
        private val idSiteEnd: JsonField<String>,
        private val idSiteStart: JsonField<String>,
        private val lastPt: JsonField<OffsetDateTime>,
        private val locationType: JsonField<String>,
        private val maxDuration: JsonField<Double>,
        private val maxSpeed: JsonField<Double>,
        private val minDuration: JsonField<Double>,
        private val minSpeed: JsonField<Double>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val partialDesc: JsonField<String>,
        private val partialDuration: JsonField<Double>,
        private val sourceDl: JsonField<String>,
        private val speedUnit: JsonField<String>,
        private val timePeriod: JsonField<String>,
        private val vehicleCategory: JsonField<String>,
        private val vehicleType: JsonField<String>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("locationEnd")
            @ExcludeMissing
            locationEnd: JsonField<String> = JsonMissing.of(),
            @JsonProperty("locationStart")
            @ExcludeMissing
            locationStart: JsonField<String> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("avgDuration")
            @ExcludeMissing
            avgDuration: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("avgSpeed")
            @ExcludeMissing
            avgSpeed: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataPtsUsed")
            @ExcludeMissing
            dataPtsUsed: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("distance")
            @ExcludeMissing
            distance: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("distUnit")
            @ExcludeMissing
            distUnit: JsonField<String> = JsonMissing.of(),
            @JsonProperty("firstPt")
            @ExcludeMissing
            firstPt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("idealDesc")
            @ExcludeMissing
            idealDesc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idealDuration")
            @ExcludeMissing
            idealDuration: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("idSiteEnd")
            @ExcludeMissing
            idSiteEnd: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idSiteStart")
            @ExcludeMissing
            idSiteStart: JsonField<String> = JsonMissing.of(),
            @JsonProperty("lastPt")
            @ExcludeMissing
            lastPt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("locationType")
            @ExcludeMissing
            locationType: JsonField<String> = JsonMissing.of(),
            @JsonProperty("maxDuration")
            @ExcludeMissing
            maxDuration: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("maxSpeed")
            @ExcludeMissing
            maxSpeed: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("minDuration")
            @ExcludeMissing
            minDuration: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("minSpeed")
            @ExcludeMissing
            minSpeed: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork")
            @ExcludeMissing
            origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("partialDesc")
            @ExcludeMissing
            partialDesc: JsonField<String> = JsonMissing.of(),
            @JsonProperty("partialDuration")
            @ExcludeMissing
            partialDuration: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("sourceDL")
            @ExcludeMissing
            sourceDl: JsonField<String> = JsonMissing.of(),
            @JsonProperty("speedUnit")
            @ExcludeMissing
            speedUnit: JsonField<String> = JsonMissing.of(),
            @JsonProperty("timePeriod")
            @ExcludeMissing
            timePeriod: JsonField<String> = JsonMissing.of(),
            @JsonProperty("vehicleCategory")
            @ExcludeMissing
            vehicleCategory: JsonField<String> = JsonMissing.of(),
            @JsonProperty("vehicleType")
            @ExcludeMissing
            vehicleType: JsonField<String> = JsonMissing.of(),
        ) : this(
            classificationMarking,
            dataMode,
            locationEnd,
            locationStart,
            source,
            id,
            avgDuration,
            avgSpeed,
            createdAt,
            createdBy,
            dataPtsUsed,
            distance,
            distUnit,
            firstPt,
            idealDesc,
            idealDuration,
            idSiteEnd,
            idSiteStart,
            lastPt,
            locationType,
            maxDuration,
            maxSpeed,
            minDuration,
            minSpeed,
            origin,
            origNetwork,
            partialDesc,
            partialDuration,
            sourceDl,
            speedUnit,
            timePeriod,
            vehicleCategory,
            vehicleType,
            mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * End location of the vehicle.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun locationEnd(): String = locationEnd.getRequired("locationEnd")

        /**
         * Starting location of the vehicle.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun locationStart(): String = locationStart.getRequired("locationStart")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun id(): Optional<String> = id.getOptional("id")

        /**
         * Average travel duration for the indicated distance and type of vehicle in hours.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun avgDuration(): Optional<Double> = avgDuration.getOptional("avgDuration")

        /**
         * Average speed during travel in the indicated unit of measurement, speedUnit.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun avgSpeed(): Optional<Double> = avgSpeed.getOptional("avgSpeed")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * The number of data points used in this travel duration calculation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun dataPtsUsed(): Optional<Int> = dataPtsUsed.getOptional("dataPtsUsed")

        /**
         * Distance between the departure and arrival locations in the indicated unit of
         * measurement, distUnit.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun distance(): Optional<Double> = distance.getOptional("distance")

        /**
         * The unit of measurement used for distance in this calculation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun distUnit(): Optional<String> = distUnit.getOptional("distUnit")

        /**
         * Date of the first data point used in this calculation, in ISO8601 UTC format with
         * millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun firstPt(): Optional<OffsetDateTime> = firstPt.getOptional("firstPt")

        /**
         * Description of the portion of travel used to estimate the value of the idealDuration
         * field.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idealDesc(): Optional<String> = idealDesc.getOptional("idealDesc")

        /**
         * Estimated ideal travel duration in hours for the full distance using the indicated
         * vehicle type. The field "idealDesc" should be used to describe the ideal travel route.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idealDuration(): Optional<Double> = idealDuration.getOptional("idealDuration")

        /**
         * Unique identifier of the Site at the route's end location. This ID can be used to obtain
         * additional information on a Site using the 'get by ID' operation (e.g. /udl/site/{id}).
         * For example, the Site object with idSite = abc would be queried as /udl/site/abc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idSiteEnd(): Optional<String> = idSiteEnd.getOptional("idSiteEnd")

        /**
         * Unique identifier of the Site at the route's starting location. This ID can be used to
         * obtain additional information on a Site using the 'get by ID' operation (e.g.
         * /udl/site/{id}). For example, the Site object with idSite = abc would be queried as
         * /udl/site/abc.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idSiteStart(): Optional<String> = idSiteStart.getOptional("idSiteStart")

        /**
         * Date of the last data point used in this calculation, in ISO8601 UTC format with
         * millisecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lastPt(): Optional<OffsetDateTime> = lastPt.getOptional("lastPt")

        /**
         * Type of location used for route start and end points (e.g., ICAO, PORT, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun locationType(): Optional<String> = locationType.getOptional("locationType")

        /**
         * Maximum travel duration for the indicated distance and type of vehicle in hours.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maxDuration(): Optional<Double> = maxDuration.getOptional("maxDuration")

        /**
         * Maximum speed during travel in the indicated unit of measurement, speedUnit.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun maxSpeed(): Optional<Double> = maxSpeed.getOptional("maxSpeed")

        /**
         * Minimum travel duration for the indicated distance and type of vehicle in hours.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun minDuration(): Optional<Double> = minDuration.getOptional("minDuration")

        /**
         * Minimum speed during travel in the indicated unit of measurement, speedUnit.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun minSpeed(): Optional<Double> = minSpeed.getOptional("minSpeed")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * Description of the portion of travel used to estimate the value of the partialDuration
         * field.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun partialDesc(): Optional<String> = partialDesc.getOptional("partialDesc")

        /**
         * Estimated ideal travel duration in hours for a partial distance using the indicated
         * vehicle type. The field "partialDesc" should be used to specify the intended portion of
         * travel.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun partialDuration(): Optional<Double> = partialDuration.getOptional("partialDuration")

        /**
         * The source data library from which this record was received. This could be a remote or
         * tactical UDL or another data library. If null, the record should be assumed to have
         * originated from the primary Enterprise UDL.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun sourceDl(): Optional<String> = sourceDl.getOptional("sourceDL")

        /**
         * The unit of measurement used for speed in this calculation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun speedUnit(): Optional<String> = speedUnit.getOptional("speedUnit")

        /**
         * The time period this data was collected.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun timePeriod(): Optional<String> = timePeriod.getOptional("timePeriod")

        /**
         * The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR, BOAT,
         * etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun vehicleCategory(): Optional<String> = vehicleCategory.getOptional("vehicleCategory")

        /**
         * The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun vehicleType(): Optional<String> = vehicleType.getOptional("vehicleType")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [locationEnd].
         *
         * Unlike [locationEnd], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("locationEnd")
        @ExcludeMissing
        fun _locationEnd(): JsonField<String> = locationEnd

        /**
         * Returns the raw JSON value of [locationStart].
         *
         * Unlike [locationStart], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("locationStart")
        @ExcludeMissing
        fun _locationStart(): JsonField<String> = locationStart

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [id].
         *
         * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

        /**
         * Returns the raw JSON value of [avgDuration].
         *
         * Unlike [avgDuration], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("avgDuration")
        @ExcludeMissing
        fun _avgDuration(): JsonField<Double> = avgDuration

        /**
         * Returns the raw JSON value of [avgSpeed].
         *
         * Unlike [avgSpeed], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("avgSpeed") @ExcludeMissing fun _avgSpeed(): JsonField<Double> = avgSpeed

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [dataPtsUsed].
         *
         * Unlike [dataPtsUsed], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataPtsUsed")
        @ExcludeMissing
        fun _dataPtsUsed(): JsonField<Int> = dataPtsUsed

        /**
         * Returns the raw JSON value of [distance].
         *
         * Unlike [distance], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("distance") @ExcludeMissing fun _distance(): JsonField<Double> = distance

        /**
         * Returns the raw JSON value of [distUnit].
         *
         * Unlike [distUnit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("distUnit") @ExcludeMissing fun _distUnit(): JsonField<String> = distUnit

        /**
         * Returns the raw JSON value of [firstPt].
         *
         * Unlike [firstPt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("firstPt") @ExcludeMissing fun _firstPt(): JsonField<OffsetDateTime> = firstPt

        /**
         * Returns the raw JSON value of [idealDesc].
         *
         * Unlike [idealDesc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idealDesc") @ExcludeMissing fun _idealDesc(): JsonField<String> = idealDesc

        /**
         * Returns the raw JSON value of [idealDuration].
         *
         * Unlike [idealDuration], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("idealDuration")
        @ExcludeMissing
        fun _idealDuration(): JsonField<Double> = idealDuration

        /**
         * Returns the raw JSON value of [idSiteEnd].
         *
         * Unlike [idSiteEnd], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idSiteEnd") @ExcludeMissing fun _idSiteEnd(): JsonField<String> = idSiteEnd

        /**
         * Returns the raw JSON value of [idSiteStart].
         *
         * Unlike [idSiteStart], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idSiteStart")
        @ExcludeMissing
        fun _idSiteStart(): JsonField<String> = idSiteStart

        /**
         * Returns the raw JSON value of [lastPt].
         *
         * Unlike [lastPt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("lastPt") @ExcludeMissing fun _lastPt(): JsonField<OffsetDateTime> = lastPt

        /**
         * Returns the raw JSON value of [locationType].
         *
         * Unlike [locationType], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("locationType")
        @ExcludeMissing
        fun _locationType(): JsonField<String> = locationType

        /**
         * Returns the raw JSON value of [maxDuration].
         *
         * Unlike [maxDuration], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("maxDuration")
        @ExcludeMissing
        fun _maxDuration(): JsonField<Double> = maxDuration

        /**
         * Returns the raw JSON value of [maxSpeed].
         *
         * Unlike [maxSpeed], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("maxSpeed") @ExcludeMissing fun _maxSpeed(): JsonField<Double> = maxSpeed

        /**
         * Returns the raw JSON value of [minDuration].
         *
         * Unlike [minDuration], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("minDuration")
        @ExcludeMissing
        fun _minDuration(): JsonField<Double> = minDuration

        /**
         * Returns the raw JSON value of [minSpeed].
         *
         * Unlike [minSpeed], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("minSpeed") @ExcludeMissing fun _minSpeed(): JsonField<Double> = minSpeed

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [partialDesc].
         *
         * Unlike [partialDesc], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("partialDesc")
        @ExcludeMissing
        fun _partialDesc(): JsonField<String> = partialDesc

        /**
         * Returns the raw JSON value of [partialDuration].
         *
         * Unlike [partialDuration], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("partialDuration")
        @ExcludeMissing
        fun _partialDuration(): JsonField<Double> = partialDuration

        /**
         * Returns the raw JSON value of [sourceDl].
         *
         * Unlike [sourceDl], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("sourceDL") @ExcludeMissing fun _sourceDl(): JsonField<String> = sourceDl

        /**
         * Returns the raw JSON value of [speedUnit].
         *
         * Unlike [speedUnit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("speedUnit") @ExcludeMissing fun _speedUnit(): JsonField<String> = speedUnit

        /**
         * Returns the raw JSON value of [timePeriod].
         *
         * Unlike [timePeriod], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("timePeriod")
        @ExcludeMissing
        fun _timePeriod(): JsonField<String> = timePeriod

        /**
         * Returns the raw JSON value of [vehicleCategory].
         *
         * Unlike [vehicleCategory], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("vehicleCategory")
        @ExcludeMissing
        fun _vehicleCategory(): JsonField<String> = vehicleCategory

        /**
         * Returns the raw JSON value of [vehicleType].
         *
         * Unlike [vehicleType], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("vehicleType")
        @ExcludeMissing
        fun _vehicleType(): JsonField<String> = vehicleType

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .locationEnd()
             * .locationStart()
             * .source()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var locationEnd: JsonField<String>? = null
            private var locationStart: JsonField<String>? = null
            private var source: JsonField<String>? = null
            private var id: JsonField<String> = JsonMissing.of()
            private var avgDuration: JsonField<Double> = JsonMissing.of()
            private var avgSpeed: JsonField<Double> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var dataPtsUsed: JsonField<Int> = JsonMissing.of()
            private var distance: JsonField<Double> = JsonMissing.of()
            private var distUnit: JsonField<String> = JsonMissing.of()
            private var firstPt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var idealDesc: JsonField<String> = JsonMissing.of()
            private var idealDuration: JsonField<Double> = JsonMissing.of()
            private var idSiteEnd: JsonField<String> = JsonMissing.of()
            private var idSiteStart: JsonField<String> = JsonMissing.of()
            private var lastPt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var locationType: JsonField<String> = JsonMissing.of()
            private var maxDuration: JsonField<Double> = JsonMissing.of()
            private var maxSpeed: JsonField<Double> = JsonMissing.of()
            private var minDuration: JsonField<Double> = JsonMissing.of()
            private var minSpeed: JsonField<Double> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var partialDesc: JsonField<String> = JsonMissing.of()
            private var partialDuration: JsonField<Double> = JsonMissing.of()
            private var sourceDl: JsonField<String> = JsonMissing.of()
            private var speedUnit: JsonField<String> = JsonMissing.of()
            private var timePeriod: JsonField<String> = JsonMissing.of()
            private var vehicleCategory: JsonField<String> = JsonMissing.of()
            private var vehicleType: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                classificationMarking = body.classificationMarking
                dataMode = body.dataMode
                locationEnd = body.locationEnd
                locationStart = body.locationStart
                source = body.source
                id = body.id
                avgDuration = body.avgDuration
                avgSpeed = body.avgSpeed
                createdAt = body.createdAt
                createdBy = body.createdBy
                dataPtsUsed = body.dataPtsUsed
                distance = body.distance
                distUnit = body.distUnit
                firstPt = body.firstPt
                idealDesc = body.idealDesc
                idealDuration = body.idealDuration
                idSiteEnd = body.idSiteEnd
                idSiteStart = body.idSiteStart
                lastPt = body.lastPt
                locationType = body.locationType
                maxDuration = body.maxDuration
                maxSpeed = body.maxSpeed
                minDuration = body.minDuration
                minSpeed = body.minSpeed
                origin = body.origin
                origNetwork = body.origNetwork
                partialDesc = body.partialDesc
                partialDuration = body.partialDuration
                sourceDl = body.sourceDl
                speedUnit = body.speedUnit
                timePeriod = body.timePeriod
                vehicleCategory = body.vehicleCategory
                vehicleType = body.vehicleType
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /** End location of the vehicle. */
            fun locationEnd(locationEnd: String) = locationEnd(JsonField.of(locationEnd))

            /**
             * Sets [Builder.locationEnd] to an arbitrary JSON value.
             *
             * You should usually call [Builder.locationEnd] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun locationEnd(locationEnd: JsonField<String>) = apply {
                this.locationEnd = locationEnd
            }

            /** Starting location of the vehicle. */
            fun locationStart(locationStart: String) = locationStart(JsonField.of(locationStart))

            /**
             * Sets [Builder.locationStart] to an arbitrary JSON value.
             *
             * You should usually call [Builder.locationStart] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun locationStart(locationStart: JsonField<String>) = apply {
                this.locationStart = locationStart
            }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /** Unique identifier of the record, auto-generated by the system. */
            fun id(id: String) = id(JsonField.of(id))

            /**
             * Sets [Builder.id] to an arbitrary JSON value.
             *
             * You should usually call [Builder.id] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun id(id: JsonField<String>) = apply { this.id = id }

            /** Average travel duration for the indicated distance and type of vehicle in hours. */
            fun avgDuration(avgDuration: Double) = avgDuration(JsonField.of(avgDuration))

            /**
             * Sets [Builder.avgDuration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.avgDuration] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun avgDuration(avgDuration: JsonField<Double>) = apply {
                this.avgDuration = avgDuration
            }

            /** Average speed during travel in the indicated unit of measurement, speedUnit. */
            fun avgSpeed(avgSpeed: Double) = avgSpeed(JsonField.of(avgSpeed))

            /**
             * Sets [Builder.avgSpeed] to an arbitrary JSON value.
             *
             * You should usually call [Builder.avgSpeed] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun avgSpeed(avgSpeed: JsonField<Double>) = apply { this.avgSpeed = avgSpeed }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /**
             * Application user who created the row in the database, auto-populated by the system.
             */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /** The number of data points used in this travel duration calculation. */
            fun dataPtsUsed(dataPtsUsed: Int) = dataPtsUsed(JsonField.of(dataPtsUsed))

            /**
             * Sets [Builder.dataPtsUsed] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataPtsUsed] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataPtsUsed(dataPtsUsed: JsonField<Int>) = apply { this.dataPtsUsed = dataPtsUsed }

            /**
             * Distance between the departure and arrival locations in the indicated unit of
             * measurement, distUnit.
             */
            fun distance(distance: Double) = distance(JsonField.of(distance))

            /**
             * Sets [Builder.distance] to an arbitrary JSON value.
             *
             * You should usually call [Builder.distance] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun distance(distance: JsonField<Double>) = apply { this.distance = distance }

            /** The unit of measurement used for distance in this calculation. */
            fun distUnit(distUnit: String) = distUnit(JsonField.of(distUnit))

            /**
             * Sets [Builder.distUnit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.distUnit] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun distUnit(distUnit: JsonField<String>) = apply { this.distUnit = distUnit }

            /**
             * Date of the first data point used in this calculation, in ISO8601 UTC format with
             * millisecond precision.
             */
            fun firstPt(firstPt: OffsetDateTime) = firstPt(JsonField.of(firstPt))

            /**
             * Sets [Builder.firstPt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.firstPt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun firstPt(firstPt: JsonField<OffsetDateTime>) = apply { this.firstPt = firstPt }

            /**
             * Description of the portion of travel used to estimate the value of the idealDuration
             * field.
             */
            fun idealDesc(idealDesc: String) = idealDesc(JsonField.of(idealDesc))

            /**
             * Sets [Builder.idealDesc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idealDesc] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idealDesc(idealDesc: JsonField<String>) = apply { this.idealDesc = idealDesc }

            /**
             * Estimated ideal travel duration in hours for the full distance using the indicated
             * vehicle type. The field "idealDesc" should be used to describe the ideal travel
             * route.
             */
            fun idealDuration(idealDuration: Double) = idealDuration(JsonField.of(idealDuration))

            /**
             * Sets [Builder.idealDuration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idealDuration] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idealDuration(idealDuration: JsonField<Double>) = apply {
                this.idealDuration = idealDuration
            }

            /**
             * Unique identifier of the Site at the route's end location. This ID can be used to
             * obtain additional information on a Site using the 'get by ID' operation (e.g.
             * /udl/site/{id}). For example, the Site object with idSite = abc would be queried as
             * /udl/site/abc.
             */
            fun idSiteEnd(idSiteEnd: String) = idSiteEnd(JsonField.of(idSiteEnd))

            /**
             * Sets [Builder.idSiteEnd] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSiteEnd] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idSiteEnd(idSiteEnd: JsonField<String>) = apply { this.idSiteEnd = idSiteEnd }

            /**
             * Unique identifier of the Site at the route's starting location. This ID can be used
             * to obtain additional information on a Site using the 'get by ID' operation (e.g.
             * /udl/site/{id}). For example, the Site object with idSite = abc would be queried as
             * /udl/site/abc.
             */
            fun idSiteStart(idSiteStart: String) = idSiteStart(JsonField.of(idSiteStart))

            /**
             * Sets [Builder.idSiteStart] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idSiteStart] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idSiteStart(idSiteStart: JsonField<String>) = apply {
                this.idSiteStart = idSiteStart
            }

            /**
             * Date of the last data point used in this calculation, in ISO8601 UTC format with
             * millisecond precision.
             */
            fun lastPt(lastPt: OffsetDateTime) = lastPt(JsonField.of(lastPt))

            /**
             * Sets [Builder.lastPt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lastPt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun lastPt(lastPt: JsonField<OffsetDateTime>) = apply { this.lastPt = lastPt }

            /** Type of location used for route start and end points (e.g., ICAO, PORT, etc.). */
            fun locationType(locationType: String) = locationType(JsonField.of(locationType))

            /**
             * Sets [Builder.locationType] to an arbitrary JSON value.
             *
             * You should usually call [Builder.locationType] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun locationType(locationType: JsonField<String>) = apply {
                this.locationType = locationType
            }

            /** Maximum travel duration for the indicated distance and type of vehicle in hours. */
            fun maxDuration(maxDuration: Double) = maxDuration(JsonField.of(maxDuration))

            /**
             * Sets [Builder.maxDuration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maxDuration] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maxDuration(maxDuration: JsonField<Double>) = apply {
                this.maxDuration = maxDuration
            }

            /** Maximum speed during travel in the indicated unit of measurement, speedUnit. */
            fun maxSpeed(maxSpeed: Double) = maxSpeed(JsonField.of(maxSpeed))

            /**
             * Sets [Builder.maxSpeed] to an arbitrary JSON value.
             *
             * You should usually call [Builder.maxSpeed] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun maxSpeed(maxSpeed: JsonField<Double>) = apply { this.maxSpeed = maxSpeed }

            /** Minimum travel duration for the indicated distance and type of vehicle in hours. */
            fun minDuration(minDuration: Double) = minDuration(JsonField.of(minDuration))

            /**
             * Sets [Builder.minDuration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.minDuration] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun minDuration(minDuration: JsonField<Double>) = apply {
                this.minDuration = minDuration
            }

            /** Minimum speed during travel in the indicated unit of measurement, speedUnit. */
            fun minSpeed(minSpeed: Double) = minSpeed(JsonField.of(minSpeed))

            /**
             * Sets [Builder.minSpeed] to an arbitrary JSON value.
             *
             * You should usually call [Builder.minSpeed] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun minSpeed(minSpeed: JsonField<Double>) = apply { this.minSpeed = minSpeed }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * The originating source network on which this record was created, auto-populated by
             * the system.
             */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) = apply {
                this.origNetwork = origNetwork
            }

            /**
             * Description of the portion of travel used to estimate the value of the
             * partialDuration field.
             */
            fun partialDesc(partialDesc: String) = partialDesc(JsonField.of(partialDesc))

            /**
             * Sets [Builder.partialDesc] to an arbitrary JSON value.
             *
             * You should usually call [Builder.partialDesc] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun partialDesc(partialDesc: JsonField<String>) = apply {
                this.partialDesc = partialDesc
            }

            /**
             * Estimated ideal travel duration in hours for a partial distance using the indicated
             * vehicle type. The field "partialDesc" should be used to specify the intended portion
             * of travel.
             */
            fun partialDuration(partialDuration: Double) =
                partialDuration(JsonField.of(partialDuration))

            /**
             * Sets [Builder.partialDuration] to an arbitrary JSON value.
             *
             * You should usually call [Builder.partialDuration] with a well-typed [Double] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun partialDuration(partialDuration: JsonField<Double>) = apply {
                this.partialDuration = partialDuration
            }

            /**
             * The source data library from which this record was received. This could be a remote
             * or tactical UDL or another data library. If null, the record should be assumed to
             * have originated from the primary Enterprise UDL.
             */
            fun sourceDl(sourceDl: String) = sourceDl(JsonField.of(sourceDl))

            /**
             * Sets [Builder.sourceDl] to an arbitrary JSON value.
             *
             * You should usually call [Builder.sourceDl] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun sourceDl(sourceDl: JsonField<String>) = apply { this.sourceDl = sourceDl }

            /** The unit of measurement used for speed in this calculation. */
            fun speedUnit(speedUnit: String) = speedUnit(JsonField.of(speedUnit))

            /**
             * Sets [Builder.speedUnit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.speedUnit] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun speedUnit(speedUnit: JsonField<String>) = apply { this.speedUnit = speedUnit }

            /** The time period this data was collected. */
            fun timePeriod(timePeriod: String) = timePeriod(JsonField.of(timePeriod))

            /**
             * Sets [Builder.timePeriod] to an arbitrary JSON value.
             *
             * You should usually call [Builder.timePeriod] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun timePeriod(timePeriod: JsonField<String>) = apply { this.timePeriod = timePeriod }

            /**
             * The vehicle category that is the subject of this calculation (e.g., AIRCRAFT, CAR,
             * BOAT, etc.).
             */
            fun vehicleCategory(vehicleCategory: String) =
                vehicleCategory(JsonField.of(vehicleCategory))

            /**
             * Sets [Builder.vehicleCategory] to an arbitrary JSON value.
             *
             * You should usually call [Builder.vehicleCategory] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun vehicleCategory(vehicleCategory: JsonField<String>) = apply {
                this.vehicleCategory = vehicleCategory
            }

            /**
             * The vehicle type that is the subject of this calculation (e.g., C-17, F-15, etc.).
             */
            fun vehicleType(vehicleType: String) = vehicleType(JsonField.of(vehicleType))

            /**
             * Sets [Builder.vehicleType] to an arbitrary JSON value.
             *
             * You should usually call [Builder.vehicleType] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun vehicleType(vehicleType: JsonField<String>) = apply {
                this.vehicleType = vehicleType
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAlladditional_properties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAlladditional_properties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAlladditional_properties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .locationEnd()
             * .locationStart()
             * .source()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("locationEnd", locationEnd),
                    checkRequired("locationStart", locationStart),
                    checkRequired("source", source),
                    id,
                    avgDuration,
                    avgSpeed,
                    createdAt,
                    createdBy,
                    dataPtsUsed,
                    distance,
                    distUnit,
                    firstPt,
                    idealDesc,
                    idealDuration,
                    idSiteEnd,
                    idSiteStart,
                    lastPt,
                    locationType,
                    maxDuration,
                    maxSpeed,
                    minDuration,
                    minSpeed,
                    origin,
                    origNetwork,
                    partialDesc,
                    partialDuration,
                    sourceDl,
                    speedUnit,
                    timePeriod,
                    vehicleCategory,
                    vehicleType,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            classificationMarking()
            dataMode().validate()
            locationEnd()
            locationStart()
            source()
            id()
            avgDuration()
            avgSpeed()
            createdAt()
            createdBy()
            dataPtsUsed()
            distance()
            distUnit()
            firstPt()
            idealDesc()
            idealDuration()
            idSiteEnd()
            idSiteStart()
            lastPt()
            locationType()
            maxDuration()
            maxSpeed()
            minDuration()
            minSpeed()
            origin()
            origNetwork()
            partialDesc()
            partialDuration()
            sourceDl()
            speedUnit()
            timePeriod()
            vehicleCategory()
            vehicleType()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (locationEnd.asKnown().isPresent) 1 else 0) +
                (if (locationStart.asKnown().isPresent) 1 else 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (id.asKnown().isPresent) 1 else 0) +
                (if (avgDuration.asKnown().isPresent) 1 else 0) +
                (if (avgSpeed.asKnown().isPresent) 1 else 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (dataPtsUsed.asKnown().isPresent) 1 else 0) +
                (if (distance.asKnown().isPresent) 1 else 0) +
                (if (distUnit.asKnown().isPresent) 1 else 0) +
                (if (firstPt.asKnown().isPresent) 1 else 0) +
                (if (idealDesc.asKnown().isPresent) 1 else 0) +
                (if (idealDuration.asKnown().isPresent) 1 else 0) +
                (if (idSiteEnd.asKnown().isPresent) 1 else 0) +
                (if (idSiteStart.asKnown().isPresent) 1 else 0) +
                (if (lastPt.asKnown().isPresent) 1 else 0) +
                (if (locationType.asKnown().isPresent) 1 else 0) +
                (if (maxDuration.asKnown().isPresent) 1 else 0) +
                (if (maxSpeed.asKnown().isPresent) 1 else 0) +
                (if (minDuration.asKnown().isPresent) 1 else 0) +
                (if (minSpeed.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origNetwork.asKnown().isPresent) 1 else 0) +
                (if (partialDesc.asKnown().isPresent) 1 else 0) +
                (if (partialDuration.asKnown().isPresent) 1 else 0) +
                (if (sourceDl.asKnown().isPresent) 1 else 0) +
                (if (speedUnit.asKnown().isPresent) 1 else 0) +
                (if (timePeriod.asKnown().isPresent) 1 else 0) +
                (if (vehicleCategory.asKnown().isPresent) 1 else 0) +
                (if (vehicleType.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is Body &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                locationEnd == other.locationEnd &&
                locationStart == other.locationStart &&
                source == other.source &&
                id == other.id &&
                avgDuration == other.avgDuration &&
                avgSpeed == other.avgSpeed &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                dataPtsUsed == other.dataPtsUsed &&
                distance == other.distance &&
                distUnit == other.distUnit &&
                firstPt == other.firstPt &&
                idealDesc == other.idealDesc &&
                idealDuration == other.idealDuration &&
                idSiteEnd == other.idSiteEnd &&
                idSiteStart == other.idSiteStart &&
                lastPt == other.lastPt &&
                locationType == other.locationType &&
                maxDuration == other.maxDuration &&
                maxSpeed == other.maxSpeed &&
                minDuration == other.minDuration &&
                minSpeed == other.minSpeed &&
                origin == other.origin &&
                origNetwork == other.origNetwork &&
                partialDesc == other.partialDesc &&
                partialDuration == other.partialDuration &&
                sourceDl == other.sourceDl &&
                speedUnit == other.speedUnit &&
                timePeriod == other.timePeriod &&
                vehicleCategory == other.vehicleCategory &&
                vehicleType == other.vehicleType &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                classificationMarking,
                dataMode,
                locationEnd,
                locationStart,
                source,
                id,
                avgDuration,
                avgSpeed,
                createdAt,
                createdBy,
                dataPtsUsed,
                distance,
                distUnit,
                firstPt,
                idealDesc,
                idealDuration,
                idSiteEnd,
                idSiteStart,
                lastPt,
                locationType,
                maxDuration,
                maxSpeed,
                minDuration,
                minSpeed,
                origin,
                origNetwork,
                partialDesc,
                partialDuration,
                sourceDl,
                speedUnit,
                timePeriod,
                vehicleCategory,
                vehicleType,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{classificationMarking=$classificationMarking, dataMode=$dataMode, locationEnd=$locationEnd, locationStart=$locationStart, source=$source, id=$id, avgDuration=$avgDuration, avgSpeed=$avgSpeed, createdAt=$createdAt, createdBy=$createdBy, dataPtsUsed=$dataPtsUsed, distance=$distance, distUnit=$distUnit, firstPt=$firstPt, idealDesc=$idealDesc, idealDuration=$idealDuration, idSiteEnd=$idSiteEnd, idSiteStart=$idSiteStart, lastPt=$lastPt, locationType=$locationType, maxDuration=$maxDuration, maxSpeed=$maxSpeed, minDuration=$minDuration, minSpeed=$minSpeed, origin=$origin, origNetwork=$origNetwork, partialDesc=$partialDesc, partialDuration=$partialDuration, sourceDl=$sourceDl, speedUnit=$speedUnit, timePeriod=$timePeriod, vehicleCategory=$vehicleCategory, vehicleType=$vehicleType, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): DataMode = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is DataMode && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is RouteStatCreateParams &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int = Objects.hash(body, additionalHeaders, additionalQueryParams)

    override fun toString() =
        "RouteStatCreateParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
