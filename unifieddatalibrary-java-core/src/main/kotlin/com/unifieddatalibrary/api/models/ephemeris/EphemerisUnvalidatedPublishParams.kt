// File generated from our OpenAPI spec by Stainless.

package com.unifieddatalibrary.api.models.ephemeris

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.unifieddatalibrary.api.core.Enum
import com.unifieddatalibrary.api.core.ExcludeMissing
import com.unifieddatalibrary.api.core.JsonField
import com.unifieddatalibrary.api.core.JsonMissing
import com.unifieddatalibrary.api.core.JsonValue
import com.unifieddatalibrary.api.core.Params
import com.unifieddatalibrary.api.core.checkKnown
import com.unifieddatalibrary.api.core.checkRequired
import com.unifieddatalibrary.api.core.http.Headers
import com.unifieddatalibrary.api.core.http.QueryParams
import com.unifieddatalibrary.api.core.toImmutable
import com.unifieddatalibrary.api.errors.UnifieddatalibraryInvalidDataException
import java.time.OffsetDateTime
import java.util.Collections
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * Service operation to take a single EphemerisSet and many associated Ephemeris records as a POST
 * body for ingest into the database. A specific role is required to perform this service operation.
 * Please contact the UDL team for assistance.
 *
 * The following rules apply to this operation:
 *
 * <h3>
 * * Ephemeris Set numPoints value must correspond exactly to the number of Ephemeris states
 *   associated with that Ephemeris Set. The numPoints value is checked against the actual posted
 *   number of states and mismatch will result in the post being rejected.
 * * Ephemeris Set pointStartTime and pointEndTime must correspond to the earliest and latest state
 *   times, respectively, of the associated Ephemeris states.
 * * Either satNo, idOnOrbit, or origObjectId must be provided. The preferred option is to post with
 *   satNo for a cataloged object, and with (only) origObjectId for an unknown, uncatalogued, or
 *   internal/test object. There are several cases for the logic associated with these fields:
 *     + If satNo is provided and correlates to a known UDL sat number then the idOnOrbit will be
 *       populated appropriately in addition to the satNo.
 *     + If satNo is provided and does not correlate to a known UDL sat number then the provided
 *       satNo value will be moved to the origObjectId field and satNo left null.
 *     + If origObjectId and a valid satNo or idOnOrbit are provided then both the satNo/idOnOrbit
 *       and origObjectId will maintain the provided values.
 *     + If only origObjectId is provided then origObjectId will be populated with the posted value.
 *       In this case, no checks are made against existing UDL sat numbers. </h3>
 */
class EphemerisUnvalidatedPublishParams
private constructor(
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    /**
     * The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun category(): String = body.category()

    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun classificationMarking(): String = body.classificationMarking()

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun dataMode(): DataMode = body.dataMode()

    /**
     * Number of points contained in the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun numPoints(): Int = body.numPoints()

    /**
     * End time/last time point of the ephemeris, in ISO 8601 UTC format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun pointEndTime(): OffsetDateTime = body.pointEndTime()

    /**
     * Start time/first time point of the ephemeris, in ISO 8601 UTC format.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun pointStartTime(): OffsetDateTime = body.pointStartTime()

    /**
     * Source of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun source(): String = body.source()

    /**
     * The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type or is
     *   unexpectedly missing or null (e.g. if the server responded with an unexpected value).
     */
    fun type(): String = body.type()

    /**
     * Unique identifier of the record, auto-generated by the system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun id(): Optional<String> = body.id()

    /**
     * First derivative of ballistic coefficient (m^2/kg-s).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun bDot(): Optional<Double> = body.bDot()

    /**
     * The Central Body of the ephemeris. Assumed to be Earth, unless otherwise indicated.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun centBody(): Optional<String> = body.centBody()

    /**
     * Additional source provided comments associated with the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun comments(): Optional<String> = body.comments()

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is
     * assumed to be J2000.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun covReferenceFrame(): Optional<CovReferenceFrame> = body.covReferenceFrame()

    /**
     * Time the row was created in the database, in UTC.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdAt(): Optional<OffsetDateTime> = body.createdAt()

    /**
     * Application user who created the row in the database.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun createdBy(): Optional<String> = body.createdBy()

    /**
     * Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were
     * generated using the last observation available.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun description(): Optional<String> = body.description()

    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun descriptor(): Optional<String> = body.descriptor()

    /**
     * Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun dragModel(): Optional<String> = body.dragModel()

    /**
     * Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun edr(): Optional<Double> = body.edr()

    /**
     * The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is
     * associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun ephemerisList(): Optional<List<EphemerisList>> = body.ephemerisList()

    /**
     * Filename of the raw file used to provide the ephemeris data including filetype extension, if
     * applicable. This file may be retrieved using the 'getFile' operation as specified in the
     * 'EphemerisSet' OpenAPI docs.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun filename(): Optional<String> = body.filename()

    /**
     * Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3),
     * including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun geopotentialModel(): Optional<String> = body.geopotentialModel()

    /**
     * Boolean indicating whether acceleration data is provided with the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun hasAccel(): Optional<Boolean> = body.hasAccel()

    /**
     * Boolean indicating whether covariance data is provided with the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun hasCov(): Optional<Boolean> = body.hasCov()

    /**
     * Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun hasMnvr(): Optional<Boolean> = body.hasMnvr()

    /**
     * Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idManeuvers(): Optional<List<String>> = body.idManeuvers()

    /**
     * Unique identifier of the primary satellite on-orbit object.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idOnOrbit(): Optional<String> = body.idOnOrbit()

    /**
     * ID of the State Vector used to generate the ephemeris.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun idStateVector(): Optional<String> = body.idStateVector()

    /**
     * Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun integrator(): Optional<String> = body.integrator()

    /**
     * The recommended interpolation method for the ephemeris data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun interpolation(): Optional<String> = body.interpolation()

    /**
     * The recommended interpolation degree for the ephemeris data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun interpolationDegree(): Optional<Int> = body.interpolationDegree()

    /**
     * Boolean indicating use of lunar/solar data in ephemeris generation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun lunarSolar(): Optional<Boolean> = body.lunarSolar()

    /**
     * Originating system or organization which produced the data, if different from the source. The
     * origin may be different than the source if the source was a mediating system which forwarded
     * the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origin(): Optional<String> = body.origin()

    /**
     * The originating source network on which this record was created, auto-populated by the
     * system.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origNetwork(): Optional<String> = body.origNetwork()

    /**
     * Optional identifier provided by ephemeris source to indicate the target object of this
     * ephemeris. This may be an internal identifier and not necessarily map to a valid satellite
     * number.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun origObjectId(): Optional<String> = body.origObjectId()

    /**
     * The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER,
     * GPS, HYBRID, PROPAGATED, RANGING, SLR).
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun pedigree(): Optional<String> = body.pedigree()

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is null it is
     * assumed to be J2000.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun referenceFrame(): Optional<ReferenceFrame> = body.referenceFrame()

    /**
     * Satellite/catalog number of the target on-orbit object.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun satNo(): Optional<Int> = body.satNo()

    /**
     * Boolean indicating use of solid earth tide data in ephemeris generation.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun solidEarthTides(): Optional<Boolean> = body.solidEarthTides()

    /**
     * Ephemeris step size, in seconds.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun stepSize(): Optional<Long> = body.stepSize()

    /**
     * Optional array of provider/source specific tags for this data, where each element is no
     * longer than 32 characters, used for implementing data owner conditional access controls to
     * restrict access to the data. Should be left null by data providers unless conditional access
     * controls are coordinated with the UDL team.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun tags(): Optional<List<String>> = body.tags()

    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this
     * data.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun transactionId(): Optional<String> = body.transactionId()

    /**
     * Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with
     * microsecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun usableEndTime(): Optional<OffsetDateTime> = body.usableEndTime()

    /**
     * Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format
     * with microsecond precision.
     *
     * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type (e.g.
     *   if the server responded with an unexpected value).
     */
    fun usableStartTime(): Optional<OffsetDateTime> = body.usableStartTime()

    /**
     * Returns the raw JSON value of [category].
     *
     * Unlike [category], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _category(): JsonField<String> = body._category()

    /**
     * Returns the raw JSON value of [classificationMarking].
     *
     * Unlike [classificationMarking], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _classificationMarking(): JsonField<String> = body._classificationMarking()

    /**
     * Returns the raw JSON value of [dataMode].
     *
     * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dataMode(): JsonField<DataMode> = body._dataMode()

    /**
     * Returns the raw JSON value of [numPoints].
     *
     * Unlike [numPoints], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _numPoints(): JsonField<Int> = body._numPoints()

    /**
     * Returns the raw JSON value of [pointEndTime].
     *
     * Unlike [pointEndTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _pointEndTime(): JsonField<OffsetDateTime> = body._pointEndTime()

    /**
     * Returns the raw JSON value of [pointStartTime].
     *
     * Unlike [pointStartTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _pointStartTime(): JsonField<OffsetDateTime> = body._pointStartTime()

    /**
     * Returns the raw JSON value of [source].
     *
     * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _source(): JsonField<String> = body._source()

    /**
     * Returns the raw JSON value of [type].
     *
     * Unlike [type], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _type(): JsonField<String> = body._type()

    /**
     * Returns the raw JSON value of [id].
     *
     * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _id(): JsonField<String> = body._id()

    /**
     * Returns the raw JSON value of [bDot].
     *
     * Unlike [bDot], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _bDot(): JsonField<Double> = body._bDot()

    /**
     * Returns the raw JSON value of [centBody].
     *
     * Unlike [centBody], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _centBody(): JsonField<String> = body._centBody()

    /**
     * Returns the raw JSON value of [comments].
     *
     * Unlike [comments], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _comments(): JsonField<String> = body._comments()

    /**
     * Returns the raw JSON value of [covReferenceFrame].
     *
     * Unlike [covReferenceFrame], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _covReferenceFrame(): JsonField<CovReferenceFrame> = body._covReferenceFrame()

    /**
     * Returns the raw JSON value of [createdAt].
     *
     * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdAt(): JsonField<OffsetDateTime> = body._createdAt()

    /**
     * Returns the raw JSON value of [createdBy].
     *
     * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _createdBy(): JsonField<String> = body._createdBy()

    /**
     * Returns the raw JSON value of [description].
     *
     * Unlike [description], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _description(): JsonField<String> = body._description()

    /**
     * Returns the raw JSON value of [descriptor].
     *
     * Unlike [descriptor], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _descriptor(): JsonField<String> = body._descriptor()

    /**
     * Returns the raw JSON value of [dragModel].
     *
     * Unlike [dragModel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _dragModel(): JsonField<String> = body._dragModel()

    /**
     * Returns the raw JSON value of [edr].
     *
     * Unlike [edr], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _edr(): JsonField<Double> = body._edr()

    /**
     * Returns the raw JSON value of [ephemerisList].
     *
     * Unlike [ephemerisList], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _ephemerisList(): JsonField<List<EphemerisList>> = body._ephemerisList()

    /**
     * Returns the raw JSON value of [filename].
     *
     * Unlike [filename], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _filename(): JsonField<String> = body._filename()

    /**
     * Returns the raw JSON value of [geopotentialModel].
     *
     * Unlike [geopotentialModel], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _geopotentialModel(): JsonField<String> = body._geopotentialModel()

    /**
     * Returns the raw JSON value of [hasAccel].
     *
     * Unlike [hasAccel], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _hasAccel(): JsonField<Boolean> = body._hasAccel()

    /**
     * Returns the raw JSON value of [hasCov].
     *
     * Unlike [hasCov], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _hasCov(): JsonField<Boolean> = body._hasCov()

    /**
     * Returns the raw JSON value of [hasMnvr].
     *
     * Unlike [hasMnvr], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _hasMnvr(): JsonField<Boolean> = body._hasMnvr()

    /**
     * Returns the raw JSON value of [idManeuvers].
     *
     * Unlike [idManeuvers], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idManeuvers(): JsonField<List<String>> = body._idManeuvers()

    /**
     * Returns the raw JSON value of [idOnOrbit].
     *
     * Unlike [idOnOrbit], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idOnOrbit(): JsonField<String> = body._idOnOrbit()

    /**
     * Returns the raw JSON value of [idStateVector].
     *
     * Unlike [idStateVector], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _idStateVector(): JsonField<String> = body._idStateVector()

    /**
     * Returns the raw JSON value of [integrator].
     *
     * Unlike [integrator], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _integrator(): JsonField<String> = body._integrator()

    /**
     * Returns the raw JSON value of [interpolation].
     *
     * Unlike [interpolation], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _interpolation(): JsonField<String> = body._interpolation()

    /**
     * Returns the raw JSON value of [interpolationDegree].
     *
     * Unlike [interpolationDegree], this method doesn't throw if the JSON field has an unexpected
     * type.
     */
    fun _interpolationDegree(): JsonField<Int> = body._interpolationDegree()

    /**
     * Returns the raw JSON value of [lunarSolar].
     *
     * Unlike [lunarSolar], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _lunarSolar(): JsonField<Boolean> = body._lunarSolar()

    /**
     * Returns the raw JSON value of [origin].
     *
     * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origin(): JsonField<String> = body._origin()

    /**
     * Returns the raw JSON value of [origNetwork].
     *
     * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origNetwork(): JsonField<String> = body._origNetwork()

    /**
     * Returns the raw JSON value of [origObjectId].
     *
     * Unlike [origObjectId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _origObjectId(): JsonField<String> = body._origObjectId()

    /**
     * Returns the raw JSON value of [pedigree].
     *
     * Unlike [pedigree], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _pedigree(): JsonField<String> = body._pedigree()

    /**
     * Returns the raw JSON value of [referenceFrame].
     *
     * Unlike [referenceFrame], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _referenceFrame(): JsonField<ReferenceFrame> = body._referenceFrame()

    /**
     * Returns the raw JSON value of [satNo].
     *
     * Unlike [satNo], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _satNo(): JsonField<Int> = body._satNo()

    /**
     * Returns the raw JSON value of [solidEarthTides].
     *
     * Unlike [solidEarthTides], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _solidEarthTides(): JsonField<Boolean> = body._solidEarthTides()

    /**
     * Returns the raw JSON value of [stepSize].
     *
     * Unlike [stepSize], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _stepSize(): JsonField<Long> = body._stepSize()

    /**
     * Returns the raw JSON value of [tags].
     *
     * Unlike [tags], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _tags(): JsonField<List<String>> = body._tags()

    /**
     * Returns the raw JSON value of [transactionId].
     *
     * Unlike [transactionId], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _transactionId(): JsonField<String> = body._transactionId()

    /**
     * Returns the raw JSON value of [usableEndTime].
     *
     * Unlike [usableEndTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _usableEndTime(): JsonField<OffsetDateTime> = body._usableEndTime()

    /**
     * Returns the raw JSON value of [usableStartTime].
     *
     * Unlike [usableStartTime], this method doesn't throw if the JSON field has an unexpected type.
     */
    fun _usableStartTime(): JsonField<OffsetDateTime> = body._usableStartTime()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    /** Additional headers to send with the request. */
    fun _additionalHeaders(): Headers = additionalHeaders

    /** Additional query param to send with the request. */
    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    fun toBuilder() = Builder().from(this)

    companion object {

        /**
         * Returns a mutable builder for constructing an instance of
         * [EphemerisUnvalidatedPublishParams].
         *
         * The following fields are required:
         * ```java
         * .category()
         * .classificationMarking()
         * .dataMode()
         * .numPoints()
         * .pointEndTime()
         * .pointStartTime()
         * .source()
         * .type()
         * ```
         */
        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [EphemerisUnvalidatedPublishParams]. */
    class Builder internal constructor() {

        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(ephemerisUnvalidatedPublishParams: EphemerisUnvalidatedPublishParams) =
            apply {
                body = ephemerisUnvalidatedPublishParams.body.toBuilder()
                additionalHeaders = ephemerisUnvalidatedPublishParams.additionalHeaders.toBuilder()
                additionalQueryParams =
                    ephemerisUnvalidatedPublishParams.additionalQueryParams.toBuilder()
            }

        /**
         * Sets the entire request body.
         *
         * This is generally only useful if you are already constructing the body separately.
         * Otherwise, it's more convenient to use the top-level setters instead:
         * - [category]
         * - [classificationMarking]
         * - [dataMode]
         * - [numPoints]
         * - [pointEndTime]
         * - etc.
         */
        fun body(body: Body) = apply { this.body = body.toBuilder() }

        /** The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL). */
        fun category(category: String) = apply { body.category(category) }

        /**
         * Sets [Builder.category] to an arbitrary JSON value.
         *
         * You should usually call [Builder.category] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun category(category: JsonField<String>) = apply { body.category(category) }

        /** Classification marking of the data in IC/CAPCO Portion-marked format. */
        fun classificationMarking(classificationMarking: String) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Sets [Builder.classificationMarking] to an arbitrary JSON value.
         *
         * You should usually call [Builder.classificationMarking] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun classificationMarking(classificationMarking: JsonField<String>) = apply {
            body.classificationMarking(classificationMarking)
        }

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        fun dataMode(dataMode: DataMode) = apply { body.dataMode(dataMode) }

        /**
         * Sets [Builder.dataMode] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dataMode] with a well-typed [DataMode] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dataMode(dataMode: JsonField<DataMode>) = apply { body.dataMode(dataMode) }

        /** Number of points contained in the ephemeris. */
        fun numPoints(numPoints: Int) = apply { body.numPoints(numPoints) }

        /**
         * Sets [Builder.numPoints] to an arbitrary JSON value.
         *
         * You should usually call [Builder.numPoints] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun numPoints(numPoints: JsonField<Int>) = apply { body.numPoints(numPoints) }

        /** End time/last time point of the ephemeris, in ISO 8601 UTC format. */
        fun pointEndTime(pointEndTime: OffsetDateTime) = apply { body.pointEndTime(pointEndTime) }

        /**
         * Sets [Builder.pointEndTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.pointEndTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun pointEndTime(pointEndTime: JsonField<OffsetDateTime>) = apply {
            body.pointEndTime(pointEndTime)
        }

        /** Start time/first time point of the ephemeris, in ISO 8601 UTC format. */
        fun pointStartTime(pointStartTime: OffsetDateTime) = apply {
            body.pointStartTime(pointStartTime)
        }

        /**
         * Sets [Builder.pointStartTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.pointStartTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun pointStartTime(pointStartTime: JsonField<OffsetDateTime>) = apply {
            body.pointStartTime(pointStartTime)
        }

        /** Source of the data. */
        fun source(source: String) = apply { body.source(source) }

        /**
         * Sets [Builder.source] to an arbitrary JSON value.
         *
         * You should usually call [Builder.source] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun source(source: JsonField<String>) = apply { body.source(source) }

        /**
         * The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE,
         * SCREENING).
         */
        fun type(type: String) = apply { body.type(type) }

        /**
         * Sets [Builder.type] to an arbitrary JSON value.
         *
         * You should usually call [Builder.type] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun type(type: JsonField<String>) = apply { body.type(type) }

        /** Unique identifier of the record, auto-generated by the system. */
        fun id(id: String) = apply { body.id(id) }

        /**
         * Sets [Builder.id] to an arbitrary JSON value.
         *
         * You should usually call [Builder.id] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun id(id: JsonField<String>) = apply { body.id(id) }

        /** First derivative of ballistic coefficient (m^2/kg-s). */
        fun bDot(bDot: Double) = apply { body.bDot(bDot) }

        /**
         * Sets [Builder.bDot] to an arbitrary JSON value.
         *
         * You should usually call [Builder.bDot] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun bDot(bDot: JsonField<Double>) = apply { body.bDot(bDot) }

        /** The Central Body of the ephemeris. Assumed to be Earth, unless otherwise indicated. */
        fun centBody(centBody: String) = apply { body.centBody(centBody) }

        /**
         * Sets [Builder.centBody] to an arbitrary JSON value.
         *
         * You should usually call [Builder.centBody] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun centBody(centBody: JsonField<String>) = apply { body.centBody(centBody) }

        /** Additional source provided comments associated with the ephemeris. */
        fun comments(comments: String) = apply { body.comments(comments) }

        /**
         * Sets [Builder.comments] to an arbitrary JSON value.
         *
         * You should usually call [Builder.comments] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun comments(comments: JsonField<String>) = apply { body.comments(comments) }

        /**
         * The reference frame of the covariance matrix elements. If the covReferenceFrame is null
         * it is assumed to be J2000.
         */
        fun covReferenceFrame(covReferenceFrame: CovReferenceFrame) = apply {
            body.covReferenceFrame(covReferenceFrame)
        }

        /**
         * Sets [Builder.covReferenceFrame] to an arbitrary JSON value.
         *
         * You should usually call [Builder.covReferenceFrame] with a well-typed [CovReferenceFrame]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun covReferenceFrame(covReferenceFrame: JsonField<CovReferenceFrame>) = apply {
            body.covReferenceFrame(covReferenceFrame)
        }

        /** Time the row was created in the database, in UTC. */
        fun createdAt(createdAt: OffsetDateTime) = apply { body.createdAt(createdAt) }

        /**
         * Sets [Builder.createdAt] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { body.createdAt(createdAt) }

        /** Application user who created the row in the database. */
        fun createdBy(createdBy: String) = apply { body.createdBy(createdBy) }

        /**
         * Sets [Builder.createdBy] to an arbitrary JSON value.
         *
         * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun createdBy(createdBy: JsonField<String>) = apply { body.createdBy(createdBy) }

        /**
         * Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris
         * were generated using the last observation available.
         */
        fun description(description: String) = apply { body.description(description) }

        /**
         * Sets [Builder.description] to an arbitrary JSON value.
         *
         * You should usually call [Builder.description] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun description(description: JsonField<String>) = apply { body.description(description) }

        /** Optional source-provided and searchable metadata or descriptor of the data. */
        fun descriptor(descriptor: String) = apply { body.descriptor(descriptor) }

        /**
         * Sets [Builder.descriptor] to an arbitrary JSON value.
         *
         * You should usually call [Builder.descriptor] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun descriptor(descriptor: JsonField<String>) = apply { body.descriptor(descriptor) }

        /** Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.). */
        fun dragModel(dragModel: String) = apply { body.dragModel(dragModel) }

        /**
         * Sets [Builder.dragModel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.dragModel] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun dragModel(dragModel: JsonField<String>) = apply { body.dragModel(dragModel) }

        /** Model parameter value for energy dissipation rate (EDR), expressed in w/kg. */
        fun edr(edr: Double) = apply { body.edr(edr) }

        /**
         * Sets [Builder.edr] to an arbitrary JSON value.
         *
         * You should usually call [Builder.edr] with a well-typed [Double] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun edr(edr: JsonField<Double>) = apply { body.edr(edr) }

        /**
         * The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is
         * associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
         */
        fun ephemerisList(ephemerisList: List<EphemerisList>) = apply {
            body.ephemerisList(ephemerisList)
        }

        /**
         * Sets [Builder.ephemerisList] to an arbitrary JSON value.
         *
         * You should usually call [Builder.ephemerisList] with a well-typed `List<EphemerisList>`
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun ephemerisList(ephemerisList: JsonField<List<EphemerisList>>) = apply {
            body.ephemerisList(ephemerisList)
        }

        /**
         * Adds a single [EphemerisList] to [Builder.ephemerisList].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addEphemerisList(ephemerisList: EphemerisList) = apply {
            body.addEphemerisList(ephemerisList)
        }

        /**
         * Filename of the raw file used to provide the ephemeris data including filetype extension,
         * if applicable. This file may be retrieved using the 'getFile' operation as specified in
         * the 'EphemerisSet' OpenAPI docs.
         */
        fun filename(filename: String) = apply { body.filename(filename) }

        /**
         * Sets [Builder.filename] to an arbitrary JSON value.
         *
         * You should usually call [Builder.filename] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun filename(filename: JsonField<String>) = apply { body.filename(filename) }

        /**
         * Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2,
         * GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
         */
        fun geopotentialModel(geopotentialModel: String) = apply {
            body.geopotentialModel(geopotentialModel)
        }

        /**
         * Sets [Builder.geopotentialModel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.geopotentialModel] with a well-typed [String] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun geopotentialModel(geopotentialModel: JsonField<String>) = apply {
            body.geopotentialModel(geopotentialModel)
        }

        /** Boolean indicating whether acceleration data is provided with the ephemeris. */
        fun hasAccel(hasAccel: Boolean) = apply { body.hasAccel(hasAccel) }

        /**
         * Sets [Builder.hasAccel] to an arbitrary JSON value.
         *
         * You should usually call [Builder.hasAccel] with a well-typed [Boolean] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun hasAccel(hasAccel: JsonField<Boolean>) = apply { body.hasAccel(hasAccel) }

        /** Boolean indicating whether covariance data is provided with the ephemeris. */
        fun hasCov(hasCov: Boolean) = apply { body.hasCov(hasCov) }

        /**
         * Sets [Builder.hasCov] to an arbitrary JSON value.
         *
         * You should usually call [Builder.hasCov] with a well-typed [Boolean] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun hasCov(hasCov: JsonField<Boolean>) = apply { body.hasCov(hasCov) }

        /** Boolean indicating whether maneuver(s) are incorporated into the ephemeris. */
        fun hasMnvr(hasMnvr: Boolean) = apply { body.hasMnvr(hasMnvr) }

        /**
         * Sets [Builder.hasMnvr] to an arbitrary JSON value.
         *
         * You should usually call [Builder.hasMnvr] with a well-typed [Boolean] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun hasMnvr(hasMnvr: JsonField<Boolean>) = apply { body.hasMnvr(hasMnvr) }

        /** Array of the maneuver IDs of all maneuvers incorporated in the ephemeris. */
        fun idManeuvers(idManeuvers: List<String>) = apply { body.idManeuvers(idManeuvers) }

        /**
         * Sets [Builder.idManeuvers] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idManeuvers] with a well-typed `List<String>` value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun idManeuvers(idManeuvers: JsonField<List<String>>) = apply {
            body.idManeuvers(idManeuvers)
        }

        /**
         * Adds a single [String] to [idManeuvers].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addIdManeuver(idManeuver: String) = apply { body.addIdManeuver(idManeuver) }

        /** Unique identifier of the primary satellite on-orbit object. */
        fun idOnOrbit(idOnOrbit: String) = apply { body.idOnOrbit(idOnOrbit) }

        /**
         * Sets [Builder.idOnOrbit] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idOnOrbit] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idOnOrbit(idOnOrbit: JsonField<String>) = apply { body.idOnOrbit(idOnOrbit) }

        /** ID of the State Vector used to generate the ephemeris. */
        fun idStateVector(idStateVector: String) = apply { body.idStateVector(idStateVector) }

        /**
         * Sets [Builder.idStateVector] to an arbitrary JSON value.
         *
         * You should usually call [Builder.idStateVector] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun idStateVector(idStateVector: JsonField<String>) = apply {
            body.idStateVector(idStateVector)
        }

        /** Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY). */
        fun integrator(integrator: String) = apply { body.integrator(integrator) }

        /**
         * Sets [Builder.integrator] to an arbitrary JSON value.
         *
         * You should usually call [Builder.integrator] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun integrator(integrator: JsonField<String>) = apply { body.integrator(integrator) }

        /** The recommended interpolation method for the ephemeris data. */
        fun interpolation(interpolation: String) = apply { body.interpolation(interpolation) }

        /**
         * Sets [Builder.interpolation] to an arbitrary JSON value.
         *
         * You should usually call [Builder.interpolation] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun interpolation(interpolation: JsonField<String>) = apply {
            body.interpolation(interpolation)
        }

        /** The recommended interpolation degree for the ephemeris data. */
        fun interpolationDegree(interpolationDegree: Int) = apply {
            body.interpolationDegree(interpolationDegree)
        }

        /**
         * Sets [Builder.interpolationDegree] to an arbitrary JSON value.
         *
         * You should usually call [Builder.interpolationDegree] with a well-typed [Int] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun interpolationDegree(interpolationDegree: JsonField<Int>) = apply {
            body.interpolationDegree(interpolationDegree)
        }

        /** Boolean indicating use of lunar/solar data in ephemeris generation. */
        fun lunarSolar(lunarSolar: Boolean) = apply { body.lunarSolar(lunarSolar) }

        /**
         * Sets [Builder.lunarSolar] to an arbitrary JSON value.
         *
         * You should usually call [Builder.lunarSolar] with a well-typed [Boolean] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun lunarSolar(lunarSolar: JsonField<Boolean>) = apply { body.lunarSolar(lunarSolar) }

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         */
        fun origin(origin: String) = apply { body.origin(origin) }

        /**
         * Sets [Builder.origin] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origin] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun origin(origin: JsonField<String>) = apply { body.origin(origin) }

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         */
        fun origNetwork(origNetwork: String) = apply { body.origNetwork(origNetwork) }

        /**
         * Sets [Builder.origNetwork] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origNetwork] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origNetwork(origNetwork: JsonField<String>) = apply { body.origNetwork(origNetwork) }

        /**
         * Optional identifier provided by ephemeris source to indicate the target object of this
         * ephemeris. This may be an internal identifier and not necessarily map to a valid
         * satellite number.
         */
        fun origObjectId(origObjectId: String) = apply { body.origObjectId(origObjectId) }

        /**
         * Sets [Builder.origObjectId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.origObjectId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun origObjectId(origObjectId: JsonField<String>) = apply {
            body.origObjectId(origObjectId)
        }

        /**
         * The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER,
         * GPS, HYBRID, PROPAGATED, RANGING, SLR).
         */
        fun pedigree(pedigree: String) = apply { body.pedigree(pedigree) }

        /**
         * Sets [Builder.pedigree] to an arbitrary JSON value.
         *
         * You should usually call [Builder.pedigree] with a well-typed [String] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun pedigree(pedigree: JsonField<String>) = apply { body.pedigree(pedigree) }

        /**
         * The reference frame of the cartesian orbital states. If the referenceFrame is null it is
         * assumed to be J2000.
         */
        fun referenceFrame(referenceFrame: ReferenceFrame) = apply {
            body.referenceFrame(referenceFrame)
        }

        /**
         * Sets [Builder.referenceFrame] to an arbitrary JSON value.
         *
         * You should usually call [Builder.referenceFrame] with a well-typed [ReferenceFrame] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun referenceFrame(referenceFrame: JsonField<ReferenceFrame>) = apply {
            body.referenceFrame(referenceFrame)
        }

        /** Satellite/catalog number of the target on-orbit object. */
        fun satNo(satNo: Int) = apply { body.satNo(satNo) }

        /**
         * Sets [Builder.satNo] to an arbitrary JSON value.
         *
         * You should usually call [Builder.satNo] with a well-typed [Int] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun satNo(satNo: JsonField<Int>) = apply { body.satNo(satNo) }

        /** Boolean indicating use of solid earth tide data in ephemeris generation. */
        fun solidEarthTides(solidEarthTides: Boolean) = apply {
            body.solidEarthTides(solidEarthTides)
        }

        /**
         * Sets [Builder.solidEarthTides] to an arbitrary JSON value.
         *
         * You should usually call [Builder.solidEarthTides] with a well-typed [Boolean] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun solidEarthTides(solidEarthTides: JsonField<Boolean>) = apply {
            body.solidEarthTides(solidEarthTides)
        }

        /** Ephemeris step size, in seconds. */
        fun stepSize(stepSize: Long) = apply { body.stepSize(stepSize) }

        /**
         * Sets [Builder.stepSize] to an arbitrary JSON value.
         *
         * You should usually call [Builder.stepSize] with a well-typed [Long] value instead. This
         * method is primarily for setting the field to an undocumented or not yet supported value.
         */
        fun stepSize(stepSize: JsonField<Long>) = apply { body.stepSize(stepSize) }

        /**
         * Optional array of provider/source specific tags for this data, where each element is no
         * longer than 32 characters, used for implementing data owner conditional access controls
         * to restrict access to the data. Should be left null by data providers unless conditional
         * access controls are coordinated with the UDL team.
         */
        fun tags(tags: List<String>) = apply { body.tags(tags) }

        /**
         * Sets [Builder.tags] to an arbitrary JSON value.
         *
         * You should usually call [Builder.tags] with a well-typed `List<String>` value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun tags(tags: JsonField<List<String>>) = apply { body.tags(tags) }

        /**
         * Adds a single [String] to [tags].
         *
         * @throws IllegalStateException if the field was previously set to a non-list.
         */
        fun addTag(tag: String) = apply { body.addTag(tag) }

        /**
         * Optional identifier to track a commercial or marketplace transaction executed to produce
         * this data.
         */
        fun transactionId(transactionId: String) = apply { body.transactionId(transactionId) }

        /**
         * Sets [Builder.transactionId] to an arbitrary JSON value.
         *
         * You should usually call [Builder.transactionId] with a well-typed [String] value instead.
         * This method is primarily for setting the field to an undocumented or not yet supported
         * value.
         */
        fun transactionId(transactionId: JsonField<String>) = apply {
            body.transactionId(transactionId)
        }

        /**
         * Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format
         * with microsecond precision.
         */
        fun usableEndTime(usableEndTime: OffsetDateTime) = apply {
            body.usableEndTime(usableEndTime)
        }

        /**
         * Sets [Builder.usableEndTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.usableEndTime] with a well-typed [OffsetDateTime] value
         * instead. This method is primarily for setting the field to an undocumented or not yet
         * supported value.
         */
        fun usableEndTime(usableEndTime: JsonField<OffsetDateTime>) = apply {
            body.usableEndTime(usableEndTime)
        }

        /**
         * Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC
         * format with microsecond precision.
         */
        fun usableStartTime(usableStartTime: OffsetDateTime) = apply {
            body.usableStartTime(usableStartTime)
        }

        /**
         * Sets [Builder.usableStartTime] to an arbitrary JSON value.
         *
         * You should usually call [Builder.usableStartTime] with a well-typed [OffsetDateTime]
         * value instead. This method is primarily for setting the field to an undocumented or not
         * yet supported value.
         */
        fun usableStartTime(usableStartTime: JsonField<OffsetDateTime>) = apply {
            body.usableStartTime(usableStartTime)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        /**
         * Returns an immutable instance of [EphemerisUnvalidatedPublishParams].
         *
         * Further updates to this [Builder] will not mutate the returned instance.
         *
         * The following fields are required:
         * ```java
         * .category()
         * .classificationMarking()
         * .dataMode()
         * .numPoints()
         * .pointEndTime()
         * .pointStartTime()
         * .source()
         * .type()
         * ```
         *
         * @throws IllegalStateException if any required field is unset.
         */
        fun build(): EphemerisUnvalidatedPublishParams =
            EphemerisUnvalidatedPublishParams(
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    /**
     * EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data
     * indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically
     * distributed in a flat file containing details of the ephemeris generation as well as a large
     * collection of individual points at varying time steps. EphemerisSet is analogous to this flat
     * file.
     */
    class Body
    private constructor(
        private val category: JsonField<String>,
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val numPoints: JsonField<Int>,
        private val pointEndTime: JsonField<OffsetDateTime>,
        private val pointStartTime: JsonField<OffsetDateTime>,
        private val source: JsonField<String>,
        private val type: JsonField<String>,
        private val id: JsonField<String>,
        private val bDot: JsonField<Double>,
        private val centBody: JsonField<String>,
        private val comments: JsonField<String>,
        private val covReferenceFrame: JsonField<CovReferenceFrame>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val description: JsonField<String>,
        private val descriptor: JsonField<String>,
        private val dragModel: JsonField<String>,
        private val edr: JsonField<Double>,
        private val ephemerisList: JsonField<List<EphemerisList>>,
        private val filename: JsonField<String>,
        private val geopotentialModel: JsonField<String>,
        private val hasAccel: JsonField<Boolean>,
        private val hasCov: JsonField<Boolean>,
        private val hasMnvr: JsonField<Boolean>,
        private val idManeuvers: JsonField<List<String>>,
        private val idOnOrbit: JsonField<String>,
        private val idStateVector: JsonField<String>,
        private val integrator: JsonField<String>,
        private val interpolation: JsonField<String>,
        private val interpolationDegree: JsonField<Int>,
        private val lunarSolar: JsonField<Boolean>,
        private val origin: JsonField<String>,
        private val origNetwork: JsonField<String>,
        private val origObjectId: JsonField<String>,
        private val pedigree: JsonField<String>,
        private val referenceFrame: JsonField<ReferenceFrame>,
        private val satNo: JsonField<Int>,
        private val solidEarthTides: JsonField<Boolean>,
        private val stepSize: JsonField<Long>,
        private val tags: JsonField<List<String>>,
        private val transactionId: JsonField<String>,
        private val usableEndTime: JsonField<OffsetDateTime>,
        private val usableStartTime: JsonField<OffsetDateTime>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("category")
            @ExcludeMissing
            category: JsonField<String> = JsonMissing.of(),
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("numPoints") @ExcludeMissing numPoints: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("pointEndTime")
            @ExcludeMissing
            pointEndTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("pointStartTime")
            @ExcludeMissing
            pointStartTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("type") @ExcludeMissing type: JsonField<String> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("bDot") @ExcludeMissing bDot: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("centBody")
            @ExcludeMissing
            centBody: JsonField<String> = JsonMissing.of(),
            @JsonProperty("comments")
            @ExcludeMissing
            comments: JsonField<String> = JsonMissing.of(),
            @JsonProperty("covReferenceFrame")
            @ExcludeMissing
            covReferenceFrame: JsonField<CovReferenceFrame> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("description")
            @ExcludeMissing
            description: JsonField<String> = JsonMissing.of(),
            @JsonProperty("descriptor")
            @ExcludeMissing
            descriptor: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dragModel")
            @ExcludeMissing
            dragModel: JsonField<String> = JsonMissing.of(),
            @JsonProperty("edr") @ExcludeMissing edr: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("ephemerisList")
            @ExcludeMissing
            ephemerisList: JsonField<List<EphemerisList>> = JsonMissing.of(),
            @JsonProperty("filename")
            @ExcludeMissing
            filename: JsonField<String> = JsonMissing.of(),
            @JsonProperty("geopotentialModel")
            @ExcludeMissing
            geopotentialModel: JsonField<String> = JsonMissing.of(),
            @JsonProperty("hasAccel")
            @ExcludeMissing
            hasAccel: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("hasCov") @ExcludeMissing hasCov: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("hasMnvr") @ExcludeMissing hasMnvr: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("idManeuvers")
            @ExcludeMissing
            idManeuvers: JsonField<List<String>> = JsonMissing.of(),
            @JsonProperty("idOnOrbit")
            @ExcludeMissing
            idOnOrbit: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idStateVector")
            @ExcludeMissing
            idStateVector: JsonField<String> = JsonMissing.of(),
            @JsonProperty("integrator")
            @ExcludeMissing
            integrator: JsonField<String> = JsonMissing.of(),
            @JsonProperty("interpolation")
            @ExcludeMissing
            interpolation: JsonField<String> = JsonMissing.of(),
            @JsonProperty("interpolationDegree")
            @ExcludeMissing
            interpolationDegree: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("lunarSolar")
            @ExcludeMissing
            lunarSolar: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origNetwork")
            @ExcludeMissing
            origNetwork: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origObjectId")
            @ExcludeMissing
            origObjectId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("pedigree")
            @ExcludeMissing
            pedigree: JsonField<String> = JsonMissing.of(),
            @JsonProperty("referenceFrame")
            @ExcludeMissing
            referenceFrame: JsonField<ReferenceFrame> = JsonMissing.of(),
            @JsonProperty("satNo") @ExcludeMissing satNo: JsonField<Int> = JsonMissing.of(),
            @JsonProperty("solidEarthTides")
            @ExcludeMissing
            solidEarthTides: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("stepSize") @ExcludeMissing stepSize: JsonField<Long> = JsonMissing.of(),
            @JsonProperty("tags") @ExcludeMissing tags: JsonField<List<String>> = JsonMissing.of(),
            @JsonProperty("transactionId")
            @ExcludeMissing
            transactionId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("usableEndTime")
            @ExcludeMissing
            usableEndTime: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("usableStartTime")
            @ExcludeMissing
            usableStartTime: JsonField<OffsetDateTime> = JsonMissing.of(),
        ) : this(
            category,
            classificationMarking,
            dataMode,
            numPoints,
            pointEndTime,
            pointStartTime,
            source,
            type,
            id,
            bDot,
            centBody,
            comments,
            covReferenceFrame,
            createdAt,
            createdBy,
            description,
            descriptor,
            dragModel,
            edr,
            ephemerisList,
            filename,
            geopotentialModel,
            hasAccel,
            hasCov,
            hasMnvr,
            idManeuvers,
            idOnOrbit,
            idStateVector,
            integrator,
            interpolation,
            interpolationDegree,
            lunarSolar,
            origin,
            origNetwork,
            origObjectId,
            pedigree,
            referenceFrame,
            satNo,
            solidEarthTides,
            stepSize,
            tags,
            transactionId,
            usableEndTime,
            usableStartTime,
            mutableMapOf(),
        )

        /**
         * The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun category(): String = category.getRequired("category")

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * Number of points contained in the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun numPoints(): Int = numPoints.getRequired("numPoints")

        /**
         * End time/last time point of the ephemeris, in ISO 8601 UTC format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun pointEndTime(): OffsetDateTime = pointEndTime.getRequired("pointEndTime")

        /**
         * Start time/first time point of the ephemeris, in ISO 8601 UTC format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun pointStartTime(): OffsetDateTime = pointStartTime.getRequired("pointStartTime")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE,
         * SCREENING).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun type(): String = type.getRequired("type")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun id(): Optional<String> = id.getOptional("id")

        /**
         * First derivative of ballistic coefficient (m^2/kg-s).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun bDot(): Optional<Double> = bDot.getOptional("bDot")

        /**
         * The Central Body of the ephemeris. Assumed to be Earth, unless otherwise indicated.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun centBody(): Optional<String> = centBody.getOptional("centBody")

        /**
         * Additional source provided comments associated with the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun comments(): Optional<String> = comments.getOptional("comments")

        /**
         * The reference frame of the covariance matrix elements. If the covReferenceFrame is null
         * it is assumed to be J2000.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun covReferenceFrame(): Optional<CovReferenceFrame> =
            covReferenceFrame.getOptional("covReferenceFrame")

        /**
         * Time the row was created in the database, in UTC.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris
         * were generated using the last observation available.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun description(): Optional<String> = description.getOptional("description")

        /**
         * Optional source-provided and searchable metadata or descriptor of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun descriptor(): Optional<String> = descriptor.getOptional("descriptor")

        /**
         * Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun dragModel(): Optional<String> = dragModel.getOptional("dragModel")

        /**
         * Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun edr(): Optional<Double> = edr.getOptional("edr")

        /**
         * The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is
         * associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun ephemerisList(): Optional<List<EphemerisList>> =
            ephemerisList.getOptional("ephemerisList")

        /**
         * Filename of the raw file used to provide the ephemeris data including filetype extension,
         * if applicable. This file may be retrieved using the 'getFile' operation as specified in
         * the 'EphemerisSet' OpenAPI docs.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun filename(): Optional<String> = filename.getOptional("filename")

        /**
         * Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2,
         * GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun geopotentialModel(): Optional<String> =
            geopotentialModel.getOptional("geopotentialModel")

        /**
         * Boolean indicating whether acceleration data is provided with the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hasAccel(): Optional<Boolean> = hasAccel.getOptional("hasAccel")

        /**
         * Boolean indicating whether covariance data is provided with the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hasCov(): Optional<Boolean> = hasCov.getOptional("hasCov")

        /**
         * Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun hasMnvr(): Optional<Boolean> = hasMnvr.getOptional("hasMnvr")

        /**
         * Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idManeuvers(): Optional<List<String>> = idManeuvers.getOptional("idManeuvers")

        /**
         * Unique identifier of the primary satellite on-orbit object.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idOnOrbit(): Optional<String> = idOnOrbit.getOptional("idOnOrbit")

        /**
         * ID of the State Vector used to generate the ephemeris.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idStateVector(): Optional<String> = idStateVector.getOptional("idStateVector")

        /**
         * Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun integrator(): Optional<String> = integrator.getOptional("integrator")

        /**
         * The recommended interpolation method for the ephemeris data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun interpolation(): Optional<String> = interpolation.getOptional("interpolation")

        /**
         * The recommended interpolation degree for the ephemeris data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun interpolationDegree(): Optional<Int> =
            interpolationDegree.getOptional("interpolationDegree")

        /**
         * Boolean indicating use of lunar/solar data in ephemeris generation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun lunarSolar(): Optional<Boolean> = lunarSolar.getOptional("lunarSolar")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * The originating source network on which this record was created, auto-populated by the
         * system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origNetwork(): Optional<String> = origNetwork.getOptional("origNetwork")

        /**
         * Optional identifier provided by ephemeris source to indicate the target object of this
         * ephemeris. This may be an internal identifier and not necessarily map to a valid
         * satellite number.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origObjectId(): Optional<String> = origObjectId.getOptional("origObjectId")

        /**
         * The pedigree of the ephemeris or source data used for ephemeris generation (e.g. DOPPLER,
         * GPS, HYBRID, PROPAGATED, RANGING, SLR).
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun pedigree(): Optional<String> = pedigree.getOptional("pedigree")

        /**
         * The reference frame of the cartesian orbital states. If the referenceFrame is null it is
         * assumed to be J2000.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun referenceFrame(): Optional<ReferenceFrame> =
            referenceFrame.getOptional("referenceFrame")

        /**
         * Satellite/catalog number of the target on-orbit object.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun satNo(): Optional<Int> = satNo.getOptional("satNo")

        /**
         * Boolean indicating use of solid earth tide data in ephemeris generation.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun solidEarthTides(): Optional<Boolean> = solidEarthTides.getOptional("solidEarthTides")

        /**
         * Ephemeris step size, in seconds.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun stepSize(): Optional<Long> = stepSize.getOptional("stepSize")

        /**
         * Optional array of provider/source specific tags for this data, where each element is no
         * longer than 32 characters, used for implementing data owner conditional access controls
         * to restrict access to the data. Should be left null by data providers unless conditional
         * access controls are coordinated with the UDL team.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun tags(): Optional<List<String>> = tags.getOptional("tags")

        /**
         * Optional identifier to track a commercial or marketplace transaction executed to produce
         * this data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun transactionId(): Optional<String> = transactionId.getOptional("transactionId")

        /**
         * Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format
         * with microsecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun usableEndTime(): Optional<OffsetDateTime> = usableEndTime.getOptional("usableEndTime")

        /**
         * Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC
         * format with microsecond precision.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun usableStartTime(): Optional<OffsetDateTime> =
            usableStartTime.getOptional("usableStartTime")

        /**
         * Returns the raw JSON value of [category].
         *
         * Unlike [category], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("category") @ExcludeMissing fun _category(): JsonField<String> = category

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [numPoints].
         *
         * Unlike [numPoints], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("numPoints") @ExcludeMissing fun _numPoints(): JsonField<Int> = numPoints

        /**
         * Returns the raw JSON value of [pointEndTime].
         *
         * Unlike [pointEndTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("pointEndTime")
        @ExcludeMissing
        fun _pointEndTime(): JsonField<OffsetDateTime> = pointEndTime

        /**
         * Returns the raw JSON value of [pointStartTime].
         *
         * Unlike [pointStartTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("pointStartTime")
        @ExcludeMissing
        fun _pointStartTime(): JsonField<OffsetDateTime> = pointStartTime

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [type].
         *
         * Unlike [type], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("type") @ExcludeMissing fun _type(): JsonField<String> = type

        /**
         * Returns the raw JSON value of [id].
         *
         * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

        /**
         * Returns the raw JSON value of [bDot].
         *
         * Unlike [bDot], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("bDot") @ExcludeMissing fun _bDot(): JsonField<Double> = bDot

        /**
         * Returns the raw JSON value of [centBody].
         *
         * Unlike [centBody], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("centBody") @ExcludeMissing fun _centBody(): JsonField<String> = centBody

        /**
         * Returns the raw JSON value of [comments].
         *
         * Unlike [comments], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("comments") @ExcludeMissing fun _comments(): JsonField<String> = comments

        /**
         * Returns the raw JSON value of [covReferenceFrame].
         *
         * Unlike [covReferenceFrame], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("covReferenceFrame")
        @ExcludeMissing
        fun _covReferenceFrame(): JsonField<CovReferenceFrame> = covReferenceFrame

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [description].
         *
         * Unlike [description], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("description")
        @ExcludeMissing
        fun _description(): JsonField<String> = description

        /**
         * Returns the raw JSON value of [descriptor].
         *
         * Unlike [descriptor], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("descriptor")
        @ExcludeMissing
        fun _descriptor(): JsonField<String> = descriptor

        /**
         * Returns the raw JSON value of [dragModel].
         *
         * Unlike [dragModel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dragModel") @ExcludeMissing fun _dragModel(): JsonField<String> = dragModel

        /**
         * Returns the raw JSON value of [edr].
         *
         * Unlike [edr], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("edr") @ExcludeMissing fun _edr(): JsonField<Double> = edr

        /**
         * Returns the raw JSON value of [ephemerisList].
         *
         * Unlike [ephemerisList], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("ephemerisList")
        @ExcludeMissing
        fun _ephemerisList(): JsonField<List<EphemerisList>> = ephemerisList

        /**
         * Returns the raw JSON value of [filename].
         *
         * Unlike [filename], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("filename") @ExcludeMissing fun _filename(): JsonField<String> = filename

        /**
         * Returns the raw JSON value of [geopotentialModel].
         *
         * Unlike [geopotentialModel], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("geopotentialModel")
        @ExcludeMissing
        fun _geopotentialModel(): JsonField<String> = geopotentialModel

        /**
         * Returns the raw JSON value of [hasAccel].
         *
         * Unlike [hasAccel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hasAccel") @ExcludeMissing fun _hasAccel(): JsonField<Boolean> = hasAccel

        /**
         * Returns the raw JSON value of [hasCov].
         *
         * Unlike [hasCov], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hasCov") @ExcludeMissing fun _hasCov(): JsonField<Boolean> = hasCov

        /**
         * Returns the raw JSON value of [hasMnvr].
         *
         * Unlike [hasMnvr], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("hasMnvr") @ExcludeMissing fun _hasMnvr(): JsonField<Boolean> = hasMnvr

        /**
         * Returns the raw JSON value of [idManeuvers].
         *
         * Unlike [idManeuvers], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idManeuvers")
        @ExcludeMissing
        fun _idManeuvers(): JsonField<List<String>> = idManeuvers

        /**
         * Returns the raw JSON value of [idOnOrbit].
         *
         * Unlike [idOnOrbit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idOnOrbit") @ExcludeMissing fun _idOnOrbit(): JsonField<String> = idOnOrbit

        /**
         * Returns the raw JSON value of [idStateVector].
         *
         * Unlike [idStateVector], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("idStateVector")
        @ExcludeMissing
        fun _idStateVector(): JsonField<String> = idStateVector

        /**
         * Returns the raw JSON value of [integrator].
         *
         * Unlike [integrator], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("integrator")
        @ExcludeMissing
        fun _integrator(): JsonField<String> = integrator

        /**
         * Returns the raw JSON value of [interpolation].
         *
         * Unlike [interpolation], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("interpolation")
        @ExcludeMissing
        fun _interpolation(): JsonField<String> = interpolation

        /**
         * Returns the raw JSON value of [interpolationDegree].
         *
         * Unlike [interpolationDegree], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("interpolationDegree")
        @ExcludeMissing
        fun _interpolationDegree(): JsonField<Int> = interpolationDegree

        /**
         * Returns the raw JSON value of [lunarSolar].
         *
         * Unlike [lunarSolar], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("lunarSolar")
        @ExcludeMissing
        fun _lunarSolar(): JsonField<Boolean> = lunarSolar

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origNetwork].
         *
         * Unlike [origNetwork], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origNetwork")
        @ExcludeMissing
        fun _origNetwork(): JsonField<String> = origNetwork

        /**
         * Returns the raw JSON value of [origObjectId].
         *
         * Unlike [origObjectId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("origObjectId")
        @ExcludeMissing
        fun _origObjectId(): JsonField<String> = origObjectId

        /**
         * Returns the raw JSON value of [pedigree].
         *
         * Unlike [pedigree], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("pedigree") @ExcludeMissing fun _pedigree(): JsonField<String> = pedigree

        /**
         * Returns the raw JSON value of [referenceFrame].
         *
         * Unlike [referenceFrame], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("referenceFrame")
        @ExcludeMissing
        fun _referenceFrame(): JsonField<ReferenceFrame> = referenceFrame

        /**
         * Returns the raw JSON value of [satNo].
         *
         * Unlike [satNo], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("satNo") @ExcludeMissing fun _satNo(): JsonField<Int> = satNo

        /**
         * Returns the raw JSON value of [solidEarthTides].
         *
         * Unlike [solidEarthTides], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("solidEarthTides")
        @ExcludeMissing
        fun _solidEarthTides(): JsonField<Boolean> = solidEarthTides

        /**
         * Returns the raw JSON value of [stepSize].
         *
         * Unlike [stepSize], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("stepSize") @ExcludeMissing fun _stepSize(): JsonField<Long> = stepSize

        /**
         * Returns the raw JSON value of [tags].
         *
         * Unlike [tags], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("tags") @ExcludeMissing fun _tags(): JsonField<List<String>> = tags

        /**
         * Returns the raw JSON value of [transactionId].
         *
         * Unlike [transactionId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("transactionId")
        @ExcludeMissing
        fun _transactionId(): JsonField<String> = transactionId

        /**
         * Returns the raw JSON value of [usableEndTime].
         *
         * Unlike [usableEndTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("usableEndTime")
        @ExcludeMissing
        fun _usableEndTime(): JsonField<OffsetDateTime> = usableEndTime

        /**
         * Returns the raw JSON value of [usableStartTime].
         *
         * Unlike [usableStartTime], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("usableStartTime")
        @ExcludeMissing
        fun _usableStartTime(): JsonField<OffsetDateTime> = usableStartTime

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [Body].
             *
             * The following fields are required:
             * ```java
             * .category()
             * .classificationMarking()
             * .dataMode()
             * .numPoints()
             * .pointEndTime()
             * .pointStartTime()
             * .source()
             * .type()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var category: JsonField<String>? = null
            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var numPoints: JsonField<Int>? = null
            private var pointEndTime: JsonField<OffsetDateTime>? = null
            private var pointStartTime: JsonField<OffsetDateTime>? = null
            private var source: JsonField<String>? = null
            private var type: JsonField<String>? = null
            private var id: JsonField<String> = JsonMissing.of()
            private var bDot: JsonField<Double> = JsonMissing.of()
            private var centBody: JsonField<String> = JsonMissing.of()
            private var comments: JsonField<String> = JsonMissing.of()
            private var covReferenceFrame: JsonField<CovReferenceFrame> = JsonMissing.of()
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var description: JsonField<String> = JsonMissing.of()
            private var descriptor: JsonField<String> = JsonMissing.of()
            private var dragModel: JsonField<String> = JsonMissing.of()
            private var edr: JsonField<Double> = JsonMissing.of()
            private var ephemerisList: JsonField<MutableList<EphemerisList>>? = null
            private var filename: JsonField<String> = JsonMissing.of()
            private var geopotentialModel: JsonField<String> = JsonMissing.of()
            private var hasAccel: JsonField<Boolean> = JsonMissing.of()
            private var hasCov: JsonField<Boolean> = JsonMissing.of()
            private var hasMnvr: JsonField<Boolean> = JsonMissing.of()
            private var idManeuvers: JsonField<MutableList<String>>? = null
            private var idOnOrbit: JsonField<String> = JsonMissing.of()
            private var idStateVector: JsonField<String> = JsonMissing.of()
            private var integrator: JsonField<String> = JsonMissing.of()
            private var interpolation: JsonField<String> = JsonMissing.of()
            private var interpolationDegree: JsonField<Int> = JsonMissing.of()
            private var lunarSolar: JsonField<Boolean> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origNetwork: JsonField<String> = JsonMissing.of()
            private var origObjectId: JsonField<String> = JsonMissing.of()
            private var pedigree: JsonField<String> = JsonMissing.of()
            private var referenceFrame: JsonField<ReferenceFrame> = JsonMissing.of()
            private var satNo: JsonField<Int> = JsonMissing.of()
            private var solidEarthTides: JsonField<Boolean> = JsonMissing.of()
            private var stepSize: JsonField<Long> = JsonMissing.of()
            private var tags: JsonField<MutableList<String>>? = null
            private var transactionId: JsonField<String> = JsonMissing.of()
            private var usableEndTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var usableStartTime: JsonField<OffsetDateTime> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                category = body.category
                classificationMarking = body.classificationMarking
                dataMode = body.dataMode
                numPoints = body.numPoints
                pointEndTime = body.pointEndTime
                pointStartTime = body.pointStartTime
                source = body.source
                type = body.type
                id = body.id
                bDot = body.bDot
                centBody = body.centBody
                comments = body.comments
                covReferenceFrame = body.covReferenceFrame
                createdAt = body.createdAt
                createdBy = body.createdBy
                description = body.description
                descriptor = body.descriptor
                dragModel = body.dragModel
                edr = body.edr
                ephemerisList = body.ephemerisList.map { it.toMutableList() }
                filename = body.filename
                geopotentialModel = body.geopotentialModel
                hasAccel = body.hasAccel
                hasCov = body.hasCov
                hasMnvr = body.hasMnvr
                idManeuvers = body.idManeuvers.map { it.toMutableList() }
                idOnOrbit = body.idOnOrbit
                idStateVector = body.idStateVector
                integrator = body.integrator
                interpolation = body.interpolation
                interpolationDegree = body.interpolationDegree
                lunarSolar = body.lunarSolar
                origin = body.origin
                origNetwork = body.origNetwork
                origObjectId = body.origObjectId
                pedigree = body.pedigree
                referenceFrame = body.referenceFrame
                satNo = body.satNo
                solidEarthTides = body.solidEarthTides
                stepSize = body.stepSize
                tags = body.tags.map { it.toMutableList() }
                transactionId = body.transactionId
                usableEndTime = body.usableEndTime
                usableStartTime = body.usableStartTime
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            /** The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL). */
            fun category(category: String) = category(JsonField.of(category))

            /**
             * Sets [Builder.category] to an arbitrary JSON value.
             *
             * You should usually call [Builder.category] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun category(category: JsonField<String>) = apply { this.category = category }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /** Number of points contained in the ephemeris. */
            fun numPoints(numPoints: Int) = numPoints(JsonField.of(numPoints))

            /**
             * Sets [Builder.numPoints] to an arbitrary JSON value.
             *
             * You should usually call [Builder.numPoints] with a well-typed [Int] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun numPoints(numPoints: JsonField<Int>) = apply { this.numPoints = numPoints }

            /** End time/last time point of the ephemeris, in ISO 8601 UTC format. */
            fun pointEndTime(pointEndTime: OffsetDateTime) =
                pointEndTime(JsonField.of(pointEndTime))

            /**
             * Sets [Builder.pointEndTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.pointEndTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun pointEndTime(pointEndTime: JsonField<OffsetDateTime>) = apply {
                this.pointEndTime = pointEndTime
            }

            /** Start time/first time point of the ephemeris, in ISO 8601 UTC format. */
            fun pointStartTime(pointStartTime: OffsetDateTime) =
                pointStartTime(JsonField.of(pointStartTime))

            /**
             * Sets [Builder.pointStartTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.pointStartTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun pointStartTime(pointStartTime: JsonField<OffsetDateTime>) = apply {
                this.pointStartTime = pointStartTime
            }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /**
             * The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE,
             * SCREENING).
             */
            fun type(type: String) = type(JsonField.of(type))

            /**
             * Sets [Builder.type] to an arbitrary JSON value.
             *
             * You should usually call [Builder.type] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun type(type: JsonField<String>) = apply { this.type = type }

            /** Unique identifier of the record, auto-generated by the system. */
            fun id(id: String) = id(JsonField.of(id))

            /**
             * Sets [Builder.id] to an arbitrary JSON value.
             *
             * You should usually call [Builder.id] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun id(id: JsonField<String>) = apply { this.id = id }

            /** First derivative of ballistic coefficient (m^2/kg-s). */
            fun bDot(bDot: Double) = bDot(JsonField.of(bDot))

            /**
             * Sets [Builder.bDot] to an arbitrary JSON value.
             *
             * You should usually call [Builder.bDot] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun bDot(bDot: JsonField<Double>) = apply { this.bDot = bDot }

            /**
             * The Central Body of the ephemeris. Assumed to be Earth, unless otherwise indicated.
             */
            fun centBody(centBody: String) = centBody(JsonField.of(centBody))

            /**
             * Sets [Builder.centBody] to an arbitrary JSON value.
             *
             * You should usually call [Builder.centBody] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun centBody(centBody: JsonField<String>) = apply { this.centBody = centBody }

            /** Additional source provided comments associated with the ephemeris. */
            fun comments(comments: String) = comments(JsonField.of(comments))

            /**
             * Sets [Builder.comments] to an arbitrary JSON value.
             *
             * You should usually call [Builder.comments] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun comments(comments: JsonField<String>) = apply { this.comments = comments }

            /**
             * The reference frame of the covariance matrix elements. If the covReferenceFrame is
             * null it is assumed to be J2000.
             */
            fun covReferenceFrame(covReferenceFrame: CovReferenceFrame) =
                covReferenceFrame(JsonField.of(covReferenceFrame))

            /**
             * Sets [Builder.covReferenceFrame] to an arbitrary JSON value.
             *
             * You should usually call [Builder.covReferenceFrame] with a well-typed
             * [CovReferenceFrame] value instead. This method is primarily for setting the field to
             * an undocumented or not yet supported value.
             */
            fun covReferenceFrame(covReferenceFrame: JsonField<CovReferenceFrame>) = apply {
                this.covReferenceFrame = covReferenceFrame
            }

            /** Time the row was created in the database, in UTC. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /** Application user who created the row in the database. */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /**
             * Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris
             * were generated using the last observation available.
             */
            fun description(description: String) = description(JsonField.of(description))

            /**
             * Sets [Builder.description] to an arbitrary JSON value.
             *
             * You should usually call [Builder.description] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun description(description: JsonField<String>) = apply {
                this.description = description
            }

            /** Optional source-provided and searchable metadata or descriptor of the data. */
            fun descriptor(descriptor: String) = descriptor(JsonField.of(descriptor))

            /**
             * Sets [Builder.descriptor] to an arbitrary JSON value.
             *
             * You should usually call [Builder.descriptor] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun descriptor(descriptor: JsonField<String>) = apply { this.descriptor = descriptor }

            /** Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.). */
            fun dragModel(dragModel: String) = dragModel(JsonField.of(dragModel))

            /**
             * Sets [Builder.dragModel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dragModel] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dragModel(dragModel: JsonField<String>) = apply { this.dragModel = dragModel }

            /** Model parameter value for energy dissipation rate (EDR), expressed in w/kg. */
            fun edr(edr: Double) = edr(JsonField.of(edr))

            /**
             * Sets [Builder.edr] to an arbitrary JSON value.
             *
             * You should usually call [Builder.edr] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun edr(edr: JsonField<Double>) = apply { this.edr = edr }

            /**
             * The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is
             * associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
             */
            fun ephemerisList(ephemerisList: List<EphemerisList>) =
                ephemerisList(JsonField.of(ephemerisList))

            /**
             * Sets [Builder.ephemerisList] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ephemerisList] with a well-typed
             * `List<EphemerisList>` value instead. This method is primarily for setting the field
             * to an undocumented or not yet supported value.
             */
            fun ephemerisList(ephemerisList: JsonField<List<EphemerisList>>) = apply {
                this.ephemerisList = ephemerisList.map { it.toMutableList() }
            }

            /**
             * Adds a single [EphemerisList] to [Builder.ephemerisList].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addEphemerisList(ephemerisList: EphemerisList) = apply {
                this.ephemerisList =
                    (this.ephemerisList ?: JsonField.of(mutableListOf())).also {
                        checkKnown("ephemerisList", it).add(ephemerisList)
                    }
            }

            /**
             * Filename of the raw file used to provide the ephemeris data including filetype
             * extension, if applicable. This file may be retrieved using the 'getFile' operation as
             * specified in the 'EphemerisSet' OpenAPI docs.
             */
            fun filename(filename: String) = filename(JsonField.of(filename))

            /**
             * Sets [Builder.filename] to an arbitrary JSON value.
             *
             * You should usually call [Builder.filename] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun filename(filename: JsonField<String>) = apply { this.filename = filename }

            /**
             * Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2,
             * GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
             */
            fun geopotentialModel(geopotentialModel: String) =
                geopotentialModel(JsonField.of(geopotentialModel))

            /**
             * Sets [Builder.geopotentialModel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.geopotentialModel] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun geopotentialModel(geopotentialModel: JsonField<String>) = apply {
                this.geopotentialModel = geopotentialModel
            }

            /** Boolean indicating whether acceleration data is provided with the ephemeris. */
            fun hasAccel(hasAccel: Boolean) = hasAccel(JsonField.of(hasAccel))

            /**
             * Sets [Builder.hasAccel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hasAccel] with a well-typed [Boolean] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hasAccel(hasAccel: JsonField<Boolean>) = apply { this.hasAccel = hasAccel }

            /** Boolean indicating whether covariance data is provided with the ephemeris. */
            fun hasCov(hasCov: Boolean) = hasCov(JsonField.of(hasCov))

            /**
             * Sets [Builder.hasCov] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hasCov] with a well-typed [Boolean] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hasCov(hasCov: JsonField<Boolean>) = apply { this.hasCov = hasCov }

            /** Boolean indicating whether maneuver(s) are incorporated into the ephemeris. */
            fun hasMnvr(hasMnvr: Boolean) = hasMnvr(JsonField.of(hasMnvr))

            /**
             * Sets [Builder.hasMnvr] to an arbitrary JSON value.
             *
             * You should usually call [Builder.hasMnvr] with a well-typed [Boolean] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun hasMnvr(hasMnvr: JsonField<Boolean>) = apply { this.hasMnvr = hasMnvr }

            /** Array of the maneuver IDs of all maneuvers incorporated in the ephemeris. */
            fun idManeuvers(idManeuvers: List<String>) = idManeuvers(JsonField.of(idManeuvers))

            /**
             * Sets [Builder.idManeuvers] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idManeuvers] with a well-typed `List<String>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idManeuvers(idManeuvers: JsonField<List<String>>) = apply {
                this.idManeuvers = idManeuvers.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [idManeuvers].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addIdManeuver(idManeuver: String) = apply {
                idManeuvers =
                    (idManeuvers ?: JsonField.of(mutableListOf())).also {
                        checkKnown("idManeuvers", it).add(idManeuver)
                    }
            }

            /** Unique identifier of the primary satellite on-orbit object. */
            fun idOnOrbit(idOnOrbit: String) = idOnOrbit(JsonField.of(idOnOrbit))

            /**
             * Sets [Builder.idOnOrbit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idOnOrbit] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idOnOrbit(idOnOrbit: JsonField<String>) = apply { this.idOnOrbit = idOnOrbit }

            /** ID of the State Vector used to generate the ephemeris. */
            fun idStateVector(idStateVector: String) = idStateVector(JsonField.of(idStateVector))

            /**
             * Sets [Builder.idStateVector] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idStateVector] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idStateVector(idStateVector: JsonField<String>) = apply {
                this.idStateVector = idStateVector
            }

            /** Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY). */
            fun integrator(integrator: String) = integrator(JsonField.of(integrator))

            /**
             * Sets [Builder.integrator] to an arbitrary JSON value.
             *
             * You should usually call [Builder.integrator] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun integrator(integrator: JsonField<String>) = apply { this.integrator = integrator }

            /** The recommended interpolation method for the ephemeris data. */
            fun interpolation(interpolation: String) = interpolation(JsonField.of(interpolation))

            /**
             * Sets [Builder.interpolation] to an arbitrary JSON value.
             *
             * You should usually call [Builder.interpolation] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun interpolation(interpolation: JsonField<String>) = apply {
                this.interpolation = interpolation
            }

            /** The recommended interpolation degree for the ephemeris data. */
            fun interpolationDegree(interpolationDegree: Int) =
                interpolationDegree(JsonField.of(interpolationDegree))

            /**
             * Sets [Builder.interpolationDegree] to an arbitrary JSON value.
             *
             * You should usually call [Builder.interpolationDegree] with a well-typed [Int] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun interpolationDegree(interpolationDegree: JsonField<Int>) = apply {
                this.interpolationDegree = interpolationDegree
            }

            /** Boolean indicating use of lunar/solar data in ephemeris generation. */
            fun lunarSolar(lunarSolar: Boolean) = lunarSolar(JsonField.of(lunarSolar))

            /**
             * Sets [Builder.lunarSolar] to an arbitrary JSON value.
             *
             * You should usually call [Builder.lunarSolar] with a well-typed [Boolean] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun lunarSolar(lunarSolar: JsonField<Boolean>) = apply { this.lunarSolar = lunarSolar }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * The originating source network on which this record was created, auto-populated by
             * the system.
             */
            fun origNetwork(origNetwork: String) = origNetwork(JsonField.of(origNetwork))

            /**
             * Sets [Builder.origNetwork] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origNetwork] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origNetwork(origNetwork: JsonField<String>) = apply {
                this.origNetwork = origNetwork
            }

            /**
             * Optional identifier provided by ephemeris source to indicate the target object of
             * this ephemeris. This may be an internal identifier and not necessarily map to a valid
             * satellite number.
             */
            fun origObjectId(origObjectId: String) = origObjectId(JsonField.of(origObjectId))

            /**
             * Sets [Builder.origObjectId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origObjectId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origObjectId(origObjectId: JsonField<String>) = apply {
                this.origObjectId = origObjectId
            }

            /**
             * The pedigree of the ephemeris or source data used for ephemeris generation (e.g.
             * DOPPLER, GPS, HYBRID, PROPAGATED, RANGING, SLR).
             */
            fun pedigree(pedigree: String) = pedigree(JsonField.of(pedigree))

            /**
             * Sets [Builder.pedigree] to an arbitrary JSON value.
             *
             * You should usually call [Builder.pedigree] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun pedigree(pedigree: JsonField<String>) = apply { this.pedigree = pedigree }

            /**
             * The reference frame of the cartesian orbital states. If the referenceFrame is null it
             * is assumed to be J2000.
             */
            fun referenceFrame(referenceFrame: ReferenceFrame) =
                referenceFrame(JsonField.of(referenceFrame))

            /**
             * Sets [Builder.referenceFrame] to an arbitrary JSON value.
             *
             * You should usually call [Builder.referenceFrame] with a well-typed [ReferenceFrame]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun referenceFrame(referenceFrame: JsonField<ReferenceFrame>) = apply {
                this.referenceFrame = referenceFrame
            }

            /** Satellite/catalog number of the target on-orbit object. */
            fun satNo(satNo: Int) = satNo(JsonField.of(satNo))

            /**
             * Sets [Builder.satNo] to an arbitrary JSON value.
             *
             * You should usually call [Builder.satNo] with a well-typed [Int] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun satNo(satNo: JsonField<Int>) = apply { this.satNo = satNo }

            /** Boolean indicating use of solid earth tide data in ephemeris generation. */
            fun solidEarthTides(solidEarthTides: Boolean) =
                solidEarthTides(JsonField.of(solidEarthTides))

            /**
             * Sets [Builder.solidEarthTides] to an arbitrary JSON value.
             *
             * You should usually call [Builder.solidEarthTides] with a well-typed [Boolean] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun solidEarthTides(solidEarthTides: JsonField<Boolean>) = apply {
                this.solidEarthTides = solidEarthTides
            }

            /** Ephemeris step size, in seconds. */
            fun stepSize(stepSize: Long) = stepSize(JsonField.of(stepSize))

            /**
             * Sets [Builder.stepSize] to an arbitrary JSON value.
             *
             * You should usually call [Builder.stepSize] with a well-typed [Long] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun stepSize(stepSize: JsonField<Long>) = apply { this.stepSize = stepSize }

            /**
             * Optional array of provider/source specific tags for this data, where each element is
             * no longer than 32 characters, used for implementing data owner conditional access
             * controls to restrict access to the data. Should be left null by data providers unless
             * conditional access controls are coordinated with the UDL team.
             */
            fun tags(tags: List<String>) = tags(JsonField.of(tags))

            /**
             * Sets [Builder.tags] to an arbitrary JSON value.
             *
             * You should usually call [Builder.tags] with a well-typed `List<String>` value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun tags(tags: JsonField<List<String>>) = apply {
                this.tags = tags.map { it.toMutableList() }
            }

            /**
             * Adds a single [String] to [tags].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addTag(tag: String) = apply {
                tags =
                    (tags ?: JsonField.of(mutableListOf())).also { checkKnown("tags", it).add(tag) }
            }

            /**
             * Optional identifier to track a commercial or marketplace transaction executed to
             * produce this data.
             */
            fun transactionId(transactionId: String) = transactionId(JsonField.of(transactionId))

            /**
             * Sets [Builder.transactionId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.transactionId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun transactionId(transactionId: JsonField<String>) = apply {
                this.transactionId = transactionId
            }

            /**
             * Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC
             * format with microsecond precision.
             */
            fun usableEndTime(usableEndTime: OffsetDateTime) =
                usableEndTime(JsonField.of(usableEndTime))

            /**
             * Sets [Builder.usableEndTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.usableEndTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun usableEndTime(usableEndTime: JsonField<OffsetDateTime>) = apply {
                this.usableEndTime = usableEndTime
            }

            /**
             * Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC
             * format with microsecond precision.
             */
            fun usableStartTime(usableStartTime: OffsetDateTime) =
                usableStartTime(JsonField.of(usableStartTime))

            /**
             * Sets [Builder.usableStartTime] to an arbitrary JSON value.
             *
             * You should usually call [Builder.usableStartTime] with a well-typed [OffsetDateTime]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun usableStartTime(usableStartTime: JsonField<OffsetDateTime>) = apply {
                this.usableStartTime = usableStartTime
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [Body].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .category()
             * .classificationMarking()
             * .dataMode()
             * .numPoints()
             * .pointEndTime()
             * .pointStartTime()
             * .source()
             * .type()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): Body =
                Body(
                    checkRequired("category", category),
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("numPoints", numPoints),
                    checkRequired("pointEndTime", pointEndTime),
                    checkRequired("pointStartTime", pointStartTime),
                    checkRequired("source", source),
                    checkRequired("type", type),
                    id,
                    bDot,
                    centBody,
                    comments,
                    covReferenceFrame,
                    createdAt,
                    createdBy,
                    description,
                    descriptor,
                    dragModel,
                    edr,
                    (ephemerisList ?: JsonMissing.of()).map { it.toImmutable() },
                    filename,
                    geopotentialModel,
                    hasAccel,
                    hasCov,
                    hasMnvr,
                    (idManeuvers ?: JsonMissing.of()).map { it.toImmutable() },
                    idOnOrbit,
                    idStateVector,
                    integrator,
                    interpolation,
                    interpolationDegree,
                    lunarSolar,
                    origin,
                    origNetwork,
                    origObjectId,
                    pedigree,
                    referenceFrame,
                    satNo,
                    solidEarthTides,
                    stepSize,
                    (tags ?: JsonMissing.of()).map { it.toImmutable() },
                    transactionId,
                    usableEndTime,
                    usableStartTime,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            category()
            classificationMarking()
            dataMode().validate()
            numPoints()
            pointEndTime()
            pointStartTime()
            source()
            type()
            id()
            bDot()
            centBody()
            comments()
            covReferenceFrame().ifPresent { it.validate() }
            createdAt()
            createdBy()
            description()
            descriptor()
            dragModel()
            edr()
            ephemerisList().ifPresent { it.forEach { it.validate() } }
            filename()
            geopotentialModel()
            hasAccel()
            hasCov()
            hasMnvr()
            idManeuvers()
            idOnOrbit()
            idStateVector()
            integrator()
            interpolation()
            interpolationDegree()
            lunarSolar()
            origin()
            origNetwork()
            origObjectId()
            pedigree()
            referenceFrame().ifPresent { it.validate() }
            satNo()
            solidEarthTides()
            stepSize()
            tags()
            transactionId()
            usableEndTime()
            usableStartTime()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (category.asKnown().isPresent) 1 else 0) +
                (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (numPoints.asKnown().isPresent) 1 else 0) +
                (if (pointEndTime.asKnown().isPresent) 1 else 0) +
                (if (pointStartTime.asKnown().isPresent) 1 else 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (type.asKnown().isPresent) 1 else 0) +
                (if (id.asKnown().isPresent) 1 else 0) +
                (if (bDot.asKnown().isPresent) 1 else 0) +
                (if (centBody.asKnown().isPresent) 1 else 0) +
                (if (comments.asKnown().isPresent) 1 else 0) +
                (covReferenceFrame.asKnown().getOrNull()?.validity() ?: 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (description.asKnown().isPresent) 1 else 0) +
                (if (descriptor.asKnown().isPresent) 1 else 0) +
                (if (dragModel.asKnown().isPresent) 1 else 0) +
                (if (edr.asKnown().isPresent) 1 else 0) +
                (ephemerisList.asKnown().getOrNull()?.sumOf { it.validity().toInt() } ?: 0) +
                (if (filename.asKnown().isPresent) 1 else 0) +
                (if (geopotentialModel.asKnown().isPresent) 1 else 0) +
                (if (hasAccel.asKnown().isPresent) 1 else 0) +
                (if (hasCov.asKnown().isPresent) 1 else 0) +
                (if (hasMnvr.asKnown().isPresent) 1 else 0) +
                (idManeuvers.asKnown().getOrNull()?.size ?: 0) +
                (if (idOnOrbit.asKnown().isPresent) 1 else 0) +
                (if (idStateVector.asKnown().isPresent) 1 else 0) +
                (if (integrator.asKnown().isPresent) 1 else 0) +
                (if (interpolation.asKnown().isPresent) 1 else 0) +
                (if (interpolationDegree.asKnown().isPresent) 1 else 0) +
                (if (lunarSolar.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origNetwork.asKnown().isPresent) 1 else 0) +
                (if (origObjectId.asKnown().isPresent) 1 else 0) +
                (if (pedigree.asKnown().isPresent) 1 else 0) +
                (referenceFrame.asKnown().getOrNull()?.validity() ?: 0) +
                (if (satNo.asKnown().isPresent) 1 else 0) +
                (if (solidEarthTides.asKnown().isPresent) 1 else 0) +
                (if (stepSize.asKnown().isPresent) 1 else 0) +
                (tags.asKnown().getOrNull()?.size ?: 0) +
                (if (transactionId.asKnown().isPresent) 1 else 0) +
                (if (usableEndTime.asKnown().isPresent) 1 else 0) +
                (if (usableStartTime.asKnown().isPresent) 1 else 0)

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is Body &&
                category == other.category &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                numPoints == other.numPoints &&
                pointEndTime == other.pointEndTime &&
                pointStartTime == other.pointStartTime &&
                source == other.source &&
                type == other.type &&
                id == other.id &&
                bDot == other.bDot &&
                centBody == other.centBody &&
                comments == other.comments &&
                covReferenceFrame == other.covReferenceFrame &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                description == other.description &&
                descriptor == other.descriptor &&
                dragModel == other.dragModel &&
                edr == other.edr &&
                ephemerisList == other.ephemerisList &&
                filename == other.filename &&
                geopotentialModel == other.geopotentialModel &&
                hasAccel == other.hasAccel &&
                hasCov == other.hasCov &&
                hasMnvr == other.hasMnvr &&
                idManeuvers == other.idManeuvers &&
                idOnOrbit == other.idOnOrbit &&
                idStateVector == other.idStateVector &&
                integrator == other.integrator &&
                interpolation == other.interpolation &&
                interpolationDegree == other.interpolationDegree &&
                lunarSolar == other.lunarSolar &&
                origin == other.origin &&
                origNetwork == other.origNetwork &&
                origObjectId == other.origObjectId &&
                pedigree == other.pedigree &&
                referenceFrame == other.referenceFrame &&
                satNo == other.satNo &&
                solidEarthTides == other.solidEarthTides &&
                stepSize == other.stepSize &&
                tags == other.tags &&
                transactionId == other.transactionId &&
                usableEndTime == other.usableEndTime &&
                usableStartTime == other.usableStartTime &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                category,
                classificationMarking,
                dataMode,
                numPoints,
                pointEndTime,
                pointStartTime,
                source,
                type,
                id,
                bDot,
                centBody,
                comments,
                covReferenceFrame,
                createdAt,
                createdBy,
                description,
                descriptor,
                dragModel,
                edr,
                ephemerisList,
                filename,
                geopotentialModel,
                hasAccel,
                hasCov,
                hasMnvr,
                idManeuvers,
                idOnOrbit,
                idStateVector,
                integrator,
                interpolation,
                interpolationDegree,
                lunarSolar,
                origin,
                origNetwork,
                origObjectId,
                pedigree,
                referenceFrame,
                satNo,
                solidEarthTides,
                stepSize,
                tags,
                transactionId,
                usableEndTime,
                usableStartTime,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{category=$category, classificationMarking=$classificationMarking, dataMode=$dataMode, numPoints=$numPoints, pointEndTime=$pointEndTime, pointStartTime=$pointStartTime, source=$source, type=$type, id=$id, bDot=$bDot, centBody=$centBody, comments=$comments, covReferenceFrame=$covReferenceFrame, createdAt=$createdAt, createdBy=$createdBy, description=$description, descriptor=$descriptor, dragModel=$dragModel, edr=$edr, ephemerisList=$ephemerisList, filename=$filename, geopotentialModel=$geopotentialModel, hasAccel=$hasAccel, hasCov=$hasCov, hasMnvr=$hasMnvr, idManeuvers=$idManeuvers, idOnOrbit=$idOnOrbit, idStateVector=$idStateVector, integrator=$integrator, interpolation=$interpolation, interpolationDegree=$interpolationDegree, lunarSolar=$lunarSolar, origin=$origin, origNetwork=$origNetwork, origObjectId=$origObjectId, pedigree=$pedigree, referenceFrame=$referenceFrame, satNo=$satNo, solidEarthTides=$solidEarthTides, stepSize=$stepSize, tags=$tags, transactionId=$transactionId, usableEndTime=$usableEndTime, usableStartTime=$usableStartTime, additionalProperties=$additionalProperties}"
    }

    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     *
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
     * both real and simulated data.
     *
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
     * analysis.
     *
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     *
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
     * requirements, and for validating technical, functional, and performance characteristics.
     */
    class DataMode @JsonCreator private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REAL = of("REAL")

            @JvmField val TEST = of("TEST")

            @JvmField val SIMULATED = of("SIMULATED")

            @JvmField val EXERCISE = of("EXERCISE")

            @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
        }

        /** An enum containing [DataMode]'s known values. */
        enum class Known {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
        }

        /**
         * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [DataMode] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REAL,
            TEST,
            SIMULATED,
            EXERCISE,
            /** An enum member indicating that [DataMode] was instantiated with an unknown value. */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REAL -> Value.REAL
                TEST -> Value.TEST
                SIMULATED -> Value.SIMULATED
                EXERCISE -> Value.EXERCISE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                REAL -> Known.REAL
                TEST -> Known.TEST
                SIMULATED -> Known.SIMULATED
                EXERCISE -> Known.EXERCISE
                else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): DataMode = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is DataMode && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /**
     * The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is
     * assumed to be J2000.
     */
    class CovReferenceFrame @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val J2000 = of("J2000")

            @JvmField val UVW = of("UVW")

            @JvmField val EFG_TDR = of("EFG/TDR")

            @JvmField val TEME = of("TEME")

            @JvmField val GCRF = of("GCRF")

            @JvmStatic fun of(value: String) = CovReferenceFrame(JsonField.of(value))
        }

        /** An enum containing [CovReferenceFrame]'s known values. */
        enum class Known {
            J2000,
            UVW,
            EFG_TDR,
            TEME,
            GCRF,
        }

        /**
         * An enum containing [CovReferenceFrame]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [CovReferenceFrame] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            J2000,
            UVW,
            EFG_TDR,
            TEME,
            GCRF,
            /**
             * An enum member indicating that [CovReferenceFrame] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                J2000 -> Value.J2000
                UVW -> Value.UVW
                EFG_TDR -> Value.EFG_TDR
                TEME -> Value.TEME
                GCRF -> Value.GCRF
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                J2000 -> Known.J2000
                UVW -> Known.UVW
                EFG_TDR -> Known.EFG_TDR
                TEME -> Known.TEME
                GCRF -> Known.GCRF
                else ->
                    throw UnifieddatalibraryInvalidDataException(
                        "Unknown CovReferenceFrame: $value"
                    )
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): CovReferenceFrame = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is CovReferenceFrame && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /**
     * An ephemeris record is a position and velocity vector identifying the location and trajectory
     * of an on-orbit object at a specified time. Ephemeris points, including covariance, are in
     * kilometer and second based units in a user specified reference frame, with ECI J2K being
     * preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The
     * 'EphemerisSet' record contains details of the underlying data and propagation models used in
     * the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent
     * EphemerisSet ID (esId).
     */
    class EphemerisList
    private constructor(
        private val classificationMarking: JsonField<String>,
        private val dataMode: JsonField<DataMode>,
        private val source: JsonField<String>,
        private val ts: JsonField<OffsetDateTime>,
        private val xpos: JsonField<Double>,
        private val xvel: JsonField<Double>,
        private val ypos: JsonField<Double>,
        private val yvel: JsonField<Double>,
        private val zpos: JsonField<Double>,
        private val zvel: JsonField<Double>,
        private val id: JsonField<String>,
        private val cov: JsonField<List<Double>>,
        private val createdAt: JsonField<OffsetDateTime>,
        private val createdBy: JsonField<String>,
        private val esId: JsonField<String>,
        private val idOnOrbit: JsonField<String>,
        private val origin: JsonField<String>,
        private val origObjectId: JsonField<String>,
        private val xaccel: JsonField<Double>,
        private val yaccel: JsonField<Double>,
        private val zaccel: JsonField<Double>,
        private val additionalProperties: MutableMap<String, JsonValue>,
    ) {

        @JsonCreator
        private constructor(
            @JsonProperty("classificationMarking")
            @ExcludeMissing
            classificationMarking: JsonField<String> = JsonMissing.of(),
            @JsonProperty("dataMode")
            @ExcludeMissing
            dataMode: JsonField<DataMode> = JsonMissing.of(),
            @JsonProperty("source") @ExcludeMissing source: JsonField<String> = JsonMissing.of(),
            @JsonProperty("ts") @ExcludeMissing ts: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("xpos") @ExcludeMissing xpos: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("xvel") @ExcludeMissing xvel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("ypos") @ExcludeMissing ypos: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("yvel") @ExcludeMissing yvel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zpos") @ExcludeMissing zpos: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zvel") @ExcludeMissing zvel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("id") @ExcludeMissing id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cov") @ExcludeMissing cov: JsonField<List<Double>> = JsonMissing.of(),
            @JsonProperty("createdAt")
            @ExcludeMissing
            createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("createdBy")
            @ExcludeMissing
            createdBy: JsonField<String> = JsonMissing.of(),
            @JsonProperty("esId") @ExcludeMissing esId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("idOnOrbit")
            @ExcludeMissing
            idOnOrbit: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origin") @ExcludeMissing origin: JsonField<String> = JsonMissing.of(),
            @JsonProperty("origObjectId")
            @ExcludeMissing
            origObjectId: JsonField<String> = JsonMissing.of(),
            @JsonProperty("xaccel") @ExcludeMissing xaccel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("yaccel") @ExcludeMissing yaccel: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("zaccel") @ExcludeMissing zaccel: JsonField<Double> = JsonMissing.of(),
        ) : this(
            classificationMarking,
            dataMode,
            source,
            ts,
            xpos,
            xvel,
            ypos,
            yvel,
            zpos,
            zvel,
            id,
            cov,
            createdAt,
            createdBy,
            esId,
            idOnOrbit,
            origin,
            origObjectId,
            xaccel,
            yaccel,
            zaccel,
            mutableMapOf(),
        )

        /**
         * Classification marking of the data in IC/CAPCO Portion-marked format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun classificationMarking(): String =
            classificationMarking.getRequired("classificationMarking")

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun dataMode(): DataMode = dataMode.getRequired("dataMode")

        /**
         * Source of the data.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun source(): String = source.getRequired("source")

        /**
         * Time associated with the Ephemeris Point, in ISO8601 UTC format.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun ts(): OffsetDateTime = ts.getRequired("ts")

        /**
         * Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame. If
         * referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun xpos(): Double = xpos.getRequired("xpos")

        /**
         * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.
         * If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun xvel(): Double = xvel.getRequired("xvel")

        /**
         * Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame. If
         * referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun ypos(): Double = ypos.getRequired("ypos")

        /**
         * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.
         * If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun yvel(): Double = yvel.getRequired("yvel")

        /**
         * Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If
         * referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun zpos(): Double = zpos.getRequired("zpos")

        /**
         * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.
         * If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   or is unexpectedly missing or null (e.g. if the server responded with an unexpected
         *   value).
         */
        fun zvel(): Double = zvel.getRequired("zvel")

        /**
         * Unique identifier of the record, auto-generated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun id(): Optional<String> = id.getOptional("id")

        /**
         * Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set
         * covReferenceFrame. If the covReferenceFrame from the EphemerisSet table is null it is
         * assumed to be J2000. The array values represent the lower triangular half of the
         * position-velocity covariance matrix. The size of the covariance matrix is dynamic,
         * depending on whether the covariance for position only or position & velocity. The
         * covariance elements are position dependent within the array with values ordered as
         * follows:
         *
         * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
         *
         * x&nbsp;&nbsp;&nbsp;&nbsp;1
         *
         * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
         *
         * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
         *
         * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
         *
         * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
         *
         * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
         *
         * The array containing the covariance matrix elements will be of length 6 for position only
         * covariance, or length 21 for position-velocity covariance. The cov array should contain
         * only the lower left triangle values from top left down to bottom right, in order.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun cov(): Optional<List<Double>> = cov.getOptional("cov")

        /**
         * Time the row was created in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdAt(): Optional<OffsetDateTime> = createdAt.getOptional("createdAt")

        /**
         * Application user who created the row in the database, auto-populated by the system.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun createdBy(): Optional<String> = createdBy.getOptional("createdBy")

        /**
         * Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId
         * (ephemerisSet id) is used to identify all individual ephemeris states associated with a
         * parent ephemerisSet.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun esId(): Optional<String> = esId.getOptional("esId")

        /**
         * Unique identifier of the on-orbit satellite object.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun idOnOrbit(): Optional<String> = idOnOrbit.getOptional("idOnOrbit")

        /**
         * Originating system or organization which produced the data, if different from the source.
         * The origin may be different than the source if the source was a mediating system which
         * forwarded the data on behalf of the origin system. If null, the source may be assumed to
         * be the origin.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origin(): Optional<String> = origin.getOptional("origin")

        /**
         * Optional identifier provided by ephemeris source to indicate the target object of this
         * ephemeris. This may be an internal identifier and not necessarily map to a valid
         * satellite number.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun origObjectId(): Optional<String> = origObjectId.getOptional("origObjectId")

        /**
         * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
         * referenceFrame. If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun xaccel(): Optional<Double> = xaccel.getOptional("xaccel")

        /**
         * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
         * referenceFrame. If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun yaccel(): Optional<Double> = yaccel.getOptional("yaccel")

        /**
         * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
         * referenceFrame. If referenceFrame is null then J2K should be assumed.
         *
         * @throws UnifieddatalibraryInvalidDataException if the JSON field has an unexpected type
         *   (e.g. if the server responded with an unexpected value).
         */
        fun zaccel(): Optional<Double> = zaccel.getOptional("zaccel")

        /**
         * Returns the raw JSON value of [classificationMarking].
         *
         * Unlike [classificationMarking], this method doesn't throw if the JSON field has an
         * unexpected type.
         */
        @JsonProperty("classificationMarking")
        @ExcludeMissing
        fun _classificationMarking(): JsonField<String> = classificationMarking

        /**
         * Returns the raw JSON value of [dataMode].
         *
         * Unlike [dataMode], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("dataMode") @ExcludeMissing fun _dataMode(): JsonField<DataMode> = dataMode

        /**
         * Returns the raw JSON value of [source].
         *
         * Unlike [source], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("source") @ExcludeMissing fun _source(): JsonField<String> = source

        /**
         * Returns the raw JSON value of [ts].
         *
         * Unlike [ts], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ts") @ExcludeMissing fun _ts(): JsonField<OffsetDateTime> = ts

        /**
         * Returns the raw JSON value of [xpos].
         *
         * Unlike [xpos], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("xpos") @ExcludeMissing fun _xpos(): JsonField<Double> = xpos

        /**
         * Returns the raw JSON value of [xvel].
         *
         * Unlike [xvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("xvel") @ExcludeMissing fun _xvel(): JsonField<Double> = xvel

        /**
         * Returns the raw JSON value of [ypos].
         *
         * Unlike [ypos], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("ypos") @ExcludeMissing fun _ypos(): JsonField<Double> = ypos

        /**
         * Returns the raw JSON value of [yvel].
         *
         * Unlike [yvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("yvel") @ExcludeMissing fun _yvel(): JsonField<Double> = yvel

        /**
         * Returns the raw JSON value of [zpos].
         *
         * Unlike [zpos], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("zpos") @ExcludeMissing fun _zpos(): JsonField<Double> = zpos

        /**
         * Returns the raw JSON value of [zvel].
         *
         * Unlike [zvel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("zvel") @ExcludeMissing fun _zvel(): JsonField<Double> = zvel

        /**
         * Returns the raw JSON value of [id].
         *
         * Unlike [id], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

        /**
         * Returns the raw JSON value of [cov].
         *
         * Unlike [cov], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("cov") @ExcludeMissing fun _cov(): JsonField<List<Double>> = cov

        /**
         * Returns the raw JSON value of [createdAt].
         *
         * Unlike [createdAt], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdAt")
        @ExcludeMissing
        fun _createdAt(): JsonField<OffsetDateTime> = createdAt

        /**
         * Returns the raw JSON value of [createdBy].
         *
         * Unlike [createdBy], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("createdBy") @ExcludeMissing fun _createdBy(): JsonField<String> = createdBy

        /**
         * Returns the raw JSON value of [esId].
         *
         * Unlike [esId], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("esId") @ExcludeMissing fun _esId(): JsonField<String> = esId

        /**
         * Returns the raw JSON value of [idOnOrbit].
         *
         * Unlike [idOnOrbit], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("idOnOrbit") @ExcludeMissing fun _idOnOrbit(): JsonField<String> = idOnOrbit

        /**
         * Returns the raw JSON value of [origin].
         *
         * Unlike [origin], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("origin") @ExcludeMissing fun _origin(): JsonField<String> = origin

        /**
         * Returns the raw JSON value of [origObjectId].
         *
         * Unlike [origObjectId], this method doesn't throw if the JSON field has an unexpected
         * type.
         */
        @JsonProperty("origObjectId")
        @ExcludeMissing
        fun _origObjectId(): JsonField<String> = origObjectId

        /**
         * Returns the raw JSON value of [xaccel].
         *
         * Unlike [xaccel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("xaccel") @ExcludeMissing fun _xaccel(): JsonField<Double> = xaccel

        /**
         * Returns the raw JSON value of [yaccel].
         *
         * Unlike [yaccel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("yaccel") @ExcludeMissing fun _yaccel(): JsonField<Double> = yaccel

        /**
         * Returns the raw JSON value of [zaccel].
         *
         * Unlike [zaccel], this method doesn't throw if the JSON field has an unexpected type.
         */
        @JsonProperty("zaccel") @ExcludeMissing fun _zaccel(): JsonField<Double> = zaccel

        @JsonAnySetter
        private fun putAdditionalProperty(key: String, value: JsonValue) {
            additionalProperties.put(key, value)
        }

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> =
            Collections.unmodifiableMap(additionalProperties)

        fun toBuilder() = Builder().from(this)

        companion object {

            /**
             * Returns a mutable builder for constructing an instance of [EphemerisList].
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .source()
             * .ts()
             * .xpos()
             * .xvel()
             * .ypos()
             * .yvel()
             * .zpos()
             * .zvel()
             * ```
             */
            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [EphemerisList]. */
        class Builder internal constructor() {

            private var classificationMarking: JsonField<String>? = null
            private var dataMode: JsonField<DataMode>? = null
            private var source: JsonField<String>? = null
            private var ts: JsonField<OffsetDateTime>? = null
            private var xpos: JsonField<Double>? = null
            private var xvel: JsonField<Double>? = null
            private var ypos: JsonField<Double>? = null
            private var yvel: JsonField<Double>? = null
            private var zpos: JsonField<Double>? = null
            private var zvel: JsonField<Double>? = null
            private var id: JsonField<String> = JsonMissing.of()
            private var cov: JsonField<MutableList<Double>>? = null
            private var createdAt: JsonField<OffsetDateTime> = JsonMissing.of()
            private var createdBy: JsonField<String> = JsonMissing.of()
            private var esId: JsonField<String> = JsonMissing.of()
            private var idOnOrbit: JsonField<String> = JsonMissing.of()
            private var origin: JsonField<String> = JsonMissing.of()
            private var origObjectId: JsonField<String> = JsonMissing.of()
            private var xaccel: JsonField<Double> = JsonMissing.of()
            private var yaccel: JsonField<Double> = JsonMissing.of()
            private var zaccel: JsonField<Double> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(ephemerisList: EphemerisList) = apply {
                classificationMarking = ephemerisList.classificationMarking
                dataMode = ephemerisList.dataMode
                source = ephemerisList.source
                ts = ephemerisList.ts
                xpos = ephemerisList.xpos
                xvel = ephemerisList.xvel
                ypos = ephemerisList.ypos
                yvel = ephemerisList.yvel
                zpos = ephemerisList.zpos
                zvel = ephemerisList.zvel
                id = ephemerisList.id
                cov = ephemerisList.cov.map { it.toMutableList() }
                createdAt = ephemerisList.createdAt
                createdBy = ephemerisList.createdBy
                esId = ephemerisList.esId
                idOnOrbit = ephemerisList.idOnOrbit
                origin = ephemerisList.origin
                origObjectId = ephemerisList.origObjectId
                xaccel = ephemerisList.xaccel
                yaccel = ephemerisList.yaccel
                zaccel = ephemerisList.zaccel
                additionalProperties = ephemerisList.additionalProperties.toMutableMap()
            }

            /** Classification marking of the data in IC/CAPCO Portion-marked format. */
            fun classificationMarking(classificationMarking: String) =
                classificationMarking(JsonField.of(classificationMarking))

            /**
             * Sets [Builder.classificationMarking] to an arbitrary JSON value.
             *
             * You should usually call [Builder.classificationMarking] with a well-typed [String]
             * value instead. This method is primarily for setting the field to an undocumented or
             * not yet supported value.
             */
            fun classificationMarking(classificationMarking: JsonField<String>) = apply {
                this.classificationMarking = classificationMarking
            }

            /**
             * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
             *
             * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may
             * include both real and simulated data.
             *
             * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events,
             * and analysis.
             *
             * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
             *
             * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
             * requirements, and for validating technical, functional, and performance
             * characteristics.
             */
            fun dataMode(dataMode: DataMode) = dataMode(JsonField.of(dataMode))

            /**
             * Sets [Builder.dataMode] to an arbitrary JSON value.
             *
             * You should usually call [Builder.dataMode] with a well-typed [DataMode] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun dataMode(dataMode: JsonField<DataMode>) = apply { this.dataMode = dataMode }

            /** Source of the data. */
            fun source(source: String) = source(JsonField.of(source))

            /**
             * Sets [Builder.source] to an arbitrary JSON value.
             *
             * You should usually call [Builder.source] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun source(source: JsonField<String>) = apply { this.source = source }

            /** Time associated with the Ephemeris Point, in ISO8601 UTC format. */
            fun ts(ts: OffsetDateTime) = ts(JsonField.of(ts))

            /**
             * Sets [Builder.ts] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ts] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun ts(ts: JsonField<OffsetDateTime>) = apply { this.ts = ts }

            /**
             * Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.
             * If referenceFrame is null then J2K should be assumed.
             */
            fun xpos(xpos: Double) = xpos(JsonField.of(xpos))

            /**
             * Sets [Builder.xpos] to an arbitrary JSON value.
             *
             * You should usually call [Builder.xpos] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun xpos(xpos: JsonField<Double>) = apply { this.xpos = xpos }

            /**
             * Cartesian X velocity of target, in km/sec, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun xvel(xvel: Double) = xvel(JsonField.of(xvel))

            /**
             * Sets [Builder.xvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.xvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun xvel(xvel: JsonField<Double>) = apply { this.xvel = xvel }

            /**
             * Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.
             * If referenceFrame is null then J2K should be assumed.
             */
            fun ypos(ypos: Double) = ypos(JsonField.of(ypos))

            /**
             * Sets [Builder.ypos] to an arbitrary JSON value.
             *
             * You should usually call [Builder.ypos] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun ypos(ypos: JsonField<Double>) = apply { this.ypos = ypos }

            /**
             * Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun yvel(yvel: Double) = yvel(JsonField.of(yvel))

            /**
             * Sets [Builder.yvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.yvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun yvel(yvel: JsonField<Double>) = apply { this.yvel = yvel }

            /**
             * Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame.
             * If referenceFrame is null then J2K should be assumed.
             */
            fun zpos(zpos: Double) = zpos(JsonField.of(zpos))

            /**
             * Sets [Builder.zpos] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zpos] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun zpos(zpos: JsonField<Double>) = apply { this.zpos = zpos }

            /**
             * Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun zvel(zvel: Double) = zvel(JsonField.of(zvel))

            /**
             * Sets [Builder.zvel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zvel] with a well-typed [Double] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun zvel(zvel: JsonField<Double>) = apply { this.zvel = zvel }

            /** Unique identifier of the record, auto-generated by the system. */
            fun id(id: String) = id(JsonField.of(id))

            /**
             * Sets [Builder.id] to an arbitrary JSON value.
             *
             * You should usually call [Builder.id] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun id(id: JsonField<String>) = apply { this.id = id }

            /**
             * Covariance matrix, in kilometer and second based units, in the specified Ephemeris
             * Set covReferenceFrame. If the covReferenceFrame from the EphemerisSet table is null
             * it is assumed to be J2000. The array values represent the lower triangular half of
             * the position-velocity covariance matrix. The size of the covariance matrix is
             * dynamic, depending on whether the covariance for position only or position &
             * velocity. The covariance elements are position dependent within the array with values
             * ordered as follows:
             *
             * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
             *
             * x&nbsp;&nbsp;&nbsp;&nbsp;1
             *
             * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
             *
             * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
             *
             * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
             *
             * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
             *
             * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;
             * 21
             *
             * The array containing the covariance matrix elements will be of length 6 for position
             * only covariance, or length 21 for position-velocity covariance. The cov array should
             * contain only the lower left triangle values from top left down to bottom right, in
             * order.
             */
            fun cov(cov: List<Double>) = cov(JsonField.of(cov))

            /**
             * Sets [Builder.cov] to an arbitrary JSON value.
             *
             * You should usually call [Builder.cov] with a well-typed `List<Double>` value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun cov(cov: JsonField<List<Double>>) = apply {
                this.cov = cov.map { it.toMutableList() }
            }

            /**
             * Adds a single [Double] to [Builder.cov].
             *
             * @throws IllegalStateException if the field was previously set to a non-list.
             */
            fun addCov(cov: Double) = apply {
                this.cov =
                    (this.cov ?: JsonField.of(mutableListOf())).also {
                        checkKnown("cov", it).add(cov)
                    }
            }

            /** Time the row was created in the database, auto-populated by the system. */
            fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

            /**
             * Sets [Builder.createdAt] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdAt] with a well-typed [OffsetDateTime] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                this.createdAt = createdAt
            }

            /**
             * Application user who created the row in the database, auto-populated by the system.
             */
            fun createdBy(createdBy: String) = createdBy(JsonField.of(createdBy))

            /**
             * Sets [Builder.createdBy] to an arbitrary JSON value.
             *
             * You should usually call [Builder.createdBy] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun createdBy(createdBy: JsonField<String>) = apply { this.createdBy = createdBy }

            /**
             * Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId
             * (ephemerisSet id) is used to identify all individual ephemeris states associated with
             * a parent ephemerisSet.
             */
            fun esId(esId: String) = esId(JsonField.of(esId))

            /**
             * Sets [Builder.esId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.esId] with a well-typed [String] value instead. This
             * method is primarily for setting the field to an undocumented or not yet supported
             * value.
             */
            fun esId(esId: JsonField<String>) = apply { this.esId = esId }

            /** Unique identifier of the on-orbit satellite object. */
            fun idOnOrbit(idOnOrbit: String) = idOnOrbit(JsonField.of(idOnOrbit))

            /**
             * Sets [Builder.idOnOrbit] to an arbitrary JSON value.
             *
             * You should usually call [Builder.idOnOrbit] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun idOnOrbit(idOnOrbit: JsonField<String>) = apply { this.idOnOrbit = idOnOrbit }

            /**
             * Originating system or organization which produced the data, if different from the
             * source. The origin may be different than the source if the source was a mediating
             * system which forwarded the data on behalf of the origin system. If null, the source
             * may be assumed to be the origin.
             */
            fun origin(origin: String) = origin(JsonField.of(origin))

            /**
             * Sets [Builder.origin] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origin] with a well-typed [String] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origin(origin: JsonField<String>) = apply { this.origin = origin }

            /**
             * Optional identifier provided by ephemeris source to indicate the target object of
             * this ephemeris. This may be an internal identifier and not necessarily map to a valid
             * satellite number.
             */
            fun origObjectId(origObjectId: String) = origObjectId(JsonField.of(origObjectId))

            /**
             * Sets [Builder.origObjectId] to an arbitrary JSON value.
             *
             * You should usually call [Builder.origObjectId] with a well-typed [String] value
             * instead. This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun origObjectId(origObjectId: JsonField<String>) = apply {
                this.origObjectId = origObjectId
            }

            /**
             * Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun xaccel(xaccel: Double) = xaccel(JsonField.of(xaccel))

            /**
             * Sets [Builder.xaccel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.xaccel] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun xaccel(xaccel: JsonField<Double>) = apply { this.xaccel = xaccel }

            /**
             * Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun yaccel(yaccel: Double) = yaccel(JsonField.of(yaccel))

            /**
             * Sets [Builder.yaccel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.yaccel] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun yaccel(yaccel: JsonField<Double>) = apply { this.yaccel = yaccel }

            /**
             * Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet
             * referenceFrame. If referenceFrame is null then J2K should be assumed.
             */
            fun zaccel(zaccel: Double) = zaccel(JsonField.of(zaccel))

            /**
             * Sets [Builder.zaccel] to an arbitrary JSON value.
             *
             * You should usually call [Builder.zaccel] with a well-typed [Double] value instead.
             * This method is primarily for setting the field to an undocumented or not yet
             * supported value.
             */
            fun zaccel(zaccel: JsonField<Double>) = apply { this.zaccel = zaccel }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            /**
             * Returns an immutable instance of [EphemerisList].
             *
             * Further updates to this [Builder] will not mutate the returned instance.
             *
             * The following fields are required:
             * ```java
             * .classificationMarking()
             * .dataMode()
             * .source()
             * .ts()
             * .xpos()
             * .xvel()
             * .ypos()
             * .yvel()
             * .zpos()
             * .zvel()
             * ```
             *
             * @throws IllegalStateException if any required field is unset.
             */
            fun build(): EphemerisList =
                EphemerisList(
                    checkRequired("classificationMarking", classificationMarking),
                    checkRequired("dataMode", dataMode),
                    checkRequired("source", source),
                    checkRequired("ts", ts),
                    checkRequired("xpos", xpos),
                    checkRequired("xvel", xvel),
                    checkRequired("ypos", ypos),
                    checkRequired("yvel", yvel),
                    checkRequired("zpos", zpos),
                    checkRequired("zvel", zvel),
                    id,
                    (cov ?: JsonMissing.of()).map { it.toImmutable() },
                    createdAt,
                    createdBy,
                    esId,
                    idOnOrbit,
                    origin,
                    origObjectId,
                    xaccel,
                    yaccel,
                    zaccel,
                    additionalProperties.toMutableMap(),
                )
        }

        private var validated: Boolean = false

        fun validate(): EphemerisList = apply {
            if (validated) {
                return@apply
            }

            classificationMarking()
            dataMode().validate()
            source()
            ts()
            xpos()
            xvel()
            ypos()
            yvel()
            zpos()
            zvel()
            id()
            cov()
            createdAt()
            createdBy()
            esId()
            idOnOrbit()
            origin()
            origObjectId()
            xaccel()
            yaccel()
            zaccel()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic
        internal fun validity(): Int =
            (if (classificationMarking.asKnown().isPresent) 1 else 0) +
                (dataMode.asKnown().getOrNull()?.validity() ?: 0) +
                (if (source.asKnown().isPresent) 1 else 0) +
                (if (ts.asKnown().isPresent) 1 else 0) +
                (if (xpos.asKnown().isPresent) 1 else 0) +
                (if (xvel.asKnown().isPresent) 1 else 0) +
                (if (ypos.asKnown().isPresent) 1 else 0) +
                (if (yvel.asKnown().isPresent) 1 else 0) +
                (if (zpos.asKnown().isPresent) 1 else 0) +
                (if (zvel.asKnown().isPresent) 1 else 0) +
                (if (id.asKnown().isPresent) 1 else 0) +
                (cov.asKnown().getOrNull()?.size ?: 0) +
                (if (createdAt.asKnown().isPresent) 1 else 0) +
                (if (createdBy.asKnown().isPresent) 1 else 0) +
                (if (esId.asKnown().isPresent) 1 else 0) +
                (if (idOnOrbit.asKnown().isPresent) 1 else 0) +
                (if (origin.asKnown().isPresent) 1 else 0) +
                (if (origObjectId.asKnown().isPresent) 1 else 0) +
                (if (xaccel.asKnown().isPresent) 1 else 0) +
                (if (yaccel.asKnown().isPresent) 1 else 0) +
                (if (zaccel.asKnown().isPresent) 1 else 0)

        /**
         * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
         *
         * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include
         * both real and simulated data.
         *
         * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and
         * analysis.
         *
         * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
         *
         * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
         * requirements, and for validating technical, functional, and performance characteristics.
         */
        class DataMode @JsonCreator private constructor(private val value: JsonField<String>) :
            Enum {

            /**
             * Returns this class instance's raw value.
             *
             * This is usually only useful if this instance was deserialized from data that doesn't
             * match any known member, and you want to know that value. For example, if the SDK is
             * on an older version than the API, then the API may respond with new members that the
             * SDK is unaware of.
             */
            @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

            companion object {

                @JvmField val REAL = of("REAL")

                @JvmField val TEST = of("TEST")

                @JvmField val SIMULATED = of("SIMULATED")

                @JvmField val EXERCISE = of("EXERCISE")

                @JvmStatic fun of(value: String) = DataMode(JsonField.of(value))
            }

            /** An enum containing [DataMode]'s known values. */
            enum class Known {
                REAL,
                TEST,
                SIMULATED,
                EXERCISE,
            }

            /**
             * An enum containing [DataMode]'s known values, as well as an [_UNKNOWN] member.
             *
             * An instance of [DataMode] can contain an unknown value in a couple of cases:
             * - It was deserialized from data that doesn't match any known member. For example, if
             *   the SDK is on an older version than the API, then the API may respond with new
             *   members that the SDK is unaware of.
             * - It was constructed with an arbitrary value using the [of] method.
             */
            enum class Value {
                REAL,
                TEST,
                SIMULATED,
                EXERCISE,
                /**
                 * An enum member indicating that [DataMode] was instantiated with an unknown value.
                 */
                _UNKNOWN,
            }

            /**
             * Returns an enum member corresponding to this class instance's value, or
             * [Value._UNKNOWN] if the class was instantiated with an unknown value.
             *
             * Use the [known] method instead if you're certain the value is always known or if you
             * want to throw for the unknown case.
             */
            fun value(): Value =
                when (this) {
                    REAL -> Value.REAL
                    TEST -> Value.TEST
                    SIMULATED -> Value.SIMULATED
                    EXERCISE -> Value.EXERCISE
                    else -> Value._UNKNOWN
                }

            /**
             * Returns an enum member corresponding to this class instance's value.
             *
             * Use the [value] method instead if you're uncertain the value is always known and
             * don't want to throw for the unknown case.
             *
             * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a
             *   not a known member.
             */
            fun known(): Known =
                when (this) {
                    REAL -> Known.REAL
                    TEST -> Known.TEST
                    SIMULATED -> Known.SIMULATED
                    EXERCISE -> Known.EXERCISE
                    else -> throw UnifieddatalibraryInvalidDataException("Unknown DataMode: $value")
                }

            /**
             * Returns this class instance's primitive wire representation.
             *
             * This differs from the [toString] method because that method is primarily for
             * debugging and generally doesn't throw.
             *
             * @throws UnifieddatalibraryInvalidDataException if this class instance's value does
             *   not have the expected primitive type.
             */
            fun asString(): String =
                _value().asString().orElseThrow {
                    UnifieddatalibraryInvalidDataException("Value is not a String")
                }

            private var validated: Boolean = false

            fun validate(): DataMode = apply {
                if (validated) {
                    return@apply
                }

                known()
                validated = true
            }

            fun isValid(): Boolean =
                try {
                    validate()
                    true
                } catch (e: UnifieddatalibraryInvalidDataException) {
                    false
                }

            /**
             * Returns a score indicating how many valid values are contained in this object
             * recursively.
             *
             * Used for best match union deserialization.
             */
            @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return other is DataMode && value == other.value
            }

            override fun hashCode() = value.hashCode()

            override fun toString() = value.toString()
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is EphemerisList &&
                classificationMarking == other.classificationMarking &&
                dataMode == other.dataMode &&
                source == other.source &&
                ts == other.ts &&
                xpos == other.xpos &&
                xvel == other.xvel &&
                ypos == other.ypos &&
                yvel == other.yvel &&
                zpos == other.zpos &&
                zvel == other.zvel &&
                id == other.id &&
                cov == other.cov &&
                createdAt == other.createdAt &&
                createdBy == other.createdBy &&
                esId == other.esId &&
                idOnOrbit == other.idOnOrbit &&
                origin == other.origin &&
                origObjectId == other.origObjectId &&
                xaccel == other.xaccel &&
                yaccel == other.yaccel &&
                zaccel == other.zaccel &&
                additionalProperties == other.additionalProperties
        }

        private val hashCode: Int by lazy {
            Objects.hash(
                classificationMarking,
                dataMode,
                source,
                ts,
                xpos,
                xvel,
                ypos,
                yvel,
                zpos,
                zvel,
                id,
                cov,
                createdAt,
                createdBy,
                esId,
                idOnOrbit,
                origin,
                origObjectId,
                xaccel,
                yaccel,
                zaccel,
                additionalProperties,
            )
        }

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "EphemerisList{classificationMarking=$classificationMarking, dataMode=$dataMode, source=$source, ts=$ts, xpos=$xpos, xvel=$xvel, ypos=$ypos, yvel=$yvel, zpos=$zpos, zvel=$zvel, id=$id, cov=$cov, createdAt=$createdAt, createdBy=$createdBy, esId=$esId, idOnOrbit=$idOnOrbit, origin=$origin, origObjectId=$origObjectId, xaccel=$xaccel, yaccel=$yaccel, zaccel=$zaccel, additionalProperties=$additionalProperties}"
    }

    /**
     * The reference frame of the cartesian orbital states. If the referenceFrame is null it is
     * assumed to be J2000.
     */
    class ReferenceFrame @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val J2000 = of("J2000")

            @JvmField val EFG_TDR = of("EFG/TDR")

            @JvmField val ECR_ECEF = of("ECR/ECEF")

            @JvmField val TEME = of("TEME")

            @JvmField val ITRF = of("ITRF")

            @JvmField val GCRF = of("GCRF")

            @JvmStatic fun of(value: String) = ReferenceFrame(JsonField.of(value))
        }

        /** An enum containing [ReferenceFrame]'s known values. */
        enum class Known {
            J2000,
            EFG_TDR,
            ECR_ECEF,
            TEME,
            ITRF,
            GCRF,
        }

        /**
         * An enum containing [ReferenceFrame]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [ReferenceFrame] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            J2000,
            EFG_TDR,
            ECR_ECEF,
            TEME,
            ITRF,
            GCRF,
            /**
             * An enum member indicating that [ReferenceFrame] was instantiated with an unknown
             * value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                J2000 -> Value.J2000
                EFG_TDR -> Value.EFG_TDR
                ECR_ECEF -> Value.ECR_ECEF
                TEME -> Value.TEME
                ITRF -> Value.ITRF
                GCRF -> Value.GCRF
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value is a not a
         *   known member.
         */
        fun known(): Known =
            when (this) {
                J2000 -> Known.J2000
                EFG_TDR -> Known.EFG_TDR
                ECR_ECEF -> Known.ECR_ECEF
                TEME -> Known.TEME
                ITRF -> Known.ITRF
                GCRF -> Known.GCRF
                else ->
                    throw UnifieddatalibraryInvalidDataException("Unknown ReferenceFrame: $value")
            }

        /**
         * Returns this class instance's primitive wire representation.
         *
         * This differs from the [toString] method because that method is primarily for debugging
         * and generally doesn't throw.
         *
         * @throws UnifieddatalibraryInvalidDataException if this class instance's value does not
         *   have the expected primitive type.
         */
        fun asString(): String =
            _value().asString().orElseThrow {
                UnifieddatalibraryInvalidDataException("Value is not a String")
            }

        private var validated: Boolean = false

        fun validate(): ReferenceFrame = apply {
            if (validated) {
                return@apply
            }

            known()
            validated = true
        }

        fun isValid(): Boolean =
            try {
                validate()
                true
            } catch (e: UnifieddatalibraryInvalidDataException) {
                false
            }

        /**
         * Returns a score indicating how many valid values are contained in this object
         * recursively.
         *
         * Used for best match union deserialization.
         */
        @JvmSynthetic internal fun validity(): Int = if (value() == Value._UNKNOWN) 0 else 1

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return other is ReferenceFrame && value == other.value
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return other is EphemerisUnvalidatedPublishParams &&
            body == other.body &&
            additionalHeaders == other.additionalHeaders &&
            additionalQueryParams == other.additionalQueryParams
    }

    override fun hashCode(): Int = Objects.hash(body, additionalHeaders, additionalQueryParams)

    override fun toString() =
        "EphemerisUnvalidatedPublishParams{body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
